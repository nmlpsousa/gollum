# -*- encoding:utf-8; warn-indent:false -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source[@ts...@te]
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 77, 
	0, 77, 0, 92, 0, 
	26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 99, 
	45, 45, 0, 92, 0, 
	77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 58, 
	58, 0, 127, 58, 58, 
	60, 60, 62, 62, 10, 10, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 115, 
	115, 99, 99, 117, 117, 
	101, 101, 108, 116, 101, 101, 
	115, 115, 115, 115, 105, 
	105, 108, 108, 105, 105, 
	108, 108, 58, 58, 0, 127, 
	10, 10, 0, 127, 58, 
	58, 98, 98, 101, 101, 
	103, 103, 105, 105, 110, 110, 
	0, 122, 61, 61, 0, 
	127, 0, 127, 61, 126, 
	0, 127, 0, 127, 93, 93, 
	0, 127, 0, 127, 10, 
	10, 10, 34, 10, 10, 
	10, 39, 0, 127, 10, 96, 
	0, 120, 0, 45, 0, 
	77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 
	99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	58, 58, 58, 58, 0, 127, 
	43, 57, 48, 57, 48, 
	57, 48, 57, 48, 57, 
	0, 127, 58, 58, 9, 92, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 9, 92, 
	60, 60, 10, 10, 9, 46, 
	0, 46, 0, 95, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 98, 98, 9, 32, 
	10, 10, 95, 95, 0, 
	92, 9, 32, 36, 123, 
	0, 127, 48, 57, 0, 120, 
	0, 0, 0, 0, 48, 
	55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 92, 
	0, 45, 0, 92, 0, 
	92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 10, 
	0, 92, 0, 123, 0, 
	26, 0, 26, 0, 26, 
	0, 0, 0, 102, 0, 102, 
	0, 102, 0, 0, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 26, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 0, 0, 
	0, 48, 102, 0, 0, 
	0, 92, 36, 123, 0, 127, 
	48, 57, 0, 120, 0, 
	0, 0, 0, 48, 55, 
	48, 55, 0, 0, 0, 0, 
	0, 92, 0, 0, 0, 
	0, 0, 0, 0, 92, 
	45, 45, 0, 0, 0, 0, 
	0, 0, 0, 92, 0, 
	45, 0, 92, 0, 92, 
	0, 0, 0, 0, 0, 92, 
	0, 45, 10, 10, 0, 
	92, 0, 123, 0, 26, 
	0, 26, 0, 26, 0, 0, 
	0, 102, 0, 102, 0, 
	102, 0, 0, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 125, 0, 0, 
	0, 125, 0, 26, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 0, 0, 0, 
	48, 102, 0, 0, 0, 92, 
	9, 32, 0, 26, 0, 
	92, 0, 26, 65, 122, 
	65, 122, 36, 64, 0, 127, 
	48, 57, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	9, 32, 0, 0, 61, 126, 
	10, 10, 10, 10, 0, 
	127, 0, 127, 48, 57, 
	38, 38, 42, 42, 64, 64, 
	58, 58, 60, 61, 62, 
	62, 61, 126, 61, 61, 
	61, 62, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	93, 93, 10, 10, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 124, 
	124, 0, 127, 0, 127, 
	9, 32, 10, 10, 10, 10, 
	10, 10, 0, 0, 0, 
	127, 0, 127, 61, 61, 
	0, 0, 0, 0, 9, 32, 
	0, 0, 61, 126, 10, 
	10, 10, 10, 38, 38, 
	42, 42, 64, 64, 60, 61, 
	62, 62, 61, 126, 61, 
	61, 61, 62, 0, 127, 
	93, 93, 10, 10, 124, 124, 
	0, 126, 0, 127, 0, 
	61, 9, 61, 9, 61, 
	0, 0, 9, 61, 9, 62, 
	46, 46, 46, 46, 58, 
	58, 9, 32, 0, 0, 
	0, 127, 0, 0, 9, 124, 
	0, 0, 10, 10, 10, 
	10, 0, 0, 9, 61, 
	58, 58, 60, 60, 62, 62, 
	10, 10, 0, 127, 102, 
	102, 101, 101, 110, 110, 
	104, 104, 0, 127, 0, 127, 
	0, 127, 0, 0, 0, 
	127, 10, 10, 0, 123, 
	9, 32, 10, 10, 10, 10, 
	10, 10, 0, 0, 111, 
	111, 0, 0, 0, 127, 
	0, 127, 9, 32, 0, 0, 
	10, 10, 10, 10, 10, 
	10, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 58, 61, 0, 0, 
	61, 126, 61, 61, 0, 
	0, 0, 0, 0, 0, 
	58, 58, 9, 32, 61, 61, 
	9, 32, 61, 126, 10, 
	10, 10, 10, 65, 122, 
	0, 122, 38, 61, 0, 0, 
	42, 61, 61, 61, 48, 
	61, 48, 62, 46, 46, 
	46, 46, 0, 26, 0, 127, 
	0, 127, 61, 61, 0, 
	0, 61, 126, 61, 62, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 61, 
	126, 0, 127, 48, 57, 
	38, 38, 42, 42, 64, 64, 
	60, 61, 62, 62, 61, 
	61, 61, 62, 124, 124, 
	60, 61, 0, 0, 62, 62, 
	61, 126, 61, 62, 0, 
	122, 0, 127, 0, 127, 
	0, 0, 0, 0, 48, 55, 
	48, 55, 0, 0, 0, 
	0, 0, 92, 0, 0, 
	0, 0, 0, 0, 0, 92, 
	45, 45, 0, 0, 0, 
	0, 0, 0, 0, 92, 
	0, 45, 0, 92, 0, 92, 
	0, 0, 0, 0, 0, 
	92, 0, 45, 10, 10, 
	0, 92, 0, 123, 0, 26, 
	0, 26, 0, 26, 0, 
	0, 0, 102, 0, 102, 
	0, 102, 0, 0, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 26, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 0, 
	0, 125, 0, 0, 0, 0, 
	48, 102, 0, 0, 0, 
	127, 0, 127, 0, 127, 
	0, 0, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 61, 126, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 0, 61, 124, 
	0, 127, 0, 127, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 0, 0, 
	9, 32, 0, 0, 61, 126, 
	10, 10, 10, 10, 0, 
	127, 0, 127, 48, 57, 
	61, 61, 38, 61, 0, 0, 
	0, 0, 42, 61, 61, 
	62, 46, 57, 46, 46, 
	48, 101, 48, 95, 46, 120, 
	48, 114, 43, 57, 48, 
	105, 0, 0, 105, 105, 
	0, 0, 48, 114, 48, 114, 
	48, 114, 48, 114, 105, 
	114, 0, 0, 105, 105, 
	0, 0, 48, 114, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 48, 114, 48, 114, 
	48, 114, 46, 114, 48, 114, 
	46, 114, 48, 114, 58, 
	58, 60, 61, 62, 62, 
	61, 126, 61, 61, 61, 62, 
	0, 127, 0, 127, 0, 
	0, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 0, 10, 
	10, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 9, 92, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 0, 61, 124, 
	0, 0, 9, 46, 9, 46, 
	0, 46, 10, 61, 10, 
	10, 10, 101, 10, 110, 
	10, 100, 10, 10, 0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 46, 78, 78, 93, 27, 27, 46, 
	100, 27, 33, 1, 93, 78, 103, 128, 
	128, 128, 128, 128, 128, 1, 128, 1, 
	1, 1, 1, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 1, 1, 1, 
	1, 9, 1, 1, 1, 1, 1, 1, 
	1, 1, 128, 1, 128, 1, 1, 1, 
	1, 1, 1, 123, 1, 128, 128, 66, 
	128, 128, 1, 128, 128, 1, 25, 1, 
	30, 128, 87, 121, 46, 78, 78, 93, 
	27, 27, 46, 100, 27, 33, 1, 93, 
	78, 103, 128, 128, 128, 128, 128, 128, 
	1, 1, 128, 15, 10, 10, 10, 10, 
	128, 1, 84, 84, 84, 84, 84, 84, 
	1, 1, 38, 47, 96, 24, 0, 1, 
	1, 1, 24, 1, 1, 93, 24, 88, 
	128, 10, 121, 0, 0, 8, 8, 0, 
	0, 93, 0, 0, 0, 93, 1, 0, 
	0, 0, 93, 46, 93, 93, 0, 0, 
	93, 46, 1, 93, 124, 27, 27, 27, 
	0, 103, 103, 103, 0, 126, 126, 126, 
	126, 126, 0, 126, 126, 0, 126, 27, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 0, 126, 0, 0, 55, 0, 
	93, 88, 128, 10, 121, 0, 0, 8, 
	8, 0, 0, 93, 0, 0, 0, 93, 
	1, 0, 0, 0, 93, 46, 93, 93, 
	0, 0, 93, 46, 1, 93, 124, 27, 
	27, 27, 0, 103, 103, 103, 0, 126, 
	126, 126, 126, 126, 0, 126, 126, 0, 
	126, 27, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 0, 126, 0, 0, 
	55, 0, 93, 24, 27, 93, 27, 58, 
	58, 29, 128, 10, 128, 128, 128, 128, 
	24, 0, 66, 1, 1, 128, 128, 10, 
	1, 1, 1, 1, 2, 1, 66, 1, 
	2, 128, 128, 128, 128, 128, 128, 128, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 1, 128, 128, 
	24, 1, 1, 1, 0, 128, 128, 1, 
	0, 0, 24, 0, 66, 1, 1, 1, 
	1, 1, 2, 1, 66, 1, 2, 128, 
	1, 1, 1, 127, 128, 62, 53, 53, 
	0, 53, 54, 1, 1, 1, 24, 0, 
	128, 0, 116, 0, 1, 1, 0, 53, 
	1, 1, 1, 1, 128, 1, 1, 1, 
	1, 128, 128, 128, 0, 128, 1, 124, 
	24, 1, 1, 1, 0, 1, 0, 128, 
	128, 24, 0, 1, 1, 1, 0, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 4, 0, 66, 1, 0, 0, 0, 
	1, 24, 1, 24, 66, 1, 1, 58, 
	123, 24, 0, 20, 1, 14, 15, 1, 
	1, 27, 128, 128, 1, 0, 66, 2, 
	0, 0, 0, 0, 0, 66, 128, 10, 
	1, 1, 1, 2, 1, 1, 2, 1, 
	2, 0, 1, 66, 2, 123, 128, 128, 
	0, 0, 8, 8, 0, 0, 93, 0, 
	0, 0, 93, 1, 0, 0, 0, 93, 
	46, 93, 93, 0, 0, 93, 46, 1, 
	93, 124, 27, 27, 27, 0, 103, 103, 
	103, 0, 126, 126, 126, 126, 126, 0, 
	126, 126, 0, 126, 27, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 0, 
	126, 0, 0, 55, 0, 128, 128, 128, 
	0, 1, 0, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 66, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 0, 64, 128, 128, 24, 0, 1, 
	1, 1, 0, 128, 128, 1, 0, 0, 
	24, 0, 66, 1, 1, 128, 128, 10, 
	1, 24, 0, 0, 20, 2, 12, 1, 
	54, 48, 75, 67, 15, 58, 0, 1, 
	0, 67, 67, 67, 67, 10, 0, 1, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 69, 67, 69, 67, 1, 2, 1, 
	66, 1, 2, 128, 128, 0, 128, 128, 
	128, 128, 128, 128, 0, 1, 0, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 84, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 0, 64, 
	0, 38, 38, 47, 52, 1, 92, 101, 
	91, 1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 688, 767, 861, 889, 917, 964, 1065, 
	1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 
	1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 
	2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 
	2895, 3024, 3153, 3282, 3411, 3540, 3542, 3671, 
	3673, 3675, 3677, 3679, 3808, 3937, 4066, 4195, 
	4324, 4453, 4582, 4711, 4840, 4969, 5098, 5227, 
	5356, 5485, 5614, 5743, 5872, 6001, 6003, 6005, 
	6007, 6009, 6019, 6021, 6023, 6025, 6027, 6029, 
	6031, 6033, 6035, 6164, 6166, 6295, 6297, 6299, 
	6301, 6303, 6305, 6307, 6431, 6433, 6562, 6691, 
	6758, 6887, 7016, 7018, 7147, 7276, 7278, 7304, 
	7306, 7337, 7466, 7554, 7676, 7723, 7802, 7881, 
	7975, 8003, 8031, 8078, 8179, 8207, 8241, 8243, 
	8337, 8416, 8520, 8649, 8778, 8907, 9036, 9165, 
	9294, 9296, 9298, 9427, 9443, 9454, 9465, 9476, 
	9487, 9616, 9618, 9703, 9788, 9873, 9958, 10043, 
	10128, 10130, 10132, 10171, 10219, 10316, 10341, 10342, 
	10344, 10346, 10348, 10373, 10375, 10377, 10471, 10496, 
	10585, 10714, 10725, 10847, 10848, 10849, 10858, 10867, 
	10868, 10869, 10963, 10964, 10965, 10966, 11060, 11062, 
	11063, 11064, 11065, 11159, 11206, 11300, 11394, 11395, 
	11396, 11490, 11537, 11539, 11633, 11758, 11786, 11814, 
	11842, 11843, 11947, 12051, 12155, 12156, 12283, 12410, 
	12537, 12664, 12791, 12792, 12919, 13046, 13047, 13174, 
	13202, 13329, 13456, 13583, 13710, 13837, 13964, 14091, 
	14218, 14345, 14472, 14473, 14600, 14601, 14602, 14658, 
	14659, 14753, 14842, 14971, 14982, 15104, 15105, 15106, 
	15115, 15124, 15125, 15126, 15220, 15221, 15222, 15223, 
	15317, 15319, 15320, 15321, 15322, 15416, 15463, 15557, 
	15651, 15652, 15653, 15747, 15794, 15796, 15890, 16015, 
	16043, 16071, 16099, 16100, 16204, 16308, 16412, 16413, 
	16540, 16667, 16794, 16921, 17048, 17049, 17176, 17303, 
	17304, 17431, 17459, 17586, 17713, 17840, 17967, 18094, 
	18221, 18348, 18475, 18602, 18729, 18730, 18857, 18858, 
	18859, 18915, 18916, 19010, 19035, 19063, 19157, 19185, 
	19244, 19303, 19333, 19462, 19473, 19602, 19731, 19860, 
	19989, 20014, 20015, 20082, 20084, 20086, 20215, 20344, 
	20355, 20357, 20359, 20361, 20363, 20366, 20368, 20435, 
	20437, 20440, 20569, 20698, 20827, 20956, 21085, 21214, 
	21343, 21345, 21347, 21476, 21605, 21734, 21863, 21992, 
	22121, 22250, 22379, 22508, 22637, 22766, 22895, 23024, 
	23153, 23282, 23411, 23540, 23669, 23798, 23927, 24056, 
	24185, 24314, 24443, 24572, 24701, 24830, 24959, 25088, 
	25217, 25346, 25475, 25604, 25733, 25862, 25991, 26120, 
	26249, 26378, 26507, 26636, 26765, 26894, 27023, 27152, 
	27281, 27410, 27539, 27668, 27797, 27926, 28055, 28184, 
	28313, 28442, 28571, 28700, 28829, 28958, 29087, 29216, 
	29345, 29474, 29603, 29732, 29861, 29990, 30119, 30248, 
	30377, 30506, 30635, 30764, 30893, 31022, 31151, 31280, 
	31409, 31538, 31667, 31796, 31925, 32054, 32056, 32185, 
	32314, 32339, 32341, 32343, 32345, 32346, 32475, 32604, 
	32606, 32607, 32608, 32633, 32634, 32701, 32703, 32705, 
	32707, 32709, 32711, 32714, 32716, 32783, 32785, 32788, 
	32917, 32919, 32921, 32923, 33051, 33180, 33243, 33297, 
	33351, 33352, 33406, 33461, 33463, 33465, 33467, 33492, 
	33493, 33622, 33623, 33740, 33741, 33743, 33745, 33746, 
	33800, 33802, 33804, 33806, 33808, 33937, 33939, 33941, 
	33943, 33945, 34074, 34203, 34332, 34333, 34462, 34464, 
	34589, 34614, 34616, 34618, 34620, 34621, 34623, 34624, 
	34753, 34882, 34907, 34908, 34910, 34912, 34914, 34915, 
	35044, 35173, 35302, 35431, 35560, 35689, 35818, 35947, 
	36076, 36205, 36334, 36463, 36592, 36721, 36850, 36979, 
	37108, 37237, 37242, 37243, 37310, 37312, 37313, 37314, 
	37315, 37317, 37342, 37344, 37369, 37436, 37438, 37440, 
	37499, 37623, 37648, 37649, 37670, 37672, 37687, 37703, 
	37705, 37707, 37735, 37864, 37993, 37995, 37996, 38063, 
	38066, 38067, 38068, 38069, 38070, 38071, 38138, 38267, 
	38278, 38280, 38282, 38284, 38287, 38289, 38291, 38294, 
	38296, 38299, 38300, 38302, 38369, 38372, 38496, 38625, 
	38754, 38755, 38756, 38765, 38774, 38775, 38776, 38870, 
	38871, 38872, 38873, 38967, 38969, 38970, 38971, 38972, 
	39066, 39113, 39207, 39301, 39302, 39303, 39397, 39444, 
	39446, 39540, 39665, 39693, 39721, 39749, 39750, 39854, 
	39958, 40062, 40063, 40190, 40317, 40444, 40571, 40698, 
	40699, 40826, 40953, 40954, 41081, 41109, 41236, 41363, 
	41490, 41617, 41744, 41871, 41998, 42125, 42252, 42379, 
	42380, 42507, 42508, 42509, 42565, 42566, 42695, 42824, 
	42953, 42954, 42956, 42957, 43086, 43215, 43344, 43473, 
	43602, 43731, 43860, 43989, 44118, 44247, 44376, 44505, 
	44634, 44763, 44892, 45021, 45150, 45279, 45408, 45537, 
	45666, 45795, 45924, 46053, 46182, 46311, 46440, 46569, 
	46698, 46827, 46956, 47085, 47214, 47343, 47472, 47601, 
	47730, 47859, 47988, 48117, 48246, 48375, 48504, 48633, 
	48762, 48891, 49020, 49149, 49278, 49407, 49536, 49665, 
	49794, 49923, 50052, 50181, 50310, 50439, 50568, 50697, 
	50764, 50893, 51022, 51151, 51280, 51409, 51538, 51667, 
	51796, 51925, 52054, 52183, 52312, 52441, 52570, 52699, 
	52828, 52957, 53086, 53215, 53344, 53473, 53602, 53731, 
	53860, 53989, 53990, 54055, 54184, 54313, 54338, 54339, 
	54341, 54343, 54345, 54346, 54475, 54604, 54606, 54607, 
	54608, 54633, 54634, 54701, 54703, 54705, 54834, 54963, 
	54974, 54976, 55001, 55002, 55003, 55024, 55027, 55040, 
	55042, 55097, 55146, 55222, 55290, 55306, 55365, 55366, 
	55368, 55369, 55437, 55505, 55573, 55641, 55652, 55653, 
	55655, 55656, 55724, 55792, 55860, 55928, 55996, 56064, 
	56132, 56200, 56270, 56338, 56408, 56476, 56478, 56481, 
	56483, 56550, 56552, 56555, 56684, 56813, 56814, 56943, 
	57072, 57201, 57330, 57459, 57588, 57589, 57591, 57592, 
	57721, 57850, 57979, 58108, 58237, 58366, 58495, 58624, 
	58753, 58882, 59011, 59140, 59269, 59398, 59527, 59656, 
	59785, 59914, 60043, 60172, 60301, 60430, 60559, 60688, 
	60817, 60946, 61075, 61204, 61333, 61462, 61591, 61720, 
	61849, 61978, 62107, 62236, 62365, 62450, 62579, 62708, 
	62837, 62966, 63095, 63224, 63353, 63482, 63611, 63740, 
	63869, 63998, 64127, 64256, 64385, 64514, 64643, 64772, 
	64901, 65030, 65159, 65288, 65417, 65546, 65675, 65804, 
	65933, 66062, 66191, 66320, 66449, 66578, 66707, 66836, 
	66965, 67094, 67223, 67352, 67481, 67610, 67739, 67868, 
	67997, 68126, 68255, 68384, 68513, 68642, 68771, 68900, 
	69029, 69158, 69287, 69416, 69545, 69674, 69803, 69932, 
	70061, 70190, 70319, 70448, 70577, 70706, 70835, 70836, 
	70901, 70902, 70941, 70980, 71028, 71081, 71083, 71176, 
	71278, 71370
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 12, 12, 12, 12, 12, 12, 
	17, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 18, 19, 19, 19, 18, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	19, 18, 21, 21, 21, 18, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 23, 21, 
	18, 21, 21, 21, 18, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 18, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 24, 21, 18, 
	25, 25, 25, 18, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 18, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 18, 28, 28, 
	28, 18, 28, 28, 28, 28, 28, 29, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 18, 
	28, 18, 28, 28, 28, 18, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 18, 28, 18, 19, 19, 
	19, 18, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 18, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 30, 19, 18, 31, 31, 31, 
	18, 31, 31, 31, 31, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 18, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 33, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	34, 31, 31, 31, 31, 31, 31, 35, 
	31, 18, 31, 31, 31, 18, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 18, 31, 36, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 37, 18, 37, 
	18, 18, 38, 38, 38, 18, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 18, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 40, 38, 18, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 22, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 18, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 24, 21, 18, 41, 
	41, 41, 18, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	18, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 43, 45, 43, 45, 45, 43, 43, 
	45, 45, 45, 46, 45, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	45, 45, 45, 45, 45, 45, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 45, 43, 43, 44, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 43, 43, 45, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 43, 43, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 45, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 43, 45, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 43, 43, 43, 43, 43, 43, 
	48, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 44, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	44, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	43, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	44, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	43, 44, 49, 50, 50, 50, 49, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 49, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 51, 
	50, 49, 52, 52, 52, 49, 52, 52, 
	52, 52, 52, 53, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	49, 52, 52, 52, 49, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 49, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 55, 52, 49, 
	56, 56, 56, 49, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 49, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 49, 59, 59, 
	59, 49, 59, 59, 59, 59, 59, 60, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 49, 
	59, 49, 59, 59, 59, 49, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 49, 59, 49, 50, 50, 
	50, 49, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 61, 50, 49, 62, 62, 62, 
	49, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 49, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	65, 62, 62, 62, 62, 62, 62, 66, 
	62, 49, 62, 62, 62, 49, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 49, 62, 67, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 68, 49, 68, 
	49, 49, 69, 69, 69, 49, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 49, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 49, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 53, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 49, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 55, 52, 49, 72, 
	72, 72, 49, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	49, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 76, 75, 76, 75, 75, 76, 76, 
	75, 75, 75, 77, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 75, 76, 76, 74, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 76, 76, 75, 76, 74, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 76, 76, 76, 76, 76, 76, 76, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 76, 76, 76, 76, 75, 76, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 76, 76, 76, 76, 76, 75, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 76, 76, 76, 76, 76, 76, 
	80, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 76, 76, 76, 76, 79, 
	76, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 76, 76, 76, 76, 76, 
	79, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 76, 76, 76, 76, 76, 
	76, 76, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 76, 76, 76, 76, 
	81, 76, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 76, 76, 76, 76, 
	76, 81, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 82, 82, 82, 82, 
	82, 82, 82, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 82, 82, 82, 
	82, 83, 82, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 82, 82, 82, 
	82, 82, 83, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 86, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 84, 84, 
	84, 84, 86, 84, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 84, 84, 
	84, 84, 85, 84, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 84, 84, 
	84, 84, 84, 85, 87, 84, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 90, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	91, 88, 88, 88, 88, 90, 88, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 88, 88, 88, 88, 89, 88, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 88, 88, 88, 88, 88, 89, 91, 
	88, 93, 92, 94, 92, 95, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	97, 92, 97, 97, 97, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 97, 
	92, 92, 92, 92, 98, 99, 92, 100, 
	92, 101, 102, 103, 104, 105, 98, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 106, 92, 107, 103, 108, 109, 92, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 110, 111, 103, 112, 96, 92, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	113, 96, 96, 96, 96, 96, 96, 96, 
	96, 114, 96, 96, 115, 96, 116, 96, 
	96, 96, 117, 118, 92, 112, 92, 96, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 119, 92, 119, 119, 119, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	119, 92, 92, 92, 92, 120, 121, 92, 
	122, 92, 123, 124, 125, 126, 127, 120, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 128, 92, 129, 125, 130, 131, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 132, 133, 125, 94, 89, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 134, 89, 89, 89, 89, 89, 89, 
	89, 89, 135, 89, 89, 136, 89, 137, 
	89, 89, 89, 138, 139, 92, 94, 92, 
	89, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 90, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 92, 92, 92, 92, 
	90, 92, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 92, 92, 92, 92, 
	89, 92, 89, 89, 89, 89, 89, 140, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 92, 92, 92, 92, 
	92, 89, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 90, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 92, 92, 92, 
	92, 90, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 92, 92, 
	92, 89, 92, 89, 89, 89, 89, 141, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 92, 92, 
	92, 92, 89, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 90, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 91, 92, 92, 
	92, 92, 90, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 92, 92, 
	92, 92, 89, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 142, 89, 
	89, 89, 89, 89, 89, 89, 92, 92, 
	92, 92, 92, 89, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 90, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 91, 92, 
	92, 92, 92, 90, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	92, 92, 92, 89, 92, 89, 89, 143, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	92, 92, 92, 92, 89, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 90, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 91, 
	92, 92, 92, 92, 90, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	92, 92, 92, 92, 89, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 144, 89, 89, 89, 89, 89, 
	92, 92, 92, 92, 92, 89, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 90, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	91, 92, 92, 92, 92, 90, 92, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 92, 92, 92, 92, 89, 92, 89, 
	89, 89, 89, 140, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 92, 92, 92, 92, 92, 89, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	90, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 91, 92, 92, 92, 92, 90, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 92, 92, 92, 92, 89, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 145, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 92, 92, 92, 92, 92, 89, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 90, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 91, 92, 92, 92, 92, 90, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 92, 92, 92, 92, 89, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 146, 89, 89, 89, 
	89, 89, 89, 89, 147, 89, 89, 89, 
	89, 89, 89, 92, 92, 92, 92, 92, 
	89, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 90, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 92, 92, 92, 92, 
	90, 92, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 92, 92, 92, 92, 
	89, 92, 89, 89, 89, 89, 148, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 92, 92, 92, 92, 
	92, 89, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 90, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 92, 92, 92, 
	92, 90, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 92, 92, 
	92, 89, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 149, 89, 89, 
	89, 89, 89, 89, 89, 92, 92, 92, 
	92, 92, 89, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 90, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 91, 92, 92, 
	92, 92, 90, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 92, 92, 
	92, 92, 89, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 140, 89, 
	89, 89, 89, 89, 89, 89, 92, 92, 
	92, 92, 92, 89, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 90, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 91, 92, 
	92, 92, 92, 90, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	92, 92, 92, 89, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 150, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	92, 92, 92, 92, 89, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 90, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 91, 
	92, 92, 92, 92, 90, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	92, 92, 92, 92, 89, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 140, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	92, 92, 92, 92, 92, 89, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 90, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	91, 92, 92, 92, 92, 90, 92, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 92, 92, 92, 92, 89, 92, 89, 
	89, 89, 89, 89, 89, 89, 151, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 92, 92, 92, 92, 92, 89, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	90, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 91, 92, 92, 92, 92, 90, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 92, 92, 92, 92, 89, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	152, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 92, 92, 92, 92, 92, 89, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 90, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 91, 92, 92, 92, 92, 90, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 92, 92, 92, 92, 89, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 144, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 92, 92, 92, 92, 92, 
	89, 154, 153, 155, 153, 156, 153, 125, 
	153, 157, 153, 153, 153, 153, 153, 153, 
	153, 158, 153, 159, 153, 160, 153, 125, 
	153, 161, 153, 125, 153, 162, 153, 156, 
	153, 164, 163, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 167, 165, 167, 167, 
	167, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 167, 165, 165, 165, 165, 
	165, 165, 165, 168, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 165, 169, 
	165, 165, 166, 165, 166, 166, 166, 170, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 165, 165, 
	165, 165, 165, 166, 171, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 173, 
	165, 173, 173, 173, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 173, 165, 
	165, 165, 165, 165, 165, 165, 174, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 165, 175, 165, 165, 172, 165, 172, 
	172, 172, 176, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 165, 165, 165, 165, 165, 172, 177, 
	178, 180, 179, 181, 179, 182, 179, 183, 
	179, 184, 179, 185, 186, 186, 186, 185, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 185, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 186, 186, 
	186, 186, 186, 186, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 186, 188, 
	177, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 191, 191, 189, 191, 189, 191, 
	191, 189, 189, 191, 191, 191, 192, 191, 
	191, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 191, 191, 191, 191, 191, 
	191, 191, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 189, 191, 189, 189, 
	190, 191, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 189, 189, 189, 191, 
	189, 190, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 189, 189, 189, 189, 
	189, 189, 189, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 189, 189, 189, 
	189, 191, 189, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 189, 189, 189, 
	189, 189, 191, 194, 191, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 191, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 195, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 189, 189, 189, 189, 190, 189, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 189, 189, 189, 189, 189, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 189, 189, 189, 189, 190, 189, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 189, 189, 189, 189, 189, 190, 
	194, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 197, 189, 189, 189, 
	189, 198, 189, 189, 189, 189, 189, 199, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 188, 
	189, 189, 189, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 189, 189, 189, 
	189, 196, 200, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 189, 189, 189, 
	189, 189, 196, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 202, 202, 202, 
	202, 202, 202, 202, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 202, 202, 
	202, 202, 201, 202, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 202, 202, 
	202, 202, 202, 201, 205, 204, 189, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 206, 197, 
	203, 202, 189, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 206, 
	198, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 197, 189, 189, 189, 189, 
	198, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 189, 189, 189, 189, 
	196, 200, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 189, 189, 189, 189, 
	189, 196, 189, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	206, 200, 209, 208, 208, 208, 209, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 209, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 210, 210, 210, 210, 210, 210, 
	210, 210, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 212, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 213, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 214, 
	208, 208, 215, 208, 207, 216, 216, 216, 
	207, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 207, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 217, 216, 218, 219, 219, 219, 218, 
	219, 219, 219, 219, 219, 220, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 218, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	221, 219, 218, 219, 219, 219, 218, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 218, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 222, 
	219, 218, 223, 223, 223, 218, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 218, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	224, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 225, 223, 218, 
	226, 226, 226, 218, 226, 226, 226, 226, 
	226, 227, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 218, 226, 218, 226, 226, 226, 218, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 218, 226, 207, 
	216, 216, 216, 207, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 207, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 228, 216, 218, 229, 
	229, 229, 218, 229, 229, 229, 229, 229, 
	230, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	218, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 231, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 232, 229, 229, 229, 229, 229, 
	229, 233, 229, 218, 229, 229, 229, 218, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 218, 229, 234, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 235, 
	218, 235, 218, 207, 236, 236, 236, 207, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 207, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 237, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 238, 
	236, 207, 219, 219, 219, 207, 219, 219, 
	219, 219, 219, 220, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 207, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 222, 219, 
	207, 239, 239, 239, 207, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 207, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 239, 239, 239, 239, 239, 239, 
	239, 240, 240, 240, 240, 240, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 240, 240, 240, 240, 240, 240, 239, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 242, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 243, 177, 177, 244, 177, 245, 
	177, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 177, 177, 177, 177, 241, 
	177, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 177, 177, 177, 177, 177, 
	241, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 242, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 243, 189, 189, 244, 189, 
	245, 189, 241, 241, 241, 241, 241, 241, 
	246, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 189, 189, 189, 189, 
	241, 189, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 189, 189, 189, 189, 
	189, 241, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 242, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 243, 189, 189, 244, 
	189, 245, 189, 241, 241, 241, 241, 241, 
	241, 241, 241, 247, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 189, 189, 189, 
	189, 241, 189, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 189, 189, 189, 
	189, 189, 241, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 242, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 243, 189, 189, 
	244, 189, 245, 189, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 248, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 189, 189, 
	189, 189, 241, 189, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 189, 189, 
	189, 189, 189, 241, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 242, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 243, 189, 
	189, 244, 189, 245, 189, 241, 241, 241, 
	248, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 189, 
	189, 189, 189, 241, 189, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 189, 
	189, 189, 189, 189, 241, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 251, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 252, 
	249, 249, 249, 249, 251, 249, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	249, 249, 249, 249, 250, 249, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	249, 249, 249, 249, 249, 250, 252, 249, 
	249, 253, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 254, 254, 254, 254, 
	254, 254, 254, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 254, 254, 254, 
	254, 255, 254, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 254, 254, 254, 
	254, 254, 255, 257, 256, 257, 256, 256, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 256, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 256, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	256, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 260, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 260, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 254, 254, 254, 254, 254, 254, 254, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 254, 254, 254, 254, 263, 254, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 254, 254, 254, 254, 254, 263, 
	264, 260, 265, 266, 265, 265, 265, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 265, 260, 260, 267, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 268, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 269, 260, 270, 
	271, 270, 270, 270, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 270, 260, 
	260, 272, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 273, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 274, 260, 276, 277, 276, 276, 
	276, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 276, 275, 275, 278, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 279, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 280, 
	275, 282, 283, 282, 282, 282, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	282, 281, 281, 284, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 285, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 286, 281, 282, 283, 
	282, 282, 282, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 282, 281, 281, 
	284, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 287, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 286, 281, 282, 288, 282, 282, 282, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 282, 281, 281, 284, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 285, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 286, 281, 
	289, 260, 266, 260, 291, 290, 291, 291, 
	291, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 292, 290, 290, 293, 293, 293, 290, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 290, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 290, 293, 295, 294, 294, 294, 295, 
	294, 294, 294, 294, 296, 297, 296, 296, 
	296, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 295, 294, 294, 
	294, 294, 294, 296, 294, 294, 298, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	299, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 300, 
	294, 294, 301, 294, 296, 302, 296, 296, 
	296, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 296, 302, 303, 304, 305, 
	306, 307, 309, 308, 311, 312, 311, 311, 
	311, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 311, 310, 297, 308, 313, 
	308, 315, 314, 314, 314, 315, 314, 314, 
	314, 314, 316, 317, 316, 316, 316, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 315, 314, 314, 314, 314, 
	314, 316, 314, 314, 318, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 319, 314, 316, 
	320, 316, 316, 316, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 316, 320, 
	322, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 323, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 324, 
	321, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 325, 325, 325, 325, 325, 
	325, 325, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 325, 325, 325, 325, 
	13, 325, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 325, 325, 325, 325, 
	325, 13, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 325, 328, 327, 327, 
	327, 328, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 328, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 329, 329, 329, 
	329, 329, 329, 329, 329, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	330, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 331, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	332, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 333, 327, 327, 334, 327, 335, 
	336, 338, 338, 338, 338, 338, 338, 338, 
	338, 337, 339, 339, 339, 339, 339, 339, 
	339, 339, 337, 337, 340, 340, 38, 38, 
	38, 340, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 340, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 39, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 341, 38, 342, 343, 344, 344, 38, 
	38, 38, 344, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	344, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 39, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 345, 38, 37, 344, 346, 347, 
	348, 348, 25, 25, 25, 348, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 348, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 349, 25, 344, 
	19, 19, 19, 344, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 344, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 350, 19, 340, 25, 
	25, 25, 340, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	340, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 340, 351, 351, 351, 
	340, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 340, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	352, 351, 353, 354, 354, 351, 351, 351, 
	354, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 354, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	355, 351, 354, 19, 19, 19, 354, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 354, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 350, 
	19, 356, 354, 354, 25, 25, 25, 354, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 354, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 27, 
	25, 357, 358, 358, 358, 357, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 357, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 358, 358, 358, 358, 358, 
	358, 358, 359, 359, 359, 359, 359, 359, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 359, 359, 359, 359, 359, 359, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 360, 358, 357, 361, 
	361, 361, 357, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	357, 361, 357, 362, 362, 362, 357, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 357, 362, 357, 363, 
	363, 363, 357, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	357, 363, 357, 357, 361, 361, 361, 357, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 357, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 361, 361, 361, 
	361, 361, 361, 361, 364, 364, 364, 364, 
	364, 364, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 364, 364, 364, 364, 
	364, 364, 361, 357, 362, 362, 362, 357, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 357, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 365, 365, 365, 365, 365, 
	365, 365, 365, 365, 365, 362, 362, 362, 
	362, 362, 362, 362, 365, 365, 365, 365, 
	365, 365, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 365, 365, 365, 365, 
	365, 365, 362, 357, 363, 363, 363, 357, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 357, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 363, 363, 363, 
	363, 363, 363, 363, 366, 366, 366, 366, 
	366, 366, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 366, 366, 366, 366, 
	366, 366, 363, 367, 370, 369, 369, 369, 
	370, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 370, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 371, 371, 371, 371, 
	371, 371, 371, 371, 371, 371, 369, 369, 
	369, 369, 369, 369, 369, 371, 371, 371, 
	371, 371, 371, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 371, 371, 371, 
	371, 371, 371, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 361, 369, 370, 372, 372, 372, 370, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 370, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 372, 372, 372, 
	372, 372, 372, 372, 373, 373, 373, 373, 
	373, 373, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 373, 373, 373, 373, 
	373, 373, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	374, 372, 370, 375, 375, 375, 370, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 370, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 375, 375, 375, 375, 
	375, 375, 375, 376, 376, 376, 376, 376, 
	376, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 376, 376, 376, 376, 376, 
	376, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 377, 
	375, 370, 378, 378, 378, 370, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 370, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 378, 378, 378, 378, 378, 
	378, 378, 379, 379, 379, 379, 379, 379, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 379, 379, 379, 379, 379, 379, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 370, 378, 
	370, 378, 378, 378, 370, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 370, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 378, 378, 378, 378, 378, 378, 
	378, 379, 379, 379, 379, 379, 379, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 379, 379, 379, 379, 379, 379, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 370, 378, 380, 
	370, 379, 379, 379, 370, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 370, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 380, 379, 370, 
	379, 379, 379, 370, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 370, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 368, 379, 368, 370, 
	376, 376, 376, 370, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 370, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 363, 376, 368, 363, 
	363, 363, 368, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	368, 363, 370, 372, 372, 372, 370, 372, 
	372, 372, 372, 381, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 370, 372, 372, 372, 
	372, 372, 381, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 372, 372, 372, 372, 
	372, 372, 372, 382, 382, 382, 382, 382, 
	382, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 382, 382, 382, 382, 382, 
	382, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 383, 
	372, 370, 378, 378, 378, 370, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 370, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 378, 378, 378, 378, 378, 
	378, 378, 384, 384, 384, 384, 384, 384, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 384, 384, 384, 384, 384, 384, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 370, 378, 
	370, 378, 378, 378, 370, 378, 378, 378, 
	378, 385, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 370, 378, 378, 378, 378, 378, 
	385, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 378, 378, 378, 378, 378, 378, 
	378, 386, 386, 386, 386, 386, 386, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 386, 386, 386, 386, 386, 386, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 387, 378, 370, 
	378, 378, 378, 370, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 370, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 378, 378, 378, 378, 378, 378, 378, 
	384, 384, 384, 384, 384, 384, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	384, 384, 384, 384, 384, 384, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 370, 378, 370, 378, 
	378, 378, 370, 378, 378, 378, 378, 385, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	370, 378, 378, 378, 378, 378, 385, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	378, 378, 378, 378, 378, 378, 378, 388, 
	388, 388, 388, 388, 388, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 388, 
	388, 388, 388, 388, 388, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 387, 378, 370, 378, 378, 
	378, 370, 378, 378, 378, 378, 385, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 370, 
	378, 378, 378, 378, 378, 385, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 378, 
	378, 378, 378, 378, 378, 378, 389, 389, 
	389, 389, 389, 389, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 389, 389, 
	389, 389, 389, 389, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 387, 378, 370, 378, 378, 378, 
	370, 378, 378, 378, 378, 385, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 370, 378, 
	378, 378, 378, 378, 385, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 390, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 378, 378, 
	378, 378, 378, 378, 378, 390, 390, 390, 
	390, 390, 390, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 390, 390, 390, 
	390, 390, 390, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 387, 378, 370, 378, 378, 378, 370, 
	378, 378, 378, 378, 385, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 370, 378, 378, 
	378, 378, 378, 385, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 378, 378, 378, 
	378, 378, 378, 378, 391, 391, 391, 391, 
	391, 391, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 391, 391, 391, 391, 
	391, 391, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	387, 378, 370, 378, 378, 378, 370, 378, 
	378, 378, 378, 385, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 370, 378, 378, 378, 
	378, 378, 385, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 378, 378, 378, 378, 
	378, 378, 378, 392, 392, 392, 392, 392, 
	392, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 392, 392, 392, 392, 392, 
	392, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 387, 
	378, 370, 378, 378, 378, 370, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 370, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 378, 378, 378, 378, 378, 
	378, 378, 392, 392, 392, 392, 392, 392, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 392, 392, 392, 392, 392, 392, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 380, 378, 
	393, 370, 375, 375, 375, 370, 375, 375, 
	375, 375, 385, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 370, 375, 375, 375, 375, 
	375, 385, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 375, 375, 375, 375, 375, 
	375, 375, 388, 388, 388, 388, 388, 388, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 388, 388, 388, 388, 388, 388, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 387, 375, 
	394, 395, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 396, 396, 396, 396, 
	396, 396, 396, 397, 397, 397, 397, 397, 
	397, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 397, 397, 397, 397, 397, 
	397, 396, 396, 399, 398, 398, 398, 399, 
	398, 398, 398, 398, 398, 400, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 399, 398, 398, 
	398, 398, 398, 398, 398, 398, 401, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 402, 
	398, 404, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 405, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	406, 403, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 407, 407, 407, 407, 
	407, 407, 407, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 407, 407, 407, 
	407, 44, 407, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 407, 407, 407, 
	407, 407, 44, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 407, 410, 409, 
	409, 409, 410, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	410, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 411, 411, 
	411, 411, 411, 411, 411, 411, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 412, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 413, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 414, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 415, 409, 409, 416, 409, 
	417, 418, 420, 420, 420, 420, 420, 420, 
	420, 420, 419, 421, 421, 421, 421, 421, 
	421, 421, 421, 419, 419, 422, 422, 69, 
	69, 69, 422, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	422, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 70, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 423, 69, 424, 425, 426, 426, 
	69, 69, 69, 426, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 426, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 70, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 427, 69, 68, 426, 428, 
	429, 430, 430, 56, 56, 56, 430, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 430, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 57, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 431, 56, 
	426, 50, 50, 50, 426, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 426, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 432, 50, 422, 
	56, 56, 56, 422, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 422, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 422, 433, 433, 
	433, 422, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 422, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 434, 433, 435, 436, 436, 433, 433, 
	433, 436, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 436, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 437, 433, 436, 50, 50, 50, 436, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 436, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	432, 50, 438, 436, 436, 56, 56, 56, 
	436, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 436, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 57, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	58, 56, 439, 440, 440, 440, 439, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 439, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 440, 440, 440, 440, 
	440, 440, 440, 441, 441, 441, 441, 441, 
	441, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 441, 441, 441, 441, 441, 
	441, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 442, 440, 439, 
	443, 443, 443, 439, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 439, 443, 439, 444, 444, 444, 439, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 439, 444, 439, 
	445, 445, 445, 439, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 439, 445, 439, 439, 443, 443, 443, 
	439, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 439, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 446, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 443, 443, 
	443, 443, 443, 443, 443, 446, 446, 446, 
	446, 446, 446, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 446, 446, 446, 
	446, 446, 446, 443, 439, 444, 444, 444, 
	439, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 439, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 447, 447, 447, 447, 
	447, 447, 447, 447, 447, 447, 444, 444, 
	444, 444, 444, 444, 444, 447, 447, 447, 
	447, 447, 447, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 447, 447, 447, 
	447, 447, 447, 444, 439, 445, 445, 445, 
	439, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 439, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 445, 445, 
	445, 445, 445, 445, 445, 448, 448, 448, 
	448, 448, 448, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 448, 448, 448, 
	448, 448, 448, 445, 449, 452, 451, 451, 
	451, 452, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 452, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 451, 
	451, 451, 451, 451, 451, 451, 453, 453, 
	453, 453, 453, 453, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 453, 453, 
	453, 453, 453, 453, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 443, 451, 452, 454, 454, 454, 
	452, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 452, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 454, 454, 
	454, 454, 454, 454, 454, 455, 455, 455, 
	455, 455, 455, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 455, 455, 455, 
	455, 455, 455, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 456, 454, 452, 457, 457, 457, 452, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 452, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 457, 457, 457, 
	457, 457, 457, 457, 458, 458, 458, 458, 
	458, 458, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 458, 458, 458, 458, 
	458, 458, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	459, 457, 452, 460, 460, 460, 452, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 452, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 460, 460, 460, 460, 
	460, 460, 460, 461, 461, 461, 461, 461, 
	461, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 461, 461, 461, 461, 461, 
	461, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 452, 
	460, 452, 460, 460, 460, 452, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 452, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 460, 460, 460, 460, 460, 
	460, 460, 461, 461, 461, 461, 461, 461, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 461, 461, 461, 461, 461, 461, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 452, 460, 
	462, 452, 461, 461, 461, 452, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 452, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 462, 461, 
	452, 461, 461, 461, 452, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 452, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 450, 461, 450, 
	452, 458, 458, 458, 452, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 452, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 445, 458, 450, 
	445, 445, 445, 450, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 450, 445, 452, 454, 454, 454, 452, 
	454, 454, 454, 454, 463, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 452, 454, 454, 
	454, 454, 454, 463, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 454, 454, 454, 
	454, 454, 454, 454, 464, 464, 464, 464, 
	464, 464, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 464, 464, 464, 464, 
	464, 464, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	465, 454, 452, 460, 460, 460, 452, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 452, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 466, 466, 466, 466, 466, 466, 
	466, 466, 466, 466, 460, 460, 460, 460, 
	460, 460, 460, 466, 466, 466, 466, 466, 
	466, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 466, 466, 466, 466, 466, 
	466, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 452, 
	460, 452, 460, 460, 460, 452, 460, 460, 
	460, 460, 467, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 452, 460, 460, 460, 460, 
	460, 467, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 460, 460, 460, 460, 460, 
	460, 460, 468, 468, 468, 468, 468, 468, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 468, 468, 468, 468, 468, 468, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 469, 460, 
	452, 460, 460, 460, 452, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 452, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	466, 466, 466, 466, 466, 466, 466, 466, 
	466, 466, 460, 460, 460, 460, 460, 460, 
	460, 466, 466, 466, 466, 466, 466, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 466, 466, 466, 466, 466, 466, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 452, 460, 452, 
	460, 460, 460, 452, 460, 460, 460, 460, 
	467, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 452, 460, 460, 460, 460, 460, 467, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 460, 460, 460, 460, 460, 460, 460, 
	470, 470, 470, 470, 470, 470, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	470, 470, 470, 470, 470, 470, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 469, 460, 452, 460, 
	460, 460, 452, 460, 460, 460, 460, 467, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	452, 460, 460, 460, 460, 460, 467, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	460, 460, 460, 460, 460, 460, 460, 471, 
	471, 471, 471, 471, 471, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 471, 
	471, 471, 471, 471, 471, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 469, 460, 452, 460, 460, 
	460, 452, 460, 460, 460, 460, 467, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 452, 
	460, 460, 460, 460, 460, 467, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 472, 472, 472, 
	472, 472, 472, 472, 472, 472, 472, 460, 
	460, 460, 460, 460, 460, 460, 472, 472, 
	472, 472, 472, 472, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 472, 472, 
	472, 472, 472, 472, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 469, 460, 452, 460, 460, 460, 
	452, 460, 460, 460, 460, 467, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 452, 460, 
	460, 460, 460, 460, 467, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 460, 460, 
	460, 460, 460, 460, 460, 473, 473, 473, 
	473, 473, 473, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 473, 473, 473, 
	473, 473, 473, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 469, 460, 452, 460, 460, 460, 452, 
	460, 460, 460, 460, 467, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 452, 460, 460, 
	460, 460, 460, 467, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 460, 460, 460, 
	460, 460, 460, 460, 474, 474, 474, 474, 
	474, 474, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 474, 474, 474, 474, 
	474, 474, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	469, 460, 452, 460, 460, 460, 452, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 452, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 460, 460, 460, 460, 
	460, 460, 460, 474, 474, 474, 474, 474, 
	474, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 474, 474, 474, 474, 474, 
	474, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 462, 
	460, 475, 452, 457, 457, 457, 452, 457, 
	457, 457, 457, 467, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 452, 457, 457, 457, 
	457, 457, 467, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 457, 457, 457, 457, 
	457, 457, 457, 470, 470, 470, 470, 470, 
	470, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 470, 470, 470, 470, 470, 
	470, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 469, 
	457, 476, 477, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 478, 478, 478, 
	478, 478, 478, 478, 479, 479, 479, 479, 
	479, 479, 478, 478, 478, 478, 478, 478, 
	478, 478, 478, 478, 478, 478, 478, 478, 
	478, 478, 478, 478, 478, 478, 478, 478, 
	478, 478, 478, 478, 479, 479, 479, 479, 
	479, 479, 478, 478, 481, 480, 480, 480, 
	481, 480, 480, 480, 480, 482, 483, 482, 
	482, 482, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 481, 480, 
	480, 480, 480, 480, 482, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	484, 480, 482, 485, 482, 482, 482, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 482, 485, 486, 487, 487, 487, 486, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 486, 487, 489, 
	488, 488, 488, 489, 488, 488, 488, 488, 
	488, 490, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 489, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 491, 488, 492, 493, 493, 
	493, 492, 493, 493, 493, 493, 493, 494, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 492, 
	493, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 495, 495, 495, 495, 495, 
	495, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 495, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 497, 497, 
	497, 497, 497, 497, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 497, 498, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 499, 76, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 500, 
	500, 500, 500, 500, 500, 500, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	500, 500, 500, 500, 74, 500, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	500, 500, 500, 500, 500, 74, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	500, 501, 501, 501, 501, 501, 501, 501, 
	501, 501, 501, 501, 501, 501, 501, 501, 
	501, 501, 501, 501, 501, 501, 501, 501, 
	501, 501, 501, 501, 501, 501, 501, 501, 
	501, 501, 501, 501, 501, 501, 501, 501, 
	501, 501, 501, 501, 501, 501, 501, 501, 
	501, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 501, 501, 501, 501, 501, 
	501, 501, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 501, 501, 501, 501, 
	79, 501, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 501, 501, 501, 501, 
	501, 79, 502, 502, 502, 502, 502, 502, 
	502, 502, 502, 502, 502, 502, 502, 502, 
	502, 502, 502, 502, 502, 502, 502, 502, 
	502, 502, 502, 502, 502, 502, 502, 502, 
	502, 502, 502, 502, 502, 502, 502, 502, 
	502, 502, 502, 502, 502, 502, 502, 502, 
	502, 502, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 502, 502, 502, 502, 
	502, 502, 502, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 502, 502, 502, 
	502, 81, 502, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 502, 502, 502, 
	502, 502, 81, 504, 505, 505, 505, 504, 
	505, 505, 505, 505, 506, 507, 506, 506, 
	506, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 504, 505, 505, 
	505, 505, 505, 506, 508, 505, 509, 510, 
	511, 512, 505, 505, 505, 513, 514, 505, 
	514, 505, 511, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 515, 505, 516, 
	517, 518, 505, 505, 519, 520, 519, 519, 
	521, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 522, 523, 
	505, 511, 524, 511, 525, 526, 527, 528, 
	529, 530, 503, 503, 531, 503, 503, 503, 
	532, 533, 534, 503, 503, 535, 536, 537, 
	538, 503, 539, 503, 540, 503, 505, 541, 
	505, 514, 505, 503, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 543, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 542, 542, 
	542, 543, 542, 543, 542, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 542, 
	542, 542, 542, 503, 542, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 542, 
	542, 542, 542, 542, 503, 506, 544, 506, 
	506, 506, 544, 544, 544, 544, 544, 544, 
	544, 544, 544, 544, 544, 544, 544, 544, 
	544, 544, 544, 544, 506, 544, 545, 511, 
	546, 546, 511, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	511, 546, 547, 548, 549, 550, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 83, 
	83, 551, 83, 551, 83, 83, 551, 551, 
	83, 83, 83, 553, 83, 83, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	83, 83, 83, 83, 83, 83, 83, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 551, 83, 551, 551, 552, 83, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 551, 551, 551, 83, 551, 552, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 555, 555, 555, 555, 555, 555, 555, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 555, 555, 555, 555, 552, 555, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 555, 555, 555, 555, 555, 552, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 555, 511, 546, 511, 546, 511, 
	546, 557, 556, 511, 558, 546, 511, 546, 
	559, 511, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 511, 551, 511, 546, 511, 511, 546, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 543, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 542, 542, 542, 543, 542, 543, 
	542, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 542, 542, 542, 542, 519, 
	542, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 542, 542, 542, 542, 542, 
	519, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 543, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 560, 560, 560, 543, 560, 
	543, 560, 519, 519, 519, 519, 561, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 560, 560, 560, 560, 
	519, 560, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 560, 560, 560, 560, 
	560, 519, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 543, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 560, 560, 560, 543, 
	560, 543, 560, 519, 519, 519, 519, 519, 
	519, 562, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 560, 560, 560, 
	560, 519, 560, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 560, 560, 560, 
	560, 560, 519, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 543, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 560, 560, 560, 
	543, 560, 543, 560, 519, 519, 519, 519, 
	519, 519, 519, 519, 563, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 560, 560, 
	560, 560, 519, 560, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 560, 560, 
	560, 560, 560, 519, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 543, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 560, 560, 
	560, 543, 560, 543, 560, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 564, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 560, 
	560, 560, 560, 519, 560, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 560, 
	560, 560, 560, 560, 519, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 543, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 560, 
	560, 560, 543, 560, 543, 560, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 565, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	560, 560, 560, 560, 519, 560, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	560, 560, 560, 560, 560, 519, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 543, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	560, 560, 560, 543, 560, 543, 560, 519, 
	519, 519, 564, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 560, 560, 560, 560, 519, 560, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 560, 560, 560, 560, 560, 519, 559, 
	551, 507, 551, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 567, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 568, 569, 503, 503, 503, 503, 503, 
	570, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 571, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 572, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 573, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 574, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 575, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	576, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 577, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 578, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 579, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 580, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 581, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 577, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 582, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	581, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 583, 
	503, 584, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 585, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 586, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 579, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 579, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 587, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 588, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 503, 503, 503, 
	589, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 590, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 579, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 591, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 592, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 579, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	593, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 594, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 595, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 503, 579, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 596, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 586, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 597, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 579, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 503, 503, 
	503, 503, 503, 598, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 599, 599, 
	599, 599, 599, 599, 599, 599, 599, 599, 
	599, 599, 599, 599, 599, 599, 599, 599, 
	599, 599, 599, 599, 599, 599, 599, 599, 
	599, 599, 599, 599, 599, 599, 599, 543, 
	599, 599, 599, 599, 599, 599, 599, 599, 
	599, 599, 599, 599, 599, 599, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	599, 599, 599, 543, 599, 543, 599, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 599, 599, 599, 599, 503, 599, 503, 
	503, 503, 503, 503, 503, 503, 503, 600, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 599, 599, 599, 599, 599, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 601, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 602, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 603, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 604, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 605, 
	503, 606, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 607, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 503, 503, 
	503, 503, 579, 503, 503, 503, 608, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 503, 579, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 579, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 609, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 610, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 595, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 611, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 534, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 593, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 579, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 503, 503, 
	503, 503, 503, 579, 503, 503, 503, 503, 
	503, 503, 503, 579, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 612, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 613, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 614, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 595, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 503, 503, 503, 503, 615, 
	503, 503, 503, 616, 503, 503, 503, 503, 
	503, 617, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 617, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	579, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 579, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 618, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 619, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 620, 621, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 579, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 622, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 595, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 623, 503, 503, 
	624, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 579, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 590, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 625, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 626, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 608, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	627, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 503, 534, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 503, 503, 503, 503, 503, 
	503, 503, 628, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 622, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	590, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 629, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 503, 503, 
	503, 630, 503, 503, 503, 503, 503, 503, 
	503, 631, 503, 503, 503, 503, 503, 503, 
	503, 632, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 543, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 543, 566, 543, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 503, 566, 503, 
	503, 503, 503, 608, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 566, 566, 503, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	543, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 566, 566, 566, 543, 566, 543, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 503, 566, 
	503, 503, 503, 503, 596, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 566, 566, 503, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 543, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 566, 566, 566, 543, 566, 543, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 503, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 616, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 566, 566, 
	503, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 543, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 566, 566, 566, 543, 566, 
	543, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	503, 566, 503, 503, 503, 503, 503, 503, 
	503, 633, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 566, 
	566, 503, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 543, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 566, 566, 566, 543, 
	566, 543, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 503, 566, 503, 503, 503, 503, 590, 
	503, 503, 503, 614, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	566, 566, 503, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 543, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 566, 566, 566, 
	543, 566, 543, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 503, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 634, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 566, 566, 503, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 543, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 566, 566, 
	566, 543, 566, 543, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 503, 566, 503, 503, 503, 
	503, 635, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 566, 566, 503, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 566, 543, 566, 
	566, 566, 566, 566, 566, 566, 566, 566, 
	566, 566, 566, 566, 566, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 566, 
	566, 566, 543, 566, 543, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 503, 566, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 584, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	566, 566, 566, 566, 566, 503, 511, 546, 
	637, 638, 638, 638, 637, 638, 638, 638, 
	638, 639, 638, 639, 639, 639, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 637, 638, 638, 638, 638, 638, 
	639, 638, 638, 640, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 638, 641, 638, 638, 636, 
	638, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 638, 638, 638, 638, 638, 
	636, 642, 642, 642, 642, 642, 642, 642, 
	642, 642, 642, 642, 642, 642, 642, 642, 
	642, 642, 642, 642, 642, 642, 642, 642, 
	642, 642, 642, 642, 642, 642, 642, 642, 
	642, 642, 86, 642, 642, 642, 642, 642, 
	642, 642, 642, 642, 642, 642, 642, 642, 
	642, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 87, 642, 642, 642, 642, 
	86, 642, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 642, 642, 642, 642, 
	85, 642, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 642, 642, 642, 642, 
	642, 85, 639, 643, 639, 639, 639, 643, 
	643, 643, 643, 643, 643, 643, 643, 643, 
	643, 643, 643, 643, 643, 643, 643, 643, 
	643, 639, 643, 644, 645, 646, 647, 648, 
	642, 649, 651, 652, 652, 652, 651, 652, 
	652, 652, 652, 653, 654, 653, 653, 653, 
	652, 652, 652, 652, 652, 652, 652, 652, 
	652, 652, 652, 652, 651, 652, 652, 652, 
	652, 652, 653, 655, 652, 656, 652, 657, 
	658, 652, 652, 652, 659, 660, 652, 660, 
	652, 657, 652, 652, 652, 652, 652, 652, 
	652, 652, 652, 652, 652, 652, 661, 662, 
	663, 652, 652, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 665, 666, 652, 
	657, 650, 657, 650, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 652, 667, 652, 
	660, 652, 650, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 669, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 650, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 668, 668, 668, 
	668, 668, 670, 668, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 650, 668, 668, 
	668, 668, 650, 668, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 650, 650, 650, 
	650, 650, 650, 650, 650, 650, 668, 668, 
	668, 668, 668, 650, 672, 671, 673, 671, 
	653, 674, 653, 653, 653, 674, 674, 674, 
	674, 674, 674, 674, 674, 674, 674, 674, 
	674, 674, 674, 674, 674, 674, 674, 653, 
	674, 675, 657, 676, 676, 657, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 657, 676, 677, 678, 679, 
	680, 657, 676, 657, 676, 657, 676, 657, 
	681, 676, 657, 676, 683, 657, 682, 682, 
	682, 682, 682, 682, 682, 682, 682, 682, 
	682, 682, 682, 682, 682, 682, 682, 682, 
	682, 682, 682, 682, 682, 682, 682, 682, 
	682, 682, 682, 682, 682, 682, 682, 682, 
	682, 682, 682, 682, 682, 682, 682, 682, 
	682, 682, 682, 682, 682, 682, 682, 682, 
	682, 682, 682, 682, 682, 682, 682, 682, 
	682, 682, 682, 682, 682, 657, 682, 657, 
	676, 657, 657, 676, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 669, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 684, 684, 
	684, 684, 684, 670, 684, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 684, 
	684, 684, 684, 664, 684, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 684, 
	684, 684, 684, 684, 664, 683, 682, 654, 
	682, 657, 676, 686, 685, 685, 685, 686, 
	685, 685, 685, 685, 687, 688, 687, 687, 
	687, 685, 685, 685, 685, 685, 685, 685, 
	685, 685, 685, 685, 685, 686, 685, 685, 
	685, 685, 685, 687, 685, 685, 689, 685, 
	94, 690, 685, 691, 685, 692, 94, 125, 
	693, 127, 94, 685, 685, 685, 685, 685, 
	685, 685, 685, 685, 685, 694, 685, 695, 
	125, 696, 697, 685, 685, 685, 685, 685, 
	685, 685, 685, 685, 685, 685, 685, 685, 
	685, 685, 685, 685, 685, 685, 685, 685, 
	685, 685, 685, 685, 685, 685, 125, 698, 
	125, 94, 685, 685, 685, 685, 685, 685, 
	685, 685, 685, 685, 699, 685, 685, 685, 
	685, 685, 685, 685, 685, 700, 685, 685, 
	701, 685, 702, 685, 685, 685, 138, 139, 
	685, 94, 685, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 687, 703, 687, 687, 
	687, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 687, 703, 703, 703, 703, 
	120, 121, 703, 122, 703, 123, 124, 125, 
	126, 127, 120, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 128, 703, 129, 
	125, 130, 131, 703, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 132, 133, 
	125, 94, 89, 703, 89, 89, 89, 89, 
	89, 89, 89, 89, 134, 89, 89, 89, 
	89, 89, 89, 89, 89, 135, 89, 89, 
	136, 89, 137, 89, 89, 89, 138, 139, 
	703, 94, 703, 89, 704, 705, 705, 705, 
	704, 705, 705, 705, 705, 125, 706, 125, 
	125, 125, 705, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 704, 705, 
	705, 705, 705, 705, 125, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 705, 705, 
	705, 125, 705, 125, 706, 125, 125, 125, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 125, 88, 88, 88, 88, 88, 
	94, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 125, 
	88, 125, 706, 125, 125, 125, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	125, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 125, 88, 707, 
	125, 706, 125, 125, 125, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 125, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 709, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 125, 708, 125, 706, 
	125, 125, 125, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 125, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 125, 125, 88, 710, 704, 125, 
	704, 712, 711, 714, 715, 714, 714, 714, 
	713, 713, 713, 713, 713, 713, 713, 713, 
	713, 713, 713, 713, 713, 713, 713, 713, 
	713, 713, 714, 713, 716, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 90, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 91, 
	704, 704, 704, 704, 90, 704, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	704, 704, 704, 704, 89, 704, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	704, 704, 704, 704, 704, 89, 717, 125, 
	706, 125, 125, 125, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 125, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 125, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 94, 704, 718, 719, 720, 721, 
	722, 723, 125, 706, 125, 125, 125, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 125, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 94, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 125, 704, 
	125, 711, 94, 724, 94, 724, 725, 724, 
	726, 726, 726, 726, 726, 726, 726, 726, 
	726, 97, 726, 97, 97, 97, 726, 726, 
	726, 726, 726, 726, 726, 726, 726, 726, 
	726, 726, 726, 726, 726, 726, 726, 726, 
	97, 726, 726, 726, 726, 98, 99, 726, 
	100, 726, 101, 102, 103, 104, 105, 98, 
	726, 726, 726, 726, 726, 726, 726, 726, 
	726, 726, 106, 726, 107, 103, 108, 109, 
	726, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 110, 111, 103, 112, 96, 
	726, 96, 96, 96, 96, 96, 96, 96, 
	96, 113, 96, 96, 96, 96, 96, 96, 
	96, 96, 114, 96, 96, 115, 96, 116, 
	96, 96, 96, 117, 118, 726, 112, 726, 
	96, 125, 724, 727, 724, 728, 724, 729, 
	724, 730, 164, 164, 164, 730, 164, 164, 
	164, 164, 731, 164, 731, 731, 731, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 730, 164, 164, 164, 164, 
	164, 731, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 164, 732, 164, 164, 
	166, 164, 166, 166, 166, 170, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 164, 164, 164, 164, 
	164, 166, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 733, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 164, 163, 163, 163, 
	163, 733, 163, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 163, 163, 163, 
	163, 166, 163, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 163, 163, 163, 
	163, 163, 166, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 167, 734, 167, 167, 
	167, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 167, 734, 734, 734, 734, 
	734, 734, 734, 168, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 734, 169, 
	734, 734, 166, 734, 166, 166, 166, 170, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 734, 734, 
	734, 734, 734, 166, 735, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 733, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 164, 
	734, 734, 734, 734, 733, 734, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	734, 734, 734, 734, 166, 734, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 736, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	734, 734, 734, 734, 734, 166, 171, 734, 
	738, 737, 737, 737, 738, 737, 737, 737, 
	737, 739, 737, 739, 739, 739, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 738, 737, 737, 737, 737, 737, 
	739, 737, 737, 740, 737, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 737, 741, 737, 737, 737, 
	737, 737, 737, 737, 742, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 743, 737, 739, 744, 739, 
	739, 739, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 739, 744, 745, 746, 
	747, 748, 750, 749, 751, 752, 749, 753, 
	755, 756, 756, 756, 755, 756, 756, 756, 
	756, 757, 758, 757, 757, 757, 756, 756, 
	756, 756, 756, 756, 756, 756, 756, 756, 
	756, 756, 755, 756, 756, 756, 756, 756, 
	757, 756, 756, 759, 756, 756, 756, 756, 
	756, 756, 756, 756, 756, 756, 756, 756, 
	756, 756, 756, 756, 756, 756, 756, 756, 
	756, 756, 756, 756, 756, 756, 756, 756, 
	756, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 756, 760, 756, 756, 754, 
	756, 754, 754, 754, 754, 754, 754, 754, 
	754, 761, 754, 754, 754, 754, 754, 754, 
	754, 754, 762, 754, 754, 763, 754, 764, 
	754, 754, 754, 756, 756, 756, 756, 756, 
	754, 765, 765, 765, 765, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 765, 765, 
	765, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 765, 765, 765, 765, 765, 
	765, 765, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 765, 765, 765, 765, 
	754, 765, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 765, 765, 765, 765, 
	765, 754, 757, 766, 757, 757, 757, 766, 
	766, 766, 766, 766, 766, 766, 766, 766, 
	766, 766, 766, 766, 766, 766, 766, 766, 
	766, 757, 766, 767, 768, 769, 770, 771, 
	773, 772, 774, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 775, 775, 775, 
	775, 775, 775, 775, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 775, 775, 
	775, 775, 754, 775, 754, 754, 754, 754, 
	754, 776, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 775, 775, 
	775, 775, 775, 754, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 775, 775, 
	775, 775, 775, 775, 775, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 775, 
	775, 775, 775, 754, 775, 754, 754, 754, 
	754, 777, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 775, 
	775, 775, 775, 775, 754, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 775, 
	775, 775, 775, 775, 775, 775, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	775, 775, 775, 775, 754, 775, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	778, 754, 754, 754, 754, 754, 754, 754, 
	775, 775, 775, 775, 775, 754, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	775, 775, 775, 775, 775, 775, 775, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 775, 775, 775, 775, 754, 775, 754, 
	754, 779, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 775, 775, 775, 775, 775, 754, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 775, 775, 775, 775, 775, 775, 775, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 775, 775, 775, 775, 754, 775, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 780, 754, 754, 754, 
	754, 754, 775, 775, 775, 775, 775, 754, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 775, 775, 775, 775, 775, 775, 
	775, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 775, 775, 775, 775, 754, 
	775, 754, 754, 754, 754, 776, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 775, 775, 775, 775, 775, 
	754, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 775, 775, 775, 775, 775, 
	775, 775, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 775, 775, 775, 775, 
	754, 775, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 781, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 775, 775, 775, 775, 
	775, 754, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 775, 775, 775, 775, 
	775, 775, 775, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 775, 775, 775, 
	775, 754, 775, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 782, 754, 
	754, 754, 754, 754, 754, 754, 783, 754, 
	754, 754, 754, 754, 754, 775, 775, 775, 
	775, 775, 754, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 775, 775, 775, 
	775, 775, 775, 775, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 775, 775, 
	775, 775, 754, 775, 754, 754, 754, 754, 
	784, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 775, 775, 
	775, 775, 775, 754, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 775, 775, 
	775, 775, 775, 775, 775, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 775, 
	775, 775, 775, 754, 775, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 785, 
	754, 754, 754, 754, 754, 754, 754, 775, 
	775, 775, 775, 775, 754, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 775, 
	775, 775, 775, 775, 775, 775, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	775, 775, 775, 775, 754, 775, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	776, 754, 754, 754, 754, 754, 754, 754, 
	775, 775, 775, 775, 775, 754, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	775, 775, 775, 775, 775, 775, 775, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 775, 775, 775, 775, 754, 775, 754, 
	754, 754, 754, 754, 754, 754, 754, 786, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 775, 775, 775, 775, 775, 754, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 775, 775, 775, 775, 775, 775, 775, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 775, 775, 775, 775, 754, 775, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 776, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 775, 775, 775, 775, 775, 754, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 775, 775, 775, 775, 775, 775, 
	775, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 775, 775, 775, 775, 754, 
	775, 754, 754, 754, 754, 754, 754, 754, 
	787, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 775, 775, 775, 775, 775, 
	754, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 775, 775, 775, 775, 775, 
	775, 775, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 775, 775, 775, 775, 
	754, 775, 754, 754, 754, 754, 754, 754, 
	754, 754, 788, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 775, 775, 775, 775, 
	775, 754, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 775, 775, 775, 775, 
	775, 775, 775, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 775, 775, 775, 
	775, 754, 775, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 780, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 775, 775, 775, 
	775, 775, 754, 790, 188, 188, 188, 790, 
	188, 188, 188, 188, 791, 792, 791, 791, 
	791, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 790, 188, 188, 
	188, 188, 188, 791, 793, 188, 794, 188, 
	795, 796, 188, 797, 188, 798, 799, 188, 
	800, 801, 802, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 803, 188, 804, 
	805, 806, 807, 188, 808, 809, 808, 808, 
	810, 808, 808, 808, 808, 808, 808, 808, 
	808, 808, 808, 808, 808, 808, 808, 808, 
	808, 808, 808, 808, 808, 808, 811, 812, 
	188, 813, 814, 188, 815, 816, 817, 818, 
	819, 820, 789, 789, 821, 789, 789, 789, 
	822, 823, 824, 789, 789, 825, 826, 827, 
	828, 789, 829, 789, 830, 789, 831, 832, 
	188, 813, 188, 789, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 242, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 177, 
	177, 244, 177, 245, 177, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 177, 
	177, 177, 177, 789, 177, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 177, 
	177, 177, 177, 177, 789, 834, 833, 833, 
	835, 833, 836, 838, 839, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 840, 837, 842, 841, 
	843, 844, 845, 834, 833, 791, 846, 791, 
	791, 791, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 791, 846, 848, 847, 
	850, 851, 850, 850, 850, 849, 849, 849, 
	849, 849, 849, 849, 849, 849, 849, 849, 
	849, 849, 849, 849, 849, 849, 849, 850, 
	849, 188, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 188, 852, 853, 854, 855, 856, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 858, 858, 858, 858, 858, 858, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 858, 860, 186, 186, 186, 860, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 860, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 186, 186, 
	186, 186, 186, 186, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 186, 862, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 188, 861, 
	863, 865, 864, 864, 864, 864, 864, 864, 
	864, 864, 864, 864, 864, 864, 864, 864, 
	864, 864, 864, 864, 188, 864, 188, 177, 
	866, 866, 866, 866, 866, 866, 866, 866, 
	866, 866, 861, 861, 861, 188, 861, 866, 
	866, 866, 866, 866, 866, 866, 866, 866, 
	866, 861, 861, 861, 188, 188, 861, 867, 
	852, 188, 852, 852, 868, 868, 868, 852, 
	868, 868, 868, 868, 868, 868, 868, 868, 
	868, 868, 868, 868, 868, 868, 868, 868, 
	868, 868, 868, 868, 868, 852, 868, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	870, 871, 852, 872, 191, 873, 871, 852, 
	852, 874, 875, 852, 875, 852, 191, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 876, 852, 877, 878, 879, 852, 880, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 881, 852, 852, 191, 869, 191, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 852, 882, 852, 875, 852, 869, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 884, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 883, 883, 883, 885, 883, 886, 
	883, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 883, 883, 883, 883, 869, 
	883, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 869, 869, 869, 869, 869, 
	869, 869, 869, 883, 883, 883, 883, 883, 
	869, 888, 887, 889, 891, 892, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 893, 890, 895, 
	896, 894, 897, 898, 899, 900, 887, 191, 
	883, 883, 191, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	191, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 883, 883, 883, 883, 
	883, 883, 883, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 883, 883, 883, 
	883, 190, 883, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 883, 883, 883, 
	883, 883, 190, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 883, 191, 883, 
	191, 883, 191, 883, 191, 901, 883, 191, 
	883, 191, 883, 191, 191, 883, 191, 883, 
	902, 903, 852, 904, 188, 852, 813, 188, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 188, 
	852, 188, 862, 852, 907, 906, 906, 906, 
	907, 906, 906, 906, 906, 908, 909, 908, 
	908, 908, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 907, 906, 
	906, 906, 906, 906, 908, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 906, 
	911, 906, 906, 910, 906, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 906, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 912, 912, 912, 912, 913, 
	912, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 912, 912, 912, 912, 912, 
	913, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 914, 914, 914, 914, 914, 
	914, 914, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 914, 914, 914, 914, 
	913, 914, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 914, 914, 914, 914, 
	914, 913, 915, 916, 918, 918, 918, 918, 
	918, 918, 918, 918, 917, 919, 919, 919, 
	919, 919, 919, 919, 919, 917, 917, 920, 
	920, 236, 236, 236, 920, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 920, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 237, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 921, 236, 922, 923, 
	924, 924, 236, 236, 236, 924, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 924, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	237, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 925, 236, 235, 
	924, 926, 927, 928, 928, 223, 223, 223, 
	928, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 928, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 224, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	929, 223, 924, 216, 216, 216, 924, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 924, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 930, 
	216, 920, 223, 223, 223, 920, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 920, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	224, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 225, 223, 920, 
	931, 931, 931, 920, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 920, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 932, 931, 933, 934, 934, 
	931, 931, 931, 934, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 934, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 931, 931, 931, 931, 931, 
	931, 931, 931, 935, 931, 934, 216, 216, 
	216, 934, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 934, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 930, 216, 936, 934, 934, 223, 
	223, 223, 934, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	934, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 224, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 225, 223, 937, 938, 938, 938, 
	937, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 937, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 939, 939, 939, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 939, 939, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 940, 
	938, 937, 941, 941, 941, 937, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 937, 941, 937, 942, 942, 
	942, 937, 942, 942, 942, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 937, 
	942, 937, 943, 943, 943, 937, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 937, 943, 937, 937, 941, 
	941, 941, 937, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	937, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	941, 941, 941, 941, 941, 941, 941, 944, 
	944, 944, 944, 944, 944, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 944, 
	944, 944, 944, 944, 944, 941, 937, 942, 
	942, 942, 937, 942, 942, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 942, 
	937, 942, 942, 942, 942, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	942, 942, 942, 942, 942, 942, 942, 945, 
	945, 945, 945, 945, 945, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 945, 
	945, 945, 945, 945, 945, 942, 937, 943, 
	943, 943, 937, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	937, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	943, 943, 943, 943, 943, 943, 943, 946, 
	946, 946, 946, 946, 946, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 946, 
	946, 946, 946, 946, 946, 943, 947, 950, 
	949, 949, 949, 950, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 950, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 949, 949, 949, 949, 949, 949, 949, 
	951, 951, 951, 951, 951, 951, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	951, 951, 951, 951, 951, 951, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 941, 949, 950, 952, 
	952, 952, 950, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	950, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 953, 953, 
	953, 953, 953, 953, 953, 953, 953, 953, 
	952, 952, 952, 952, 952, 952, 952, 953, 
	953, 953, 953, 953, 953, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 953, 
	953, 953, 953, 953, 953, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 954, 952, 950, 955, 955, 
	955, 950, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 950, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 955, 
	955, 955, 955, 955, 955, 955, 956, 956, 
	956, 956, 956, 956, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 956, 956, 
	956, 956, 956, 956, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 957, 955, 950, 958, 958, 958, 
	950, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 950, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 958, 958, 
	958, 958, 958, 958, 958, 959, 959, 959, 
	959, 959, 959, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 959, 959, 959, 
	959, 959, 959, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 950, 958, 950, 958, 958, 958, 950, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 950, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 958, 958, 958, 
	958, 958, 958, 958, 959, 959, 959, 959, 
	959, 959, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 959, 959, 959, 959, 
	959, 959, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	950, 958, 960, 950, 959, 959, 959, 950, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 950, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	960, 959, 950, 959, 959, 959, 950, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 950, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 948, 
	959, 948, 950, 956, 956, 956, 950, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 950, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 943, 
	956, 948, 943, 943, 943, 948, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 948, 943, 950, 952, 952, 
	952, 950, 952, 952, 952, 952, 961, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 950, 
	952, 952, 952, 952, 952, 961, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 952, 
	952, 952, 952, 952, 952, 952, 962, 962, 
	962, 962, 962, 962, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 962, 962, 
	962, 962, 962, 962, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 963, 952, 950, 958, 958, 958, 
	950, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 950, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 964, 964, 964, 964, 
	964, 964, 964, 964, 964, 964, 958, 958, 
	958, 958, 958, 958, 958, 964, 964, 964, 
	964, 964, 964, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 964, 964, 964, 
	964, 964, 964, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 950, 958, 950, 958, 958, 958, 950, 
	958, 958, 958, 958, 965, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 950, 958, 958, 
	958, 958, 958, 965, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 966, 966, 966, 966, 966, 
	966, 966, 966, 966, 966, 958, 958, 958, 
	958, 958, 958, 958, 966, 966, 966, 966, 
	966, 966, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 966, 966, 966, 966, 
	966, 966, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	967, 958, 950, 958, 958, 958, 950, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 950, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 964, 964, 964, 964, 964, 964, 
	964, 964, 964, 964, 958, 958, 958, 958, 
	958, 958, 958, 964, 964, 964, 964, 964, 
	964, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 964, 964, 964, 964, 964, 
	964, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 950, 
	958, 950, 958, 958, 958, 950, 958, 958, 
	958, 958, 965, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 950, 958, 958, 958, 958, 
	958, 965, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 958, 958, 958, 958, 958, 
	958, 958, 968, 968, 968, 968, 968, 968, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 968, 968, 968, 968, 968, 968, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 967, 958, 
	950, 958, 958, 958, 950, 958, 958, 958, 
	958, 965, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 950, 958, 958, 958, 958, 958, 
	965, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 958, 958, 958, 958, 958, 958, 
	958, 969, 969, 969, 969, 969, 969, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 969, 969, 969, 969, 969, 969, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 967, 958, 950, 
	958, 958, 958, 950, 958, 958, 958, 958, 
	965, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 950, 958, 958, 958, 958, 958, 965, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 970, 
	970, 970, 970, 970, 970, 970, 970, 970, 
	970, 958, 958, 958, 958, 958, 958, 958, 
	970, 970, 970, 970, 970, 970, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	970, 970, 970, 970, 970, 970, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 967, 958, 950, 958, 
	958, 958, 950, 958, 958, 958, 958, 965, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	950, 958, 958, 958, 958, 958, 965, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	958, 958, 958, 958, 958, 958, 958, 971, 
	971, 971, 971, 971, 971, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 971, 
	971, 971, 971, 971, 971, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 967, 958, 950, 958, 958, 
	958, 950, 958, 958, 958, 958, 965, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 950, 
	958, 958, 958, 958, 958, 965, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 958, 
	958, 958, 958, 958, 958, 958, 972, 972, 
	972, 972, 972, 972, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 972, 972, 
	972, 972, 972, 972, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 967, 958, 950, 958, 958, 958, 
	950, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 950, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 958, 958, 
	958, 958, 958, 958, 958, 972, 972, 972, 
	972, 972, 972, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 972, 972, 972, 
	972, 972, 972, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 960, 958, 973, 950, 955, 955, 955, 
	950, 955, 955, 955, 955, 965, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 950, 955, 
	955, 955, 955, 955, 965, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 955, 955, 
	955, 955, 955, 955, 955, 968, 968, 968, 
	968, 968, 968, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 968, 968, 968, 
	968, 968, 968, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 967, 955, 974, 975, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 976, 
	976, 976, 976, 976, 976, 976, 977, 977, 
	977, 977, 977, 977, 976, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 977, 977, 
	977, 977, 977, 977, 976, 976, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 242, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	243, 177, 177, 244, 177, 245, 177, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 177, 177, 177, 177, 241, 177, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 177, 177, 177, 177, 177, 241, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	242, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 243, 852, 852, 244, 852, 245, 852, 
	241, 241, 241, 241, 978, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 852, 852, 852, 852, 241, 852, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 852, 852, 852, 852, 852, 241, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 242, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 243, 852, 852, 244, 852, 245, 
	852, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 979, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 852, 852, 852, 852, 241, 
	852, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 852, 852, 852, 852, 852, 
	241, 980, 981, 852, 847, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 983, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 984, 985, 789, 789, 789, 
	789, 789, 986, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 987, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 988, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	989, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 990, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 991, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 992, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 993, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 994, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 995, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 996, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 997, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 993, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 998, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 997, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 999, 789, 1000, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 1001, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	1002, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 995, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 995, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 1003, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 1004, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 789, 
	789, 789, 1005, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 1006, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 995, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 1007, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	1008, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 995, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 1009, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 1010, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 1011, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 789, 
	995, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 1012, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	1002, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 1013, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 995, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	789, 789, 789, 789, 789, 995, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 1014, 789, 1015, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 1016, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 995, 
	789, 789, 789, 1013, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 995, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 1017, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 1018, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 1011, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 1019, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 824, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 1009, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 995, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 789, 789, 1020, 
	789, 789, 789, 789, 789, 789, 789, 995, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 1021, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 1022, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 1023, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 1011, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 1024, 789, 789, 789, 1025, 
	789, 789, 789, 789, 789, 1026, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 1026, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 995, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 995, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 1027, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 1028, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 1029, 1030, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 995, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	1031, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 1032, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	789, 789, 789, 789, 1033, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1036, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1037, 1034, 1034, 1038, 1034, 1039, 
	1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1034, 1034, 1034, 1034, 1035, 
	1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1034, 1034, 1034, 1034, 1034, 
	1035, 838, 1040, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 840, 837, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 1041, 789, 
	789, 1042, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 995, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	1006, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	789, 789, 789, 789, 1043, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 1044, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 1013, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 1045, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 824, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 789, 
	789, 789, 789, 1046, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 1047, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 1006, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 1011, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 1048, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	789, 789, 789, 1049, 789, 789, 789, 789, 
	789, 789, 789, 1050, 789, 789, 789, 789, 
	789, 789, 789, 1051, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 1013, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 789, 1052, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 1053, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 1020, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 1054, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 242, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 243, 
	982, 982, 244, 982, 245, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 789, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 1020, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	982, 982, 982, 982, 982, 789, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 242, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	243, 982, 982, 244, 982, 245, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 789, 982, 789, 
	789, 789, 789, 789, 789, 789, 1055, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 982, 982, 982, 982, 982, 789, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	242, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 243, 982, 982, 244, 982, 245, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 789, 982, 
	789, 789, 789, 789, 1006, 789, 789, 789, 
	1056, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 982, 982, 982, 982, 982, 789, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 242, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 243, 982, 982, 244, 982, 245, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 789, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 1057, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 982, 982, 982, 982, 982, 
	789, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 242, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 243, 982, 982, 244, 982, 
	245, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	789, 982, 789, 789, 789, 789, 1020, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 982, 982, 982, 982, 
	982, 789, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 242, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 243, 982, 982, 244, 
	982, 245, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 789, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 1058, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 982, 982, 982, 
	982, 982, 789, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 242, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 243, 982, 982, 
	244, 982, 245, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 789, 982, 789, 789, 789, 789, 
	1059, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 982, 982, 
	982, 982, 982, 789, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 242, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 243, 982, 
	982, 244, 982, 245, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 789, 982, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 789, 
	1000, 789, 789, 789, 789, 789, 789, 789, 
	789, 789, 789, 789, 789, 789, 789, 982, 
	982, 982, 982, 982, 789, 1060, 188, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 862, 852, 1062, 
	1063, 1063, 1063, 1062, 1063, 1063, 1063, 1063, 
	1064, 1065, 1064, 1064, 1064, 1063, 1063, 1063, 
	1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 
	1063, 1062, 1063, 1063, 1063, 1063, 1063, 1064, 
	1063, 1063, 1066, 1063, 1063, 1063, 1063, 1063, 
	1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 
	1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 
	1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 
	1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 
	1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 
	1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 
	1061, 1061, 1063, 1067, 1063, 1063, 1061, 1063, 
	1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 
	1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 
	1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 
	1061, 1061, 1063, 1063, 1063, 1063, 1063, 1061, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 251, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 252, 1068, 1068, 1068, 1068, 251, 
	1068, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 1068, 1068, 1068, 1068, 250, 
	1068, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 1068, 1068, 1068, 1068, 1068, 
	250, 1064, 1069, 1064, 1064, 1064, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1064, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 
	1068, 1076, 1078, 1079, 1079, 1079, 1078, 1079, 
	1079, 1079, 1079, 1080, 1081, 1080, 1080, 1080, 
	1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 
	1079, 1079, 1079, 1079, 1078, 1079, 1079, 1079, 
	1079, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 
	1087, 1083, 1088, 1089, 1090, 1086, 1091, 1092, 
	1093, 1086, 1094, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1096, 1097, 1098, 1099, 
	1100, 1101, 1102, 1103, 1104, 1103, 1103, 1105, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1106, 1107, 1108, 
	1086, 1109, 1083, 1110, 1111, 1112, 1113, 1114, 
	1115, 1077, 1077, 1116, 1077, 1077, 1077, 1117, 
	1118, 1119, 1077, 1077, 1120, 1121, 1122, 1123, 
	1077, 1124, 1077, 1125, 1077, 1126, 1127, 1128, 
	1086, 1079, 1077, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 1129, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 260, 260, 260, 
	260, 260, 1130, 260, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 260, 260, 
	260, 260, 1077, 260, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 260, 260, 
	260, 260, 260, 1077, 1132, 1131, 1133, 1134, 
	1080, 1135, 1080, 1080, 1080, 1135, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1080, 
	1135, 1136, 1138, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1138, 1137, 1139, 1140, 1141, 
	1142, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 255, 255, 1143, 255, 1143, 255, 
	255, 1143, 1143, 255, 255, 255, 1144, 255, 
	255, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 
	1145, 1145, 1145, 255, 255, 255, 255, 255, 
	255, 255, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 1143, 255, 1143, 1143, 
	263, 255, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 1143, 1143, 1143, 255, 
	1143, 263, 1146, 1146, 1146, 1146, 1146, 1146, 
	1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 
	1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 
	1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 
	1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 
	1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 
	1146, 1146, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 1146, 1146, 1146, 1146, 
	1146, 1146, 1146, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 1146, 1146, 1146, 
	1146, 263, 1146, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 1146, 1146, 1146, 
	1146, 1146, 263, 1145, 1145, 1145, 1145, 1145, 
	1145, 1145, 1145, 1145, 1145, 1146, 1147, 1137, 
	1086, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1147, 
	1137, 1148, 1149, 1086, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1147, 1137, 
	1147, 1150, 1137, 1152, 1151, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 1151, 
	1091, 1153, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 1154, 1154, 1154, 1154, 
	1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 
	1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 
	1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 
	1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 
	1154, 1156, 1154, 1154, 1154, 1154, 1154, 1155, 
	1154, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 1154, 1154, 1154, 1154, 1154, 
	1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 
	1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 
	1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 
	1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 
	257, 1154, 1158, 1157, 1159, 1159, 1159, 1159, 
	1159, 1159, 1159, 1159, 1159, 1159, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1160, 1157, 
	1161, 1162, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1163, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1164, 1157, 1157, 1157, 
	1157, 1157, 1157, 1165, 1157, 1157, 1160, 1157, 
	1161, 1162, 1157, 1157, 1157, 1166, 1157, 1157, 
	1157, 1157, 1157, 1163, 1157, 1157, 1167, 1157, 
	1157, 1157, 1157, 1157, 1164, 1157, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 
	1168, 1168, 1168, 1169, 1168, 1168, 1168, 1168, 
	1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 
	1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 
	1168, 1168, 1168, 1168, 1168, 1170, 1168, 1168, 
	1168, 1168, 1168, 1169, 1168, 1168, 1168, 1171, 
	1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 
	1172, 1168, 1173, 260, 1173, 260, 260, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 260, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 1174, 1174, 1174, 1174, 
	1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 
	1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 
	1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 
	1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 
	1174, 1173, 1174, 1174, 1174, 1174, 1174, 1174, 
	1174, 1174, 1174, 1175, 1174, 1176, 1178, 1177, 
	1179, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 
	1159, 1159, 1159, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1165, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1166, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1167, 1157, 1180, 1180, 1180, 
	1180, 1180, 1180, 1180, 1180, 1180, 1180, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1181, 1157, 1157, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1166, 1157, 
	1157, 1157, 1157, 1157, 1157, 1157, 1157, 1167, 
	1157, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 
	1183, 1183, 1183, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1184, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1186, 1182, 1183, 1183, 1183, 
	1183, 1183, 1183, 1183, 1183, 1183, 1183, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1187, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1185, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 
	1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1186, 1182, 1188, 1190, 1189, 1191, 
	1193, 1193, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1194, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1195, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1196, 1192, 1197, 1197, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1198, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1185, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 
	1197, 1197, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1187, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1186, 1182, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1201, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1202, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1203, 1199, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1204, 1204, 1204, 1204, 1204, 1204, 
	1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 
	1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 
	1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 
	1204, 1204, 1204, 1204, 1204, 1204, 1204, 1206, 
	1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 
	1204, 1207, 1204, 1204, 1204, 1204, 1204, 1204, 
	1204, 1204, 1208, 1204, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1209, 1209, 
	1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210, 
	1210, 1210, 1210, 1209, 1209, 1209, 1209, 1209, 
	1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 
	1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 
	1209, 1209, 1209, 1211, 1209, 1210, 1210, 1210, 
	1210, 1210, 1210, 1209, 1209, 1212, 1209, 1209, 
	1209, 1209, 1209, 1209, 1209, 1209, 1213, 1209, 
	1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 
	1214, 1214, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1214, 1214, 1214, 1214, 1214, 1214, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1215, 
	1182, 1214, 1214, 1214, 1214, 1214, 1214, 1182, 
	1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1186, 1182, 1214, 1214, 1214, 1214, 
	1214, 1214, 1214, 1214, 1214, 1214, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1214, 1214, 1214, 
	1214, 1214, 1214, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1187, 1182, 1214, 1214, 1214, 
	1214, 1214, 1214, 1182, 1182, 1185, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 
	1217, 1216, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1219, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1220, 1216, 1216, 1216, 1216, 1216, 1219, 
	1216, 1216, 1216, 1221, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1222, 1216, 1223, 1223, 
	1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1224, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1221, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1222, 1216, 1225, 1182, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1226, 1226, 1226, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1227, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1228, 1182, 1182, 1182, 1182, 
	1182, 1227, 1182, 1182, 1182, 1185, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 
	1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1187, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1186, 1182, 1229, 1153, 1086, 1230, 
	1137, 1138, 1137, 1231, 1138, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1138, 1153, 1138, 1137, 
	1138, 1086, 1137, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1143, 1143, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 1143, 1143, 1143, 
	1143, 1143, 1143, 1232, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 1143, 1143, 
	1143, 1143, 263, 1143, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 1143, 1143, 
	1143, 1143, 1143, 263, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 1129, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1233, 260, 
	260, 260, 260, 1130, 260, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 260, 
	260, 260, 260, 1103, 260, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 260, 
	260, 260, 260, 260, 1103, 1234, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1129, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1233, 1235, 1235, 1235, 1235, 1130, 1235, 1103, 
	1103, 1103, 1103, 1236, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1235, 1235, 1235, 1235, 1103, 1235, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1235, 1235, 1235, 1235, 1235, 1103, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1129, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1233, 1235, 1235, 1235, 1235, 1130, 1235, 
	1103, 1103, 1103, 1103, 1103, 1103, 1237, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1235, 1235, 1235, 1235, 1103, 1235, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1235, 1235, 1235, 1235, 1235, 1103, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1129, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1233, 1235, 1235, 1235, 1235, 1130, 
	1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1238, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1235, 1235, 1235, 1235, 1103, 
	1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1235, 1235, 1235, 1235, 1235, 
	1103, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1129, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1233, 1235, 1235, 1235, 1235, 
	1130, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1239, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 
	1103, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 
	1235, 1103, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1129, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1233, 1235, 1235, 1235, 
	1235, 1130, 1235, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1240, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 
	1235, 1103, 1235, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 
	1235, 1235, 1103, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1129, 1235, 1235, 1235, 
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 
	1235, 1235, 1235, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1233, 1235, 1235, 
	1235, 1235, 1130, 1235, 1103, 1103, 1103, 1239, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 
	1235, 1235, 1103, 1235, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 
	1235, 1235, 1235, 1103, 1241, 1243, 1242, 1244, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1246, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1247, 1248, 
	1077, 1077, 1077, 1077, 1077, 1249, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1250, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1251, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1252, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1253, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1254, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1255, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1256, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1257, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1258, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1259, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1260, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1261, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1262, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1263, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1264, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1260, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1265, 1077, 
	1266, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1267, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1268, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1269, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1270, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1271, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1272, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1273, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1274, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1270, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1275, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1276, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1277, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1278, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1279, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1280, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1270, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1281, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1282, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1283, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1284, 1284, 1284, 1284, 
	1284, 1284, 1284, 1284, 1284, 265, 266, 265, 
	265, 265, 1284, 1284, 1284, 1284, 1284, 1284, 
	1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 
	1284, 1284, 1284, 1284, 265, 1129, 1284, 267, 
	1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 
	1284, 1284, 1284, 1284, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1284, 1284, 
	268, 1284, 1284, 1130, 1284, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1284, 
	269, 1284, 1284, 1077, 1284, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1284, 
	1284, 1284, 1284, 1284, 1077, 282, 283, 282, 
	282, 282, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 282, 281, 281, 284, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	287, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	286, 281, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1286, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1287, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1288, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1289, 1289, 1289, 1289, 
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 
	1289, 1289, 1289, 1289, 1289, 1129, 1289, 1289, 
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 
	1289, 1289, 1289, 1289, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1289, 1289, 
	1289, 1289, 1289, 1130, 1289, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1289, 
	1289, 1289, 1289, 1077, 1289, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1290, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1289, 
	1289, 1289, 1289, 1289, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1291, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1292, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1293, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1294, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1295, 1077, 1296, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1297, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1270, 1077, 1077, 1077, 1298, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1077, 1270, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1263, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1299, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1300, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1280, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1301, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1119, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1302, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1303, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1263, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1270, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1304, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1270, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1305, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1306, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1307, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1280, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1308, 
	1077, 1077, 1077, 1309, 1077, 1077, 1077, 1077, 
	1077, 1310, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1311, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1277, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1263, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1312, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1313, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1314, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1315, 1316, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1263, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1317, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1318, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1304, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1319, 
	1077, 1077, 1320, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1263, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1321, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1277, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1322, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1323, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1324, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1263, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1325, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1326, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1312, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1327, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1328, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1274, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1303, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1329, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1330, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1331, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1332, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1333, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1269, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1334, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1335, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1304, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1336, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1304, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1337, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 
	1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 
	1077, 1274, 1077, 1077, 1077, 1338, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 
	1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1339, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 
	1077, 1077, 1077, 1304, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1340, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 
	1245, 1077, 1077, 1077, 1077, 1341, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 
	1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1342, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 
	1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1077, 1245, 1077, 1077, 1077, 1312, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 
	1245, 1245, 1077, 1343, 1147, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 
	1137, 1137, 1137, 1086, 1137, 1344, 1346, 1345, 
	1346, 1346, 1346, 1345, 1345, 1345, 1345, 1345, 
	1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 
	1345, 1345, 1345, 1345, 1345, 1346, 1345, 1345, 
	1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 
	1345, 1345, 1345, 1347, 1345, 291, 1348, 291, 
	291, 291, 1348, 1348, 1348, 1348, 1348, 1348, 
	1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 
	1348, 1348, 1348, 1348, 291, 1348, 1348, 1348, 
	1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 
	1348, 1348, 292, 1348, 1348, 293, 293, 293, 
	1348, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 1348, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 1348, 293, 1350, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1351, 
	1349, 1350, 1349, 1350, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1353, 1349, 
	1350, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1354, 1349, 1350, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1355, 1349, 1357, 1355, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	156, 2, 3, 4, 162, 6, 7, 8, 
	9, 10, 156, 156, 165, 168, 165, 12, 
	169, 14, 165, 176, 177, 180, 181, 187, 
	182, 183, 184, 19, 185, 186, 189, 191, 
	192, 193, 194, 195, 25, 18, 178, 179, 
	27, 229, 230, 232, 234, 232, 30, 235, 
	32, 232, 242, 243, 246, 247, 253, 248, 
	249, 250, 37, 251, 252, 255, 257, 258, 
	259, 260, 261, 43, 36, 244, 245, 45, 
	295, 296, 306, 305, 0, 48, 307, 308, 
	50, 309, 310, 310, 422, 52, 53, 422, 
	451, 54, 55, 451, 451, 455, 455, 59, 
	54, 60, 453, 454, 456, 457, 455, 451, 
	458, 459, 461, 56, 57, 462, 463, 58, 
	455, 61, 62, 67, 74, 465, 466, 60, 
	453, 454, 456, 457, 455, 451, 458, 459, 
	461, 56, 57, 462, 463, 58, 61, 62, 
	67, 74, 465, 466, 464, 63, 64, 65, 
	66, 68, 69, 72, 70, 71, 73, 75, 
	76, 451, 78, 79, 80, 82, 85, 83, 
	84, 86, 88, 481, 481, 481, 482, 90, 
	484, 91, 485, 92, 482, 90, 484, 91, 
	485, 519, 519, 519, 95, 96, 97, 98, 
	531, 519, 519, 536, 519, 519, 558, 519, 
	102, 559, 565, 105, 108, 110, 112, 113, 
	114, 108, 109, 569, 109, 569, 111, 519, 
	576, 577, 578, 116, 122, 127, 601, 129, 
	581, 582, 519, 585, 586, 592, 587, 588, 
	589, 120, 590, 591, 594, 596, 597, 598, 
	599, 600, 126, 119, 583, 584, 128, 634, 
	635, 130, 521, 93, 523, 528, 132, 133, 
	637, 731, 135, 136, 137, 731, 739, 739, 
	739, 140, 761, 760, 739, 763, 765, 750, 
	797, 146, 147, 148, 152, 153, 146, 147, 
	148, 152, 153, 149, 149, 147, 148, 150, 
	151, 149, 149, 147, 148, 150, 151, 844, 
	147, 739, 913, 154, 155, 913, 156, 156, 
	157, 158, 159, 161, 163, 164, 156, 156, 
	156, 160, 156, 160, 156, 1, 156, 156, 
	156, 5, 165, 165, 166, 165, 167, 170, 
	165, 165, 11, 13, 165, 165, 165, 171, 
	172, 173, 15, 21, 26, 196, 28, 165, 
	165, 165, 174, 175, 165, 16, 165, 165, 
	165, 17, 165, 165, 165, 20, 188, 190, 
	22, 165, 165, 23, 24, 165, 197, 201, 
	205, 198, 199, 200, 202, 203, 204, 165, 
	165, 206, 210, 216, 207, 214, 215, 208, 
	212, 213, 209, 211, 165, 217, 227, 228, 
	218, 219, 220, 226, 221, 222, 223, 224, 
	225, 165, 165, 165, 165, 231, 232, 232, 
	232, 233, 236, 232, 29, 31, 232, 232, 
	232, 237, 238, 239, 33, 39, 44, 262, 
	46, 232, 232, 232, 240, 241, 232, 34, 
	232, 232, 232, 35, 232, 232, 232, 38, 
	254, 256, 40, 232, 232, 41, 42, 232, 
	263, 267, 271, 264, 265, 266, 268, 269, 
	270, 232, 232, 272, 276, 282, 273, 280, 
	281, 274, 278, 279, 275, 277, 232, 283, 
	293, 294, 284, 285, 286, 292, 287, 288, 
	289, 290, 291, 232, 232, 232, 232, 297, 
	298, 298, 299, 298, 300, 298, 298, 298, 
	301, 301, 301, 302, 301, 301, 301, 303, 
	304, 303, 47, 49, 305, 305, 305, 311, 
	310, 310, 312, 313, 314, 315, 317, 310, 
	320, 321, 322, 323, 324, 326, 328, 329, 
	330, 334, 336, 337, 338, 354, 359, 366, 
	371, 378, 385, 388, 389, 393, 387, 397, 
	405, 409, 411, 416, 418, 421, 310, 310, 
	310, 310, 310, 310, 316, 310, 316, 310, 
	318, 51, 319, 310, 310, 310, 325, 327, 
	310, 331, 332, 333, 329, 335, 310, 339, 
	340, 349, 352, 341, 342, 343, 344, 345, 
	346, 347, 348, 311, 350, 351, 353, 355, 
	358, 356, 357, 360, 363, 361, 362, 364, 
	365, 367, 369, 368, 370, 372, 373, 310, 
	374, 375, 376, 377, 310, 379, 382, 380, 
	381, 383, 384, 386, 390, 391, 392, 394, 
	396, 395, 398, 399, 400, 402, 401, 403, 
	404, 406, 407, 408, 410, 412, 413, 414, 
	415, 417, 419, 420, 423, 422, 422, 424, 
	425, 427, 422, 422, 422, 426, 422, 426, 
	428, 422, 430, 429, 429, 434, 435, 436, 
	437, 429, 439, 440, 441, 442, 444, 446, 
	447, 448, 449, 450, 429, 431, 433, 429, 
	432, 429, 429, 429, 429, 429, 438, 429, 
	438, 443, 429, 445, 429, 451, 451, 452, 
	467, 468, 454, 470, 471, 458, 472, 473, 
	474, 451, 475, 477, 478, 479, 480, 451, 
	451, 451, 451, 451, 451, 455, 460, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	469, 451, 469, 451, 451, 476, 451, 77, 
	81, 87, 481, 483, 486, 89, 481, 481, 
	482, 487, 487, 488, 489, 491, 493, 494, 
	487, 487, 490, 487, 490, 487, 492, 487, 
	487, 487, 496, 495, 495, 497, 498, 499, 
	501, 503, 504, 509, 516, 495, 495, 495, 
	495, 500, 495, 500, 495, 502, 495, 495, 
	496, 505, 506, 507, 508, 510, 511, 514, 
	512, 513, 515, 517, 518, 520, 519, 529, 
	530, 532, 533, 535, 537, 538, 539, 541, 
	542, 543, 545, 546, 568, 571, 572, 573, 
	637, 638, 639, 640, 641, 540, 643, 659, 
	664, 671, 676, 678, 684, 687, 688, 692, 
	686, 696, 707, 711, 714, 722, 726, 729, 
	730, 519, 93, 522, 519, 519, 524, 526, 
	527, 519, 525, 519, 519, 519, 519, 519, 
	94, 519, 519, 519, 519, 519, 534, 519, 
	534, 519, 519, 99, 519, 519, 100, 519, 
	519, 540, 519, 544, 519, 547, 557, 519, 
	101, 560, 561, 562, 519, 563, 103, 566, 
	104, 106, 567, 519, 548, 550, 556, 519, 
	549, 519, 519, 551, 554, 555, 519, 552, 
	553, 519, 519, 519, 519, 564, 107, 570, 
	519, 519, 519, 519, 519, 519, 574, 115, 
	519, 575, 519, 519, 519, 519, 579, 580, 
	519, 117, 519, 519, 519, 118, 519, 519, 
	519, 121, 593, 595, 123, 519, 519, 124, 
	125, 519, 602, 606, 610, 603, 604, 605, 
	607, 608, 609, 519, 519, 611, 615, 621, 
	612, 619, 620, 613, 617, 618, 614, 616, 
	519, 622, 632, 633, 623, 624, 625, 631, 
	626, 627, 628, 629, 630, 519, 519, 519, 
	519, 636, 131, 134, 519, 642, 519, 644, 
	645, 654, 657, 646, 647, 648, 649, 650, 
	651, 652, 653, 520, 655, 656, 658, 660, 
	663, 661, 662, 665, 668, 666, 667, 669, 
	670, 672, 674, 673, 675, 677, 679, 681, 
	680, 682, 683, 685, 520, 689, 690, 691, 
	693, 695, 694, 697, 698, 699, 704, 700, 
	701, 702, 519, 520, 521, 93, 703, 528, 
	526, 705, 706, 708, 709, 710, 712, 713, 
	715, 716, 717, 720, 718, 719, 721, 723, 
	724, 725, 727, 728, 519, 732, 731, 731, 
	733, 734, 735, 737, 731, 731, 731, 731, 
	736, 731, 736, 738, 731, 740, 739, 739, 
	744, 745, 746, 739, 747, 749, 752, 753, 
	754, 755, 756, 739, 757, 758, 762, 785, 
	789, 739, 790, 792, 794, 739, 795, 796, 
	798, 802, 804, 805, 739, 807, 825, 830, 
	837, 845, 852, 859, 864, 865, 869, 863, 
	874, 884, 890, 893, 902, 906, 910, 911, 
	912, 741, 743, 739, 742, 739, 739, 739, 
	739, 739, 739, 739, 748, 739, 748, 739, 
	138, 751, 739, 739, 739, 739, 739, 739, 
	759, 739, 739, 139, 141, 739, 142, 769, 
	777, 780, 764, 781, 782, 770, 774, 775, 
	739, 764, 142, 766, 767, 143, 739, 766, 
	739, 739, 768, 739, 771, 773, 739, 771, 
	772, 774, 775, 773, 739, 739, 776, 739, 
	739, 778, 773, 774, 775, 778, 779, 739, 
	771, 773, 774, 775, 739, 771, 773, 774, 
	775, 739, 783, 773, 774, 775, 783, 784, 
	739, 142, 785, 764, 786, 774, 775, 787, 
	773, 142, 787, 764, 788, 739, 791, 793, 
	144, 145, 739, 739, 799, 800, 801, 796, 
	803, 739, 739, 806, 739, 739, 808, 809, 
	818, 823, 810, 811, 812, 813, 814, 815, 
	816, 817, 740, 819, 820, 821, 822, 740, 
	824, 826, 829, 827, 828, 740, 740, 831, 
	834, 832, 833, 835, 836, 740, 838, 840, 
	839, 841, 842, 843, 739, 739, 846, 740, 
	847, 739, 848, 849, 850, 851, 743, 853, 
	856, 854, 855, 857, 858, 860, 861, 862, 
	740, 866, 867, 868, 870, 872, 873, 871, 
	740, 875, 876, 877, 880, 878, 879, 881, 
	882, 883, 885, 887, 886, 888, 889, 891, 
	892, 894, 895, 897, 900, 896, 898, 899, 
	901, 903, 904, 905, 907, 908, 909, 739, 
	739, 913, 914, 915, 913, 917, 916, 918, 
	916, 919, 920, 921, 916, 916
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 6, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 11, 0, 7, 0, 8, 0, 7, 
	0, 0, 0, 0, 8, 7, 0, 8, 
	0, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 0, 0, 
	0, 0, 13, 14, 15, 0, 0, 16, 
	17, 0, 0, 18, 19, 20, 21, 22, 
	23, 23, 24, 25, 23, 26, 25, 27, 
	25, 23, 23, 24, 23, 28, 23, 23, 
	29, 23, 23, 23, 23, 23, 23, 0, 
	30, 31, 0, 32, 31, 33, 31, 0, 
	0, 30, 0, 34, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 36, 37, 38, 39, 0, 
	0, 0, 39, 22, 40, 23, 23, 23, 
	40, 41, 42, 43, 0, 0, 0, 0, 
	0, 44, 45, 0, 46, 47, 0, 48, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 49, 49, 50, 0, 22, 0, 51, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	0, 7, 53, 0, 8, 0, 7, 0, 
	0, 0, 0, 8, 7, 0, 8, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 55, 0, 0, 0, 56, 57, 58, 
	59, 0, 7, 7, 60, 61, 61, 0, 
	0, 0, 22, 0, 0, 0, 23, 62, 
	23, 23, 23, 63, 64, 65, 64, 64, 
	64, 0, 66, 67, 66, 66, 66, 68, 
	69, 70, 71, 0, 0, 72, 75, 76, 
	0, 22, 0, 7, 0, 7, 77, 78, 
	79, 63, 80, 0, 81, 0, 82, 83, 
	84, 0, 85, 86, 0, 87, 7, 7, 
	88, 89, 0, 0, 90, 91, 92, 52, 
	52, 52, 52, 52, 52, 52, 52, 93, 
	94, 95, 0, 0, 96, 0, 97, 98, 
	99, 0, 100, 101, 102, 0, 7, 0, 
	0, 103, 104, 0, 22, 105, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 106, 
	107, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 108, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 109, 110, 111, 112, 0, 113, 114, 
	115, 7, 7, 116, 0, 0, 117, 118, 
	119, 52, 52, 52, 52, 52, 52, 52, 
	52, 120, 121, 122, 0, 0, 123, 0, 
	124, 125, 126, 0, 127, 128, 129, 0, 
	7, 0, 0, 130, 131, 0, 22, 132, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 133, 134, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 135, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 136, 137, 138, 139, 0, 
	140, 141, 0, 142, 0, 143, 144, 145, 
	146, 147, 148, 0, 149, 150, 151, 152, 
	0, 153, 0, 0, 154, 155, 156, 157, 
	158, 159, 0, 22, 0, 0, 7, 160, 
	0, 0, 0, 0, 0, 0, 0, 161, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 162, 163, 
	164, 165, 166, 167, 63, 168, 0, 169, 
	0, 0, 0, 170, 171, 172, 0, 0, 
	173, 0, 0, 0, 174, 0, 175, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 174, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	0, 0, 0, 0, 177, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 7, 178, 179, 0, 
	0, 0, 180, 181, 182, 63, 183, 0, 
	22, 184, 0, 185, 186, 0, 22, 0, 
	0, 187, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 188, 0, 0, 189, 
	0, 190, 191, 192, 193, 194, 63, 195, 
	0, 0, 196, 0, 197, 198, 199, 200, 
	22, 0, 21, 0, 0, 21, 0, 0, 
	0, 201, 0, 0, 7, 7, 7, 202, 
	203, 204, 205, 206, 207, 208, 0, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	63, 218, 0, 219, 220, 221, 222, 0, 
	0, 0, 223, 7, 7, 0, 224, 225, 
	226, 227, 228, 0, 0, 0, 0, 0, 
	229, 230, 63, 231, 0, 232, 22, 233, 
	234, 235, 236, 237, 238, 0, 22, 0, 
	0, 0, 0, 0, 0, 239, 240, 241, 
	242, 63, 243, 0, 244, 22, 245, 246, 
	247, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 249, 0, 
	8, 0, 0, 7, 250, 0, 0, 0, 
	0, 0, 0, 7, 7, 0, 251, 7, 
	251, 251, 251, 0, 0, 251, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 0, 
	251, 252, 253, 0, 254, 255, 0, 54, 
	0, 256, 0, 257, 258, 259, 260, 261, 
	23, 262, 263, 264, 265, 266, 63, 267, 
	0, 268, 269, 0, 270, 271, 0, 272, 
	273, 250, 274, 0, 275, 0, 0, 276, 
	0, 0, 0, 0, 277, 0, 0, 0, 
	0, 0, 0, 278, 0, 0, 0, 279, 
	0, 280, 281, 0, 0, 0, 282, 0, 
	0, 283, 284, 285, 286, 0, 0, 0, 
	287, 288, 289, 290, 291, 292, 0, 0, 
	293, 0, 294, 295, 296, 297, 0, 0, 
	298, 0, 299, 300, 301, 0, 302, 303, 
	304, 0, 7, 0, 0, 305, 306, 0, 
	22, 307, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 308, 309, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	310, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 311, 312, 313, 
	314, 0, 0, 0, 315, 22, 316, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 54, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 317, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 318, 319, 320, 321, 322, 322, 321, 
	318, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 323, 7, 324, 325, 
	0, 22, 0, 0, 326, 327, 328, 329, 
	63, 330, 0, 22, 331, 332, 333, 334, 
	0, 22, 0, 335, 0, 7, 0, 0, 
	0, 0, 0, 336, 0, 0, 337, 337, 
	0, 338, 0, 0, 0, 339, 7, 340, 
	340, 340, 0, 0, 341, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 342, 343, 0, 344, 345, 346, 
	347, 348, 349, 350, 63, 351, 0, 352, 
	0, 0, 353, 354, 355, 356, 357, 358, 
	0, 359, 360, 0, 0, 361, 362, 363, 
	0, 0, 364, 0, 0, 363, 365, 365, 
	366, 367, 0, 368, 368, 0, 369, 370, 
	371, 372, 0, 373, 363, 363, 374, 0, 
	0, 375, 375, 0, 376, 377, 0, 378, 
	379, 380, 380, 381, 381, 0, 0, 382, 
	383, 383, 384, 384, 385, 386, 386, 387, 
	387, 388, 389, 389, 390, 390, 0, 0, 
	391, 392, 393, 394, 395, 396, 396, 393, 
	395, 397, 337, 398, 0, 399, 0, 0, 
	0, 0, 400, 401, 340, 340, 340, 402, 
	340, 403, 404, 22, 405, 406, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 407, 0, 0, 0, 0, 402, 
	0, 0, 0, 0, 0, 408, 409, 0, 
	0, 0, 0, 0, 0, 410, 0, 0, 
	0, 0, 0, 409, 411, 412, 0, 413, 
	0, 414, 0, 0, 0, 0, 415, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	416, 0, 0, 0, 0, 0, 0, 0, 
	415, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 417, 
	418, 419, 7, 0, 420, 0, 421, 0, 
	422, 0, 0, 0, 423, 424
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 73, 0, 0, 0, 
	0, 0, 0, 0, 0, 73, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	73, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 73, 0, 0, 73, 0, 73, 
	0, 73, 0, 0, 0, 0, 73, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 73, 0, 
	0, 0, 0, 0, 0, 73, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 73, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 73, 0, 0, 0, 0, 0, 73, 
	0, 0, 0, 0, 0, 0, 0, 73, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 73, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 73, 0, 0, 0, 0, 
	0, 0, 0, 73, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 73, 0, 0, 73, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 74, 0, 0, 0, 
	0, 0, 0, 0, 0, 74, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	74, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 74, 0, 0, 74, 0, 74, 
	0, 74, 0, 0, 0, 0, 74, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 74, 0, 
	0, 0, 0, 0, 0, 74, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 74, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 74, 0, 0, 0, 0, 0, 74, 
	0, 0, 0, 0, 0, 0, 0, 74, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 74, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 74, 0, 0, 0, 0, 
	0, 0, 0, 74, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 74, 0, 0, 74, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 0, 
	0, 0, 0, 83, 85, 85, 89, 89, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 164, 166, 166, 166, 178, 180, 180, 
	180, 180, 180, 186, 178, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 208, 208, 219, 219, 219, 
	219, 219, 208, 219, 219, 219, 219, 208, 
	208, 208, 178, 190, 190, 190, 190, 250, 
	250, 250, 255, 257, 257, 257, 261, 261, 
	255, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 291, 291, 0, 303, 304, 305, 
	307, 309, 311, 309, 309, 0, 321, 322, 
	326, 326, 327, 336, 337, 338, 338, 338, 
	341, 341, 343, 344, 345, 345, 345, 347, 
	348, 349, 349, 345, 341, 341, 354, 355, 
	355, 355, 355, 355, 358, 358, 358, 358, 
	358, 358, 358, 358, 368, 369, 369, 369, 
	369, 381, 381, 381, 369, 369, 369, 369, 
	381, 369, 381, 381, 381, 381, 381, 381, 
	381, 381, 394, 381, 395, 396, 397, 397, 
	0, 404, 408, 408, 409, 418, 419, 420, 
	420, 420, 423, 423, 425, 426, 427, 427, 
	427, 429, 430, 431, 431, 427, 423, 423, 
	436, 437, 437, 437, 437, 437, 440, 440, 
	440, 440, 440, 440, 440, 440, 450, 451, 
	451, 451, 451, 463, 463, 463, 451, 451, 
	451, 451, 463, 451, 463, 463, 463, 463, 
	463, 463, 463, 463, 476, 463, 477, 478, 
	479, 479, 0, 486, 487, 0, 493, 0, 
	498, 0, 501, 501, 502, 503, 0, 543, 
	545, 546, 547, 548, 550, 552, 556, 556, 
	547, 547, 547, 557, 547, 547, 552, 547, 
	547, 543, 561, 561, 561, 561, 561, 561, 
	552, 552, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 600, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 547, 0, 643, 
	644, 645, 647, 643, 650, 0, 669, 672, 
	674, 672, 675, 676, 677, 678, 680, 677, 
	677, 677, 677, 677, 683, 677, 677, 685, 
	683, 683, 677, 0, 704, 705, 89, 89, 
	708, 709, 89, 705, 705, 712, 714, 717, 
	705, 718, 705, 719, 720, 722, 724, 705, 
	712, 725, 725, 725, 727, 725, 725, 725, 
	725, 0, 164, 735, 736, 735, 735, 0, 
	745, 746, 748, 750, 752, 750, 754, 0, 
	766, 767, 768, 769, 771, 773, 775, 776, 
	776, 776, 776, 776, 776, 776, 776, 776, 
	776, 776, 776, 776, 776, 776, 776, 0, 
	178, 834, 837, 838, 842, 844, 845, 846, 
	834, 847, 848, 850, 853, 854, 856, 858, 
	861, 862, 864, 865, 178, 862, 862, 853, 
	853, 853, 853, 884, 888, 890, 891, 895, 
	898, 899, 900, 901, 888, 884, 884, 884, 
	884, 884, 884, 884, 884, 884, 884, 884, 
	853, 905, 853, 853, 853, 906, 913, 915, 
	916, 917, 918, 918, 918, 921, 921, 923, 
	924, 925, 925, 925, 927, 928, 929, 929, 
	925, 921, 921, 934, 935, 935, 935, 935, 
	935, 938, 938, 938, 938, 938, 938, 938, 
	938, 948, 949, 949, 949, 949, 961, 961, 
	961, 949, 949, 949, 949, 961, 949, 961, 
	961, 961, 961, 961, 961, 961, 961, 974, 
	961, 975, 976, 977, 977, 178, 853, 853, 
	981, 853, 848, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 1035, 838, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 1061, 853, 0, 1069, 1070, 1071, 1072, 
	1074, 1069, 1077, 0, 261, 1132, 1134, 1135, 
	1136, 1137, 1138, 1140, 1142, 1144, 1147, 1147, 
	1138, 1138, 1149, 1150, 1138, 1138, 1152, 1154, 
	1155, 1155, 1158, 1169, 261, 1175, 1177, 1178, 
	1180, 1158, 1158, 1183, 1183, 1183, 1189, 1190, 
	1192, 1193, 1183, 1183, 1200, 1205, 1210, 1183, 
	1183, 1217, 1217, 1183, 1183, 1154, 1138, 1138, 
	1154, 1138, 1138, 1144, 261, 1235, 1236, 1236, 
	1236, 1236, 1236, 1236, 1242, 1144, 1245, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1285, 1286, 1246, 1246, 1290, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1344, 1138, 
	1345, 0, 1349, 1349, 0, 1353, 1353, 1353, 
	1353, 1357
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 156;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 165;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 232;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 298;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 301;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 303;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 305;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 310;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 422;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 429;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 451;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 481;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 487;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 495;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 519;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 731;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 739;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 913;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 916;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 156;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    'a' => "\a", 'b'  => "\b", 'e'  => "\e", 'f' => "\f",
    'n' => "\n", 'r'  => "\r", 's'  => "\s", 't' => "\t",
    'v' => "\v", '\\' => "\\"
  }

  attr_reader   :source_buffer
  attr_reader   :encoding

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg

  attr_accessor :tokens, :comments

  def initialize(version)
    @version    = version
    @static_env = nil

    @tokens     = nil
    @comments   = nil

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
    end

    @source        = nil # source string
    @source_pts    = nil # @source as a codepoint array
    @encoding      = nil # target encoding for output strings

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    # See below the section on parsing heredocs.
    @heredoc_e     = nil
    @herebody_s    = nil

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_state = false
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      @source = @source_buffer.source

      if defined?(Encoding)
        @encoding   = @source.encoding

        # This is a workaround for 1.9.2, which (without force_encoding)
        # would convert the result to UTF-8 (source encoding of lexer.rl).
        @source    += "\0".force_encoding(@encoding)
      else
        @source    += "\0"
      end

      if defined?(Encoding) && @source.encoding == Encoding::UTF_8
        @source_pts = @source.unpack('U*')
      else
        @source_pts = @source.unpack('C*')
      end

      if (@source_pts.size > 1_000_000 && @source.respond_to?(:encode)) ||
         @force_utf32
        # A heuristic: if the buffer is larger than 1M, then
        # store it in UTF-32 and convert the tokens as they're
        # going out. If it's smaller, the conversion overhead
        # dominates runtime and this stops being beneficial.
        #
        # This is not really a good heuristic, as the result
        # heavily depends on token/character ratio. If it's low,
        # say the gem consists mostly of long identifiers and
        # symbols, then storing the source in UTF-8 would be faster.
        #
        # Patches accepted.
        @source = @source.encode(Encoding::UTF_32LE)
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source     = nil
      @source_pts = nil
    end
  end

  LEX_STATES = {
    :line_begin  => lex_en_line_begin,
    :expr_dot    => lex_en_expr_dot,
    :expr_fname  => lex_en_expr_fname,
    :expr_value  => lex_en_expr_value,
    :expr_beg    => lex_en_expr_beg,
    :expr_mid    => lex_en_expr_mid,
    :expr_arg    => lex_en_expr_arg,
    :expr_cmdarg => lex_en_expr_cmdarg,
    :expr_end    => lex_en_expr_end,
    :expr_endarg => lex_en_expr_endarg,
    :expr_endfn  => lex_en_expr_endfn,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    _lex_trans_keys         = self.class.send :_lex_trans_keys
    _lex_key_spans          = self.class.send :_lex_key_spans
    _lex_index_offsets      = self.class.send :_lex_index_offsets
    _lex_indicies           = self.class.send :_lex_indicies
    _lex_trans_targs        = self.class.send :_lex_trans_targs
    _lex_trans_actions      = self.class.send :_lex_trans_actions
    _lex_to_state_actions   = self.class.send :_lex_to_state_actions
    _lex_from_state_actions = self.class.send :_lex_from_state_actions
    _lex_eof_trans          = self.class.send :_lex_eof_trans

    p, pe, eof = @p, @source.length + 1, @source.length + 1

    @command_state = (@cs == self.class.lex_en_expr_value ||
                      @cs == self.class.lex_en_line_begin)

    
# line 10606 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 74 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 10634 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= ( (@source_pts[p] || 0)) && 
			( (@source_pts[p] || 0)) <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + ( (@source_pts[p] || 0)) - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 22 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 52 then
# line 754 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 23 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 63 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 66 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 253 then
# line 1118 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 30 then
# line 1367 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 1383 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 1411 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 49 then
# line 1595 "lib/parser/lexer.rl"
		begin
 @heredoc_e     = p 		end
	when 322 then
# line 1712 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 389 then
# line 1905 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 383 then
# line 1906 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 386 then
# line 1907 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 380 then
# line 1908 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 395 then
# line 1909 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 363 then
# line 1910 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 375 then
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 370 then
# line 1968 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 368 then
# line 1969 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 90 then
# line 986 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DBEG, '#{')

    if literal.heredoc?
      literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 731
		_goto_level = _again
		next
	end

   end
		end
	when 5 then
# line 934 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 305
		_goto_level = _again
		next
	end

   end
		end
	when 86 then
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 85 then
# line 803 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 91 then
# line 934 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 305
		_goto_level = _again
		next
	end

   end
		end
	when 88 then
# line 921 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 89 then
# line 803 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 814 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 4 then
# line 803 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 117 then
# line 986 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DBEG, '#{')

    if literal.heredoc?
      literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 731
		_goto_level = _again
		next
	end

   end
		end
	when 10 then
# line 934 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 305
		_goto_level = _again
		next
	end

   end
		end
	when 114 then
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 113 then
# line 803 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 118 then
# line 934 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 305
		_goto_level = _again
		next
	end

   end
		end
	when 116 then
# line 803 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 814 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 9 then
# line 803 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 141 then
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 140 then
# line 803 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 143 then
# line 921 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 144 then
# line 803 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 147 then
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 146 then
# line 803 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 149 then
# line 803 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    if !literal.heredoc? && literal.nest_and_try_closing(string, @ts, @te)
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 152 then
# line 1049 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end

       end
		end
	when 153 then
# line 1037 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 12 then
# line 1177 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 154 then
# line 1177 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 156 then
# line 1190 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 155 then
# line 1200 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 177 then
# line 1221 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(KEYWORDS_BEGIN[tok]);
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 163 then
# line 1229 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 14 then
# line 1233 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 739; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 305
		_goto_level = _again
		next
	end
  end
		end
	when 160 then
# line 1242 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 172 then
# line 1246 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 159 then
# line 1254 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 158 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 176 then
# line 1221 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(KEYWORDS_BEGIN[tok]);
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 173 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 175 then
# line 1229 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 170 then
# line 1233 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 739; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 305
		_goto_level = _again
		next
	end
  end
		end
	when 166 then
# line 1242 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 171 then
# line 1249 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 164 then
# line 1251 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 169 then
# line 1254 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 13 then
# line 1254 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 162 then
# line 1 "NONE"
		begin
	case  @act
	when 25 then
	begin begin p = (( @te))-1; end
 emit(KEYWORDS_BEGIN[tok]);
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 26 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 27 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 422; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 16 then
# line 1266 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 1))
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 179 then
# line 1272 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 178 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 181 then
# line 1269 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 180 then
# line 1272 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 15 then
# line 1272 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 187 then
# line 1298 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 186 then
# line 1304 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 185 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 197 then
# line 1283 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 188 then
# line 1287 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 193 then
# line 1298 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 191 then
# line 1301 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 196 then
# line 1304 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 201 then
# line 1362 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 204 then
# line 1371 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 519
		_goto_level = _again
		next
	end

       end
		end
	when 210 then
# line 1395 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 18 then
# line 1403 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 212 then
# line 1412 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 33 then
# line 1421 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 739
		_goto_level = _again
		next
	end

       end
		end
	when 198 then
# line 1435 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 199 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 211 then
# line 1362 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 207 then
# line 1384 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 519
		_goto_level = _again
		next
	end

       end
		end
	when 209 then
# line 1400 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 203 then
# line 1421 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 739
		_goto_level = _again
		next
	end

       end
		end
	when 202 then
# line 1426 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 220 then
# line 1435 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1426 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 35 then
# line 1435 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 17 then
# line 1 "NONE"
		begin
	case  @act
	when 51 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 519
		_goto_level = _again
		next
	end

      end
	when 52 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 519
		_goto_level = _again
		next
	end

      end
	when 57 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 739
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 37 then
# line 1471 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 451
		_goto_level = _again
		next
	end
  end
		end
	when 223 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 224 then
# line 1471 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 451
		_goto_level = _again
		next
	end
  end
		end
	when 38 then
# line 1471 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 451
		_goto_level = _again
		next
	end
  end
		end
	when 36 then
# line 1 "NONE"
		begin
	case  @act
	when 64 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do', @te - 2, @te)
        else
          emit(:kDO, 'do', @te - 2, @te)
        end
         @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 65 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 451
		_goto_level = _again
		next
	end
 end
end 
			end
	when 234 then
# line 1498 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 227 then
# line 1504 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 228 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 229 then
# line 1501 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 232 then
# line 1504 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 238 then
# line 1528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 237 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 246 then
# line 1520 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 240 then
# line 1522 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 244 then
# line 1528 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 239 then
# line 1 "NONE"
		begin
	case  @act
	when 72 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 73 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
 end
end 
			end
	when 274 then
# line 1545 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;
        if tok.start_with? '-'
          emit(:tUMINUS_NUM, '-', @ts, @ts + 1)
           @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 275 then
# line 1565 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = tok[0].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 269 then
# line 1572 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0].chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 45 then
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 276 then
# line 1619 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 48 then
# line 1633 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 289 then
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 291 then
# line 1661 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[tok[1]]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 739
		_goto_level = _again
		next
	end

       end
		end
	when 290 then
# line 1671 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 277 then
# line 1707 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 42 then
# line 1727 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((tok[0] =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 739;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 263 then
# line 1772 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 156
		_goto_level = _again
		next
	end
  end
		end
	when 46 then
# line 1785 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 249 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 273 then
# line 1555 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 270 then
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 268 then
# line 1585 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 278 then
# line 1633 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 293 then
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 288 then
# line 1671 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 294 then
# line 1677 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 739
		_goto_level = _again
		next
	end

       end
		end
	when 271 then
# line 1707 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 316 then
# line 1162 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 260 then
# line 1769 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 262 then
# line 1772 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 156
		_goto_level = _again
		next
	end
  end
		end
	when 265 then
# line 1785 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 44 then
# line 1585 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 53 then
# line 1645 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 51 then
# line 1671 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 43 then
# line 1769 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 47 then
# line 1785 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 41 then
# line 1 "NONE"
		begin
	case  @act
	when 94 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 95 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN, @ts, tm)
           p = tm - 1
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 96 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 98 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
 end
	when 99 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 102 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
 end
end 
			end
	when 56 then
# line 1795 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 325 then
# line 1804 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 324 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 327 then
# line 1798 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 326 then
# line 1804 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 55 then
# line 1804 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 357 then
# line 1815 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION, @ts, @ts + 2)

        @lambda_stack.push @paren_nest
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 70 then
# line 1852 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 335 then
# line 1989 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 58 then
# line 2007 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 305
		_goto_level = _again
		next
	end
  end
		end
	when 399 then
# line 2014 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 429; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 349 then
# line 2041 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 341 then
# line 2045 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if %w"} ]".include?(tok)
           @cs = 487;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 354 then
# line 2059 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 339 then
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 336 then
# line 2071 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 338 then
# line 2084 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 404 then
# line 2087 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 334 then
# line 2093 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 333 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 414 then
# line 1848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 310; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 412 then
# line 1852 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 411 then
# line 1863 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 360 then
# line 1939 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 401 then
# line 1999 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 353 then
# line 2007 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 305
		_goto_level = _again
		next
	end
  end
		end
	when 358 then
# line 2014 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 429; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 406 then
# line 1162 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 348 then
# line 2041 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 359 then
# line 2071 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 346 then
# line 2078 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 352 then
# line 2093 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 59 then
# line 1939 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 57 then
# line 2093 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 60 then
# line 1 "NONE"
		begin
	case  @act
	when 110 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit_table(PUNCTUATION)
          else # 'do'
            emit_do
          end
        end

         @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 111 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 310; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 112 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 113 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 114 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 115 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 116 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'
           @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 117 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          if !@static_env.nil? && @static_env.declared?(tok)
             @cs = 739;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit_table(KEYWORDS)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 118 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 119 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 121 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 122 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 123 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 125 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 129 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 130 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 72 then
# line 2105 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1;
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 419 then
# line 2109 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 156; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 420 then
# line 2109 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 156; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 71 then
# line 2109 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 156; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 423 then
# line 2119 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 156
		_goto_level = _again
		next
	end

       end
		end
	when 422 then
# line 2127 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 83 then
# line 2137 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 916
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2141 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 75 then
# line 2144 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 731
		_goto_level = _again
		next
	end
  end
		end
	when 76 then
# line 488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 77 then
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 82 then
# line 2137 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 916
		_goto_level = _again
		next
	end
  end
		end
	when 81 then
# line 2144 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 731
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2144 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 731
		_goto_level = _again
		next
	end
  end
		end
	when 69 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 87 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 115 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 142 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 148 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 213 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1412 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 205 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1421 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 739
		_goto_level = _again
		next
	end

       end
		end
	when 292 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1661 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[tok[1]]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 739
		_goto_level = _again
		next
	end

       end
		end
	when 264 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1772 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 156
		_goto_level = _again
		next
	end
  end
		end
	when 424 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2119 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 156
		_goto_level = _again
		next
	end

       end
		end
	when 421 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2124 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 84 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2137 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 916
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2141 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 377 then
# line 596 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tRATIONAL,  Rational(chars)) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 376 then
# line 597 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 378 then
# line 598 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 371 then
# line 602 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 1971 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 372 then
# line 606 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 1971 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 373 then
# line 607 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 1971 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 109 then
# line 622 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 136 then
# line 622 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 311 then
# line 622 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 93 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 120 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 295 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 96 then
# line 650 "lib/parser/lexer.rl"
		begin

    @escape = lambda do
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 123 then
# line 650 "lib/parser/lexer.rl"
		begin

    @escape = lambda do
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 298 then
# line 650 "lib/parser/lexer.rl"
		begin

    @escape = lambda do
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 98 then
# line 671 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 125 then
# line 671 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 300 then
# line 671 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 95 then
# line 678 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 122 then
# line 678 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 297 then
# line 678 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 112 then
# line 682 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 139 then
# line 682 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 314 then
# line 682 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 106 then
# line 685 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 133 then
# line 685 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 308 then
# line 685 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 111 then
# line 690 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_hex_escape, nil,
                     range(@escape_s - 1, p + 2)
        end
      		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 138 then
# line 690 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_hex_escape, nil,
                     range(@escape_s - 1, p + 2)
        end
      		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 313 then
# line 690 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_hex_escape, nil,
                     range(@escape_s - 1, p + 2)
        end
      		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 105 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 132 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 307 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 108 then
# line 719 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 135 then
# line 719 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 310 then
# line 719 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 94 then
# line 748 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 121 then
# line 748 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 296 then
# line 748 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 145 then
# line 754 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 150 then
# line 754 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 62 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 24 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1367 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 26 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1383 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 28 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1411 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 165 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1251 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 184 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1269 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 192 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1301 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 27 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1421 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 739
		_goto_level = _again
		next
	end

       end
		end
	when 222 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1426 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 216 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1432 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 233 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1501 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 245 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1522 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 241 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1525 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 261 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1769 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 331 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1798 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 328 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1801 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 156
		_goto_level = _again
		next
	end
  end
		end
	when 405 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2078 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 347 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2081 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 913
		_goto_level = _again
		next
	end
  end
		end
	when 78 then
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 215 then
# line 958 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    if literal
      literal.start_interp_brace
    end
  		end
# line 1345 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          p = @ts - 1
          	begin
		 @cs = 739
		_goto_level = _again
		next
	end

        else
          emit(:tLCURLY, '{', @te - 1, @te)
           @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 235 then
# line 958 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    if literal
      literal.start_interp_brace
    end
  		end
# line 1494 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACE_ARG)
            @cs = 731;  end
		end
	when 323 then
# line 958 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    if literal
      literal.start_interp_brace
    end
  		end
# line 1688 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG)
        else
          emit_table(PUNCTUATION_BEGIN)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 417 then
# line 958 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    if literal
      literal.start_interp_brace
    end
  		end
# line 1823 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit_table(PUNCTUATION)
          else # 'do'
            emit_do
          end
        end

         @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 418 then
# line 966 "lib/parser/lexer.rl"
		begin

    if literal
      if literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}', p - 1, p)
        else
          emit(:tSTRING_DEND, '}', p - 1, p)
        end

        if literal.saved_herebody_s
          @herebody_s = literal.saved_herebody_s
        end

        p = p - 1;
         @cs = (stack_pop);
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end
  		end
# line 2045 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if %w"} ]".include?(tok)
           @cs = 487;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 64 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 67 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 168 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1251 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 183 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1269 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 195 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1301 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 218 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1429 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 231 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1501 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 243 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1522 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 267 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1769 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 330 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1798 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 351 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2078 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 80 then
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 189 then
# line 1118 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1291 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 279 then
# line 1118 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1625 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 252 then
# line 1118 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 343 then
# line 1118 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 345 then
# line 1118 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 110 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit_table(PUNCTUATION)
          else # 'do'
            emit_do
          end
        end

         @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 111 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 310; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 112 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 113 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 114 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 115 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 116 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'
           @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 117 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          if !@static_env.nil? && @static_env.declared?(tok)
             @cs = 739;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit_table(KEYWORDS)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 118 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 119 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 121 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 122 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 123 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 125 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 129 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 130 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 190 then
# line 1119 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1291 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 280 then
# line 1119 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1625 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 254 then
# line 1119 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 344 then
# line 1119 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 281 then
# line 1124 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1625 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 255 then
# line 1124 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 282 then
# line 1125 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1625 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 256 then
# line 1125 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 286 then
# line 1126 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1625 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 259 then
# line 1126 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 285 then
# line 1127 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1625 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 258 then
# line 1127 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 94 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 95 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN, @ts, tm)
           p = tm - 1
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 96 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 98 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
 end
	when 99 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 102 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 739
		_goto_level = _again
		next
	end
 end
end 
			end
	when 283 then
# line 1128 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1625 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 257 then
# line 1128 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 284 then
# line 1133 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1625 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 400 then
# line 1138 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2003 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 214 then
# line 1144 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1339 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '[', @te - 1, @te)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 315 then
# line 1144 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1702 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 403 then
# line 1144 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 2067 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 206 then
# line 1151 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1320 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '(', @te - 1, @te)
           @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '(', @te - 1, @te)
           @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 219 then
# line 1151 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1333 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 225 then
# line 1151 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1448 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '(', @te - 1, @te)
        if version?(18)
           @cs = 731; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 272 then
# line 1151 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1702 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 355 then
# line 1151 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 2041 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 356 then
# line 1157 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2045 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if %w"} ]".include?(tok)
           @cs = 487;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 50 then
# line 1595 "lib/parser/lexer.rl"
		begin
 @heredoc_e     = p 		end
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 287 then
# line 1596 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1597 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, @heredoc_e) =~ /^<<(-?)(["'`]?)(.*)\2$/

        indent    = !$1.empty?
        type      =  '<<' + ($2.empty? ? '"' : $2)
        delimiter =  $3

         @cs = (push_literal(type, delimiter, @ts, @heredoc_e, indent));

        if @herebody_s.nil?
          @herebody_s = new_herebody_s
        end

        p = @herebody_s - 1
       end
		end
	when 319 then
# line 1712 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1713 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN, @ts, tm)
           p = tm - 1
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 390 then
# line 1905 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 384 then
# line 1906 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 387 then
# line 1907 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 381 then
# line 1908 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 396 then
# line 1909 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 365 then
# line 1910 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 397 then
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 174 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1221 "lib/parser/lexer.rl"
		begin
 @act = 25;		end
	when 161 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1225 "lib/parser/lexer.rl"
		begin
 @act = 26;		end
	when 157 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1229 "lib/parser/lexer.rl"
		begin
 @act = 27;		end
	when 20 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1371 "lib/parser/lexer.rl"
		begin
 @act = 51;		end
	when 208 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1384 "lib/parser/lexer.rl"
		begin
 @act = 52;		end
	when 21 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1421 "lib/parser/lexer.rl"
		begin
 @act = 57;		end
	when 200 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1426 "lib/parser/lexer.rl"
		begin
 @act = 58;		end
	when 226 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1458 "lib/parser/lexer.rl"
		begin
 @act = 64;		end
	when 39 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1471 "lib/parser/lexer.rl"
		begin
 @act = 65;		end
	when 247 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1516 "lib/parser/lexer.rl"
		begin
 @act = 72;		end
	when 236 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1520 "lib/parser/lexer.rl"
		begin
 @act = 73;		end
	when 250 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1707 "lib/parser/lexer.rl"
		begin
 @act = 94;		end
	when 318 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1713 "lib/parser/lexer.rl"
		begin
 @act = 95;		end
	when 317 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1719 "lib/parser/lexer.rl"
		begin
 @act = 96;		end
	when 54 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @act = 98;		end
	when 248 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1162 "lib/parser/lexer.rl"
		begin
 @act = 99;		end
	when 251 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1785 "lib/parser/lexer.rl"
		begin
 @act = 102;		end
	when 413 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1823 "lib/parser/lexer.rl"
		begin
 @act = 110;		end
	when 408 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1848 "lib/parser/lexer.rl"
		begin
 @act = 111;		end
	when 416 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1858 "lib/parser/lexer.rl"
		begin
 @act = 113;		end
	when 409 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1863 "lib/parser/lexer.rl"
		begin
 @act = 114;		end
	when 410 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1867 "lib/parser/lexer.rl"
		begin
 @act = 115;		end
	when 415 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1871 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 407 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1882 "lib/parser/lexer.rl"
		begin
 @act = 117;		end
	when 402 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1898 "lib/parser/lexer.rl"
		begin
 @act = 118;		end
	when 337 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @act = 119;		end
	when 367 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1956 "lib/parser/lexer.rl"
		begin
 @act = 122;		end
	when 61 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1971 "lib/parser/lexer.rl"
		begin
 @act = 123;		end
	when 340 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1999 "lib/parser/lexer.rl"
		begin
 @act = 125;		end
	when 332 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1162 "lib/parser/lexer.rl"
		begin
 @act = 129;		end
	when 342 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2021 "lib/parser/lexer.rl"
		begin
 @act = 130;		end
	when 151 then
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n12".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
# line 754 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 99 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 126 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 301 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 104 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 131 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 306 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 103 then
# line 666 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 130 then
# line 666 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 305 then
# line 666 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 101 then
# line 671 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 128 then
# line 671 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 303 then
# line 671 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 97 then
# line 672 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 124 then
# line 672 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 299 then
# line 672 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 110 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 622 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 137 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 622 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 312 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 622 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 107 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 719 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 134 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 719 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 309 then
# line 705 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 719 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 92 then
# line 754 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 748 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 119 then
# line 754 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 748 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 65 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 167 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1251 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 182 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1269 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 194 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1301 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 217 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1429 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 739
		_goto_level = _again
		next
	end
  end
		end
	when 230 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1501 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 242 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1522 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 266 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1769 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 329 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1798 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 350 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2078 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 79 then
# line 1074 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 392 then
# line 1909 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
	when 362 then
# line 1910 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
	when 374 then
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 369 then
# line 1968 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 601 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 1971 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 366 then
# line 1969 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 601 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 1971 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 221 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 462 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1426 "lib/parser/lexer.rl"
		begin
 @act = 58;		end
	when 29 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1421 "lib/parser/lexer.rl"
		begin
 @act = 57;		end
	when 40 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1471 "lib/parser/lexer.rl"
		begin
 @act = 65;		end
	when 68 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1077 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1852 "lib/parser/lexer.rl"
		begin
 @act = 112;		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1383 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1384 "lib/parser/lexer.rl"
		begin
 @act = 52;		end
	when 321 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1712 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @act = 98;		end
	when 320 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1712 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1162 "lib/parser/lexer.rl"
		begin
 @act = 99;		end
	when 393 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1909 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @act = 119;		end
	when 102 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 129 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 304 then
# line 645 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 100 then
# line 672 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 127 then
# line 672 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 814 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && escaped_char == '\\'
          # Regular expressions should include backslashes in their escaped
          # form.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 302 then
# line 672 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 656 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 660 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 739; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 388 then
# line 1905 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 382 then
# line 1906 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 385 then
# line 1907 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 379 then
# line 1908 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 391 then
# line 1909 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 361 then
# line 1910 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1912 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 25 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 794 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1383 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1384 "lib/parser/lexer.rl"
		begin
 @act = 52;		end
	when 398 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1944 "lib/parser/lexer.rl"
		begin
 @act = 121;		end
	when 394 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1909 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1944 "lib/parser/lexer.rl"
		begin
 @act = 121;		end
	when 364 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1910 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 595 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1944 "lib/parser/lexer.rl"
		begin
 @act = 121;		end
# line 20653 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 73 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 20663 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 263 "lib/parser/lexer.rl"
    # %

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == self.class.lex_error
      [ false, [ '$error', range(p - 1, p) ] ]
    else
      [ false, [ '$eof',   range(p, p)     ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  if "".respond_to?(:encode)
    def encode_escape(ord)
      ord.chr.force_encoding(@encoding)
    end

    def tok(s = @ts, e = @te)
      @source[s...e].encode(@encoding)
    end
  else
    def encode_escape(ord)
      ord.chr
    end

    def tok(s = @ts, e = @te)
      @source[s...e]
    end
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK)
    else
      emit(:kDO)
    end
  end

  def arg_or_cmdarg
    if @command_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)

    if new_literal.words?
      if new_literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    else
      if new_literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    else
      self.class.lex_en_expr_end
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  
# line 2149 "lib/parser/lexer.rl"

  # %
end
