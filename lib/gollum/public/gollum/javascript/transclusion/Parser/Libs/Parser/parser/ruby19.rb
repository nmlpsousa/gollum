# -*- encoding:utf-8; warn-indent:false -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

Parser.check_for_encoding_support

module Parser
  class Ruby19 < Parser::Base


  def version
    19
  end

  def default_encoding
    Encoding::BINARY
  end
##### State transition tables begin ###

clist = [
'-527,278,66,67,68,9,54,-527,-527,-527,60,61,-527,-527,-527,64,-527,62',
'63,65,29,30,69,70,911,-527,-527,-527,-527,28,27,26,93,92,94,95,-527',
'-527,19,-527,-527,-527,-527,-527,8,44,-98,10,97,96,98,87,53,89,88,90',
'563,91,99,100,542,85,86,-100,41,42,40,-527,-527,-527,-527,-527,-527',
'-527,-527,-527,-527,-527,-527,-527,-527,746,-92,-527,-527,-527,39,743',
'-527,32,-97,-527,55,56,-527,-527,57,-527,34,-527,753,-527,43,-527,-527',
'-527,-527,-527,-527,-527,20,-527,-527,-527,-99,84,76,79,80,208,81,82',
'584,-103,788,77,83,-527,-527,-527,-527,-449,-527,59,-527,78,-100,542',
'-449,-449,-449,-523,491,-449,-449,-449,258,-449,-96,-92,-101,511,209',
'-101,510,-449,209,-449,-449,-449,-104,-98,562,619,542,542,-98,-449,-449',
'262,-449,-449,-449,-449,-449,105,-99,542,-100,105,104,-100,105,-100',
'104,-92,583,104,-92,-102,205,206,205,206,-92,656,-88,618,-449,-449,-449',
'-449,-449,-449,-449,-449,-449,-449,-449,-449,-449,-449,665,688,-449',
'-449,-449,-98,-449,-449,-90,688,-449,817,-449,-449,-449,798,-449,-94',
'-449,-449,-449,257,-449,-449,-449,-449,-449,-449,-449,554,-449,-452',
'-449,555,573,-523,-90,209,-452,-463,105,209,-87,-524,-92,104,-449,-449',
'-449,-449,-280,-449,498,-449,-95,-449,-101,-280,-280,-280,-98,-101,-280',
'-280,-280,688,-280,105,105,105,799,209,104,104,104,-91,-280,-280,-280',
'-99,105,205,206,-93,-99,104,-280,-280,-96,-280,-280,-280,-280,-280,205',
'206,575,574,619,514,258,-103,105,-90,258,720,664,104,515,511,105,-89',
'513,741,-393,104,619,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,105,618,-280,-280,-280,104,744,-280,-90,573,-280',
'-90,428,-280,-280,-527,-280,-90,-280,618,-280,484,-280,-280,-280,-280',
'-280,-280,-280,483,-280,-99,-280,209,253,105,-393,573,253,498,104,209',
'-67,-393,-527,-521,-280,-280,-280,-280,-452,-280,-393,-280,209,-102',
'257,-452,-452,-452,257,-104,-452,-452,-452,209,-452,742,-527,619,-393',
'575,574,585,-452,-527,-452,-452,-452,-82,-523,209,-94,-520,-527,-68',
'-452,-452,-103,-452,-452,-452,-452,-452,656,773,548,-527,-452,575,574',
'578,-527,618,-527,-452,381,771,-458,-523,-521,383,382,-527,-452,-458',
'-101,-452,-452,-452,-452,-452,-452,-452,-452,-452,-452,-452,-452,-452',
'-452,-527,-521,-452,-452,-452,-449,-452,-452,-464,727,-452,573,-449',
'-452,-452,807,-452,-520,-452,-260,-452,-449,-452,-452,-452,-452,-452',
'-452,-452,-527,-452,76,-452,-464,-460,475,-527,-527,-527,-520,77,-460',
'-527,-527,253,-527,-452,-452,-452,-452,78,-452,-89,-452,-527,-452,-457',
'-97,-98,105,-454,794,656,-457,104,-527,-527,-454,-527,-527,-527,-527',
'-527,575,574,580,-88,754,-274,526,525,524,-97,527,679,-274,526,525,524',
'679,527,526,525,524,-274,527,-527,-527,-527,-527,-527,-527,-527,-527',
'-527,-527,-527,-527,-527,-527,573,598,-527,-527,-527,531,603,205,206',
'475,-527,573,-455,-527,535,534,538,537,-527,-455,-527,473,-527,-527',
'-527,-527,-527,-527,-527,-280,-527,-527,-527,203,-456,597,-280,-280',
'-280,493,494,-456,-280,-280,-92,-280,-527,-527,753,-91,-101,-527,568',
'790,229,-100,105,-262,896,569,250,104,575,574,571,-280,-280,251,-280',
'-280,-280,-280,-280,575,574,576,-95,679,-90,526,525,524,-104,527,-99',
'229,226,-459,794,656,228,227,224,225,-459,471,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,462,-463,-280,-280,-280',
'531,602,226,767,105,-280,228,227,-280,104,816,538,537,-280,462,-280',
'229,-280,-280,-280,-280,-280,-280,-280,424,-280,679,-280,526,525,524',
'425,527,105,511,205,206,513,104,-87,426,-280,-280,548,-93,-96,-280,304',
'305,373,-102,278,66,67,68,9,54,205,206,511,60,61,513,728,531,64,462',
'62,63,65,29,30,69,70,208,538,537,430,429,28,27,26,93,92,94,95,552,829',
'19,526,525,524,553,527,8,44,229,10,97,96,98,87,53,89,88,90,819,91,99',
'100,821,85,86,229,41,42,40,824,679,825,526,525,524,679,527,526,525,524',
'226,527,753,558,228,227,224,225,39,229,557,32,831,832,55,56,427,226',
'57,559,34,228,227,679,43,526,525,524,675,527,714,715,20,531,716,99,100',
'84,76,79,80,834,81,82,538,537,835,77,83,278,66,67,68,9,54,59,649,78',
'60,61,-261,531,506,64,722,62,63,65,29,30,69,70,538,537,384,844,845,28',
'27,26,93,92,94,95,209,829,19,526,525,524,847,527,8,44,850,10,97,96,98',
'87,53,89,88,90,852,91,99,100,854,85,86,854,41,42,40,209,679,719,526',
'525,524,679,527,526,525,524,859,527,495,679,861,526,525,524,39,527,649',
'32,863,371,55,56,253,586,57,209,34,473,303,679,43,526,525,524,675,527',
'869,589,20,531,871,209,874,84,76,79,80,675,81,82,538,537,-263,77,83',
'278,66,67,68,9,54,59,691,78,60,61,548,531,302,64,-260,62,63,65,29,30',
'69,70,538,537,591,209,684,28,27,26,93,92,94,95,881,882,19,108,109,110',
'111,112,8,44,595,10,97,96,98,87,53,89,88,90,885,91,99,100,248,85,86',
'682,41,42,40,681,679,673,526,525,524,679,527,526,525,524,890,527,672',
'679,669,526,525,524,39,527,667,32,596,209,55,56,253,656,57,898,34,606',
'900,679,43,526,525,524,675,527,901,475,20,531,906,609,908,84,76,79,80',
'675,81,82,538,537,507,77,83,278,66,67,68,9,54,59,913,78,60,61,854,531',
'854,64,253,62,63,65,29,30,69,70,538,537,649,918,506,28,27,26,93,92,94',
'95,499,204,19,108,109,110,111,112,8,44,504,10,97,96,98,87,53,89,88,90',
'888,91,99,100,229,85,86,889,41,42,40,229,926,854,854,558,887,679,489',
'526,525,524,917,527,854,490,930,243,244,229,39,559,898,32,488,209,55',
'56,229,199,57,198,34,226,638,232,43,228,227,224,225,-82,209,197,20,531',
'209,113,500,84,76,79,80,209,81,82,538,537,649,77,83,278,66,67,68,9,54',
'59,229,78,60,61,209,898,229,64,945,62,63,65,29,30,69,70,108,109,110',
'111,112,28,27,26,93,92,94,95,946,679,19,526,525,524,948,527,8,44,854',
'10,97,96,98,87,53,89,88,90,-462,91,99,100,854,85,86,-462,41,42,40,679',
'854,526,525,524,-462,527,550,675,-524,-523,-462,101,854,551,898,209',
'678,-462,39,854,-281,32,549,,55,56,-462,-281,57,,34,,,,43,,-281,675',
'501,,,,20,,,502,678,84,76,79,80,,81,82,426,,,77,83,278,66,67,68,9,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,108,109,110,111,112,28,27,26',
'93,92,94,95,,679,19,526,525,524,,527,8,44,,10,97,96,98,87,53,89,88,90',
'-274,91,99,100,201,85,86,-274,41,42,40,202,,,,-280,-274,,-281,675,200',
',-280,,,-281,,-524,858,,39,-280,-461,32,-281,,55,56,,-461,57,,34,,,',
'43,,-461,,-323,-280,,,20,,,-323,-280,84,76,79,80,-524,81,82,-323,-280',
',77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,',
',,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,',
'91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235,237,-461,-280',
'-546,-546,-281,,,-461,-280,243,244,-281,39,-524,,280,-461,-280,55,56',
'-281,,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76',
'79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65',
'29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87',
'53,89,88,90,,91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235',
'237,,,-546,-546,,,,,,243,244,,39,,,280,,,55,56,,,57,,34,226,,232,43',
'228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278',
'66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,,41,42,40,229,233,238,239,240,235,237,245,246,241,242,,-546,-546',
',,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236',
'234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,',
'78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19',
',,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229',
'233,238,239,240,235,237,245,,241,242,,,,,,243,244,,39,,,32,,,55,56,',
',57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80',
',81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235,237,,',
'-546,-546,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227',
'224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67',
'68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92',
'94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,',
'41,42,40,229,233,238,239,240,235,237,,,241,242,,,,,,243,244,,39,,,32',
',,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84',
'76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235',
'237,,,-546,-546,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228',
'227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66',
'67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93',
'92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86',
',41,42,40,229,233,238,239,240,235,237,245,246,241,242,,-546,-546,,,243',
'244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230',
'20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44',
',10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,-546,-546',
'-546,-546,235,237,,,-546,-546,,,,,,243,244,,39,,,32,,,55,56,,,57,,34',
'226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82',
',,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70',
',,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235,237,,,-546,-546',
',,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236',
'234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,',
'78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19',
',,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229',
',,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227',
'224,225,,,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40',
'229,,,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228',
'227,224,225,,,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68',
'9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94',
'95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41',
'42,40,229,,,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232',
'43,228,227,224,225,,,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66',
'67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93',
'92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86',
',41,42,40,229,,,,,,,,,,,,,,,,243,244,,39,,,280,,,55,56,,,57,,34,226',
',232,43,228,227,224,225,,,230,20,231,,,,84,76,79,80,,81,82,,,,77,83',
'278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27',
'26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,229,,,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34',
'226,,,43,228,227,224,225,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,5,66',
'67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93',
'92,94,95,,,19,,,,,,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,,41,42,40,229,,,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226',
',232,43,228,227,224,225,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,278,66',
'67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93',
'92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20',
',,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,',
'39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77',
'83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28',
'27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99',
'100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,',
'43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,5,66,67,68,9,54,59,,78',
'60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,',
',607,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229',
'233,238,239,240,235,237,245,246,241,242,,222,223,,,243,244,,39,,,32',
',,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84',
'76,79,80,,81,82,,,,77,83,,247,-529,-237,,,59,,78,-529,-529,-529,,,-529',
'-529,-529,529,-529,526,525,524,,527,,,,-529,-529,-529,-529,,,,,,,,-529',
'-529,,-529,-529,-529,-529,-529,,,,,,,,,,531,,,,,,,,,535,534,538,537',
',-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529',
',,-529,-529,-529,,,-529,,,-529,,,-529,-529,,-529,,-529,,-529,,-529,-529',
'-529,-529,-529,-529,-529,,-529,-529,-529,,,,,,,,,,,,,,-529,-529,-529',
'-529,,-529,,-529,278,66,67,68,9,54,,,,60,61,,,,64,,62,63,65,29,30,69',
'70,,,,,,28,27,26,93,92,94,95,,,19,,,,,592,8,44,,10,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,,41,42,40,229,233,238,239,240,235,237,245,246',
'241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228',
'227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,,247,-528',
',,,59,,78,-528,-528,-528,,,-528,-528,-528,529,-528,526,525,524,,527',
',,,-528,-528,-528,-528,,,,,,,,-528,-528,,-528,-528,-528,-528,-528,,',
',,,,,,,531,,,,,,,,,535,534,538,537,,-528,-528,-528,-528,-528,-528,-528',
'-528,-528,-528,-528,-528,-528,-528,,,-528,-528,-528,,,-528,,,-528,,',
'-528,-528,,-528,,-528,,-528,,-528,-528,-528,-528,-528,-528,-528,,-528',
'-528,-528,,,,,,,,,,,,,,-528,-528,-528,-528,,-528,,-528,278,66,67,68',
'9,54,,,,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95',
',,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84',
'76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,607,8,44,,10,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226',
',232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,',
'77,83,,247,-275,,,,59,,78,-275,-275,-275,,,-275,-275,-275,529,-275,526',
'525,524,,527,,,,,-275,-275,-275,,,,,,,,-275,-275,,-275,-275,-275,-275',
'-275,,,,,,,,,,531,709,,,,,,,,535,534,538,537,,-275,-275,-275,-275,-275',
'-275,-275,-275,-275,-275,-275,-275,-275,-275,,,-275,-275,-275,,,-275',
',,-275,,,-275,-275,,-275,,-275,,-275,,-275,-275,-275,-275,-275,-275',
'-275,,-275,,-275,,,,,,,,,,,,,,-275,-275,-275,-275,,-275,,-275,66,67',
'68,,54,,,,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92',
'94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,',
',,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,',
'214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,',
'77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28',
'27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,',
',,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,,,43,,,,,,,,219,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295',
'296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87',
'53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,',
'220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44',
',,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,',
',,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,',
',28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99',
'100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,',
'43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60',
'61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,',
'44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,233,238',
'239,240,235,237,245,246,241,242,,222,223,,,243,244,,214,,,220,,,55,56',
',,57,,,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80',
',81,82,,,,77,83,105,247,,,,104,59,,78,66,67,68,,54,,,,60,61,,,,64,,62',
'63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,335',
',,32,,,55,56,,,57,,34,,,,,,529,,526,525,524,,527,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,295,296,69',
'70,,535,534,538,537,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96',
'98,340,53,89,88,341,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,347,,,342',
',,220,,,55,56,,,57,,,,,,,,529,,526,525,524,,527,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,295,296,69',
'70,,535,534,538,537,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96',
'98,340,53,89,88,341,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,342',
',,220,,,55,56,,,57,,,,,,,,754,,526,525,524,,527,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,295,296,69',
'70,,535,534,538,537,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,',
'220,,,55,56,,,57,,389,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77',
'83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291',
'292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99',
'100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,',
'43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60',
'61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,',
'44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,',
',,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70',
',,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
'273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68',
',54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92',
'94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,',
',,,84,76,79,80,,81,82,,,,77,83,,66,67,68,9,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,7,10,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226',
',232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,',
'77,83,,247,,,,373,59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,',
',,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55',
'56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68',
',54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94',
'95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84',
'76,79,80,,81,82,,,,77,83,,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65',
'29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87',
'53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,',
',55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66',
'67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298',
'93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,,,,299,229,233,238,239,240,235,237,245,246,241,242,,222,223,,,243',
'244,,289,,,220,,,55,56,,,57,,,226,,232,,228,227,224,225,236,234,230',
',231,,,,84,76,79,80,,81,82,,,,77,83,,247,,301,,,59,,78,66,67,68,,54',
',,,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19',
',,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,',
',,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296',
'69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53',
'89,88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,841,,,220,,,55',
'56,,,57,,,,,,,,529,,526,525,524,,527,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,295,296,69,70,,535,534',
'538,537,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,289,,,285,,,55,56',
',,57,,284,,,,,,754,,526,525,524,,527,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,29,30,69,70,,535,534,538',
'537,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91',
'99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,389',
',,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78',
'60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,',
',,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,',
',,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69',
'70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
'273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67',
'68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92',
'94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86',
',41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44',
',,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,',
',,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40',
',,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,389,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87',
'53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67',
'68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92',
'94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,',
',,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87',
'53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67',
'68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92',
'94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,',
',,84,76,79,80,,81,82,,,,77,83,209,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97',
'96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,',
',,,214,,,220,,,55,56,,,57,,633,,,,43,,,,,,,,219,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,',
',,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273',
'91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,',
'54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92',
'94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86',
',41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,',
',,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,',
',,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,',
'91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95',
',,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40',
',,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84',
'76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65',
'295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,',
'220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,',
',,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,',
',,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,',
',,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,',
',,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,',
',,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,',
',,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,,,299,,,,,,,,,,,,,,,,,,,,884,,,220,,,55,56,,,57,,,,,,,,754,',
'526,525,524,,527,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78',
'60,61,,,,64,531,62,63,65,295,296,69,70,,535,534,538,537,291,292,298',
'93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,',
',,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,',
'64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,',
'97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,',
',,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69',
'70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
'273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67',
'68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92',
'94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86',
',41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,209,66,67,68,,54,59,,78,60',
'61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,',
',44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,',
',,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,',
'81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,633,,,,43',
',,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,',
',,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40',
',,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84',
'76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65',
'295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,',
'220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,',
',,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64',
',62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44',
',,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,',
',,,,,214,,,220,,,55,56,,,57,,271,,,,43,,,,,,,,219,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,',
',,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273',
'91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,',
'54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95',
',,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40',
',,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89',
'88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,',
'55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86',
',41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,,243,244,,289,,,220,,,55,56,,,57,,,226',
',232,,228,227,224,225,236,234,230,,231,,,,84,76,79,80,,81,82,,,,77,83',
',247,,486,,,59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,',
'220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,',
'66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,',
',,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44',
',,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,',
',,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,',
',,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95',
',,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,',
',,,,,,,,,,,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55',
'56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66',
'67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298',
'93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,725,,,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,',
',,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,',
',,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95',
',,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,',
',,,,,,,,,,,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296',
'69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53',
'89,88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,289,,,285,,,55',
'56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,633,,269,,43,,,,,,',
',219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64',
',62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44',
',,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,',
',,,,,,,,214,,,220,,,55,56,,,57,,,,269,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69',
'70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19',
',,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,',
',,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296',
'69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55',
'56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68',
',54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92',
'94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,504,,55,56,,,57,,,,,,43,,,,,,,,219',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,9,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226',
',232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,',
'77,83,,247,,,,373,59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,295,296',
'69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55',
'56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68',
'9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94',
'95,,,19,,,,,,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41',
'42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,',
',,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87',
'53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66',
'67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93',
'92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,',
'41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97',
'96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,',
',,,214,,,220,,,55,56,,,57,,,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70',
',,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
'273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,633,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67',
'68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93',
'92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86',
',41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,',
'220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,',
',,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,',
'64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,',
'97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,',
',,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,',
',,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,,-243,,299,,,,,-243,-243,-243,,,-243,-243,-243,,-243',
',,,,,289,,,285,-243,,55,56,,,57,,,,-243,-243,,-243,-243,-243,-243,-243',
',,,,,,,84,76,79,80,,81,82,,,,77,83,,,,,-243,,59,,78,,,-243,-243,-243',
',-243,-243,-243,-243,,-243,,-243,,,,,253,-243,-243,-243,-243,,,,,,,',
',-243,-243,,-243,-243,-243,-243,-243,,,-243,,,,,,,,,,,,,,-243,,,,,-243',
',-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243',
',,-243,-243,-243,,,-243,,253,-243,,,-243,-243,,-243,,-243,,-243,,-243',
'-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,,,,-243,-243,-243',
',,-243,-243,-243,,-243,-243,-243,,-243,529,-243,526,525,524,-243,527',
',,,,,,,,-243,-243,,-243,-243,-243,-243,-243,,,,,529,,526,525,524,,527',
',,,,531,518,,,,,,,-287,535,534,538,537,,,-287,-287,-287,,-243,-287,-287',
'-287,,-287,,-243,531,709,,,253,-243,,-287,-287,535,534,538,537,,,,,-287',
'-287,,-287,-287,-287,-287,-287,,,-243,,,,,,,,,,,,,,-243,,,,,-243,,-287',
'-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,,,-287',
'-287,-287,,,-287,,262,-287,,,-287,-287,,-287,,-287,,-287,,-287,-287',
'-287,-287,-287,-287,-287,-392,-287,,-287,,,,-392,-392,-392,,,-392,-392',
'-392,,-392,-287,-287,,-287,,-287,,,-392,-392,-392,,,,,,,,,-392,-392',
',-392,-392,-392,-392,-392,,,,,,,,,,,,,,,,,,,,,,,,-392,-392,-392,-392',
'-392,-392,-392,-392,-392,-392,-392,-392,-392,-392,,,-392,-392,-392,',
',-392,,253,-392,,,-392,-392,,-392,,-392,,-392,,-392,-392,-392,-392,-392',
'-392,-392,,-392,-392,-392,,,,,,,,,,,,,,-392,-392,,-392,,-392,164,175',
'165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173,162',
'176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,',
'159,166,157,158,154,155,156,116,118,,,117,,,,,,,,,149,150,,146,128,129',
'130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127',
'148,145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164,175',
'165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173,162',
'176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,',
'159,166,157,158,154,155,156,116,118,115,,117,,,,,,,,,149,150,,146,128',
'129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164',
'175,165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173',
'162,176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,',
',,,,159,166,157,158,154,155,156,116,118,,,117,,,,,,,,,149,150,,146,128',
'129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164',
'175,165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173',
'162,176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,',
',,,,159,166,157,158,154,155,156,116,118,,,117,,,,,,,,,149,150,,146,128',
'129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164',
'175,165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173',
'162,176,180,182,174,167,,,,183,190,185,358,357,359,356,160,179,178,',
',,,,159,166,157,158,353,354,355,351,118,89,88,352,,91,,,,,,,149,150',
',146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,363,',
',,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,,,153,164',
'175,165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173',
'162,176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,',
',,,,159,166,157,158,154,155,156,116,118,,,117,,,,,,,,,149,150,,146,128',
'129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,610,401,153,,611,,,,,,',
',,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139',
',,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
'612,408,153,,613,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131',
'132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140',
'141,135,133,125,147,126,610,401,153,,611,,,,,,,,,149,150,,146,128,129',
'130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,612,408,153,,613,,,,,,',
',,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139',
',,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
'921,401,153,,922,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131',
'132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140',
'141,135,133,125,147,126,923,408,153,,924,,,,,,,,,149,150,,146,128,129',
'130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,940,408,153,,939,,,,,,',
',,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139',
',,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
'645,408,153,,646,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131',
'132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140',
'141,135,133,125,147,126,642,401,153,,643,,,,,,,,,149,150,,146,128,129',
'130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,694,401,153,,695,,,,,,',
',,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139',
',,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
'696,408,153,,697,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131',
'132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140',
'141,135,133,125,147,126,699,408,153,,700,,,,,,,,,149,150,,146,128,129',
'130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,459,401,153,,460,,,,,,',
',,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139',
',,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
'459,401,153,,460,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131',
'132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148,145,144,140,141',
'135,133,125,147,126,459,401,153,,460,,,,,,,,,149,150,,146,128,129,130',
'137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148',
'145,144,140,141,135,133,125,147,126,404,408,153,,403,,,,,,,,,149,150',
',146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,',
',,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,397,401,153',
',398,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152',
'138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125',
'147,126,,,153,229,233,238,239,240,235,237,245,246,241,242,,222,223,',
',243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229',
'233,238,239,240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,',
',,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239',
'240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226',
',232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240,235,237',
'245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227',
'224,225,236,234,230,,231,,229,233,238,239,240,235,237,245,246,241,242',
',222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234',
'230,,231,,229,233,238,239,240,235,237,245,246,241,242,,222,223,,247',
'243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229',
'233,238,239,240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,',
',,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239',
'240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226',
',232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240,235,237',
'245,246,241,242,,222,223,209,247,243,244,,,,,,,,,,,,,,,226,,232,,228',
'227,224,225,236,234,230,,231,,,,,,,,,,,,,,,,,247' ]
        racc_action_table = arr = ::Array.new(23473, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'612,543,543,543,543,543,543,612,612,612,543,543,612,612,612,543,612',
'543,543,543,543,543,543,543,876,612,612,612,612,543,543,543,543,543',
'543,543,612,612,543,612,612,612,612,612,543,543,941,543,543,543,543',
'543,543,543,543,543,346,543,543,543,325,543,543,923,543,543,543,612',
'612,612,612,612,612,612,612,612,612,612,612,612,612,616,643,612,612',
'612,543,612,612,543,333,612,543,543,612,612,543,612,543,612,666,612',
'543,612,612,612,612,612,612,612,543,612,612,612,694,543,543,543,543',
'19,543,543,369,552,677,543,543,612,612,612,612,87,612,543,612,543,612',
'770,87,87,87,923,289,87,87,87,58,87,332,643,695,315,680,922,315,87,19',
'87,87,87,336,941,346,467,692,862,941,87,87,292,87,87,87,87,87,325,921',
'326,923,710,325,696,346,923,710,643,369,346,643,697,564,564,421,421',
'643,685,333,467,87,87,87,87,87,87,87,87,87,87,87,87,87,87,517,802,87',
'87,87,801,87,87,694,545,87,745,351,87,87,690,87,552,87,351,87,58,87',
'87,87,87,87,87,87,342,87,352,87,342,581,696,642,614,352,212,770,693',
'332,697,695,770,87,87,87,87,613,87,427,87,336,87,922,613,613,613,745',
'922,613,613,613,544,613,692,862,564,692,421,692,862,564,696,613,613',
'613,921,326,653,653,697,921,326,613,613,212,613,613,613,613,613,570',
'570,581,581,625,317,25,427,802,642,294,581,517,802,318,662,545,801,662',
'610,763,545,466,613,613,613,613,613,613,613,613,613,613,613,613,613',
'613,329,625,613,613,613,329,613,613,642,370,613,642,215,613,613,645',
'613,642,613,466,613,283,613,613,613,613,613,613,613,282,613,610,613',
'281,25,544,763,367,294,303,544,653,279,763,699,341,613,613,613,613,90',
'613,763,613,570,613,25,90,90,90,294,215,90,90,90,293,90,611,645,457',
'763,370,370,370,90,645,90,90,90,637,645,702,303,340,645,637,90,90,303',
'90,90,90,90,90,867,661,867,699,341,367,367,367,645,457,699,341,115,658',
'354,699,341,115,115,699,341,354,611,90,90,90,90,90,90,90,90,90,90,90',
'90,90,90,699,341,90,90,90,340,90,90,213,593,90,368,340,90,90,707,90',
'340,90,657,90,340,90,90,90,90,90,90,90,404,90,74,90,38,355,320,404,404',
'404,340,74,355,404,404,298,404,90,90,90,90,74,90,593,90,404,90,356,213',
'593,3,357,932,932,356,3,404,404,357,404,404,404,404,404,368,368,368',
'38,618,842,618,618,618,38,618,678,842,678,678,678,858,678,858,858,858',
'842,858,404,404,404,404,404,404,404,404,404,404,404,404,404,404,365',
'398,404,404,404,618,404,324,324,270,404,366,358,404,618,618,618,618',
'404,358,404,267,404,404,404,404,404,404,404,403,404,404,404,15,359,397',
'403,403,403,299,299,359,403,403,398,403,404,404,618,404,398,404,361',
'678,452,404,276,724,858,361,24,276,365,365,365,403,403,24,403,403,403',
'403,403,366,366,366,15,672,397,672,672,672,15,672,397,433,452,353,683',
'683,452,452,452,452,353,266,403,403,403,403,403,403,403,403,403,403',
'403,403,403,403,604,37,403,403,403,672,403,433,654,704,403,433,433,403',
'704,729,672,672,403,599,403,652,403,403,403,403,403,403,403,211,403',
'854,403,854,854,854,211,854,563,316,17,17,316,563,37,211,403,403,330',
'403,37,403,40,40,331,403,664,664,664,664,664,664,313,313,319,664,664',
'319,594,854,664,252,664,664,664,664,664,664,664,221,854,854,217,216',
'664,664,664,664,664,664,664,335,753,664,753,753,753,337,753,664,664',
'453,664,664,664,664,664,664,664,664,664,747,664,664,664,748,664,664',
'434,664,664,664,749,898,751,898,898,898,852,898,852,852,852,453,852',
'752,344,453,453,453,453,664,651,344,664,754,756,664,664,214,434,664',
'344,664,434,434,850,664,850,850,850,898,850,574,574,664,852,574,574',
'574,664,664,664,664,758,664,664,852,852,759,664,664,665,665,665,665',
'665,665,664,762,664,665,665,590,850,311,665,584,665,665,665,665,665',
'665,665,850,850,195,775,776,665,665,665,665,665,665,665,777,882,665',
'882,882,882,778,882,665,665,779,665,665,665,665,665,665,665,665,665',
'782,665,665,665,783,665,665,785,665,665,665,787,859,578,859,859,859',
'926,859,926,926,926,789,926,300,896,792,896,896,896,665,896,648,665',
'795,101,665,665,647,379,665,44,665,630,39,913,665,913,913,913,859,913',
'804,385,665,926,808,809,812,665,665,665,665,896,665,665,926,926,813',
'665,665,907,907,907,907,907,907,665,547,665,907,907,546,913,36,907,387',
'907,907,907,907,907,907,907,913,913,390,393,541,907,907,907,907,907',
'907,907,826,827,907,636,636,636,636,636,907,907,395,907,907,907,907',
'907,907,907,907,907,833,907,907,907,22,907,907,539,907,907,907,536,790',
'529,790,790,790,911,790,911,911,911,841,911,522,930,521,930,930,930',
'907,930,520,907,396,508,907,907,405,505,907,860,907,413,864,824,907',
'824,824,824,790,824,865,632,907,911,870,423,875,907,907,907,907,930',
'907,907,911,911,312,907,907,905,905,905,905,905,905,907,877,907,905',
'905,878,824,880,905,644,905,905,905,905,905,905,905,824,824,496,884',
'886,905,905,905,905,905,905,905,304,16,905,277,277,277,277,277,905,905',
'492,905,905,905,905,905,905,905,905,905,840,905,905,905,435,905,905',
'840,905,905,905,439,891,892,893,883,840,948,288,948,948,948,883,948',
'894,288,895,439,439,436,905,883,897,905,288,487,905,905,437,13,905,12',
'905,439,485,439,905,439,439,439,439,482,481,10,905,948,920,7,305,905',
'905,905,905,641,905,905,948,948,639,905,905,899,899,899,899,899,899',
'905,438,905,899,899,468,931,308,899,933,899,899,899,899,899,899,899',
'480,480,480,480,480,899,899,899,899,899,899,899,934,675,899,675,675',
'675,935,675,899,899,936,899,899,899,899,899,899,899,899,899,287,899',
'899,899,937,899,899,287,899,899,899,531,938,531,531,531,287,531,334',
'675,939,940,839,1,942,334,943,464,675,839,899,953,890,899,334,,899,899',
'839,890,899,,899,,,,899,,890,531,306,,,,899,,,306,531,899,899,899,899',
',899,899,306,,,899,899,565,565,565,565,565,565,899,,899,565,565,,,,565',
',565,565,565,565,565,565,565,6,6,6,6,6,565,565,565,565,565,565,565,',
'788,565,788,788,788,,788,565,565,,565,565,565,565,565,565,565,565,565',
'290,565,565,565,14,565,565,290,565,565,565,14,,,,924,290,,555,788,14',
',924,,,555,,924,788,,565,924,838,565,555,,565,565,,838,565,,565,,,,565',
',838,,45,700,,,565,,,45,700,565,565,565,565,700,565,565,45,700,,565',
'565,285,285,285,285,285,285,565,,565,285,285,,,,285,,285,285,285,285',
'285,285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,285,285,,285',
'285,285,285,285,285,285,285,285,,285,285,285,,285,285,,285,285,285,450',
'450,450,450,450,450,450,286,646,450,450,491,,,286,646,450,450,491,285',
'646,,285,286,646,285,285,491,,285,,285,450,,450,285,450,450,450,450',
'450,450,450,285,450,,,,285,285,285,285,,285,285,,,,285,285,280,280,280',
'280,280,280,285,,285,280,280,,,,280,,280,280,280,280,280,280,280,,,',
',,280,280,280,280,280,280,280,,,280,,,,,,280,280,,280,280,280,280,280',
'280,280,280,280,,280,280,280,,280,280,,280,280,280,451,451,451,451,451',
'451,451,,,451,451,,,,,,451,451,,280,,,280,,,280,280,,,280,,280,451,',
'451,280,451,451,451,451,451,451,451,280,451,,,,280,280,280,280,,280',
'280,,,,280,280,703,703,703,703,703,703,280,,280,703,703,,,,703,,703',
'703,703,703,703,703,703,,,,,,703,703,703,703,703,703,703,,,703,,,,,',
'703,703,,703,703,703,703,703,703,703,703,703,,703,703,703,,703,703,',
'703,703,703,431,431,431,431,431,431,431,431,431,431,431,,431,431,,,431',
'431,,703,,,703,,,703,703,,,703,,703,431,,431,703,431,431,431,431,431',
'431,431,703,431,,,,703,703,703,703,,703,703,,,,703,703,708,708,708,708',
'708,708,703,,703,708,708,,,,708,,708,708,708,708,708,708,708,,,,,,708',
'708,708,708,708,708,708,,,708,,,,,,708,708,,708,708,708,708,708,708',
'708,708,708,,708,708,708,,708,708,,708,708,708,455,455,455,455,455,455',
'455,455,,455,455,,,,,,455,455,,708,,,708,,,708,708,,,708,,708,455,,455',
'708,455,455,455,455,455,455,455,708,455,,,,708,708,708,708,,708,708',
',,,708,708,718,718,718,718,718,718,708,,708,718,718,,,,718,,718,718',
'718,718,718,718,718,,,,,,718,718,718,718,718,718,718,,,718,,,,,,718',
'718,,718,718,718,718,718,718,718,718,718,,718,718,718,,718,718,,718',
'718,718,442,442,442,442,442,442,442,,,442,442,,,,,,442,442,,718,,,718',
',,718,718,,,718,,718,442,,442,718,442,442,442,442,442,442,442,718,442',
',,,718,718,718,718,,718,718,,,,718,718,837,837,837,837,837,837,718,',
'718,837,837,,,,837,,837,837,837,837,837,837,837,,,,,,837,837,837,837',
'837,837,837,,,837,,,,,,837,837,,837,837,837,837,837,837,837,837,837',
',837,837,837,,837,837,,837,837,837,454,454,454,454,454,454,454,,,454',
'454,,,,,,454,454,,837,,,837,,,837,837,,,837,,837,454,,454,837,454,454',
'454,454,454,454,454,837,454,,,,837,837,837,837,,837,837,,,,837,837,656',
'656,656,656,656,656,837,,837,656,656,,,,656,,656,656,656,656,656,656',
'656,,,,,,656,656,656,656,656,656,656,,,656,,,,,,656,656,,656,656,656',
'656,656,656,656,656,656,,656,656,656,,656,656,,656,656,656,449,449,449',
'449,449,449,449,,,449,449,,,,,,449,449,,656,,,656,,,656,656,,,656,,656',
'449,,449,656,449,449,449,449,449,449,449,656,449,,,,656,656,656,656',
',656,656,,,,656,656,540,540,540,540,540,540,656,,656,540,540,,,,540',
',540,540,540,540,540,540,540,,,,,,540,540,540,540,540,540,540,,,540',
',,,,,540,540,,540,540,540,540,540,540,540,540,540,,540,540,540,,540',
'540,,540,540,540,432,432,432,432,432,432,432,432,432,432,432,,432,432',
',,432,432,,540,,,540,,,540,540,,,540,,540,432,,432,540,432,432,432,432',
'432,432,432,540,432,,,,540,540,540,540,,540,540,,,,540,540,220,220,220',
'220,220,220,540,,540,220,220,,,,220,,220,220,220,220,220,220,220,,,',
',,220,220,220,220,220,220,220,,,220,,,,,,220,220,,220,220,220,220,220',
'220,220,220,220,,220,220,220,,220,220,,220,220,220,448,448,448,448,448',
'448,448,,,448,448,,,,,,448,448,,220,,,220,,,220,220,,,220,,220,448,',
'448,220,448,448,448,448,448,448,448,220,448,,,,220,220,220,220,,220',
'220,,,,220,220,757,757,757,757,757,757,220,,220,757,757,,,,757,,757',
'757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757,,,757,,,,,',
'757,757,,757,757,757,757,757,757,757,757,757,,757,757,757,,757,757,',
'757,757,757,447,447,447,447,447,447,447,,,447,447,,,,,,447,447,,757',
',,757,,,757,757,,,757,,757,447,,447,757,447,447,447,447,447,447,447',
'757,447,,,,757,757,757,757,,757,757,,,,757,757,767,767,767,767,767,767',
'757,,757,767,767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767',
'767,767,767,767,,,767,,,,,,767,767,,767,767,767,767,767,767,767,767',
'767,,767,767,767,,767,767,,767,767,767,446,,,,,,,,,,,,,,,,446,446,,767',
',,767,,,767,767,,,767,,767,446,,446,767,446,446,446,446,,,446,767,446',
',,,767,767,767,767,,767,767,,,,767,767,628,628,628,628,628,628,767,',
'767,628,628,,,,628,,628,628,628,628,628,628,628,,,,,,628,628,628,628',
'628,628,628,,,628,,,,,,628,628,,628,628,628,628,628,628,628,628,628',
',628,628,628,,628,628,,628,628,628,445,,,,,,,,,,,,,,,,445,445,,628,',
',628,,,628,628,,,628,,628,445,,445,628,445,445,445,445,,,445,628,445',
',,,628,628,628,628,,628,628,,,,628,628,627,627,627,627,627,627,628,',
'628,627,627,,,,627,,627,627,627,627,627,627,627,,,,,,627,627,627,627',
'627,627,627,,,627,,,,,,627,627,,627,627,627,627,627,627,627,627,627',
',627,627,627,,627,627,,627,627,627,443,,,,,,,,,,,,,,,,443,443,,627,',
',627,,,627,627,,,627,,627,443,,443,627,443,443,443,443,,,443,627,443',
',,,627,627,627,627,,627,627,,,,627,627,32,32,32,32,32,32,627,,627,32',
'32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,32',
'32,,32,32,32,32,32,32,32,32,32,,32,32,32,,32,32,,32,32,32,444,,,,,,',
',,,,,,,,,444,444,,32,,,32,,,32,32,,,32,,32,444,,444,32,444,444,444,444',
',,444,32,444,,,,32,32,32,32,,32,32,,,,32,32,197,197,197,197,197,197',
'32,,32,197,197,,,,197,,197,197,197,197,197,197,197,,,,,,197,197,197',
'197,197,197,197,,,197,,,,,,197,197,,197,197,197,197,197,197,197,197',
'197,,197,197,197,,197,197,,197,197,197,441,,,,,,,,,,,,,,,,441,441,,197',
',,197,,,197,197,,,197,,197,441,,,197,441,441,441,441,,,,197,,,,,197',
'197,197,197,,197,197,,,,197,197,113,113,113,113,113,113,197,,197,113',
'113,,,,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113',
'113,,,113,,,,,,113,113,113,113,113,113,113,113,113,113,113,113,,113',
'113,113,,113,113,,113,113,113,440,,,,,,,,,,,,,,,,440,440,,113,,,113',
',,113,113,,,113,,113,440,,440,113,440,440,440,440,,,,113,,,,,113,113',
'113,113,,113,113,,,,113,113,796,796,796,796,796,796,113,,113,796,796',
',,,796,,796,796,796,796,796,796,796,,,,,,796,796,796,796,796,796,796',
',,796,,,,,,796,796,,796,796,796,796,796,796,796,796,796,,796,796,796',
',796,796,,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,',
'796,,,,796,,,,,,,,796,,,,,796,796,796,796,,796,796,,,,796,796,620,620',
'620,620,620,620,796,,796,620,620,,,,620,,620,620,620,620,620,620,620',
',,,,,620,620,620,620,620,620,620,,,620,,,,,,620,620,,620,620,620,620',
'620,620,620,620,620,,620,620,620,,620,620,,620,620,620,,,,,,,,,,,,,',
',,,,,,620,,,620,,,620,620,,,620,,620,,,,620,,,,,,,,620,,,,,620,620,620',
'620,,620,620,,,,620,620,806,806,806,806,806,806,620,,620,806,806,,,',
'806,,806,806,806,806,806,806,806,,,,,,806,806,806,806,806,806,806,,',
'806,,,,,,806,806,,806,806,806,806,806,806,806,806,806,,806,806,806,',
'806,806,,806,806,806,,,,,,,,,,,,,,,,,,,,806,,,806,,,806,806,,,806,,806',
',,,806,,,,,,,,806,,,,,806,806,806,806,,806,806,,,,806,806,0,0,0,0,0',
'0,806,,806,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,416,0',
'0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,,0,0,0,416,416,416,416,416,416,416',
'416,416,416,416,,416,416,,,416,416,,0,,,0,,,0,0,,,0,,0,416,,416,0,416',
'416,416,416,416,416,416,0,416,,,,0,0,0,0,,0,0,,,,0,0,,416,409,416,,',
'0,,0,409,409,409,,,409,409,409,669,409,669,669,669,,669,,,,409,409,409',
'409,,,,,,,,409,409,,409,409,409,409,409,,,,,,,,,,669,,,,,,,,,669,669',
'669,669,,409,409,409,409,409,409,409,409,409,409,409,409,409,409,,,409',
'409,409,,,409,,,409,,,409,409,,409,,409,,409,,409,409,409,409,409,409',
'409,,409,409,409,,,,,,,,,,,,,,409,409,409,409,,409,,409,797,797,797',
'797,797,797,,,,797,797,,,,797,,797,797,797,797,797,797,797,,,,,,797',
'797,797,797,797,797,797,,,797,,,,,392,797,797,,797,797,797,797,797,797',
'797,797,797,,797,797,797,,797,797,,797,797,797,392,392,392,392,392,392',
'392,392,392,392,392,,392,392,,,392,392,,797,,,797,,,797,797,,,797,,797',
'392,,392,797,392,392,392,392,392,392,392,797,392,,,,797,797,797,797',
',797,797,,,,797,797,,392,408,,,,797,,797,408,408,408,,,408,408,408,518',
'408,518,518,518,,518,,,,408,408,408,408,,,,,,,,408,408,,408,408,408',
'408,408,,,,,,,,,,518,,,,,,,,,518,518,518,518,,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,,,408,408,408,,,408,,,408,,,408,408',
',408,,408,,408,,408,408,408,408,408,408,408,,408,408,408,,,,,,,,,,,',
',,408,408,408,408,,408,,408,54,54,54,54,54,54,,,,54,54,,,,54,,54,54',
'54,54,54,54,54,,,,,,54,54,54,54,54,54,54,,,54,,,,,,54,54,,54,54,54,54',
'54,54,54,54,54,,54,54,54,,54,54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54',
',,54,54,,,54,,54,,,,54,,,,,,,,54,,,,,54,54,54,54,,54,54,,,,54,54,800',
'800,800,800,800,800,54,,54,800,800,,,,800,,800,800,800,800,800,800,800',
',,,,,800,800,800,800,800,800,800,,,800,,,,,615,800,800,,800,800,800',
'800,800,800,800,800,800,,800,800,800,,800,800,,800,800,800,615,615,615',
'615,615,615,615,615,615,615,615,,615,615,,,615,615,,800,,,800,,,800',
'800,,,800,,800,615,,615,800,615,615,615,615,615,615,615,800,615,,,,800',
'800,800,800,,800,800,,,,800,800,,615,53,,,,800,,800,53,53,53,,,53,53',
'53,873,53,873,873,873,,873,,,,,53,53,53,,,,,,,,53,53,,53,53,53,53,53',
',,,,,,,,,873,873,,,,,,,,873,873,873,873,,53,53,53,53,53,53,53,53,53',
'53,53,53,53,53,,,53,53,53,,,53,,,53,,,53,53,,53,,53,,53,,53,53,53,53',
'53,53,53,,53,,53,,,,,,,,,,,,,,53,53,53,53,,53,,53,389,389,389,,389,',
',,389,389,,,,389,,389,389,389,389,389,389,389,,,,,,389,389,389,389,389',
'389,389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389,,389,389,389',
',389,389,,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,,389,',
',,,,389,,,,,,,,389,,,,,389,389,389,389,,389,389,,,,389,389,,43,43,43',
',43,389,,389,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43',
'43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,,43,43,43',
',,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,43,,,,,43,43',
'43,43,,43,43,,,,43,43,,55,55,55,,55,43,,43,55,55,,,,55,,55,55,55,55',
'55,55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55',
'55,55,,55,55,55,,55,55,,55,55,55,,,,,,,,,,,,,,,,,,,,55,,,55,,,55,55',
',,55,,,,,,55,,,,,,,,55,,,,,55,55,55,55,,55,55,,,,55,55,,56,56,56,,56',
'55,,55,56,56,,,,56,,56,56,56,56,56,56,56,,,,,,56,56,56,56,56,56,56,',
',56,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56',
',,,,,,,,,,,,,,,,,,,56,,,56,,,56,56,,,56,,56,,,,56,,,,,,,,56,,,,,56,56',
'56,56,,56,56,,,,56,56,,57,57,57,,57,56,,56,57,57,,,,57,,57,57,57,57',
'57,57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57,57,57,57',
'57,57,57,57,57,57,,57,57,,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57,,,57,57',
',,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,,57,57,,,,57,57,,42,42,42,,42',
'57,,57,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,',
',42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,,42,42,42,,',
',,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,42,,,,,42,42,42',
'42,,42,42,,,,42,42,,60,60,60,,60,42,,42,60,60,,,,60,,60,60,60,60,60',
'60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60',
'60,,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60',
',,,,,60,,,,,,,,60,,,,,60,60,60,60,,60,60,,,,60,60,,61,61,61,,61,60,',
'60,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61',
',,,,,,61,,,61,61,61,61,61,61,61,61,,61,61,61,,61,61,,61,61,61,,,,,,',
',,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61',
',61,61,,,,61,61,,64,64,64,,64,61,,61,64,64,,,,64,,64,64,64,64,64,64',
'64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64',
',64,64,64,,64,64,,64,64,64,740,740,740,740,740,740,740,740,740,740,740',
',740,740,,,740,740,,64,,,64,,,64,64,,,64,,,740,,740,64,740,740,740,740',
'740,740,740,64,740,,,,64,64,64,64,,64,64,,,,64,64,64,740,,,,64,64,,64',
'65,65,65,,65,,,,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65',
'65,65,,,65,,,,,,,65,,,65,65,65,65,65,65,65,65,,65,65,65,,65,65,,,,65',
',,,,,,,,,,,,,,,,,,,65,,,65,,,65,65,,,65,,65,,,,,,709,,709,709,709,,709',
',,,,65,65,65,65,,65,65,,,,65,65,,66,66,66,,66,65,,65,66,66,,,,66,709',
'66,66,66,66,66,66,66,,709,709,709,709,66,66,66,66,66,66,66,,,66,,,,',
',,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,,,66,,,,,,,,,,,,,,',
',,66,,,66,,,66,,,66,66,,,66,,,,,,,,667,,667,667,667,,667,,,,,66,66,66',
'66,,66,66,,,,66,66,,67,67,67,,67,66,,66,67,67,,,,67,667,67,67,67,67',
'67,67,67,,667,667,667,667,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67',
'67,67,67,67,67,67,,67,67,67,,67,67,,,,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,,,908,,908,908,908,,908,,,,,67,67,67,67,,67,67,,,',
'67,67,,506,506,506,,506,67,,67,506,506,,,,506,908,506,506,506,506,506',
'506,506,,908,908,908,908,506,506,506,506,506,506,506,,,506,,,,,,,506',
',,506,506,506,506,506,506,506,506,,506,506,506,,506,506,,506,506,506',
',,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,506,,,,506,,,,,,,,506',
',,,,506,506,506,506,,506,506,,,,506,506,,41,41,41,,41,506,,506,41,41',
',,,41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41,,,,,,,41',
',,41,41,41,41,41,41,41,41,,41,41,41,,41,41,,41,41,41,,,,,,,,,,,,,,,',
',,,,41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,41,,,,,41,41,41,41,,41,41,,',
',41,41,,504,504,504,,504,41,,41,504,504,,,,504,,504,504,504,504,504',
'504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,,,504,,,504,504,504',
'504,504,504,504,504,,504,504,504,,504,504,,504,504,504,,,,,,,,,,,,,',
',,,,,,504,,,504,,,504,504,,,504,,,,,,504,,,,,,,,504,,,,,504,504,504',
'504,,504,504,,,,504,504,,816,816,816,,816,504,,504,816,816,,,,816,,816',
'816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816,,,816,,,,,',
',816,,,816,816,816,816,816,816,816,816,816,816,816,816,,816,816,,816',
'816,816,,,,,,,,,,,,,,,,,,,,816,,,816,,,816,816,,,816,,,,816,,816,,,',
',,,,816,,,,,816,816,816,816,,816,816,,,,816,816,,817,817,817,,817,816',
',816,817,817,,,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817',
'817,817,817,,,817,,,,,,,817,,,817,817,817,817,817,817,817,817,,817,817',
'817,,817,817,,817,817,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817',
',,,,,817,,,,,,,,817,,,,,817,817,817,817,,817,817,,,,817,817,,103,103',
'103,103,103,817,,817,103,103,,,,103,,103,103,103,103,103,103,103,,,',
',,103,103,103,103,103,103,103,,,103,,,,,,103,103,103,103,103,103,103',
'103,103,103,103,103,,103,103,103,,103,103,,103,103,103,818,818,818,818',
'818,818,818,818,818,818,818,,818,818,,,818,818,,103,,,103,,,103,103',
',,103,,103,818,,818,103,818,818,818,818,818,818,818,103,818,,,,103,103',
'103,103,,103,103,,,,103,103,,818,,,,103,103,,103,108,108,108,,108,,',
',108,108,,,,108,,108,108,108,108,108,108,108,,,,,,108,108,108,108,108',
'108,108,,,108,,,,,,,108,,,108,108,108,108,108,108,108,108,,108,108,108',
',108,108,,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108,',
',,,,108,,,,,,,,108,,,,,108,108,108,108,,108,108,,,,108,108,,109,109',
'109,,109,108,,108,109,109,,,,109,,109,109,109,109,109,109,109,,,,,,109',
'109,109,109,109,109,109,,,109,,,,,,,109,,,109,109,109,109,109,109,109',
'109,,109,109,109,,109,109,,109,109,109,,,,,,,,,,,,,,,,,,,,109,,,109',
',,109,109,,,109,,,,,,109,,,,,,,,109,,,,,109,109,109,109,,109,109,,,',
'109,109,,110,110,110,,110,109,,109,110,110,,,,110,,110,110,110,110,110',
'110,110,,,,,,110,110,110,110,110,110,110,,,110,,,,,,,110,,,110,110,110',
'110,110,110,110,110,,110,110,110,,110,110,,110,110,110,,,,,,,,,,,,,',
',,,,,,110,,,110,,,110,110,,,110,,,,,,110,,,,,,,,110,,,,,110,110,110',
'110,,110,110,,,,110,110,,111,111,111,,111,110,,110,111,111,,,,111,,111',
'111,111,111,111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,',
',111,,,111,111,111,111,111,111,111,111,,111,111,111,,111,111,,111,111',
'111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,,,,,111,,,,,,,,111',
',,,,111,111,111,111,,111,111,,,,111,111,,112,112,112,112,112,111,,111',
'112,112,,,,112,,112,112,112,112,112,112,112,,,,,,112,112,112,112,112',
'112,112,,,112,,,,,,112,112,,112,112,112,112,112,112,112,112,112,,112',
'112,112,,112,112,,112,112,112,,,,,,,,,,,,,,,,,,,,112,,,112,,,112,112',
',,112,,112,,,,112,,,,,,,,112,,,,,112,112,112,112,,112,112,,,,112,112',
',34,34,34,,34,112,,112,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34',
'34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34',
'34,,,,34,738,738,738,738,738,738,738,738,738,738,738,,738,738,,,738',
'738,,34,,,34,,,34,34,,,34,,,738,,738,,738,738,738,738,738,738,738,,738',
',,,34,34,34,34,,34,34,,,,34,34,,738,,34,,,34,,34,794,794,794,,794,,',
',794,794,,,,794,,794,794,794,794,794,794,794,,,,,,794,794,794,794,794',
'794,794,,,794,,,,,,,794,,,794,794,794,794,794,794,794,794,,794,794,794',
',794,794,,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,,794,',
',,,,794,,,,,,,,794,,,,,794,794,794,794,,794,794,,,,794,794,,771,771',
'771,,771,794,,794,771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771',
'771,771,771,771,771,771,,,771,,,,,,,771,,,771,771,771,771,771,771,771',
'771,,771,771,771,,771,771,,,,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771',
'771,,,771,,,,,,,,847,,847,847,847,,847,,,,,771,771,771,771,,771,771',
',,,771,771,,33,33,33,,33,771,,771,33,33,,,,33,847,33,33,33,33,33,33',
'33,,847,847,847,847,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33',
'33,33,33,33,,33,33,33,,33,33,,,,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33',
',,33,,33,,,,,,821,,821,821,821,,821,,,,,33,33,33,33,,33,33,,,,33,33',
',198,198,198,,198,33,,33,198,198,,,,198,821,198,198,198,198,198,198',
'198,,821,821,821,821,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198',
'198,198,198,198,198,198,198,,198,198,198,,198,198,,198,198,198,,,,,',
',,,,,,,,,,,,,,198,,,198,,,198,198,,,198,,198,,,,198,,,,,,,,198,,,,,198',
'198,198,198,,198,198,,,,198,198,,199,199,199,,199,198,,198,199,199,',
',,199,,199,199,199,199,199,199,199,,,,,,199,199,199,199,199,199,199',
',,199,,,,,,,199,,,199,199,199,199,199,199,199,199,,199,199,199,,199',
'199,,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,,199,,,,,,199',
',,,,,,,199,,,,,199,199,199,199,,199,199,,,,199,199,,200,200,200,,200',
'199,,199,200,200,,,,200,,200,200,200,200,200,200,200,,,,,,200,200,200',
'200,200,200,200,,,200,,,,,,,200,,,200,200,200,200,200,200,200,200,200',
'200,200,200,,200,200,,200,200,200,,,,,,,,,,,,,,,,,,,,200,,,200,,,200',
'200,,,200,,200,,200,,200,,,,,,,,200,,,,,200,200,200,200,,200,200,,,',
'200,200,,30,30,30,,30,200,,200,30,30,,,,30,,30,30,30,30,30,30,30,,,',
',,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30',
'30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,',
'30,,30,,,,,,,,30,,,,,30,30,30,30,,30,30,,,,30,30,,29,29,29,,29,30,,30',
'29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,',
',,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,,29,29,29,,,,,,,',
',,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,,,,,,29,,,,,29,29,29',
'29,,29,29,,,,29,29,,203,203,203,,203,29,,29,203,203,,,,203,,203,203',
'203,203,203,203,203,,,,,,203,203,203,203,203,203,203,,,203,,,,,,,203',
',,203,203,203,203,203,203,203,203,,203,203,203,,203,203,,203,203,203',
',,,,,,,,,,,,,,,,,,,203,,,203,,,203,203,,,203,,,,,,203,,,,,,,,203,,,',
',203,203,203,203,,203,203,,,,203,203,,204,204,204,,204,203,,203,204',
'204,,,,204,,204,204,204,204,204,204,204,,,,,,204,204,204,204,204,204',
'204,,,204,,,,,,,204,,,204,204,204,204,204,204,204,204,,204,204,204,',
'204,204,,204,204,204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204,204,,,204,,204',
',,,204,,,,,,,,204,,,,,204,204,204,204,,204,204,,,,204,204,,205,205,205',
',205,204,,204,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205',
'205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205',
',205,205,205,,205,205,,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205',
'205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205,,205,205,,,,205,205',
',206,206,206,,206,205,,205,206,206,,,,206,,206,206,206,206,206,206,206',
',,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206',
'206,206,206,,206,206,206,,206,206,,206,206,206,,,,,,,,,,,,,,,,,,,,206',
',,206,,,206,206,,,206,,,,,,206,,,,,,,,206,,,,,206,206,206,206,,206,206',
',,,206,206,,207,207,207,,207,206,,206,207,207,,,,207,,207,207,207,207',
'207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207',
'207,207,207,207,207,207,,207,207,207,,207,207,,207,207,207,,,,,,,,,',
',,,,,,,,,,207,,,207,,,207,207,,,207,,,,,,207,,,,,,,,207,,,,,207,207',
'207,207,,207,207,,,,207,207,,208,208,208,,208,207,,207,208,208,,,,208',
',208,208,208,208,208,208,208,,,,,,208,208,208,208,208,208,208,,,208',
',,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208,,208,208,,208',
'208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208,,,,,,',
',208,,,,,208,208,208,208,,208,208,,,,208,208,208,510,510,510,,510,208',
',208,510,510,,,,510,,510,510,510,510,510,510,510,,,,,,510,510,510,510',
'510,510,510,,,510,,,,,,,510,,,510,510,510,510,510,510,510,510,510,510',
'510,510,,510,510,,510,510,510,,,,,,,,,,,,,,,,,,,,510,,,510,,,510,510',
',,510,,510,,,,510,,,,,,,,510,,,,,510,510,510,510,,510,510,,,,510,510',
',28,28,28,,28,510,,510,28,28,,,,28,,28,28,28,28,28,28,28,,,,,,28,28',
'28,28,28,28,28,,,28,,,,,,,28,,,28,28,28,28,28,28,28,28,28,28,28,28,',
'28,28,,28,28,28,,,,,,,,,,,,,,,,,,,,28,,,28,,,28,28,,,28,,28,,28,,28',
',,,,,,,28,,,,,28,28,28,28,,28,28,,,,28,28,,513,513,513,,513,28,,28,513',
'513,,,,513,,513,513,513,513,513,513,513,,,,,,513,513,513,513,513,513',
'513,,,513,,,,,,,513,,,513,513,513,513,513,513,513,513,513,513,513,513',
',513,513,,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,',
',,,,513,,,,,,,,513,,,,,513,513,513,513,,513,513,,,,513,513,,426,426',
'426,,426,513,,513,426,426,,,,426,,426,426,426,426,426,426,426,,,,,,426',
'426,426,426,426,426,426,,,426,,,,,,,426,,,426,426,426,426,426,426,426',
'426,426,426,426,426,,426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426',
',,426,426,,,426,,426,,426,,426,,,,,,,,426,,,,,426,426,426,426,,426,426',
',,,426,426,,746,746,746,,746,426,,426,746,746,,,,746,,746,746,746,746',
'746,746,746,,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746',
'746,746,746,746,746,746,,746,746,746,,746,746,,746,746,746,,,,,,,,,',
',,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,746,,,,,,,,746,,,,,746,746',
'746,746,,746,746,,,,746,746,,744,744,744,,744,746,,746,744,744,,,,744',
',744,744,744,744,744,744,744,,,,,,744,744,744,744,744,744,744,,,744',
',,,,,,744,,,744,744,744,744,744,744,744,744,,744,744,744,,744,744,,744',
'744,744,,,,,,,,,,,,,,,,,,,,744,,,744,,,744,744,,,744,,,,,,744,,,,,,',
',744,,,,,744,744,744,744,,744,744,,,,744,744,,743,743,743,,743,744,',
'744,743,743,,,,743,,743,743,743,743,743,743,743,,,,,,743,743,743,743',
'743,743,743,,,743,,,,,,,743,,,743,743,743,743,743,743,743,743,,743,743',
'743,,743,743,,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743',
',,,,,743,,,,,,,,743,,,,,743,743,743,743,,743,743,,,,743,743,,219,219',
'219,,219,743,,743,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219',
'219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219',
'219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219',
',,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,,219,219,,,',
'219,219,,500,500,500,,500,219,,219,500,500,,,,500,,500,500,500,500,500',
'500,500,,,,,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500',
'500,500,500,500,500,,500,500,500,,500,500,,500,500,500,,,,,,,,,,,,,',
',,,,,,500,,,500,,,500,500,,,500,,,,,,500,,,,,,,,500,,,,,500,500,500',
'500,,500,500,,,,500,500,,742,742,742,,742,500,,500,742,742,,,,742,,742',
'742,742,742,742,742,742,,,,,,742,742,742,742,742,742,742,,,742,,,,,',
',742,,,742,742,742,742,742,742,742,742,,742,742,742,,742,742,,742,742',
'742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,,742,,,,,,742,,,,,,,,742',
',,,,742,742,742,742,,742,742,,,,742,742,,222,222,222,,222,742,,742,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,',
',,,222,,,,,,,,222,,,,,222,222,222,222,,222,222,,,,222,222,,223,223,223',
',223,222,,222,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,,223,223,,,,223,223',
',224,224,224,,224,223,,223,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,,224,224',
',,,224,224,,225,225,225,,225,224,,224,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,',
',,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225',
'225,225,,225,225,,,,225,225,,226,226,226,,226,225,,225,226,226,,,,226',
',226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226',
',,,,,,226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226,,226',
'226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,',
',226,,,,,226,226,226,226,,226,226,,,,226,226,,227,227,227,,227,226,',
'226,227,227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227',
'227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227',
'227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227',
',,,,,227,,,,,,,,227,,,,,227,227,227,227,,227,227,,,,227,227,,228,228',
'228,,228,227,,227,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228',
'228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228',
'228,,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228',
',,228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,,228,228,,,',
'228,228,,229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229',
'229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229',
'229,229,229,229,229,,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,',
',,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229',
'229,,229,229,,,,229,229,,230,230,230,,230,229,,229,230,230,,,,230,,230',
'230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,',
',230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,,230,230',
'230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230',
',,,,230,230,230,230,,230,230,,,,230,230,,231,231,231,,231,230,,230,231',
'231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231',
'231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,',
'231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,',
',,,231,,,,,,,,231,,,,,231,231,231,231,,231,231,,,,231,231,,232,232,232',
',232,231,,231,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232',
'232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232',
',232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232',
'232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,,232,232,,,,232,232',
',233,233,233,,233,232,,232,233,233,,,,233,,233,233,233,233,233,233,233',
',,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233',
'233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233',
',,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,,233,233',
',,,233,233,,234,234,234,,234,233,,233,234,234,,,,234,,234,234,234,234',
'234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234',
'234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,',
',,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234',
'234,234,,234,234,,,,234,234,,235,235,235,,235,234,,234,235,235,,,,235',
',235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235',
',,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235',
'235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,',
',235,,,,,235,235,235,235,,235,235,,,,235,235,,236,236,236,,236,235,',
'235,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236',
'236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236',
'236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236',
',,,,,236,,,,,,,,236,,,,,236,236,236,236,,236,236,,,,236,236,,237,237',
'237,,237,236,,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237',
',,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,,237,237,,,',
'237,237,,238,238,238,,238,237,,237,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,',
',,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238',
'238,,238,238,,,,238,238,,239,239,239,,239,238,,238,239,239,,,,239,,239',
'239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,',
',239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239',
'239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239',
',,,,239,239,239,239,,239,239,,,,239,239,,240,240,240,,240,239,,239,240',
'240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240',
'240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,',
'240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,',
',,,240,,,,,,,,240,,,,,240,240,240,240,,240,240,,,,240,240,,241,241,241',
',241,240,,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241',
'241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241',
',241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241',
'241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,,241,241,,,,241,241',
',242,242,242,,242,241,,241,242,242,,,,242,,242,242,242,242,242,242,242',
',,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242',
'242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242',
',,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,,242,242',
',,,242,242,,243,243,243,,243,242,,242,243,243,,,,243,,243,243,243,243',
'243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243',
'243,243,243,243,243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,',
',,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243',
'243,243,,243,243,,,,243,243,,244,244,244,,244,243,,243,244,244,,,,244',
',244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244',
',,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244',
'244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,',
',244,,,,,244,244,244,244,,244,244,,,,244,244,,245,245,245,,245,244,',
'244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245',
'245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245',
'245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245',
',,,,,245,,,,,,,,245,,,,,245,245,245,245,,245,245,,,,245,245,,246,246',
'246,,246,245,,245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246',
'246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246',
'246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246',
',,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,,246,246,,,',
'246,246,,247,247,247,,247,246,,246,247,247,,,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,',
',,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247',
'247,,247,247,,,,247,247,,428,428,428,,428,247,,247,428,428,,,,428,,428',
'428,428,428,428,428,428,,,,,,428,428,428,428,428,428,428,,,428,,,,,',
',428,,,428,428,428,428,428,428,428,428,,428,428,428,,428,428,,428,428',
'428,,,,,,,,,,,,,,,,,,,,428,,,428,,,428,428,,,428,,,,,,428,,,,,,,,428',
',,,,428,428,428,428,,428,428,,,,428,428,,831,831,831,,831,428,,428,831',
'831,,,,831,,831,831,831,831,831,831,831,,,,,,831,831,831,831,831,831',
'831,,,831,,,,,,,831,,,831,831,831,831,831,831,831,831,,831,831,831,',
'831,831,,,,831,,,,,,,,,,,,,,,,,,,,831,,,831,,,831,831,,,831,,,,,,,,819',
',819,819,819,,819,,,,,831,831,831,831,,831,831,,,,831,831,,741,741,741',
',741,831,,831,741,741,,,,741,819,741,741,741,741,741,741,741,,819,819',
'819,819,741,741,741,741,741,741,741,,,741,,,,,,,741,,,741,741,741,741',
'741,741,741,741,,741,741,741,,741,741,,741,741,741,,,,,,,,,,,,,,,,,',
',,741,,,741,,,741,741,,,741,,,,,,741,,,,,,,,741,,,,,741,741,741,741',
',741,741,,,,741,741,,253,253,253,,253,741,,741,253,253,,,,253,,253,253',
'253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253',
',,253,253,253,253,253,253,253,253,253,253,253,253,,253,253,,253,253',
'253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,253,,253,,253,,,,',
',,,253,,,,,253,253,253,253,,253,253,,,,253,253,,254,254,254,,254,253',
',253,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254',
'254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,254,254',
'254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254',
',,254,,254,,254,,254,,,,,,,,254,,,,,254,254,254,254,,254,254,,,,254',
'254,,262,262,262,,262,254,,254,262,262,,,,262,,262,262,262,262,262,262',
'262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262',
'262,262,262,262,262,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,,',
',,,,,262,,,262,,,262,262,,,262,,262,,262,,262,,,,,,,,262,,,,,262,262',
'262,262,,262,262,,,,262,262,262,727,727,727,,727,262,,262,727,727,,',
',727,,727,727,727,727,727,727,727,,,,,,727,727,727,727,727,727,727,',
',727,,,,,,,727,,,727,727,727,727,727,727,727,727,,727,727,727,,727,727',
',727,727,727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,,727,,,,,,727,',
',,,,,,727,,,,,727,727,727,727,,727,727,,,,727,727,,725,725,725,,725',
'727,,727,725,725,,,,725,,725,725,725,725,725,725,725,,,,,,725,725,725',
'725,725,725,725,,,725,,,,,,,725,,,725,725,725,725,725,725,725,725,,725',
'725,725,,725,725,,725,725,725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725',
',,725,,,,,,725,,,,,,,,725,,,,,725,725,725,725,,725,725,,,,725,725,,429',
'429,429,,429,725,,725,429,429,,,,429,,429,429,429,429,429,429,429,,',
',,,429,429,429,429,429,429,429,,,429,,,,,,,429,,,429,429,429,429,429',
'429,429,429,,429,429,429,,429,429,,429,429,429,,,,,,,,,,,,,,,,,,,,429',
',,429,,,429,429,,,429,,,,,,429,,,,,,,,429,,,,,429,429,429,429,,429,429',
',,,429,429,,269,269,269,,269,429,,429,269,269,,,,269,,269,269,269,269',
'269,269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269',
'269,269,269,269,269,269,,269,269,269,,269,269,,269,269,269,,,,,,,,,',
',,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269,269',
'269,269,,269,269,,,,269,269,,799,799,799,,799,269,,269,799,799,,,,799',
',799,799,799,799,799,799,799,,,,,,799,799,799,799,799,799,799,,,799',
',,,,,,799,,,799,799,799,799,799,799,799,799,,799,799,799,,799,799,,799',
'799,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,,,799,,799,,,,799,,,',
',,,,799,,,,,799,799,799,799,,799,799,,,,799,799,,271,271,271,,271,799',
',799,271,271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271,271',
'271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271,,271,271',
'271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271',
',,,,,271,,,,,,,,271,,,,,271,271,271,271,,271,271,,,,271,271,,273,273',
'273,,273,271,,271,273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273',
'273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273',
'273,,273,273,273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273',
',,273,273,,,273,,,,,,273,,,,,,,,273,,,,,273,273,273,273,,273,273,,,',
'273,273,,20,20,20,,20,273,,273,20,20,,,,20,,20,20,20,20,20,20,20,,,',
',,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20',
'20,,20,20,,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20',
',,,,,,,20,,,,,20,20,20,20,,20,20,,,,20,20,,430,430,430,,430,20,,20,430',
'430,,,,430,,430,430,430,430,430,430,430,,,,,,430,430,430,430,430,430',
'430,,,430,,,,,,,430,,,430,430,430,430,430,430,430,430,,430,430,430,',
'430,430,,430,430,430,,,,,,,,,,,,,,,,,,,,430,,,430,,,430,430,,,430,,',
',,,430,,,,,,,,430,,,,,430,430,430,430,,430,430,,,,430,430,,278,278,278',
'278,278,430,,430,278,278,,,,278,,278,278,278,278,278,278,278,,,,,,278',
'278,278,278,278,278,278,,,278,,,,,,278,278,,278,278,278,278,278,278',
'278,278,278,,278,278,278,,278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278',
',,278,,,278,278,,,278,,278,,,,278,,,,,,,,278,,,,,278,278,278,278,,278',
'278,,,,278,278,,548,548,548,,548,278,,278,548,548,,,,548,,548,548,548',
'548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548',
'548,548,548,548,548,548,548,,548,548,548,,548,548,,548,548,548,,,,,',
',,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,548,,,,548,,,,,,,,548,,,,,548',
'548,548,548,,548,548,,,,548,548,,887,887,887,,887,548,,548,887,887,',
',,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887,887,887,887',
',,887,,,,,,,887,,,887,887,887,887,887,887,887,887,887,887,887,887,,887',
'887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,887,',
'887,,887,,,,,,,,887,,,,,887,887,887,887,,887,887,,,,887,887,,698,698',
'698,,698,887,,887,698,698,,,,698,,698,698,698,698,698,698,698,,,,,,698',
'698,698,698,698,698,698,,,698,,,,,,,698,,,698,698,698,698,698,698,698',
'698,,698,698,698,,698,698,,698,698,698,,,,,,,,,,,,,,,,,,,,698,,,698',
',,698,698,,,698,,,,,,698,,,,,,,,698,,,,,698,698,698,698,,698,698,,,',
'698,698,,549,549,549,,549,698,,698,549,549,,,,549,,549,549,549,549,549',
'549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549,549',
'549,549,549,549,549,549,549,549,549,,549,549,,549,549,549,,,,,,,,,,',
',,,,,,,,,549,,,549,,,549,549,,,549,,549,,549,,549,,,,,,,,549,,,,,549',
'549,549,549,,549,549,,,,549,549,,363,363,363,,363,549,,549,363,363,',
',,363,,363,363,363,363,363,363,363,,,,,,363,363,363,363,363,363,363',
',,363,,,,,,,363,,,363,363,363,363,363,363,363,363,,363,363,363,,363',
'363,,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,,,363,363,,,363,,,,,,363',
',,,,,,,363,,,,,363,363,363,363,,363,363,,,,363,363,,284,284,284,,284',
'363,,363,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284,284',
'284,284,284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284,284,,284',
'284,284,,284,284,,,,284,736,736,736,736,736,736,736,736,736,736,736',
',736,736,,,736,736,,284,,,284,,,284,284,,,284,,,736,,736,,736,736,736',
'736,736,736,736,,736,,,,284,284,284,284,,284,284,,,,284,284,,736,,284',
',,284,,284,499,499,499,,499,,,,499,499,,,,499,,499,499,499,499,499,499',
'499,,,,,,499,499,499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499',
'499,499,499,499,,499,499,499,,499,499,,499,499,499,,,,,,,,,,,,,,,,,',
',,499,,,499,,,499,499,,,499,,,,,,499,,,,,,,,499,,,,,499,499,499,499',
',499,499,,,,499,499,,559,559,559,,559,499,,499,559,559,,,,559,,559,559',
'559,559,559,559,559,,,,,,559,559,559,559,559,559,559,,,559,,,,,,,559',
',,559,559,559,559,559,559,559,559,559,559,559,559,,559,559,,559,559',
'559,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,559,,,559,,559,,559,,559,,,,',
',,,559,,,,,559,559,559,559,,559,559,,,,559,559,,562,562,562,,562,559',
',559,562,562,,,,562,,562,562,562,562,562,562,562,,,,,,562,562,562,562',
'562,562,562,,,562,,,,,,,562,,,562,562,562,562,562,562,562,562,,562,562',
'562,,562,562,,562,562,562,,,,,,,,,,,,,,,,,,,,562,,,562,,,562,562,,,562',
',,,,,562,,,,,,,,562,,,,,562,562,562,562,,562,562,,,,562,562,,498,498',
'498,,498,562,,562,498,498,,,,498,,498,498,498,498,498,498,498,,,,,,498',
'498,498,498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498,498,498',
'498,,498,498,498,,498,498,,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498',
',,498,498,,,498,,,,,,498,,,,,,,,498,,,,,498,498,498,498,,498,498,,,',
'498,498,,347,347,347,,347,498,,498,347,347,,,,347,,347,347,347,347,347',
'347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,,347,,,347,347,347',
'347,347,347,347,347,,347,347,347,,347,347,,347,347,347,,,,,,,,,,,,,',
',,,,,,347,,,347,,,347,347,,,347,,,,,,347,,,,,,,,347,,,,,347,347,347',
'347,,347,347,,,,347,347,,673,673,673,,673,347,,347,673,673,,,,673,,673',
'673,673,673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,',
',673,,,673,673,673,673,673,673,673,673,,673,673,673,,673,673,,673,673',
'673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,673',
',,,,673,673,673,673,,673,673,,,,673,673,,495,495,495,,495,673,,673,495',
'495,,,,495,,495,495,495,495,495,495,495,,,,,,495,495,495,495,495,495',
'495,,,495,,,,,,,495,,,495,495,495,495,495,495,495,495,,495,495,495,',
'495,495,,,,495,,,,,,,,,,,,,,,,,,,,495,,,495,,,495,495,,,495,,,,,,,,',
',,,,,,,,,,495,495,495,495,,495,495,,,,495,495,,488,488,488,,488,495',
',495,488,488,,,,488,,488,488,488,488,488,488,488,,,,,,488,488,488,488',
'488,488,488,,,488,,,,,,,488,,,488,488,488,488,488,488,488,488,488,488',
'488,488,,488,488,,488,488,488,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,488',
',,488,,488,,488,,488,,,,,,,,488,,,,,488,488,488,488,,488,488,,,,488',
'488,,591,591,591,,591,488,,488,591,591,,,,591,,591,591,591,591,591,591',
'591,,,,,,591,591,591,591,591,591,591,,,591,,,,,,,591,,,591,591,591,591',
'591,591,591,591,,591,591,591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,',
',,591,,,591,,,591,591,,,591,,591,,,,591,,,,,,,,591,,,,,591,591,591,591',
',591,591,,,,591,591,,486,486,486,,486,591,,591,486,486,,,,486,,486,486',
'486,486,486,486,486,,,,,,486,486,486,486,486,486,486,,,486,,,,,,,486',
',,486,486,486,486,486,486,486,486,,486,486,486,,486,486,,,,486,,,,,',
',,,,,,,,,,,,,,486,,,486,,,486,486,,,486,,,,,,,,,,,,,,,,,,,486,486,486',
'486,,486,486,,,,486,486,,592,592,592,,592,486,,486,592,592,,,,592,,592',
'592,592,592,592,592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,',
',592,,,592,592,592,592,592,592,592,592,,592,592,592,,592,592,,592,592',
'592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,,,,,592,,,,,,,,592',
',,,,592,592,592,592,,592,592,,,,592,592,,649,649,649,,649,592,,592,649',
'649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649',
'649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,',
'649,649,,,,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,,,',
',,,,,,,,,,649,649,649,649,,649,649,,,,649,649,,301,301,301,,301,649',
',649,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301',
'301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,301,,301,301',
'301,,301,301,,,,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,,301,,,',
',,,,,,,,,,,,,,,301,301,301,301,,301,301,,,,301,301,,595,595,595,,595',
'301,,301,595,595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595,595',
'595,595,595,595,,,595,,,,,,,595,,,595,595,595,595,595,595,595,595,595',
'595,595,595,,595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595',
'595,,,595,,595,,595,,595,,,,,,,,595,,,,,595,595,595,595,,595,595,,,',
'595,595,,596,596,596,,596,595,,595,596,596,,,,596,,596,596,596,596,596',
'596,596,,,,,,596,596,596,596,596,596,596,,,596,,,,,,,596,,,596,596,596',
'596,596,596,596,596,596,596,596,596,,596,596,,596,596,596,,,,,,,,,,',
',,,,,,,,,596,,,596,,,596,596,,,596,,,,596,,596,,,,,,,,596,,,,,596,596',
'596,596,,596,596,,,,596,596,,597,597,597,,597,596,,596,597,597,,,,597',
',597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597,,,597',
',,,,,,597,,,597,597,597,597,597,597,597,597,,597,597,597,,597,597,,597',
'597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597,,,,,,597,,,,,,',
',597,,,,,597,597,597,597,,597,597,,,,597,597,,327,327,327,,327,597,',
'597,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327',
'327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327,327',
'327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,,327',
',,,,,327,,,,,,,,327,,,,,327,327,327,327,,327,327,,,,327,327,,633,633',
'633,,633,327,,327,633,633,,,,633,,633,633,633,633,633,633,633,,,,,,633',
'633,633,633,633,633,633,,,633,,,,,,,633,,,633,633,633,633,633,633,633',
'633,,633,633,633,,633,633,,633,633,633,,,,,,,,,,,,,,,,,,,,633,,,633',
',,633,633,,,633,,,,,,633,,,,,,,,633,,,,,633,633,633,633,,633,633,,,',
'633,633,,310,310,310,,310,633,,633,310,310,,,,310,,310,310,310,310,310',
'310,310,,,,,,310,310,310,310,310,310,310,,,310,,,,,,,310,,,310,310,310',
'310,310,310,310,310,,310,310,310,,310,310,,310,310,310,,,,,,,,,,,,,',
',,,,,,310,,,310,310,,310,310,,,310,,,,,,310,,,,,,,,310,,,,,310,310,310',
'310,,310,310,,,,310,310,,479,479,479,479,479,310,,310,479,479,,,,479',
',479,479,479,479,479,479,479,,,,,,479,479,479,479,479,479,479,,,479',
',,,,,479,479,,479,479,479,479,479,479,479,479,479,,479,479,479,,479',
'479,,479,479,479,733,733,733,733,733,733,733,733,733,733,733,,733,733',
',,733,733,,479,,,479,,,479,479,,,479,,479,733,,733,479,733,733,733,733',
'733,733,733,479,733,,,,479,479,479,479,,479,479,,,,479,479,,733,,,,479',
'479,,479,475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475',
'475,,,,,,475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475',
'475,475,475,475,,475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,',
',,475,,,475,,,475,475,,,475,,,,,,475,,,,,,,,475,,,,,475,475,475,475',
',475,475,,,,475,475,,5,5,5,5,5,475,,475,5,5,,,,5,,5,5,5,5,5,5,5,,,,',
',5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,,5,5,5,',
',,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5',
',,,5,5,,598,598,598,,598,5,,5,598,598,,,,598,,598,598,598,598,598,598',
'598,,,,,,598,598,598,598,598,598,598,,,598,,,,,,,598,,,598,598,598,598',
'598,598,598,598,,598,598,598,,598,598,,598,598,598,,,,,,,,,,,,,,,,,',
',,598,,,598,,,598,598,,,598,,,,,,598,,,,,,,,598,,,,,598,598,598,598',
',598,598,,,,598,598,,328,328,328,,328,598,,598,328,328,,,,328,,328,328',
'328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,,,328',
',,328,328,328,328,328,328,328,328,,328,328,328,,328,328,,328,328,328',
',,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328,,,,,,,,328,,,',
',328,328,328,328,,328,328,,,,328,328,,473,473,473,,473,328,,328,473',
'473,,,,473,,473,473,473,473,473,473,473,,,,,,473,473,473,473,473,473',
'473,,,473,,,,,,,473,,,473,473,473,473,473,473,473,473,473,473,473,473',
',473,473,,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473,,,473,473,,,473,',
',,473,,473,,,,,,,,473,,,,,473,473,473,473,,473,473,,,,473,473,,471,471',
'471,,471,473,,473,471,471,,,,471,,471,471,471,471,471,471,471,,,,,,471',
'471,471,471,471,471,471,,,471,,,,,,,471,,,471,471,471,471,471,471,471',
'471,471,471,471,471,,471,471,,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471',
',,471,471,,,471,,471,,471,,471,,,,,,,,471,,,,,471,471,471,471,,471,471',
',,,471,471,,607,607,607,,607,471,,471,607,607,,,,607,,607,607,607,607',
'607,607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,,,607,,,607,607',
'607,607,607,607,607,607,,607,607,607,,607,607,,607,607,607,,,,,,,,,',
',,,,,,,,,,607,,,607,,,607,607,,,607,,,,,,607,,,,,,,,607,,,,,607,607',
'607,607,,607,607,,,,607,607,,606,606,606,,606,607,,607,606,606,,,,606',
',606,606,606,606,606,606,606,,,,,,606,606,606,606,606,606,606,,,606',
',,,,,,606,,,606,606,606,606,606,606,606,606,,606,606,606,,606,606,,606',
'606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606,606,,,606,,,,,,606,,,,,,',
',606,,,,,606,606,606,606,,606,606,,,,606,606,,603,603,603,,603,606,',
'606,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603,603,603,603',
'603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603,603,603,,603,603',
'603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603',
',,,,,603,,,,,,,,603,,,,,603,603,603,603,,603,603,,,,603,603,,602,602',
'602,,602,603,,603,602,602,,,,602,,602,602,602,602,602,602,602,,,,,,602',
'602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602,602,602,602,602',
'602,,602,602,602,,602,602,,602,602,602,,,,,,,,,,,,,,,,,,,,602,,,602',
',,602,602,,,602,,,,,,602,,,,,,,,602,,,,,602,602,602,602,,602,602,,,',
'602,602,,638,638,638,,638,602,,602,638,638,,,,638,,638,638,638,638,638',
'638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638',
'638,638,638,638,638,,638,638,638,,638,638,,461,,638,,,,,461,461,461',
',,461,461,461,,461,,,,,,638,,,638,461,,638,638,,,638,,,,461,461,,461',
'461,461,461,461,,,,,,,,638,638,638,638,,638,638,,,,638,638,,,,,399,',
'638,,638,,,399,399,399,,461,399,399,399,,399,,461,,,,,461,461,399,399',
'399,,,,,,,,,399,399,,399,399,399,399,399,,,461,,,,,,,,,,,,,,461,,,,',
'461,,399,399,399,399,399,399,399,399,399,399,399,399,399,399,,,399,399',
'399,,,399,,399,399,,,399,399,,399,,399,,399,,399,399,399,399,399,399',
'399,458,399,399,399,,,,458,458,458,,,458,458,458,,458,399,399,,399,323',
'399,323,323,323,458,323,,,,,,,,,458,458,,458,458,458,458,458,,,,,566',
',566,566,566,,566,,,,,323,323,,,,,,,27,323,323,323,323,,,27,27,27,,458',
'27,27,27,,27,,458,566,566,,,458,458,,27,27,566,566,566,566,,,,,27,27',
',27,27,27,27,27,,,458,,,,,,,,,,,,,,458,,,,,458,,27,27,27,27,27,27,27',
'27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27',
'27,27,27,27,27,27,26,27,,27,,,,26,26,26,,,26,26,26,,26,27,27,,27,,27',
',,26,26,26,,,,,,,,,26,26,,26,26,26,26,26,,,,,,,,,,,,,,,,,,,,,,,,26,26',
'26,26,26,26,26,26,26,26,26,26,26,26,,,26,26,26,,,26,,26,26,,,26,26,',
'26,,26,,26,,26,26,26,26,26,26,26,,26,26,26,,,,,,,,,,,,,,26,26,,26,,26',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9',
'9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9',
'9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,9,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,',
',,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8',
',,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,8,380,380,380',
'380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380',
'380,380,380,380,,,,380,380,380,380,380,380,380,380,380,380,,,,,,380',
'380,380,380,380,380,380,380,380,,,380,,,,,,,,,380,380,,380,380,380,380',
'380,380,380,,,380,380,,,,380,380,380,380,,,,,,,,,,,,,,380,380,,380,380',
'380,380,380,380,380,380,380,380,380,,,380,380,,,,,,,,,,,380,588,588',
'588,588,588,588,588,588,588,588,588,588,588,588,588,588,588,588,588',
'588,588,588,588,588,,,,588,588,588,588,588,588,588,588,588,588,,,,,',
'588,588,588,588,588,588,588,588,588,,,588,,,,,,,,,588,588,,588,588,588',
'588,588,588,588,,,588,588,,,,588,588,588,588,,,,,,,,,,,,,,588,588,,588',
'588,588,588,588,588,588,588,588,588,588,,,588,588,,,,,,,,,,,588,68,68',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,,',
',68,68,68,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,68,68,68,68',
'68,,68,,,,,,,68,68,,68,68,68,68,68,68,68,,,68,68,,,,68,68,68,68,,,,',
',68,,,,,,,,68,68,,68,68,68,68,68,68,68,68,68,68,68,,,68,711,711,711',
'711,711,711,711,711,711,711,711,711,711,711,711,711,711,711,711,711',
'711,711,711,711,,,,711,711,711,711,711,711,711,711,711,711,,,,,,711',
'711,711,711,711,711,711,711,711,,,711,,,,,,,,,711,711,,711,711,711,711',
'711,711,711,,,711,711,,,,711,711,711,711,,,,,,,,,,,,,,711,711,,711,711',
'711,711,711,711,711,711,711,711,711,424,424,711,,424,,,,,,,,,424,424',
',424,424,424,424,424,424,424,,,424,424,,,,424,424,424,424,,,,,,424,',
',,,,,,424,424,,424,424,424,424,424,424,424,424,424,424,424,425,425,424',
',425,,,,,,,,,425,425,,425,425,425,425,425,425,425,,,425,425,,,,425,425',
'425,425,,,,,,425,,,,,,,,425,425,,425,425,425,425,425,425,425,425,425',
'425,425,501,501,425,,501,,,,,,,,,501,501,,501,501,501,501,501,501,501',
',,501,501,,,,501,501,501,501,,,,,,501,,,,,,,,501,501,,501,501,501,501',
'501,501,501,501,501,501,501,502,502,501,,502,,,,,,,,,502,502,,502,502',
'502,502,502,502,502,,,502,502,,,,502,502,502,502,,,,,,502,,,,,,,,502',
'502,,502,502,502,502,502,502,502,502,502,502,502,888,888,502,,888,,',
',,,,,,888,888,,888,888,888,888,888,888,888,,,888,888,,,,888,888,888',
'888,,,,,,888,,,,,,,,888,888,,888,888,888,888,888,888,888,888,888,888',
'888,889,889,888,,889,,,,,,,,,889,889,,889,889,889,889,889,889,889,,',
'889,889,,,,889,889,889,889,,,,,,889,,,,,,,,889,889,,889,889,889,889',
'889,889,889,889,889,889,889,917,917,889,,917,,,,,,,,,917,917,,917,917',
'917,917,917,917,917,,,917,917,,,,917,917,917,917,,,,,,917,,,,,,,,917',
'917,,917,917,917,917,917,917,917,917,917,917,917,490,490,917,,490,,',
',,,,,,490,490,,490,490,490,490,490,490,490,,,490,490,,,,490,490,490',
'490,,,,,,490,,,,,,,,490,490,,490,490,490,490,490,490,490,490,490,490',
'490,489,489,490,,489,,,,,,,,,489,489,,489,489,489,489,489,489,489,,',
'489,489,,,,489,489,489,489,,,,,,489,,,,,,,,489,489,,489,489,489,489',
'489,489,489,489,489,489,489,550,550,489,,550,,,,,,,,,550,550,,550,550',
'550,550,550,550,550,,,550,550,,,,550,550,550,550,,,,,,550,,,,,,,,550',
'550,,550,550,550,550,550,550,550,550,550,550,550,551,551,550,,551,,',
',,,,,,551,551,,551,551,551,551,551,551,551,,,551,551,,,,551,551,551',
'551,,,,,,551,,,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551',
'551,557,557,551,,557,,,,,,,,,557,557,,557,557,557,557,557,557,557,,',
'557,557,,,,557,557,557,557,,,,,,557,,,,,,,,557,557,,557,557,557,557',
'557,557,557,557,557,557,557,558,558,557,,558,,,,,,,,,558,558,,558,558',
'558,558,558,558,558,,,558,558,,,,558,558,558,558,,,,,,558,,,,,,,,558',
'558,,558,558,558,558,558,558,558,558,558,558,558,250,250,558,,250,,',
',,,,,,250,250,,250,250,250,250,250,250,250,,,250,250,,,,250,250,250',
'250,,,,,,,,,,,,,,250,250,,250,250,250,250,250,250,250,250,250,250,250',
'251,251,250,,251,,,,,,,,,251,251,,251,251,251,251,251,251,251,,,251',
'251,,,,251,251,251,251,,,,,,,,,,,,,,251,251,,251,251,251,251,251,251',
'251,251,251,251,251,202,202,251,,202,,,,,,,,,202,202,,202,202,202,202',
'202,202,202,,,202,202,,,,202,202,202,202,,,,,,202,,,,,,,,202,202,,202',
'202,202,202,202,202,202,202,202,202,202,201,201,202,,201,,,,,,,,,201',
'201,,201,201,201,201,201,201,201,,,201,201,,,,201,201,201,201,,,,,,201',
',,,,,,,201,201,,201,201,201,201,201,201,201,201,201,201,201,,,201,815',
'815,815,815,815,815,815,815,815,815,815,,815,815,,,815,815,,,,,,,,,',
',,,,,815,,815,,815,815,815,815,815,815,815,,815,,731,731,731,731,731',
'731,731,731,731,731,731,,731,731,,815,731,731,,,,,,,,,,,,,,,731,,731',
',731,731,731,731,731,731,731,,731,,264,264,264,264,264,264,264,264,264',
'264,264,,264,264,,731,264,264,,,,,,,,,,,,,,,264,,264,,264,264,264,264',
'264,264,264,,264,,650,650,650,650,650,650,650,650,650,650,650,,650,650',
',264,650,650,,,,,,,,,,,,,,,650,,650,,650,650,650,650,650,650,650,,650',
',726,726,726,726,726,726,726,726,726,726,726,,726,726,,650,726,726,',
',,,,,,,,,,,,,726,,726,,726,726,726,726,726,726,726,,726,,503,503,503',
'503,503,503,503,503,503,503,503,,503,503,,726,503,503,,,,,,,,,,,,,,',
'503,,503,,503,503,503,503,503,503,503,,503,,411,411,411,411,411,411',
'411,411,411,411,411,,411,411,,503,411,411,,,,,,,,,,,,,,,411,,411,,411',
'411,411,411,411,411,411,,411,,456,456,456,456,456,456,456,456,456,456',
'456,,456,456,,411,456,456,,,,,,,,,,,,,,,456,,456,,456,456,456,456,456',
'456,456,,456,,21,21,21,21,21,21,21,21,21,21,21,,21,21,456,456,21,21',
',,,,,,,,,,,,,,21,,21,,21,21,21,21,21,21,21,,21,,,,,,,,,,,,,,,,,21' ]
        racc_action_check = arr = ::Array.new(23473, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3899,  1332,   nil,   406,   nil, 19595,  1364,  1128, 21403, 21278,
  1124,   nil,  1088,  1135,  1361,   530,  1028,   698,   nil,    29,
 15799, 23344,  1034,   nil,   566,   287, 21147, 21037,  9751,  8743,
  8617,   nil,  3143,  8113,  7727,   nil,   885,   608,   420,   920,
   685,  6459,  5443,  4939,   845,  1407,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  4680,  4425,  5065,  5191,  5317,   121,   nil,
  5569,  5695,   nil,   nil,  5821,  5955,  6081,  6207, 21778,   nil,
   nil,   nil,   nil,   nil,   389,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   131,   nil,   nil,
   393,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   966,   nil,  6963,   nil,   nil,   nil,   nil,  7097,  7223,
  7349,  7475,  7601,  3395,   nil,   396,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   771,   nil,  3269,  8239,  8365,
  8491, 22928, 22867,  8869,  8995,  9121,  9247,  9373,  9499,   nil,
   nil,   645,   164,   395,   788,   268,   641,   689,   nil, 10507,
  2513,   683, 10885, 11011, 11137, 11263, 11389, 11515, 11641, 11767,
 11893, 12019, 12145, 12271, 12397, 12523, 12649, 12775, 12901, 13027,
 13153, 13279, 13405, 13531, 13657, 13783, 13909, 14035,   nil,   nil,
 22745, 22806,   668, 14539, 14665,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 14791,   nil, 23068,   nil,   549,   475,   nil, 15295,
   505, 15547,   nil, 15673,   nil,   nil,   513,  1127, 16051,   249,
  1631,   249,   281,   234, 16807,  1505,  1501,  1231,  1123,    87,
  1357,   nil,    79,   281,   291,   nil,   nil,   nil,   428,   562,
   825, 18453,   nil,   295,  1096,  1174,  1281,   nil,  1200,   nil,
 19209,   882,  1116,   720,   nil,    24,   606,   216,   207,   631,
   421,   nil,   nil, 20940,   555,    48,   165, 18957, 19847,   216,
   726,   616,   124,    66,  1249,   730,   136,   767,   nil,   nil,
   401,   363,   190,   nil,   752,   nil,    55, 17445,   nil,   nil,
   nil,   146,   165,   593,   373,   430,   452,   456,   518,   540,
   nil,   558,   nil, 16681,   nil,   524,   535,   320,   425,    62,
   292,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   857,
 21528,   nil,   nil,   nil,   nil,   871,   nil,   887,   nil,  4813,
   897,   nil,  4162,   901,   nil,   917,   961,   532,   498, 20860,
   nil,   nil,   nil,   613,   503,  1005,   nil,   nil,  4291,  4028,
   nil, 23252,   nil,   964,   nil,   nil,  3899,   nil,   nil,   nil,
   nil,   156,   nil,  1023, 21952, 22013, 10003,   177, 14161, 15169,
 15925,  1757,  2387,   602,   745,  1120,  1145,  1154,  1194,  1127,
  3395,  3269,  2009,  3017,  3143,  2891,  2765,  2639,  2513,  2261,
  1505,  1631,   571,   728,  2135,  1883, 23298,   337, 20970,   nil,
   nil, 20793,   nil,   nil,  1209,   nil,   253,    88,  1138,   nil,
   nil, 20099,   nil, 19973,   nil, 19469,   nil,   nil,   nil, 19335,
  1238,  1108,  1104,   nil,   nil,  1097, 18075,  1091, 17823, 22440,
 22379,  1505,  1083,   nil,   nil, 17697,  1023,   nil, 17319, 16941,
 10633, 22074, 22135, 23206,  6585,  1082,  6333,   nil,   965,   nil,
  9625,   nil,   nil,  9877,   nil,   nil,   nil,   184,  4255,   nil,
   959,   953,   951,   nil,   nil,   nil,   nil,   nil,   nil,   934,
   nil,  1269,   nil,   nil,   nil,   nil,  1017,   nil,   nil,  1013,
  2387,  1017,   nil,     0,   251,   195,   997,  1000, 16177, 16555,
 22501, 22562,    99,   nil,   nil,  1375,   nil, 22623, 22684, 17067,
   nil,   nil, 17193,   605,   154,  1379, 20967,   nil,   nil,   nil,
   270,   nil,   nil,   nil,   804,   nil,   nil,   nil,   825,   nil,
   nil,   186,   nil,   nil,   760,   nil,   nil,   nil, 21653,   nil,
   757, 17949, 18201,   396,   667, 18579, 18705, 18831, 19721,   616,
   nil,   nil, 20603, 20477,   597,   nil, 20351, 20225,   nil,   nil,
   238,   323,     0,   262,   122,  4551,   -48,   nil,   500,   nil,
  3647,   nil,   nil,   nil,   nil,   235,   nil,  3017,  2891,   nil,
   844,   nil,  1022, 19083,   nil,   nil,  1001,   292, 20729,  1121,
   nil,  1119,   224,    58,  1053,   333,  1502,   879,   833, 18327,
 23114,   769,   648,   257,   694,   nil,  2261,   363,   362,   nil,
   nil,   347,   194,   nil,   749,   875,   -32,  6134,   nil,  3992,
   nil,   nil,   610, 17571,   nil,  1239,   nil,    -6,   507,   nil,
    25,   nil,   nil,   659,   nil,   181,   nil,   nil,   nil,   nil,
   218,   nil,   152,   126,    90,   126,   157,   165, 16429,   362,
  1408,   nil,   297,  1757,   576,   nil,   nil,   480,  1883,  6008,
    52, 21891,   nil,   nil,   nil,   nil,   nil,   nil,  2009,   nil,
   nil,   nil,   nil,   nil,   511, 15043, 23160, 14917,   nil,   579,
   nil, 23022,   nil, 19335,   nil,   nil, 16807,   nil,  7727,   nil,
  5821, 14413, 10759, 10381, 10255,   136, 10129,   675,   679,   686,
   nil,   709,   697,   735,   703,   nil,   831,  2639,   755,   864,
   nil,   nil,   753,   301,   nil,   nil,   nil,  2765,   nil,   nil,
   125,  7987,   nil,   nil,   nil,   789,   894,   784,   787,   791,
   nil,   nil,   801,   805,   nil,   808,   nil,   815,  1365,   823,
  1018,   nil,   948,   nil,  7861,   956,  3521,  4162,   nil, 15421,
  4551,   193,   187,   nil,   974,   nil,  3773,   nil,   978,   861,
   nil,   nil,   876,   869,   nil, 22976,  6711,  6837,  6963, 14340,
   nil,  8166,   nil,   nil,  1051,   nil,   928,   908,   nil,   nil,
   nil, 14287,   nil,   944,   nil,   nil,   nil,  2135,  1389,  1253,
  1105,  1024,   474,   nil,   nil,   nil,   nil,  8040,   nil,   nil,
   799,   nil,   771,   nil,   674,   nil,   nil,   nil,   512,   892,
   968,   nil,   153,   nil,  1092,  1100,   nil,   423,   nil,   nil,
  1104,   nil,   nil,  4644,   nil,   985,  -106,  1005,  1009,   nil,
  1011,   nil,   861,  1120,  1099,   nil,  1148, 16303, 22196, 22257,
  1263,  1065,  1066,  1067,  1077,  1079,   905,  1085,   766,  1253,
   nil,   nil,   nil,   nil,   nil,  1127,   nil,  1001,  6260,   nil,
   nil,  1023,   nil,   925,   nil,   nil,   nil, 22318,   nil,   nil,
  1112,   164,   141,    51,  1372,   nil,   897,   nil,   nil,   nil,
  1031,  1136,   522,  1260,  1280,  1165,  1169,  1183,  1191,  1239,
  1240,    34,  1203,  1205,   nil,   nil,   nil,   nil,  1149,   nil,
   nil,   nil,   nil,  1210,   nil ]

racc_action_default = [
    -3,  -546,    -1,  -532,    -4,  -546,    -7,  -546,  -546,  -546,
  -546,   -27,  -546,  -546,  -546,  -274,  -546,   -39,   -42,  -534,
  -546,   -47,   -49,   -50,   -51,  -255,  -255,  -255,  -284,  -319,
  -320,   -67,   -11,   -71,   -79,   -81,  -546,  -461,  -462,  -546,
  -546,  -546,  -546,  -546,  -534,  -236,  -267,  -268,  -269,  -270,
  -271,  -272,  -273,  -522,   -11,  -546,  -545,  -514,  -292,  -374,
  -546,  -546,  -297,  -300,  -532,  -546,  -546,  -546,  -546,  -321,
  -322,  -410,  -411,  -412,  -413,  -414,  -429,  -417,  -418,  -431,
  -433,  -422,  -427,  -443,  -431,  -445,  -446,  -520,  -450,  -451,
  -521,  -453,  -454,  -455,  -456,  -457,  -458,  -459,  -460,  -465,
  -466,  -546,    -2,  -533,  -541,  -542,  -543,    -6,  -546,  -546,
  -546,  -546,  -546,    -3,   -15,  -546,  -110,  -111,  -112,  -113,
  -114,  -115,  -116,  -117,  -118,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,
  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,
  -187,  -188,  -189,  -190,  -191,   -20,  -119,   -11,  -546,  -546,
  -245,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -534,  -535,
   -46,  -546,  -461,  -462,  -546,  -274,  -546,  -546,  -228,  -546,
   -11,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -380,  -382,
  -546,  -546,   -56,  -245,  -546,  -291,  -385,  -394,  -396,   -62,
  -391,   -63,  -534,   -64,  -237,  -250,  -259,  -259,  -254,  -546,
  -260,  -546,  -516,  -546,   -65,   -66,  -532,   -12,  -546,   -69,
   -11,  -534,  -546,   -72,   -75,   -11,   -87,   -88,  -546,  -546,
   -95,  -284,  -287,  -534,  -546,  -319,  -320,  -323,  -392,  -546,
   -77,  -546,   -83,  -281,  -447,  -448,  -546,  -213,  -214,  -229,
  -546,  -402,  -546,  -277,  -238,  -538,  -538,  -546,  -546,  -538,
  -546,  -293,  -294,  -486,   -48,  -546,  -546,  -546,  -546,  -532,
  -546,  -533,  -461,  -462,  -546,  -546,  -274,  -546,  -333,  -334,
  -105,  -106,  -546,  -108,  -546,  -274,  -546,  -546,  -461,  -462,
  -312,  -110,  -111,  -151,  -152,  -153,  -169,  -174,  -181,  -184,
  -314,  -546,  -512,  -546,  -415,  -546,  -546,  -546,  -546,  -546,
  -546,   955,    -5,  -544,   -21,   -22,   -23,   -24,   -25,  -546,
  -546,   -17,   -18,   -19,  -120,  -546,   -28,   -37,   -38,  -546,
  -546,   -29,  -194,  -534,  -246,  -259,  -259,  -523,  -524,  -255,
  -389,  -525,  -526,  -524,  -523,  -255,  -388,  -390,  -525,  -526,
   -35,  -202,   -36,  -546,   -40,   -41,  -192,  -260,   -43,   -44,
   -45,  -534,  -290,  -546,  -546,  -546,  -245,  -281,  -546,  -546,
  -546,  -203,  -204,  -205,  -206,  -207,  -208,  -209,  -210,  -215,
  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,
  -226,  -227,  -230,  -231,  -232,  -233,  -534,  -363,  -255,  -523,
  -524,  -255,   -54,   -57,  -534,  -256,  -363,  -363,  -534,  -286,
  -251,  -546,  -252,  -546,  -257,  -546,  -261,  -519,   -10,  -533,
   -14,  -534,   -68,  -279,   -84,   -73,  -546,  -534,  -245,  -546,
  -546,   -94,  -546,  -447,  -448,  -546,   -80,   -85,  -546,  -546,
  -546,  -546,  -546,  -234,  -546,  -545,  -545,  -276,  -534,  -239,
  -540,  -539,  -241,  -540,  -282,  -283,  -515,  -546,  -486,  -377,
  -511,  -511,  -511,  -485,  -487,  -488,  -489,  -490,  -491,  -492,
  -493,  -546,  -495,  -501,  -503,  -504,  -506,  -507,  -508,  -546,
   -11,  -324,  -325,   -11,  -546,  -546,  -546,  -546,  -546,  -245,
  -546,  -546,  -281,  -305,  -105,  -106,  -107,  -546,  -546,  -245,
  -308,  -467,  -546,  -546,  -546,   -11,  -486,  -316,  -530,  -531,
  -534,  -416,  -430,  -435,  -546,  -437,  -419,  -432,  -546,  -434,
  -421,  -546,  -424,  -426,  -546,  -444,    -8,   -16,  -546,   -26,
  -266,  -546,  -546,  -393,  -546,  -247,  -249,  -546,  -546,   -58,
  -244,  -386,  -546,  -546,   -60,  -387,  -546,  -546,  -289,  -536,
  -523,  -524,  -523,  -524,  -534,  -192,  -546,  -364,  -368,  -366,
   -11,   -52,  -383,   -53,  -384,  -363,  -242,   -11,   -11,  -285,
  -259,  -258,  -262,  -546,  -517,  -518,   -13,   -70,  -546,   -76,
   -82,  -534,  -523,  -524,  -243,   -91,   -93,  -546,   -78,  -546,
  -201,  -211,  -212,  -534,  -545,  -331,   -11,  -403,  -545,  -404,
  -405,  -546,  -538,  -375,   -11,   -11,  -368,  -546,  -478,  -546,
  -481,  -483,  -546,  -546,  -335,  -546,  -337,  -339,  -346,  -492,
  -534,  -505,  -509,  -545,  -326,  -545,  -298,  -327,  -328,  -301,
  -546,  -304,  -546,  -534,  -523,  -524,  -527,  -280,  -546,  -105,
  -106,  -109,  -534,   -11,  -546,  -469,  -310,  -546,   -11,  -486,
  -546,  -546,  -513,  -436,  -439,  -440,  -441,  -442,   -11,  -420,
  -423,  -425,  -428,  -121,  -264,  -546,  -195,  -546,  -537,  -259,
   -31,  -197,   -32,  -198,   -59,   -33,  -200,   -34,  -199,   -61,
  -193,  -546,  -546,  -546,  -546,  -393,  -546,  -511,  -511,  -511,
  -362,  -546,  -368,  -546,  -492,  -499,  -546,   -11,  -546,  -546,
  -253,  -263,   -74,   -89,   -86,  -288,    -9,   -11,  -409,  -332,
  -546,  -546,  -407,  -278,  -240,  -546,  -546,  -534,  -511,  -511,
  -496,  -510,  -511,  -511,  -502,  -511,  -497,  -534,  -546,  -344,
  -546,  -494,  -546,  -329,  -546,  -546,   -11,   -11,  -303,  -546,
   -11,  -393,  -546,  -393,  -546,  -468,   -11,  -313,  -546,  -534,
  -471,  -317,  -546,  -265,   -30,  -196,  -248,  -546,  -235,  -353,
  -355,  -546,  -358,  -360,  -546,  -365,  -546,  -369,  -370,  -372,
  -373,  -546,  -381,  -546,  -395,  -397,  -408,   -11,   -96,   -97,
  -546,  -546,  -104,  -406,  -378,  -379,  -376,  -546,  -474,  -476,
  -546,  -479,  -546,  -482,  -546,  -484,  -336,  -338,  -342,  -546,
  -347,  -295,  -546,  -296,  -546,  -546,  -262,  -545,  -306,  -309,
  -546,  -315,  -470,  -486,  -438,  -511,  -511,  -511,  -511,  -500,
  -511,  -367,  -546,  -498,  -546,   -55,  -402,  -245,  -546,  -546,
  -103,  -511,  -511,  -511,  -511,  -340,  -546,  -345,  -546,   -11,
  -299,  -302,  -398,  -399,  -400,   -11,  -311,   -11,  -546,  -350,
  -352,  -546,  -356,  -546,  -359,  -361,  -371,  -546,  -281,  -401,
  -534,  -523,  -524,  -527,  -102,  -472,  -546,  -475,  -477,  -480,
  -546,  -343,  -545,  -546,  -546,  -511,  -511,  -511,  -511,  -280,
  -527,  -393,  -511,  -341,  -330,  -307,  -318,  -348,  -546,  -351,
  -354,  -357,  -473,  -511,  -349 ]

clist = [
'119,119,505,360,312,210,283,14,523,265,265,265,14,297,297,114,196,314',
'708,207,547,256,260,415,13,540,543,211,6,13,509,512,106,6,516,211,211',
'211,749,14,288,288,519,654,310,297,297,297,472,399,405,124,124,325,326',
'748,13,329,37,388,119,14,211,37,281,412,751,211,211,634,279,211,334',
'344,344,393,593,300,13,463,122,122,674,103,631,496,631,779,780,782,37',
'286,286,106,680,102,792,107,458,461,879,374,375,376,377,784,686,689',
'317,634,14,556,37,830,777,211,211,211,211,14,14,828,860,332,348,348',
'348,13,464,797,572,6,579,582,2,857,13,13,698,620,378,6,252,259,261,263',
'274,275,627,628,366,622,346,350,624,370,330,267,267,267,905,37,703,313',
'806,565,566,711,324,324,37,37,324,873,796,339,328,472,327,752,195,265',
'508,386,391,316,319,879,410,414,766,897,634,567,409,372,361,400,380',
'827,826,560,337,523,14,211,211,211,631,631,211,211,211,211,211,211,324',
'324,324,324,517,13,663,795,323,625,674,14,931,789,249,457,466,467,265',
'265,690,666,787,876,780,877,830,265,13,857,902,379,658,770,916,523,364',
'365,322,37,875,367,368,581,211,211,943,321,297,369,713,891,718,211,639',
'778,399,405,497,780,318,362,37,648,588,297,1,784,,14,,14,,,256,288,14',
'492,260,,,745,,,,614,13,750,13,106,480,757,288,13,,,481,418,419,420',
'421,487,279,,544,545,,279,763,907,701,485,935,,,,,,211,211,37,644,37',
'674,,674,286,37,,944,721,,38,644,266,266,266,38,211,,479,,106,286,,',
',641,868,,,659,478,,211,465,119,,,561,801,774,315,468,38,287,287,267',
',803,,587,,,,267,800,594,523,600,,,644,,,605,38,,,903,644,265,,895,674',
'760,634,333,349,349,349,409,,,400,546,762,124,693,415,734,,809,631,',
'739,,211,702,324,324,,,,,,,,,,,674,,674,,38,122,,600,564,616,600,,497',
'38,38,,,,,297,660,497,265,837,570,,,,297,,,,,,674,409,,,400,14,,,,,',
',288,409,211,,400,,,,,288,13,,,,636,661,,760,211,,,,707,599,,,,390,',
'604,,,,390,,,282,265,,,,,,,37,,,265,,,409,286,38,400,14,,409,14,,,286',
'400,704,211,904,523,,,,899,,13,,211,13,38,211,,,14,687,687,621,266,919',
'623,,119,,730,732,266,,,735,737,13,,414,705,706,,723,,,37,,630,37,,941',
'211,211,,,,211,211,497,653,211,594,768,,,297,772,,,764,37,,,38,14,38',
'297,,124,287,38,14,14,,,,662,600,594,,605,13,288,811,,,287,,13,13,804',
',,288,,808,,122,,422,14,,,,,,,324,14,14,,,,,,37,,13,,,,,37,37,,13,13',
',802,,594,385,,286,,,,,,594,119,,211,,286,,,14,,814,,37,14,469,282,',
',,,37,37,729,14,,13,,,,,13,805,211,482,644,,,810,,,13,,,,,,,,,297,,',
',,870,,,,,37,920,,14,,37,,,,,,,,14,,37,282,840,,,13,282,,,,,862,,,,13',
',,,,,,,,,211,,14,14,,324,14,,,,297,,14,,37,,,,,13,13,,,13,37,,38,390',
'838,13,687,,,287,,,,883,,,,,287,14,,,,,,,,,,37,37,,934,37,,,13,,,37',
',,,265,,692,15,,,,608,15,,,,,409,,,400,,,,38,348,,38,,,211,37,,,,,,',
'324,15,290,290,14,,,409,,,14,38,14,,,,626,,594,,629,13,,15,,,,13,,13',
',,,637,336,345,345,,,640,,,,,,,,,,,,,,,,37,,,,,,37,,37,,,38,,,,,,15',
'38,38,,,,,,,15,15,,287,,,25,,,,,25,,,287,,,,,,,38,,,,,25,,,38,38,,,',
'25,25,25,,25,,,712,,,,,,,,,,,,,683,,,685,,,25,25,,,,,25,25,38,,25,,',
'38,,,,,,,,,,38,,15,,,,320,,,747,,,,,,,,,,,668,670,671,,,15,25,,,,,25',
'25,25,25,25,25,,16,38,,765,,16,,,,,,38,,756,,839,,,,,758,759,783,,,785',
',,,,791,,16,,,,,,,,38,38,,,38,15,,15,,769,38,290,15,,16,,,775,776,,',
',,,,338,,,290,,,,,,,349,,,,,,38,25,25,25,25,,,25,25,25,25,25,25,,,,',
',,,,,16,,25,,,,387,,812,16,16,,417,,,,,,,,,,,,846,,,,,,,,,,856,25,25',
',,,38,,,,25,,38,833,38,,,,,,,,872,836,,,25,,25,,,,,25,,,,878,,,880,',
',474,,476,,477,,,,,864,865,,,867,,,,16,,,892,,,893,413,894,,,,820,822',
'823,25,25,,,,,,,16,,,,,,,,,,886,,25,,,,,,,,848,849,,,851,853,15,855',
'25,,,,,290,,,,,,,,936,290,,937,,938,,,,,,,,,,,,16,942,16,,,,,16,,,,',
',,932,,,,,,933,,590,953,,,,,,15,,,15,25,,,,,,,,,,,,,,,,,,,,,15,,,,,909',
'910,912,914,717,915,,,,,,,,,,,925,927,928,929,,,,,,,,25,,,,,,,,,25,',
',,,,,,,632,,320,,635,15,,25,,,,,15,15,,947,949,950,951,,,,952,290,,',
',,,,,,,954,290,657,,,,632,,15,320,25,,,25,,,15,15,,25,,,,,,,,,,25,,',
'25,,,25,,,,,,,,,417,,,,,,,,,,,15,,,,,15,,,,16,,,25,25,,15,,25,25,,,25',
',,,,,,,,,,724,,,25,632,320,,,,,25,25,,,,,,,,,,,15,,,,,,,,,,15,,,,842',
',16,25,,16,761,,,,,25,25,,,,,,,,,,,,,15,15,16,,15,,,,,,15,,,,,,,,,,25',
'786,,,,25,,,,,25,,,,,345,,,,,25,15,,413,,,,,,25,,,,,,,,16,,,,,,,16,16',
',,,,,,,813,,,218,,,25,,,,,264,264,264,,,25,,,,16,,,,307,308,309,,16',
'16,15,,,,,,15,,15,264,264,,,25,,25,25,,,25,,,,,,25,,,,,,,,,,,,16,,,',
',16,,866,,,,,,,,16,,,,25,,,,,320,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,,,',
',,,,,,16,,,,843,25,,,,,,,,,,,,25,,,,,,25,,25,,,,16,16,,,16,,,,,,16,',
',,,,,,,,,264,392,264,,,411,416,,,,,,,,,,,,,,16,218,,,431,432,433,434',
'435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451',
'452,453,454,455,456,,,,,,264,264,,,,,,,,264,,,,,,,264,,264,,264,,,,',
',,16,,,,,,16,,16,,,,,,,,,,,,,,,,,,,,,,503,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,264,,411,615,392,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,264,,264,,264,,,,,,,,,,,,,264,,,,,,,,,,650,651,652,,,,',
',264,,,,264,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,264,,,,,,,,',
',264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,726,,,264,264,731,733,,,,736',
'738,,,615,740,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',264,,815,,,,,,,,,,,,,,731,733,738,736,,818,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,264,815,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264' ]
        racc_goto_table = arr = ::Array.new(2611, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'54,54,10,53,8,19,46,21,114,32,32,32,21,60,60,14,14,62,89,30,85,66,66',
'17,20,82,82,21,7,20,64,64,88,7,64,21,21,21,112,21,21,21,123,11,30,60',
'60,60,68,35,35,58,58,16,16,111,20,16,49,26,54,21,21,49,43,26,116,21',
'21,150,42,21,21,21,21,22,23,47,20,37,57,57,106,6,69,48,69,112,145,112',
'49,49,49,88,107,4,83,5,35,35,147,16,16,16,16,146,84,84,61,150,21,51',
'49,119,116,21,21,21,21,21,21,118,108,49,49,49,49,20,22,96,140,7,140',
'140,2,105,20,20,97,38,7,7,36,36,36,41,41,41,38,38,136,67,52,52,67,136',
'4,65,65,65,98,49,99,28,100,101,102,103,28,28,49,49,28,104,94,18,95,68',
'93,109,15,32,92,19,19,65,65,147,19,19,12,108,150,91,54,5,90,66,29,117',
'116,87,86,114,21,21,21,21,69,69,21,21,21,21,21,21,28,28,28,28,120,20',
'121,11,122,39,106,21,108,106,124,125,127,128,32,32,85,123,107,112,145',
'112,119,32,20,105,129,2,130,131,118,114,134,135,81,49,111,137,138,139',
'21,21,108,79,60,141,142,112,143,21,48,144,35,35,46,145,78,77,49,48,59',
'60,1,146,,21,,21,,,66,21,21,30,66,,,23,,,,22,20,114,20,88,7,38,21,20',
',,43,28,28,28,28,43,42,,16,16,,42,23,89,51,47,112,,,,,,21,21,49,35,49',
'106,,106,49,49,,83,140,,50,35,63,63,63,50,21,,6,,88,49,,,,22,84,,,26',
'4,,21,41,54,,,88,23,64,63,41,50,50,50,65,,23,,14,,,,65,82,30,114,66',
',,35,,,66,50,,,11,35,32,,106,106,68,150,50,50,50,50,54,,,66,4,48,58',
'22,17,37,,123,69,,37,,21,22,28,28,,,,,,,,,,,106,,106,,50,57,,66,28,30',
'66,,46,50,50,,,,,60,62,46,32,82,28,,,,60,,,,,,106,54,,,66,21,,,,,,,21',
'54,21,,66,,,,,21,20,,,,7,30,,68,21,,,,8,36,,,,63,,36,,,,63,,,9,32,,',
',,,,49,,,32,,,54,49,50,66,21,,54,21,,,49,66,16,21,85,114,,,,82,,20,',
'21,20,50,21,,,21,88,88,36,63,10,36,,54,,19,19,63,,,19,19,20,,19,88,88',
',14,,,49,,65,49,,23,21,21,,,,21,21,46,28,21,30,62,,,60,62,,,46,49,,',
'50,21,50,60,,58,50,50,21,21,,,,65,66,30,,66,20,21,53,,,50,,20,20,8,',
',21,,8,,57,,44,21,,,,,,,28,21,21,,,,,,49,,20,,,,,49,49,,20,20,,16,,30',
'9,,49,,,,,,30,54,,21,,49,,,21,,19,,49,21,44,9,,,,,49,49,65,21,,20,,',
',,20,88,21,44,35,,,88,,,20,,,,,,,,,60,,,,,8,,,,,49,22,,21,,49,,,,,,',
',21,,49,9,21,,,20,9,,,,,16,,,,20,,,,,,,,,,21,,21,21,,28,21,,,,60,,21',
',49,,,,,20,20,,,20,49,,50,63,49,20,88,,,50,,,,21,,,,,50,21,,,,,,,,,',
'49,49,,8,49,,,20,,,49,,,,32,,63,24,,,,44,24,,,,,54,,,66,,,,50,49,,50',
',,21,49,,,,,,,28,24,24,24,21,,,54,,,21,50,21,,,,44,,30,,44,20,,24,,',
',20,,20,,,,44,24,24,24,,,44,,,,,,,,,,,,,,,,49,,,,,,49,,49,,,50,,,,,',
'24,50,50,,,,,,,24,24,,50,,,40,,,,,40,,,50,,,,,,,50,,,,,40,,,50,50,,',
',40,40,40,,40,,,44,,,,,,,,,,,,,9,,,9,,,40,40,,,,,40,40,50,,40,,,50,',
',,,,,,,,50,,24,,,,27,,,110,,,,,,,,,,,113,113,113,,,24,40,,,,,40,40,40',
'40,40,40,,25,50,,44,,25,,,,,,50,,9,,50,,,,,9,9,110,,,110,,,,,44,,25',
',,,,,,,50,50,,,50,24,,24,,9,50,24,24,,25,,,9,9,,,,,,,25,,,24,,,,,,,50',
',,,,,50,40,40,40,40,,,40,40,40,40,40,40,,,,,,,,,,25,,40,,,,27,,9,25',
'25,,27,,,,,,,,,,,,44,,,,,,,,,,44,40,40,,,,50,,,,40,,50,9,50,,,,,,,,44',
'9,,,40,,40,,,,,40,,,,110,,,110,,,27,,27,,27,,,,,9,9,,,9,,,,25,,,110',
',,110,25,110,,,,113,113,113,40,40,,,,,,,25,,,,,,,,,,9,,40,,,,,,,,113',
'113,,,113,113,24,113,40,,,,,24,,,,,,,,110,24,,110,,110,,,,,,,,,,,,25',
'110,25,,,,,25,,,,,,,9,,,,,,9,,27,110,,,,,,24,,,24,40,,,,,,,,,,,,,,,',
',,,,,24,,,,,113,113,113,113,24,113,,,,,,,,,,,113,113,113,113,,,,,,,',
'40,,,,,,,,,40,,,,,,,,,27,,27,,27,24,,40,,,,,24,24,,113,113,113,113,',
',,113,24,,,,,,,,,,113,24,27,,,,27,,24,27,40,,,40,,,24,24,,40,,,,,,,',
',,40,,,40,,,40,,,,,,,,,27,,,,,,,,,,,24,,,,,24,,,,25,,,40,40,,24,,40',
'40,,,40,,,,,,,,,,,27,,,40,27,27,,,,,40,40,,,,,,,,,,,24,,,,,,,,,,24,',
',,24,,25,40,,25,27,,,,,40,40,,,,,,,,,,,,,24,24,25,,24,,,,,,24,,,,,,',
',,,40,27,,,,40,,,,,40,,,,,24,,,,,40,24,,25,,,,,,40,,,,,,,,25,,,,,,,25',
'25,,,,,,,,27,,,31,,,40,,,,,31,31,31,,,40,,,,25,,,,31,31,31,,25,25,24',
',,,,,24,,24,31,31,,,40,,40,40,,,40,,,,,,40,,,,,,,,,,,,25,,,,,25,,27',
',,,,,,,25,,,,40,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,,,,25,',
',,25,40,,,,,,,,,,,,40,,,,,,40,,40,,,,25,25,,,25,,,,,,25,,,,,,,,,,,31',
'31,31,,,31,31,,,,,,,,,,,,,,25,31,,,31,31,31,31,31,31,31,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,,,,31,31,,,,,,,,31,,',
',,,,31,,31,,31,,,,,,,25,,,,,,25,,25,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,31,31,31,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,31,,31,,31,,,,,,,,,,,,,31,,,,,,,,,,31,31,31',
',,,,,31,,,,31,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,31,,,,,,,,,',
'31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,31,,,31,31,31,31,,,,31,31,,,31',
'31,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,31,,,,,',
',,,,,,,,31,31,31,31,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,31,,,,,,,,,,,,,,,,,31,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31' ]
        racc_goto_check = arr = ::Array.new(2611, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   282,   134,   nil,    92,    92,    80,    28,   -50,   497,
  -309,  -462,  -464,   nil,     7,   171,    -7,  -181,   110,   -15,
    24,     7,  -125,  -317,   871,  1104,  -139,  1015,   108,    84,
     0,  1723,   -19,   nil,   nil,  -152,   117,  -173,  -318,  -237,
   989,   117,    38,    32,   454,   nil,   -27,    43,  -216,    58,
   348,  -231,    86,   -65,    -8,   nil,   nil,    72,    43,  -104,
   -20,    52,   -39,   322,  -285,   129,    -4,  -307,  -219,  -387,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,   219,   205,
   nil,   195,  -300,  -587,  -438,  -310,   137,  -145,    29,  -548,
   128,  -168,  -131,   116,  -512,   113,  -560,  -415,  -708,  -398,
  -542,  -185,  -194,  -400,  -638,  -653,  -449,  -437,  -668,  -439,
   457,  -563,  -580,   566,  -315,   nil,  -552,  -554,  -632,  -640,
  -103,  -295,   165,  -281,   208,   -17,   nil,   -25,   -25,  -621,
  -258,  -409,   nil,   nil,   178,   177,    71,   177,   177,  -109,
  -235,   183,  -308,  -307,  -396,  -579,  -564,  -721,   nil,   nil,
  -404 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   331,   277,   nil,   311,
   nil,   793,   nil,   276,   nil,   nil,   nil,    11,    12,    18,
   217,   306,   nil,   nil,   215,   216,   nil,   270,    17,   nil,
   423,    21,    22,    23,    24,   647,   nil,   nil,   nil,   nil,
   294,   394,    31,   nil,   nil,    33,    36,    35,   nil,   212,
   213,   343,   nil,   121,   402,   120,   123,    72,    73,   nil,
    45,   nil,   655,   395,   nil,   396,   407,   601,   470,   268,
   254,    46,    47,    48,    49,    50,    51,    52,   nil,   255,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   541,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   676,   530,   nil,   677,   nil,
   520,   nil,   522,   nil,   781,   617,   nil,   nil,   nil,   528,
   nil,   nil,   nil,   710,   nil,   nil,   406,   nil,   nil,   nil,
   nil,   nil,    71,    74,    75,   nil,   nil,   nil,   nil,   nil,
   577,   nil,   nil,   nil,   521,   532,   533,   755,   536,   539,
   272 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 139, :_reduce_none,
  2, 140, :_reduce_2,
  0, 141, :_reduce_3,
  1, 141, :_reduce_4,
  3, 141, :_reduce_5,
  2, 141, :_reduce_6,
  1, 143, :_reduce_none,
  4, 143, :_reduce_8,
  4, 146, :_reduce_9,
  2, 147, :_reduce_10,
  0, 151, :_reduce_11,
  1, 151, :_reduce_12,
  3, 151, :_reduce_13,
  2, 151, :_reduce_14,
  0, 167, :_reduce_15,
  4, 145, :_reduce_16,
  3, 145, :_reduce_17,
  3, 145, :_reduce_18,
  3, 145, :_reduce_19,
  2, 145, :_reduce_20,
  3, 145, :_reduce_21,
  3, 145, :_reduce_22,
  3, 145, :_reduce_23,
  3, 145, :_reduce_24,
  3, 145, :_reduce_25,
  4, 145, :_reduce_26,
  1, 145, :_reduce_none,
  3, 145, :_reduce_28,
  3, 145, :_reduce_29,
  6, 145, :_reduce_30,
  5, 145, :_reduce_31,
  5, 145, :_reduce_32,
  5, 145, :_reduce_33,
  5, 145, :_reduce_34,
  3, 145, :_reduce_35,
  3, 145, :_reduce_36,
  3, 145, :_reduce_37,
  3, 145, :_reduce_38,
  1, 145, :_reduce_none,
  3, 155, :_reduce_40,
  3, 155, :_reduce_41,
  1, 166, :_reduce_none,
  3, 166, :_reduce_43,
  3, 166, :_reduce_44,
  3, 166, :_reduce_45,
  2, 166, :_reduce_46,
  1, 166, :_reduce_none,
  1, 154, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 171, :_reduce_none,
  4, 171, :_reduce_52,
  4, 171, :_reduce_53,
  0, 177, :_reduce_54,
  5, 175, :_reduce_55,
  2, 170, :_reduce_56,
  3, 170, :_reduce_57,
  4, 170, :_reduce_58,
  5, 170, :_reduce_59,
  4, 170, :_reduce_60,
  5, 170, :_reduce_61,
  2, 170, :_reduce_62,
  2, 170, :_reduce_63,
  2, 170, :_reduce_64,
  2, 170, :_reduce_65,
  2, 170, :_reduce_66,
  1, 156, :_reduce_67,
  3, 156, :_reduce_68,
  1, 181, :_reduce_69,
  3, 181, :_reduce_70,
  1, 180, :_reduce_none,
  2, 180, :_reduce_72,
  3, 180, :_reduce_73,
  5, 180, :_reduce_74,
  2, 180, :_reduce_75,
  4, 180, :_reduce_76,
  2, 180, :_reduce_77,
  4, 180, :_reduce_78,
  1, 180, :_reduce_79,
  3, 180, :_reduce_80,
  1, 184, :_reduce_none,
  3, 184, :_reduce_82,
  2, 183, :_reduce_83,
  3, 183, :_reduce_84,
  1, 186, :_reduce_85,
  3, 186, :_reduce_86,
  1, 185, :_reduce_87,
  1, 185, :_reduce_88,
  4, 185, :_reduce_89,
  3, 185, :_reduce_90,
  3, 185, :_reduce_91,
  3, 185, :_reduce_92,
  3, 185, :_reduce_93,
  2, 185, :_reduce_94,
  1, 185, :_reduce_95,
  1, 163, :_reduce_96,
  1, 163, :_reduce_97,
  4, 163, :_reduce_98,
  3, 163, :_reduce_99,
  3, 163, :_reduce_100,
  3, 163, :_reduce_101,
  3, 163, :_reduce_102,
  2, 163, :_reduce_103,
  1, 163, :_reduce_104,
  1, 189, :_reduce_105,
  1, 189, :_reduce_none,
  2, 190, :_reduce_107,
  1, 190, :_reduce_108,
  3, 190, :_reduce_109,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 194, :_reduce_115,
  1, 194, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 153, :_reduce_119,
  0, 197, :_reduce_120,
  4, 153, :_reduce_121,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  3, 169, :_reduce_192,
  5, 169, :_reduce_193,
  3, 169, :_reduce_194,
  5, 169, :_reduce_195,
  6, 169, :_reduce_196,
  5, 169, :_reduce_197,
  5, 169, :_reduce_198,
  5, 169, :_reduce_199,
  5, 169, :_reduce_200,
  4, 169, :_reduce_201,
  3, 169, :_reduce_202,
  3, 169, :_reduce_203,
  3, 169, :_reduce_204,
  3, 169, :_reduce_205,
  3, 169, :_reduce_206,
  3, 169, :_reduce_207,
  3, 169, :_reduce_208,
  3, 169, :_reduce_209,
  3, 169, :_reduce_210,
  4, 169, :_reduce_211,
  4, 169, :_reduce_212,
  2, 169, :_reduce_213,
  2, 169, :_reduce_214,
  3, 169, :_reduce_215,
  3, 169, :_reduce_216,
  3, 169, :_reduce_217,
  3, 169, :_reduce_218,
  3, 169, :_reduce_219,
  3, 169, :_reduce_220,
  3, 169, :_reduce_221,
  3, 169, :_reduce_222,
  3, 169, :_reduce_223,
  3, 169, :_reduce_224,
  3, 169, :_reduce_225,
  3, 169, :_reduce_226,
  3, 169, :_reduce_227,
  2, 169, :_reduce_228,
  2, 169, :_reduce_229,
  3, 169, :_reduce_230,
  3, 169, :_reduce_231,
  3, 169, :_reduce_232,
  3, 169, :_reduce_233,
  3, 169, :_reduce_234,
  6, 169, :_reduce_235,
  1, 169, :_reduce_none,
  1, 165, :_reduce_none,
  1, 199, :_reduce_none,
  2, 199, :_reduce_none,
  4, 199, :_reduce_240,
  2, 199, :_reduce_241,
  3, 204, :_reduce_242,
  0, 205, :_reduce_243,
  1, 205, :_reduce_none,
  0, 160, :_reduce_245,
  1, 160, :_reduce_none,
  2, 160, :_reduce_none,
  4, 160, :_reduce_248,
  2, 160, :_reduce_249,
  1, 179, :_reduce_250,
  2, 179, :_reduce_251,
  2, 179, :_reduce_252,
  4, 179, :_reduce_253,
  1, 179, :_reduce_254,
  0, 208, :_reduce_255,
  2, 174, :_reduce_256,
  2, 207, :_reduce_257,
  2, 206, :_reduce_258,
  0, 206, :_reduce_259,
  1, 201, :_reduce_260,
  2, 201, :_reduce_261,
  3, 201, :_reduce_262,
  4, 201, :_reduce_263,
  3, 164, :_reduce_264,
  4, 164, :_reduce_265,
  2, 164, :_reduce_266,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_275,
  3, 198, :_reduce_276,
  0, 230, :_reduce_277,
  5, 198, :_reduce_278,
  3, 198, :_reduce_279,
  3, 198, :_reduce_280,
  2, 198, :_reduce_281,
  3, 198, :_reduce_282,
  3, 198, :_reduce_283,
  1, 198, :_reduce_284,
  4, 198, :_reduce_285,
  3, 198, :_reduce_286,
  1, 198, :_reduce_287,
  5, 198, :_reduce_288,
  4, 198, :_reduce_289,
  3, 198, :_reduce_290,
  2, 198, :_reduce_291,
  1, 198, :_reduce_none,
  2, 198, :_reduce_293,
  2, 198, :_reduce_294,
  6, 198, :_reduce_295,
  6, 198, :_reduce_296,
  0, 231, :_reduce_297,
  0, 232, :_reduce_298,
  7, 198, :_reduce_299,
  0, 233, :_reduce_300,
  0, 234, :_reduce_301,
  7, 198, :_reduce_302,
  5, 198, :_reduce_303,
  4, 198, :_reduce_304,
  0, 235, :_reduce_305,
  0, 236, :_reduce_306,
  9, 198, :_reduce_307,
  0, 237, :_reduce_308,
  6, 198, :_reduce_309,
  0, 238, :_reduce_310,
  7, 198, :_reduce_311,
  0, 239, :_reduce_312,
  5, 198, :_reduce_313,
  0, 240, :_reduce_314,
  6, 198, :_reduce_315,
  0, 241, :_reduce_316,
  0, 242, :_reduce_317,
  9, 198, :_reduce_318,
  1, 198, :_reduce_319,
  1, 198, :_reduce_320,
  1, 198, :_reduce_321,
  1, 198, :_reduce_322,
  1, 159, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 220, :_reduce_326,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 221, :_reduce_none,
  5, 221, :_reduce_330,
  1, 149, :_reduce_none,
  2, 149, :_reduce_332,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 243, :_reduce_335,
  3, 243, :_reduce_336,
  1, 246, :_reduce_337,
  3, 246, :_reduce_338,
  1, 245, :_reduce_none,
  4, 245, :_reduce_340,
  6, 245, :_reduce_341,
  3, 245, :_reduce_342,
  5, 245, :_reduce_343,
  2, 245, :_reduce_344,
  4, 245, :_reduce_345,
  1, 245, :_reduce_346,
  3, 245, :_reduce_347,
  6, 247, :_reduce_348,
  8, 247, :_reduce_349,
  4, 247, :_reduce_350,
  6, 247, :_reduce_351,
  4, 247, :_reduce_352,
  2, 247, :_reduce_none,
  6, 247, :_reduce_354,
  2, 247, :_reduce_355,
  4, 247, :_reduce_356,
  6, 247, :_reduce_357,
  2, 247, :_reduce_358,
  4, 247, :_reduce_359,
  2, 247, :_reduce_360,
  4, 247, :_reduce_361,
  1, 247, :_reduce_362,
  0, 176, :_reduce_363,
  1, 176, :_reduce_364,
  3, 253, :_reduce_365,
  1, 253, :_reduce_366,
  4, 253, :_reduce_367,
  0, 254, :_reduce_368,
  2, 254, :_reduce_369,
  1, 255, :_reduce_370,
  3, 255, :_reduce_371,
  1, 256, :_reduce_372,
  1, 256, :_reduce_none,
  0, 260, :_reduce_374,
  3, 219, :_reduce_375,
  4, 258, :_reduce_376,
  1, 258, :_reduce_377,
  3, 259, :_reduce_378,
  3, 259, :_reduce_379,
  0, 263, :_reduce_380,
  5, 262, :_reduce_381,
  2, 172, :_reduce_382,
  4, 172, :_reduce_383,
  4, 172, :_reduce_384,
  2, 218, :_reduce_385,
  4, 218, :_reduce_386,
  4, 218, :_reduce_387,
  3, 218, :_reduce_388,
  3, 218, :_reduce_389,
  3, 218, :_reduce_390,
  2, 218, :_reduce_391,
  1, 218, :_reduce_392,
  4, 218, :_reduce_393,
  0, 265, :_reduce_394,
  5, 217, :_reduce_395,
  0, 266, :_reduce_396,
  5, 217, :_reduce_397,
  5, 223, :_reduce_398,
  1, 267, :_reduce_399,
  1, 267, :_reduce_none,
  6, 148, :_reduce_401,
  0, 148, :_reduce_402,
  1, 268, :_reduce_403,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  2, 269, :_reduce_406,
  1, 269, :_reduce_none,
  2, 150, :_reduce_408,
  1, 150, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_413,
  1, 271, :_reduce_414,
  2, 271, :_reduce_415,
  3, 272, :_reduce_416,
  1, 272, :_reduce_417,
  1, 272, :_reduce_418,
  3, 211, :_reduce_419,
  4, 212, :_reduce_420,
  3, 213, :_reduce_421,
  0, 276, :_reduce_422,
  3, 276, :_reduce_423,
  1, 277, :_reduce_424,
  2, 277, :_reduce_425,
  3, 214, :_reduce_426,
  0, 279, :_reduce_427,
  3, 279, :_reduce_428,
  0, 273, :_reduce_429,
  2, 273, :_reduce_430,
  0, 274, :_reduce_431,
  2, 274, :_reduce_432,
  0, 275, :_reduce_433,
  2, 275, :_reduce_434,
  1, 278, :_reduce_435,
  2, 278, :_reduce_436,
  0, 281, :_reduce_437,
  4, 278, :_reduce_438,
  1, 280, :_reduce_439,
  1, 280, :_reduce_440,
  1, 280, :_reduce_441,
  1, 280, :_reduce_none,
  1, 195, :_reduce_443,
  3, 196, :_reduce_444,
  1, 270, :_reduce_445,
  1, 270, :_reduce_446,
  2, 270, :_reduce_447,
  2, 270, :_reduce_448,
  1, 187, :_reduce_449,
  1, 187, :_reduce_450,
  1, 187, :_reduce_451,
  1, 187, :_reduce_452,
  1, 187, :_reduce_453,
  1, 188, :_reduce_454,
  1, 188, :_reduce_455,
  1, 188, :_reduce_456,
  1, 188, :_reduce_457,
  1, 188, :_reduce_458,
  1, 188, :_reduce_459,
  1, 188, :_reduce_460,
  1, 215, :_reduce_461,
  1, 215, :_reduce_462,
  1, 158, :_reduce_463,
  1, 158, :_reduce_464,
  1, 162, :_reduce_465,
  1, 162, :_reduce_466,
  1, 225, :_reduce_467,
  3, 225, :_reduce_468,
  2, 225, :_reduce_469,
  3, 227, :_reduce_470,
  2, 227, :_reduce_471,
  6, 261, :_reduce_472,
  8, 261, :_reduce_473,
  4, 261, :_reduce_474,
  6, 261, :_reduce_475,
  4, 261, :_reduce_476,
  6, 261, :_reduce_477,
  2, 261, :_reduce_478,
  4, 261, :_reduce_479,
  6, 261, :_reduce_480,
  2, 261, :_reduce_481,
  4, 261, :_reduce_482,
  2, 261, :_reduce_483,
  4, 261, :_reduce_484,
  1, 261, :_reduce_485,
  0, 261, :_reduce_486,
  1, 257, :_reduce_487,
  1, 257, :_reduce_488,
  1, 257, :_reduce_489,
  1, 257, :_reduce_490,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 283, :_reduce_493,
  3, 283, :_reduce_494,
  1, 248, :_reduce_495,
  3, 248, :_reduce_496,
  3, 284, :_reduce_497,
  3, 285, :_reduce_498,
  1, 249, :_reduce_499,
  3, 249, :_reduce_500,
  1, 282, :_reduce_501,
  3, 282, :_reduce_502,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  2, 250, :_reduce_505,
  1, 250, :_reduce_506,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 252, :_reduce_509,
  2, 251, :_reduce_510,
  0, 251, :_reduce_511,
  1, 228, :_reduce_none,
  3, 228, :_reduce_513,
  0, 216, :_reduce_514,
  2, 216, :_reduce_none,
  1, 203, :_reduce_516,
  3, 203, :_reduce_517,
  3, 288, :_reduce_518,
  2, 288, :_reduce_519,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 168, :_reduce_none,
  1, 168, :_reduce_none,
  2, 182, :_reduce_536,
  2, 161, :_reduce_537,
  0, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 226, :_reduce_541,
  1, 226, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_none,
  0, 200, :_reduce_545 ]

racc_reduce_n = 546

racc_shift_n = 955

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tSTRING => 125,
  :tSYMBOL => 126,
  :tNL => 127,
  :tEH => 128,
  :tCOLON => 129,
  :tCOMMA => 130,
  :tSPACE => 131,
  :tSEMI => 132,
  :tLAMBDA => 133,
  :tLAMBEG => 134,
  :tCHARACTER => 135,
  :tEQL => 136,
  :tLOWEST => 137 }

racc_nt_base = 138

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@18",
  "f_args",
  "do_block",
  "@19",
  "operation3",
  "@20",
  "@21",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@22",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

  def _reduce_2(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end

  def _reduce_3(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_4(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_5(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_6(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

# reduce 7 omitted

  def _reduce_8(val, _values, result)
                          result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_9(val, _values, result)
                          rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
  end

  def _reduce_10(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end

  def _reduce_11(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_12(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_13(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_14(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

  def _reduce_15(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_16(val, _values, result)
                          result = @builder.alias(val[0], val[1], val[3])
                    
    result
  end

  def _reduce_17(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
  end

  def _reduce_18(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
  end

  def _reduce_19(val, _values, result)
                          diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
  end

  def _reduce_20(val, _values, result)
                          result = @builder.undef_method(val[0], val[1])
                    
    result
  end

  def _reduce_21(val, _values, result)
                          result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
  end

  def _reduce_22(val, _values, result)
                          result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
  end

  def _reduce_23(val, _values, result)
                          result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_24(val, _values, result)
                          result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_25(val, _values, result)
                          rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
  end

  def _reduce_26(val, _values, result)
                          result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
  end

# reduce 27 omitted

  def _reduce_28(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_29(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_30(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end

  def _reduce_31(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_32(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_33(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_34(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_35(val, _values, result)
                          @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_36(val, _values, result)
                          result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end

  def _reduce_37(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_38(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end

# reduce 39 omitted

  def _reduce_40(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_41(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

# reduce 42 omitted

  def _reduce_43(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_44(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_45(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
  end

  def _reduce_46(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

  def _reduce_52(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_53(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_54(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_55(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_56(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_57(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_58(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_59(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_60(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_61(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_62(val, _values, result)
                          result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_63(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_64(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_65(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_66(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_67(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end

  def _reduce_68(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_69(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end

  def _reduce_70(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

# reduce 71 omitted

  def _reduce_72(val, _values, result)
                          result = val[0].
                                  push(val[1])
                    
    result
  end

  def _reduce_73(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
  end

  def _reduce_74(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
  end

  def _reduce_75(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
  end

  def _reduce_76(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
  end

  def _reduce_77(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

  def _reduce_78(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end

  def _reduce_79(val, _values, result)
                          result = [ @builder.splat(val[0]) ]
                    
    result
  end

  def _reduce_80(val, _values, result)
                          result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
  end

# reduce 81 omitted

  def _reduce_82(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_83(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_84(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_85(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_86(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_87(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_88(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_89(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_90(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_91(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_92(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_93(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end

  def _reduce_94(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end

  def _reduce_95(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_96(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_97(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_98(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_99(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_100(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_101(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_102(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end

  def _reduce_103(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end

  def _reduce_104(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_105(val, _values, result)
                          diagnostic :error, :module_name_const, nil, val[0]
                    
    result
  end

# reduce 106 omitted

  def _reduce_107(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end

  def _reduce_108(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end

  def _reduce_109(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

  def _reduce_115(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

  def _reduce_119(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_120(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_121(val, _values, result)
                          result = val[0] << val[3]
                    
    result
  end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

  def _reduce_192(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_193(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
  end

  def _reduce_194(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_195(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
  end

  def _reduce_196(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end

  def _reduce_197(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_198(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_199(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_200(val, _values, result)
                          diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
  end

  def _reduce_201(val, _values, result)
                          diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
  end

  def _reduce_202(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_203(val, _values, result)
                          result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_204(val, _values, result)
                          result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_205(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_206(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_207(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_208(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_209(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_210(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_211(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
  end

  def _reduce_212(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
  end

  def _reduce_213(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_214(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_215(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_216(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_217(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_218(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_219(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_220(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_221(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_222(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_223(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_224(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_225(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_226(val, _values, result)
                          result = @builder.match_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_227(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_228(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end

  def _reduce_229(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_230(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_231(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_232(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_233(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_234(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
  end

  def _reduce_235(val, _values, result)
                          result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
  end

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

  def _reduce_240(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end

  def _reduce_241(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end

  def _reduce_242(val, _values, result)
                          result = val
                    
    result
  end

  def _reduce_243(val, _values, result)
                          result = [ nil, [], nil ]
                    
    result
  end

# reduce 244 omitted

  def _reduce_245(val, _values, result)
                          result = []
                    
    result
  end

# reduce 246 omitted

# reduce 247 omitted

  def _reduce_248(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end

  def _reduce_249(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end

  def _reduce_250(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_251(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_252(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
  end

  def _reduce_253(val, _values, result)
                          assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
  end

  def _reduce_254(val, _values, result)
                          result =  [ val[0] ]
                    
    result
  end

  def _reduce_255(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
  end

  def _reduce_256(val, _values, result)
                          @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
  end

  def _reduce_257(val, _values, result)
                          result = @builder.block_pass(val[0], val[1])
                    
    result
  end

  def _reduce_258(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

  def _reduce_259(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_260(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_261(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

  def _reduce_262(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_263(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end

  def _reduce_264(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_265(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end

  def _reduce_266(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

  def _reduce_275(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0])
                    
    result
  end

  def _reduce_276(val, _values, result)
                          result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_277(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end

  def _reduce_278(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[4])
                    
    result
  end

  def _reduce_279(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_280(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_281(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end

  def _reduce_282(val, _values, result)
                          result = @builder.array(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_283(val, _values, result)
                          result = @builder.associate(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_284(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0])
                    
    result
  end

  def _reduce_285(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_286(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
  end

  def _reduce_287(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0])
                    
    result
  end

  def _reduce_288(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
  end

  def _reduce_289(val, _values, result)
                          result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_290(val, _values, result)
                          result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
  end

  def _reduce_291(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

# reduce 292 omitted

  def _reduce_293(val, _values, result)
                          begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_294(val, _values, result)                                 ####???
                          lambda_call = @builder.call_lambda(val[0])

                      ##args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_295(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
  end

  def _reduce_296(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
  end

  def _reduce_297(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_298(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_299(val, _values, result)
                          result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end

  def _reduce_300(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_301(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_302(val, _values, result)
                          result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end

  def _reduce_303(val, _values, result)
                         # *when_bodies, (else_t, else_body) = *val[3] ###????

                      #result = @builder.case(val[0], val[1],
                      #                       when_bodies, else_t, else_body,
                      #                       val[4])
                      result = new_while val[5], val[2], true
                    
    result
  end

  def _reduce_304(val, _values, result)
                          #*when_bodies, (else_t, else_body) = *val[2] ###????

                      #result = @builder.case(val[0], nil,
                      #                       when_bodies, else_t, else_body,
                      #                       val[3])
                      lexer.cond.push true
                    
    result
  end

  def _reduce_305(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_306(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_307(val, _values, result)
                          result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
  end

  def _reduce_308(val, _values, result)
                          @static_env.extend_static
                    
    result
  end

  def _reduce_309(val, _values, result)
                          if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @static_env.unextend
                    
    result
  end

  def _reduce_310(val, _values, result)
                          result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                    
    result
  end

  def _reduce_311(val, _values, result)
                          result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @static_env.unextend

                      @def_level = val[4]
                    
    result
  end

  def _reduce_312(val, _values, result)
                          @static_env.extend_static
                    
    result
  end

  def _reduce_313(val, _values, result)
                          if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @static_env.unextend
                    
    result
  end

  def _reduce_314(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                    
    result
  end

  def _reduce_315(val, _values, result)
                          result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end

  def _reduce_316(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_317(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                    
    result
  end

  def _reduce_318(val, _values, result)
                          result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end

  def _reduce_319(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0])
                    
    result
  end

  def _reduce_320(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0])
                    
    result
  end

  def _reduce_321(val, _values, result)
                          result = @builder.keyword_cmd(:redo, val[0])
                    
    result
  end

  def _reduce_322(val, _values, result)
                          result = @builder.keyword_cmd(:retry, val[0])
                    
    result
  end

# reduce 323 omitted

# reduce 324 omitted

# reduce 325 omitted

  def _reduce_326(val, _values, result)
                          result = val[1]
                    
    result
  end

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

  def _reduce_330(val, _values, result)
                          else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
  end

# reduce 331 omitted

  def _reduce_332(val, _values, result)
                          result = val
                    
    result
  end

# reduce 333 omitted

# reduce 334 omitted

  def _reduce_335(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
  end

  def _reduce_336(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_337(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_338(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

# reduce 339 omitted

  def _reduce_340(val, _values, result)
                          @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
  end

  def _reduce_341(val, _values, result)
                          @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
  end

  def _reduce_342(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
  end

  def _reduce_343(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
  end

  def _reduce_344(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end

  def _reduce_345(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end

  def _reduce_346(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end

  def _reduce_347(val, _values, result)
                          result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
  end

  def _reduce_348(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_349(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end

  def _reduce_350(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_351(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_352(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

# reduce 353 omitted

  def _reduce_354(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_355(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_356(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_357(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_358(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_359(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_360(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_361(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_362(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_363(val, _values, result)
                          result = @builder.args(nil, [], nil)
                    
    result
  end

  def _reduce_364(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end

  def _reduce_365(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_366(val, _values, result)
                          result = @builder.args(val[0], [], val[0])
                    
    result
  end

  def _reduce_367(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end

  def _reduce_368(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_369(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_370(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_371(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_372(val, _values, result)
                          result = @builder.shadowarg(val[0])
                    
    result
  end

# reduce 373 omitted

  def _reduce_374(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_375(val, _values, result)
                          result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_376(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end

  def _reduce_377(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end

  def _reduce_378(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end

  def _reduce_379(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end

  def _reduce_380(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_381(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_382(val, _values, result)
                          begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
  end

  def _reduce_383(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_384(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_385(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_386(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_387(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_388(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_389(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_390(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_391(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_392(val, _values, result)
                          result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
  end

  def _reduce_393(val, _values, result)
                          result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_394(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_395(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_396(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_397(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_398(val, _values, result)
                          result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
  end

  def _reduce_399(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

# reduce 400 omitted

  def _reduce_401(val, _values, result)
                          assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
  end

  def _reduce_402(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_403(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

# reduce 404 omitted

# reduce 405 omitted

  def _reduce_406(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end

# reduce 407 omitted

  def _reduce_408(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

  def _reduce_413(val, _values, result)
                          result = @builder.string_compose(nil, val[0], nil)
                    
    result
  end

  def _reduce_414(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_415(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_416(val, _values, result)
                          result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_417(val, _values, result)
                          result = @builder.string(val[0])
                    
    result
  end

  def _reduce_418(val, _values, result)
                          result = @builder.character(val[0])
                    
    result
  end

  def _reduce_419(val, _values, result)
                          result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_420(val, _values, result)
                          opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
  end

  def _reduce_421(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_422(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_423(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end

  def _reduce_424(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_425(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_426(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_427(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_428(val, _values, result)
                          result = val[0] << @builder.string_internal(val[1])
                    
    result
  end

  def _reduce_429(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_430(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_431(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_432(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_433(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_434(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_435(val, _values, result)
                          result = @builder.string_internal(val[0])
                    
    result
  end

  def _reduce_436(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_437(val, _values, result)
                          @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
  end

  def _reduce_438(val, _values, result)
                          @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
  end

  def _reduce_439(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end

  def _reduce_440(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end

  def _reduce_441(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end

# reduce 442 omitted

  def _reduce_443(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end

  def _reduce_444(val, _values, result)
                          result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_445(val, _values, result)
                          result = @builder.integer(val[0])
                    
    result
  end

  def _reduce_446(val, _values, result)
                          result = @builder.float(val[0])
                    
    result
  end

  def _reduce_447(val, _values, result)
                          result = @builder.negate(val[0],
                                  @builder.integer(val[1]))
                    
    result
  end

  def _reduce_448(val, _values, result)
                          result = @builder.negate(val[0],
                                  @builder.float(val[1]))
                    
    result
  end

  def _reduce_449(val, _values, result)
                          result = @builder.ident(val[0])
                    
    result
  end

  def _reduce_450(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end

  def _reduce_451(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end

  def _reduce_452(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end

  def _reduce_453(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end

  def _reduce_454(val, _values, result)
                          result = @builder.nil(val[0])
                    
    result
  end

  def _reduce_455(val, _values, result)
                          result = @builder.self(val[0])
                    
    result
  end

  def _reduce_456(val, _values, result)
                          result = @builder.true(val[0])
                    
    result
  end

  def _reduce_457(val, _values, result)
                          result = @builder.false(val[0])
                    
    result
  end

  def _reduce_458(val, _values, result)
                          result = @builder.__FILE__(val[0])
                    
    result
  end

  def _reduce_459(val, _values, result)
                          result = @builder.__LINE__(val[0])
                    
    result
  end

  def _reduce_460(val, _values, result)
                          result = @builder.__ENCODING__(val[0])
                    
    result
  end

  def _reduce_461(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end

  def _reduce_462(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end

  def _reduce_463(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_464(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_465(val, _values, result)
                          result = @builder.nth_ref(val[0])
                    
    result
  end

  def _reduce_466(val, _values, result)
                          result = @builder.back_ref(val[0])
                    
    result
  end

  def _reduce_467(val, _values, result)
                          result = nil
                    
    result
  end

  def _reduce_468(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end

  def _reduce_469(val, _values, result)
                          yyerrok
                      result = nil
                    
    result
  end

  def _reduce_470(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
  end

  def _reduce_471(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end

  def _reduce_472(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_473(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end

  def _reduce_474(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_475(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_476(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_477(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_478(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_479(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_480(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_481(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_482(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_483(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_484(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_485(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_486(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_487(val, _values, result)
                          diagnostic :error, :argument_const, nil, val[0]
                    
    result
  end

  def _reduce_488(val, _values, result)
                          diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
  end

  def _reduce_489(val, _values, result)
                          diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
  end

  def _reduce_490(val, _values, result)
                          diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
  end

# reduce 491 omitted

# reduce 492 omitted

  def _reduce_493(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
  end

  def _reduce_494(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_495(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_496(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_497(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_498(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_499(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_500(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_501(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_502(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

# reduce 503 omitted

# reduce 504 omitted

  def _reduce_505(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end

  def _reduce_506(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end

# reduce 507 omitted

# reduce 508 omitted

  def _reduce_509(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
  end

  def _reduce_510(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

  def _reduce_511(val, _values, result)
                          result = []
                    
    result
  end

# reduce 512 omitted

  def _reduce_513(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_514(val, _values, result)
                          result = []
                    
    result
  end

# reduce 515 omitted

  def _reduce_516(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_517(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_518(val, _values, result)
                          result = @builder.pair(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_519(val, _values, result)
                          result = @builder.pair_keyword(val[0], val[1])
                    
    result
  end

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

  def _reduce_536(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_537(val, _values, result)
                          result = val[1]
                    
    result
  end

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

  def _reduce_541(val, _values, result)
                        yyerrok
                  
    result
  end

# reduce 542 omitted

# reduce 543 omitted

# reduce 544 omitted

  def _reduce_545(val, _values, result)
                        result = nil
                  
    result
  end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby19
  end   # module Parser
