# -*- encoding:utf-8; warn-indent:false -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

Parser.check_for_encoding_support

module Parser
  class Ruby20 < Parser::Base


  def version
    20
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-288,265,563,-101,265,-106,684,-288,-288,-288,211,212,265,-288,-288',
'605,-288,214,235,-100,235,607,-101,893,642,-103,584,642,-484,642,592',
'524,-103,-98,526,-105,-288,-288,563,-288,-288,-288,-288,-288,-102,563',
'-100,563,563,-485,232,642,232,744,234,233,234,233,215,641,211,212,641',
'-99,641,826,260,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-98,604,-288,-288,-288,641,625,606,264,748,-288,264,110',
'-288,594,593,608,109,-288,264,-288,-99,-288,-288,215,-288,-288,-288',
'-288,-288,-470,-288,-92,-288,-97,683,713,-470,-470,-470,110,-562,-470',
'-470,-470,109,-470,-288,-91,713,-288,-288,583,-95,-470,-288,-470,-470',
'-470,-104,-101,-94,-89,-103,-96,-101,-470,-470,-103,-470,-470,-470,-470',
'-470,215,110,110,-104,-92,837,109,109,-102,110,-100,110,110,-102,109',
'-100,109,109,-90,-94,215,211,212,-470,-470,-470,-470,-470,-470,-470',
'-470,-470,-470,-470,-470,-470,-470,713,749,-470,-470,-470,-102,-470',
'-470,211,212,-470,754,768,-470,-470,803,-470,-481,-470,511,-470,265',
'-470,-470,-481,-470,-470,-470,-470,-470,110,-470,-563,-470,-92,109,702',
'-480,542,541,540,592,543,110,-480,836,769,-470,109,-94,-470,-470,-470',
'-470,-473,-470,442,-470,-91,-470,855,-473,-473,-473,-100,-101,-473,-473',
'-473,-84,-473,-562,-105,215,-92,-70,-95,-92,-473,110,-473,-473,-473',
'-92,109,215,260,-559,970,-94,-473,-473,-94,-473,-473,-473,-473,-473',
'-94,-103,575,436,260,215,576,110,594,593,437,264,109,592,-408,-100,-264',
'-93,747,438,803,828,569,-473,-473,-473,-473,-473,-473,-473,-473,-473',
'-473,-473,-473,-473,-473,211,212,-473,-473,-473,-470,-473,-473,592,508',
'-473,592,-470,-473,-473,512,-473,-559,-473,-566,-473,-470,-473,-473',
'441,-473,-473,-473,-473,-473,-408,-473,702,-473,542,541,540,-408,543',
'592,-559,594,593,590,592,-484,-408,-473,-560,440,-473,-473,-473,-473',
'-288,-473,716,-473,569,-473,215,-288,-288,-288,-478,-408,-288,-288,-288',
'513,-288,-478,-566,594,593,439,594,593,595,-566,-288,-288,-288,745,-562',
'845,524,-566,-566,526,-288,-288,-89,-288,-288,-288,-288,-288,-98,709',
'524,-473,-106,523,594,593,597,-566,-473,594,593,599,592,-560,110,947',
'707,-473,620,109,209,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,215,-560,-288,-288,-288,-566,771,-288,-475,235,-288',
'511,-566,-288,-288,-475,-288,-562,-288,706,-288,-566,-288,-288,621,-288',
'-288,-288,-288,-288,-92,-288,-97,-288,524,705,-101,526,-106,-485,-566',
'232,594,593,603,234,233,-288,230,231,-288,-288,-288,-288,-566,-288,-265',
'-288,-96,-104,235,-566,-566,-566,-105,785,-566,-566,-566,393,-566,-94',
'314,315,395,394,551,-103,-473,-566,-566,-566,-566,739,740,-473,-90,741',
'104,105,-566,-566,-99,-566,-566,-566,-566,-566,702,-331,542,541,540',
'110,543,257,-331,696,109,559,558,-479,258,-470,552,-331,211,212,-479',
'694,-470,-566,-566,-566,-566,-566,-566,-566,-566,-566,-566,-566,-566',
'-566,-566,549,698,-566,-566,-566,-279,770,-566,514,854,-566,551,-279',
'-566,-566,515,-566,692,-566,690,-566,-279,-566,-566,438,-566,-566,-566',
'-566,-566,689,-566,-566,-566,702,257,542,541,540,-477,543,686,258,215',
'559,558,-477,-566,235,552,-566,-566,-566,-566,-566,-566,215,-566,396',
'-102,473,-566,-566,-566,249,250,-476,-566,-566,110,-566,383,698,-476',
'109,680,-289,235,215,-566,232,701,238,-289,234,233,857,230,231,79,-566',
'-566,-289,-566,-566,-566,-566,-566,832,803,689,80,545,579,542,541,540',
'549,543,232,931,81,860,234,233,110,230,231,551,580,109,-566,-566,-566',
'-566,-566,-566,-566,-566,-566,-566,-566,-566,-566,-566,559,558,-566',
'-566,-566,547,626,110,506,507,-566,862,109,-566,556,555,559,558,-566',
'864,-566,552,-566,-566,866,-566,-566,-566,-566,-566,215,-566,-566,-566',
'832,803,868,702,-289,542,541,540,-279,543,869,-289,678,-566,872,-279',
'-566,-566,677,-93,-289,-566,211,212,-279,-102,286,69,70,71,9,57,874',
'875,671,63,64,808,877,755,67,698,65,66,68,30,31,72,73,-263,701,881,883',
'884,29,28,27,98,97,99,100,885,689,19,887,889,891,893,630,8,45,288,10',
'102,101,103,92,56,94,93,95,214,96,104,105,215,90,91,527,42,43,41,235',
'239,244,245,246,241,243,251,252,247,248,207,228,229,502,899,249,250',
'208,40,528,503,33,901,215,58,59,206,903,60,501,35,232,803,238,44,234',
'233,313,230,231,242,240,236,20,237,773,671,269,89,79,82,83,-483,84,86',
'85,87,517,909,-483,-482,80,88,235,253,-568,-240,-482,-483,62,312,81',
'-568,-568,-568,912,-482,-568,-568,-568,702,-568,542,541,540,215,543',
'-288,915,-266,-568,-568,-568,-568,-288,486,215,235,660,-563,-84,-568',
'-568,-288,-568,-568,-568,-568,-568,702,215,542,541,540,504,543,482,702',
'698,542,541,540,928,543,542,541,540,898,543,925,671,254,-568,-568,-568',
'-568,-568,-568,-568,-568,-568,-568,-568,-568,-568,-568,260,698,-568',
'-568,-568,571,932,-568,579,698,-568,933,572,-568,-568,578,-568,569,-568',
'385,-568,570,-568,-568,580,-568,-568,-568,-568,-568,473,-568,-568,-568',
'215,702,215,542,541,540,928,543,542,541,540,235,543,-568,235,579,-568',
'-568,-568,-568,235,-568,931,-568,286,69,70,71,9,57,235,580,949,63,64',
'210,951,952,67,698,65,66,68,30,31,72,73,113,114,115,116,117,29,28,27',
'98,97,99,100,473,702,19,542,541,540,957,543,8,45,288,10,102,101,103',
'92,56,94,93,95,-288,96,104,105,573,90,91,-288,42,43,41,235,-563,-288',
'689,975,-288,960,962,698,-288,964,976,966,966,-563,260,249,250,-288',
'40,974,574,33,632,629,58,59,260,497,60,496,35,232,977,238,44,234,233',
'619,230,231,978,893,236,20,237,893,893,983,89,79,82,83,618,84,86,85',
'87,949,215,614,205,80,88,286,69,70,71,9,57,62,204,81,63,64,215,-263',
'612,67,671,65,66,68,30,31,72,73,113,114,115,116,117,29,28,27,98,97,99',
'100,484,-563,19,113,114,115,116,117,8,45,288,10,102,101,103,92,56,94',
'93,95,-483,96,104,105,-562,90,91,-483,42,43,41,235,677,-482,203,-289',
'-483,609,796,486,-482,486,-289,484,949,215,1002,249,250,-482,40,-289',
'1003,33,1004,966,58,59,966,966,60,215,35,232,118,238,44,234,233,215',
'230,231,-69,254,236,20,237,893,949,493,89,79,82,83,106,84,86,85,87,966',
',,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,,42,43,41,235,-585,-585,-585,-585,241,243,',
',-585,-585,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233',
',230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286',
'69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,,42,43,41,235,239,244,245,246,241,243,,,247,248,,,,,,249',
'250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236',
'20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,',
',,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,235,-585,-585,-585,-585,241,243,,,-585,-585,,,,,,249,250,,40,,,33',
',,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45',
'288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,',
',,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233',
',230,231,,,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70',
'71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,235,239,244,245,246,241,243,251,252,247,248,,-585,-585',
',,249,250,,40,,,290,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242',
'240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,5,69,70,71,9,57',
'62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100',
',,19,,,,,,8,45,7,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42',
'43,41,235,239,244,245,246,241,243,251,252,247,248,,-585,-585,,,249,250',
',40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20',
'237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,',
'8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41',
'235,-585,-585,-585,-585,241,243,,,-585,-585,,,,,,249,250,,40,,,290,',
',58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288',
'10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,-585',
'-585,-585,-585,241,243,,,-585,-585,,,,,,249,250,,40,,,33,,,58,59,,,60',
',35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,239,244,245,246',
'241,243,251,,247,248,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238',
'44,234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,98,97,99,100,,,19,,,,,630,8,45,288,10,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,,42,43,41,235,239,244,245,246,241,243,251',
'252,247,248,,228,229,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44',
'234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,253,-567,,,,62,,81,-567,-567,-567,,,-567,-567,-567,235,-567,',
',,,,,,,-567,-567,-567,-567,,,249,250,,,,-567,-567,,-567,-567,-567,-567',
'-567,,,,232,,238,,234,233,,230,231,,,236,,237,,,,,,,-567,-567,-567,-567',
'-567,-567,-567,-567,-567,-567,-567,-567,-567,-567,,,-567,-567,-567,',
',-567,,,-567,,,-567,-567,,-567,,-567,,-567,,-567,-567,,-567,-567,-567',
'-567,-567,,-567,-567,-567,,,,,,,,,,,,,,-567,,,-567,-567,-567,-567,,-567',
',-567,286,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95',
',96,104,105,,90,91,,42,43,41,235,-585,-585,-585,-585,241,243,,,-585',
'-585,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230',
'231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69',
'70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98',
'97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,235,-585,-585,-585,-585,241,243,,,-585,-585,,,,,,249',
'250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236',
'20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,',
',,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,235,,,,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,,44,234',
'233,,230,231,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70',
'71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,235,,,,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35',
'232,,238,44,234,233,,230,231,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,',
',60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286',
'69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,290,,,58,59,,,60,,35,,',
',44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9',
'57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100',
',,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
',42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,',
'20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,',
'8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288',
'10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,',
',,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59',
',,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286',
'69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,',
'44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9',
'57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100',
',,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
',42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,',
'20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,5,69,70,71,9,57,62,,81,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,',
'8,45,7,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,',
',,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,',
',,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,5,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,7,10,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
'286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71',
'9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99',
'100,,,19,,,,,615,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,235,239,244,245,246,241,243,251,252,247,248,,228,229',
',,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242',
'240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,-280,,,,62',
',81,-280,-280,-280,,,-280,-280,-280,,-280,,,,,,,,,,-280,-280,-280,,',
',,,,,-280,-280,,-280,-280,-280,-280,-280,,,,,,,,,,,,,,,,,,,,,,,,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,,,-280',
'-280,-280,,,-280,,,-280,,,-280,-280,,-280,,-280,,-280,,-280,-280,,-280',
'-280,-280,-280,-280,,-280,,-280,,,,,,,,,,,,,,-280,,,-280,-280,-280,-280',
',-280,,-280,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,',
'29,28,27,98,97,99,100,,,19,,,,,,8,45,,10,102,101,103,92,56,94,93,95',
',96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60',
',35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90',
'91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,,,44,,',
'281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,281,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,',
',102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,',
',,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98',
'97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90',
'91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,',
',,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,',
',45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,239',
'244,245,246,241,243,251,252,247,248,,228,229,,,249,250,,220,,,226,,',
'58,59,,,60,,,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,110,253,,,,109,62,,81,69,70,71,,57,,,,63',
'64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227',
',,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309,,,',
',,,,,,,,,,,,,,,,345,,,33,,,58,59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101',
'103,350,56,94,93,351,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,357,',
',352,,,226,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,',
',,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,350,56,94',
'93,351,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,352,,,226,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,,90',
'91,,,,309,,,,,,,,,,,,,,,,,,,,871,,,226,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,',
'67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,',
',45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,',
',,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220',
',,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,',
',,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,',
',,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62',
',81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19',
',,,,,8,45,7,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,235,239,244,245,246,241,243,251,252,247,248,,228,229,,,249,250,,40',
',,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,,,,385,62,,81,69,70,71,,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,',
',,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,',
',226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,',
'29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,',
',,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,',
'57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100',
',,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62,,81,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,,10',
'102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,',
',,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306',
'72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92',
'56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301',
'302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,',
',,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
',42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,',
'225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64',
',,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,',
',,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,',
',,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,654,,,,44,,,,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220',
',,226,,,58,59,,,60,,401,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98',
'97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276',
',44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
',42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,',
'225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92',
'56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,401',
',,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,',
'57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100',
',,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,',
',,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70',
'71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
',42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,',
'20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,215,69,70,71,,57,62,,81,63',
'64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,',
',,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65',
'66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,',
'102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309,235,239,244,245',
'246,241,243,251,252,247,248,,228,229,,,249,250,,299,,,226,,,58,59,,',
'60,,,232,,238,,234,233,,230,231,242,240,236,,237,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,253,,311,,,62,,81,69,70,71,,57,,,,63,64,,,,67,,65',
'66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,',
'102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,',
',,,,299,,,295,,,58,59,,,60,,294,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70',
'71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90',
'91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44',
',,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57',
'62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100',
',,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,',
',226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280',
'96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60',
',278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,',
'44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57',
'62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99',
'100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,',
'42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,',
',,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,',
',,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220',
',,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,',
',,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,',
',,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,',
'81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,',
',226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,',
',,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,',
',,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,',
'81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,',
',226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,',
',,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,',
',,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,',
'81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,',
',226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,',
',,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,',
',,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,',
'81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,',
',226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,',
',,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,',
',,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,',
'81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,',
',,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,',
',,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94',
'93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,',
',58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95',
'280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104',
'105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278',
',276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,215,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,401,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309',
',,,,,,,,,,,,,,,,,,,299,,,295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,299',
',,295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301',
'302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,',
',,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
',42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,',
'225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64',
',,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,',
',,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,',
',,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,',
',,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72',
'73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,',
',58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301',
'302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,',
',,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99',
'100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,',
'67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,',
',45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,',
',,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,276,,44,,,281,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,871,,,226',
',,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
'69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,',
',,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,',
'81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,',
',,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,',
',,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58',
'59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
'69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,,,,309,235,239,244,245,246,241,243,251,252,247,248,,228,229',
',,249,250,,299,,,226,,,58,59,,,60,,,232,,238,,234,233,,230,231,242,240',
'236,,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,,499,,,62,,81,69',
'70,71,,57,,,,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98',
'97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,',
'90,91,,,,309,,,,,,,,,,,,,,,,,,,,939,,,226,,,58,59,,,60,,,,,,,,,,,,,',
',,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92',
'56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,',
'44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57',
'62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100',
',,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
',42,43,41,235,239,244,245,246,241,243,251,252,247,248,,228,229,,,249',
'250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236',
'20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,,,,385,62,,81,69,70',
'71,,57,,,,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90',
'91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,276,,44,,',
'281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,654,,276,,44,,,281',
',,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,',
'227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,',
',,,,,,,,,220,,,226,,,58,59,,,60,,752,,,,44,,,,,,,,,225,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,',
',,220,,,226,,,58,59,,,60,,654,,276,,44,,,281,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92',
'56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,',
',226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94',
'93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,',
',58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,',
',,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,299,,,295,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99',
'100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91',
',42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,',
'281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,,,44,,,,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,',
',,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62,,81,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,7,10',
'102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,',
',,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306',
'72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92',
'56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301',
'302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,517,,58,59,,,60',
',,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99',
'100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,',
'67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,',
',45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,',
',,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,281,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65',
'66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,',
',,,,,,220,,,226,,,58,59,,,60,,654,,,,44,,,281,,,,,,225,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92',
'56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301',
'302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,',
',,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
',42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,',
'225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64',
',,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,',
',,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,',
',,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,',
'299,,,295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280',
'96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60',
',278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,299,,,295,,,58,59,,,60,,,,,,,,',
',,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63',
'64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,',
',,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65',
'66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,',
',,,,,,220,,,226,,,58,59,,,60,,,,276,,44,,,281,,,,,,225,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220',
',,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,',
'96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60',
',,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99',
'100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,',
',102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,239,244',
'245,246,241,243,251,252,247,248,,228,229,,,249,250,,220,,,226,,,58,59',
',,60,,,232,,238,44,234,233,,230,231,242,240,236,225,237,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,253,-295,,,,62,,81,-295,-295,-295,,,-295',
'-295,-295,,-295,,,,,,,,,,-295,-295,,,,,,,,,-295,-295,,-295,-295,-295',
'-295,-295,,,,,,,,,,,,,,,,,,,,,,,,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295,,,-295,,269,-295',
',,-295,-295,,-295,,-295,,-295,,-295,-295,,-295,-295,-295,-295,-295,',
'-295,-246,-295,,,,,,-246,-246,-246,,,-246,-246,-246,-295,-246,,-295',
'-295,,-295,,-295,,-246,-246,-246,,,,,,,,,-246,-246,,-246,-246,-246,-246',
'-246,,,,,,,,,,,,,,,,,,,,,,,,-246,-246,-246,-246,-246,-246,-246,-246',
'-246,-246,-246,-246,-246,-246,,,-246,-246,-246,,,-246,,260,-246,,,-246',
'-246,,-246,,-246,,-246,,-246,-246,,-246,-246,-246,-246,-246,,-246,-246',
'-246,,,,,,,,,,,,,,-246,,-246,-246,-246,,-246,,-246,-246,-246,-246,,',
'-246,-246,-246,784,-246,542,541,540,785,543,,,,-246,-246,,,,,551,,,',
',-246,-246,,-246,-246,-246,-246,-246,,,,,,,,,,547,,,,,,,,,556,555,559',
'558,,,,552,,,,,,,,,-246,,-407,,,,,-246,,-407,-407,-407,260,-246,-407',
'-407,-407,215,-407,,,,,,,,,-407,-407,-407,,,,,,-246,-246,,-407,-407',
',-407,-407,-407,-407,-407,,,,,-246,,,-246,,,,,-246,,,,,,,,,,,-407,-407',
'-407,-407,-407,-407,-407,-407,-407,-407,-407,-407,-407,-407,,,-407,-407',
'-407,,,-407,,260,-407,,,-407,-407,,-407,,-407,,-407,,-407,-407,,-407',
'-407,-407,-407,-407,,-407,-407,-407,,,,,,,,,,,,,,-407,,,-407,-407,,-407',
',-407,170,181,171,194,167,187,177,176,197,198,192,175,174,169,195,199',
'200,179,168,182,186,188,180,173,,,,189,196,191,190,183,193,178,166,185',
'184,,,,,,165,172,163,164,160,161,162,121,123,,,122,,,,,,,,,154,155,',
'151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,,,,,,',
',,148,147,,132,153,150,149,158,145,146,140,138,130,152,131,,,159,89',
',,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197,198,192,175,174',
'169,195,199,200,179,168,182,186,188,180,173,,,,189,196,191,190,183,193',
'178,166,185,184,,,,,,165,172,163,164,160,161,162,121,123,,,122,,,,,',
',,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144',
',,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152,131',
',,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197,198,192',
'175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196,191,190',
'183,193,178,166,185,184,,,,,,165,172,163,164,160,161,162,121,123,120',
',122,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157',
'143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130',
'152,131,,,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197',
'198,192,175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196',
'191,190,183,193,178,166,185,184,,,,,,165,172,163,164,160,161,162,121',
'123,,,122,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,',
'156,157,143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140',
'138,130,152,131,,,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177',
'176,197,198,192,175,174,169,195,199,200,179,168,182,186,188,180,173',
',,,189,196,191,190,183,193,178,166,185,184,,,,,,165,172,163,164,160',
'161,162,121,123,,,122,,,,,,,,,154,155,,151,133,134,135,142,139,141,',
',136,137,,,,156,157,143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158',
'145,146,140,138,130,152,131,,,159,170,181,171,194,167,187,177,176,197',
'198,192,175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196',
'191,368,367,369,366,166,185,184,,,,,,165,172,163,164,363,364,365,361',
'123,94,93,362,,96,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137',
',,,156,157,143,144,,,,,,373,,,,,,,,148,147,,132,153,150,149,158,145',
'146,140,138,130,152,131,,,159,235,239,244,245,246,241,243,251,252,247',
'248,,228,229,,,249,250,,545,,542,541,540,549,543,,,,,,,232,,238,551',
'234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243,251,252',
'247,248,547,228,229,,,249,250,,253,556,555,559,558,,,,552,,,,,232,,238',
',234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243,251,252',
'247,248,,228,229,,,249,250,,253,,,702,,542,541,540,549,543,,,,232,,238',
',234,233,551,230,231,242,240,236,,237,235,239,244,245,246,241,243,251',
'252,247,248,,228,229,547,,249,250,215,253,,,,,,559,558,,,,552,,232,',
'238,,234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243,251',
'252,247,248,,228,229,,,249,250,,253,,,702,,542,541,540,785,543,,,,232',
',238,,234,233,551,230,231,242,240,236,,237,235,239,244,245,246,241,243',
'251,252,247,248,,228,229,547,,249,250,,253,,,,,,559,558,,,,552,,232',
',238,,234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243',
'251,252,247,248,,228,229,,,249,250,,253,,,702,,542,541,540,785,543,',
',,232,,238,,234,233,551,230,231,242,240,236,,237,235,239,244,245,246',
'241,243,251,252,247,248,,228,229,547,,249,250,,253,,,,,,559,558,,,,552',
',232,,238,,234,233,,230,231,242,240,236,,237,,,,,416,420,,,415,,,,,',
',,,154,155,253,151,133,134,135,142,139,141,,,136,137,,,,156,157,143',
'144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130',
'152,131,997,420,159,,998,,,,,,,,,154,155,,151,133,134,135,142,139,141',
',,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149',
'158,145,146,140,138,130,152,131,471,413,159,,472,,,,,,,,,154,155,,151',
'133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,,,,,,,,,148',
'147,,132,153,150,149,158,145,146,140,138,130,152,131,633,413,159,,634',
',,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143',
'144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130',
'152,131,635,420,159,,636,,,,,,,,,154,155,,151,133,134,135,142,139,141',
',,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149',
'158,145,146,140,138,130,152,131,471,413,159,,472,,,,,,,,,154,155,,151',
'133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,',
',148,147,,132,153,150,149,158,145,146,140,138,130,152,131,724,420,159',
',725,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157',
'143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138',
'130,152,131,635,420,159,,636,,,,,,,,,154,155,,151,133,134,135,142,139',
'141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150',
'149,158,145,146,140,138,130,152,131,633,413,159,,634,,,,,,,,,154,155',
',151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,',
',,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152,131,721,420',
'159,,722,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156',
'157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140',
'138,130,152,131,972,420,159,,971,,,,,,,,,154,155,,151,133,134,135,142',
'139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153',
'150,149,158,145,146,140,138,130,152,131,719,413,159,,720,,,,,,,,,154',
'155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260',
',,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152,131,409',
'413,159,,410,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137',
',,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145',
'146,140,138,130,152,131,995,413,159,,996,,,,,,,,,154,155,,151,133,134',
'135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147',
',132,153,150,149,158,145,146,140,138,130,152,131,664,413,159,,665,,',
',,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143',
'144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130',
'152,131,667,420,159,,668,,,,,,,,,154,155,,151,133,134,135,142,139,141',
',,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149',
'158,145,146,140,138,130,152,131,,702,159,542,541,540,785,543,,784,,542',
'541,540,785,543,702,551,542,541,540,785,543,,784,551,542,541,540,785',
'543,,551,,,,,,,547,551,,,,,,,547,,,559,558,,,547,552,556,555,559,558',
',,547,552,,559,558,,,,552,556,555,559,558,,,545,552,542,541,540,549',
'543,,702,,542,541,540,549,543,,551,545,,542,541,540,549,543,551,784',
',542,541,540,785,543,,551,,,,,547,734,,551,,,,,547,556,555,559,558,',
',,552,547,531,559,558,,,,552,547,556,555,559,558,,,,552,556,555,559',
'558,,,545,552,542,541,540,549,543,,545,,542,541,540,549,543,,551,,,',
',,,,551,545,,542,541,540,549,543,,,,,,,547,,,551,,,,,547,556,555,559',
'558,,,,552,556,555,559,558,,,,552,547,734,545,,542,541,540,549,543,556',
'555,559,558,,,,552,702,551,542,541,540,549,543,,702,,542,541,540,549',
'543,702,551,542,541,540,549,543,,547,551,,,,,,,551,556,555,559,558,',
',547,552,,,,,,,547,,,559,558,,,547,552,,,559,558,,,,552,,559,558,,,702',
'552,542,541,540,785,543,,,,,,,,,,551,,,,,,,,,,,,,,,,,,,,,,547,,,,,,',
',,,,559,558,,,,552' ]
        racc_action_table = arr = ::Array.new(25112, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'415,26,902,719,61,346,530,415,415,415,589,589,645,415,415,380,415,19',
'446,839,445,381,995,823,478,996,356,477,218,646,382,329,720,342,329',
'573,415,415,717,415,415,415,415,415,997,335,1009,336,880,219,446,469',
'445,597,446,446,445,445,19,478,433,433,477,343,646,700,26,415,415,415',
'415,415,415,415,415,415,415,415,415,415,415,218,380,415,415,415,469',
'415,381,26,605,415,61,284,415,382,382,382,284,415,645,415,219,415,415',
'589,415,415,415,415,415,92,415,719,415,346,530,565,92,92,92,902,997',
'92,92,92,902,92,415,839,840,415,415,356,415,92,415,92,92,92,415,995',
'720,342,996,573,995,92,92,996,92,92,92,92,92,433,356,717,722,664,717',
'356,717,997,335,1009,336,880,997,335,1009,336,880,343,665,703,585,585',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,566,607,92,92,92,721,92,92',
'675,675,92,616,633,92,92,710,92,365,92,439,92,304,92,92,365,92,92,92',
'92,92,565,92,722,92,664,565,701,363,701,701,701,602,701,840,363,715',
'634,92,840,665,92,92,92,92,95,92,223,92,616,92,772,95,95,95,616,633',
'95,95,95,659,95,721,439,718,664,659,722,664,95,585,95,95,95,664,585',
'926,304,350,926,665,95,95,665,95,95,95,95,95,665,634,352,217,308,675',
'352,566,602,602,217,304,566,375,798,772,613,721,602,217,907,701,907',
'95,95,95,95,95,95,95,95,95,95,95,95,95,95,322,322,95,95,95,350,95,95',
'600,310,95,376,350,95,95,314,95,350,95,667,95,350,95,95,222,95,95,95',
'95,95,798,95,898,95,898,898,898,798,898,377,350,375,375,375,378,38,798',
'95,351,221,95,95,95,95,636,95,568,95,567,95,727,636,636,636,366,798',
'636,636,636,315,636,366,667,600,600,220,376,376,376,667,636,636,636',
'600,667,732,681,724,667,681,636,636,38,636,636,636,636,636,38,562,325',
'351,221,325,377,377,377,667,351,378,378,378,379,351,3,898,560,351,409',
'3,15,636,636,636,636,636,636,636,636,636,636,636,636,636,636,685,351',
'636,636,636,724,636,636,367,464,636,313,724,636,636,367,636,724,636',
'557,636,724,636,636,410,636,636,636,636,636,409,636,15,636,326,553,409',
'326,15,39,724,464,379,379,379,464,464,636,464,464,636,636,636,636,635',
'636,751,636,313,636,318,635,635,635,313,857,635,635,635,120,635,410',
'41,41,120,120,857,410,362,635,635,635,635,593,593,362,39,593,593,593',
'635,635,39,635,635,635,635,635,949,46,949,949,949,735,949,24,46,545',
'735,857,857,364,24,361,857,46,334,334,364,538,361,635,635,635,635,635',
'635,635,635,635,635,635,635,635,635,686,949,635,635,635,940,635,635',
'316,756,635,686,940,635,635,316,635,537,635,536,635,940,635,635,316',
'635,635,635,635,635,534,635,635,635,547,371,547,547,547,369,547,533',
'371,303,686,686,369,635,451,686,635,635,635,635,416,635,323,635,201',
'635,259,416,416,416,451,451,368,416,416,584,416,106,547,368,584,521',
'504,465,520,416,451,547,451,504,451,451,774,451,451,77,416,416,504,416',
'416,416,416,416,985,985,775,77,887,870,887,887,887,887,887,465,870,77',
'777,465,465,339,465,465,887,870,339,416,416,416,416,416,416,416,416',
'416,416,416,416,416,416,689,689,416,416,416,887,416,843,309,309,416',
'778,843,416,887,887,887,887,416,779,416,887,416,416,781,416,416,416',
'416,416,782,416,416,416,708,708,783,698,977,698,698,698,300,698,784',
'977,519,416,788,300,416,416,518,416,977,416,17,17,300,416,648,648,648',
'648,648,648,792,793,797,648,648,679,801,617,648,698,648,648,648,648',
'648,648,648,804,698,805,810,811,648,648,648,648,648,648,648,812,813',
'648,817,818,820,821,428,648,648,648,648,648,648,648,648,648,648,648',
'648,227,648,648,648,825,648,648,327,648,648,648,428,428,428,428,428',
'428,428,428,428,428,428,14,428,428,298,827,428,428,14,648,328,298,648',
'830,45,648,648,14,833,648,298,648,428,676,428,648,428,428,40,428,428',
'428,428,428,648,428,639,509,302,648,648,648,648,297,648,648,648,648',
'505,842,297,296,648,648,674,428,421,428,296,297,648,37,648,421,421,421',
'846,296,421,421,421,826,421,826,826,826,847,826,668,850,851,421,421',
'421,421,668,330,500,673,498,668,495,421,421,668,421,421,421,421,421',
'947,494,947,947,947,299,947,273,899,826,899,899,899,868,899,868,868',
'868,826,868,867,670,22,421,421,421,421,421,421,421,421,421,421,421,421',
'421,421,669,947,421,421,421,344,871,421,354,899,421,873,344,421,421',
'354,421,340,421,341,421,344,421,421,354,421,421,421,421,421,622,421',
'421,421,479,828,475,828,828,828,970,828,970,970,970,450,970,421,449',
'930,421,421,421,421,448,421,930,421,564,564,564,564,564,564,447,930',
'900,564,564,16,904,905,564,828,564,564,564,564,564,564,564,492,492,492',
'492,492,564,564,564,564,564,564,564,627,983,564,983,983,983,911,983',
'564,564,564,564,564,564,564,564,564,564,564,564,725,564,564,564,345',
'564,564,725,564,564,564,458,725,998,916,938,725,919,920,983,998,921',
'938,922,924,998,666,458,458,998,564,938,347,564,435,425,564,564,417',
'293,564,292,564,458,939,458,564,458,458,408,458,458,942,943,458,564',
'458,944,945,946,564,564,564,564,407,564,564,564,564,948,405,402,13,564',
'564,958,958,958,958,958,958,564,12,564,958,958,663,399,397,958,661,958',
'958,958,958,958,958,958,6,6,6,6,6,958,958,958,958,958,958,958,274,971',
'958,287,287,287,287,287,958,958,958,958,958,958,958,958,958,958,958',
'958,937,958,958,958,972,958,958,937,958,958,958,457,973,936,10,576,937',
'391,658,277,936,653,576,651,984,637,986,457,457,936,958,576,987,958',
'988,989,958,958,990,991,958,994,958,457,7,457,958,457,457,291,457,457',
'289,644,457,958,457,999,1000,288,958,958,958,958,1,958,958,958,958,1011',
',,,958,958,956,956,956,956,956,956,958,,958,956,956,,,,956,,956,956',
'956,956,956,956,956,,,,,,956,956,956,956,956,956,956,,,956,,,,,,956',
'956,956,956,956,956,956,956,956,956,956,956,,956,956,956,,956,956,,956',
'956,956,462,462,462,462,462,462,462,,,462,462,,,,,,462,462,,956,,,956',
',,956,956,,,956,,956,462,,462,956,462,462,,462,462,462,462,462,956,462',
',,,956,956,956,956,,956,956,956,956,,,,,956,956,950,950,950,950,950',
'950,956,,956,950,950,,,,950,,950,950,950,950,950,950,950,,,,,,950,950',
'950,950,950,950,950,,,950,,,,,,950,950,950,950,950,950,950,950,950,950',
'950,950,,950,950,950,,950,950,,950,950,950,466,466,466,466,466,466,466',
',,466,466,,,,,,466,466,,950,,,950,,,950,950,,,950,,950,466,,466,950',
'466,466,,466,466,466,466,466,950,466,,,,950,950,950,950,,950,950,950',
'950,,,,,950,950,935,935,935,935,935,935,950,,950,935,935,,,,935,,935',
'935,935,935,935,935,935,,,,,,935,935,935,935,935,935,935,,,935,,,,,',
'935,935,935,935,935,935,935,935,935,935,935,935,,935,935,935,,935,935',
',935,935,935,454,454,454,454,454,454,454,,,454,454,,,,,,454,454,,935',
',,935,,,935,935,,,935,,935,454,,454,935,454,454,,454,454,454,454,454',
'935,454,,,,935,935,935,935,,935,935,935,935,,,,,935,935,586,586,586',
'586,586,586,935,,935,586,586,,,,586,,586,586,586,586,586,586,586,,,',
',,586,586,586,586,586,586,586,,,586,,,,,,586,586,586,586,586,586,586',
'586,586,586,586,586,,586,586,586,,586,586,,586,586,586,455,,,,,,,,,',
',,,,,,455,455,,586,,,586,,,586,586,,,586,,586,455,,455,586,455,455,',
'455,455,,,455,586,455,,,,586,586,586,586,,586,586,586,586,,,,,586,586',
'295,295,295,295,295,295,586,,586,295,295,,,,295,,295,295,295,295,295',
'295,295,,,,,,295,295,295,295,295,295,295,,,295,,,,,,295,295,295,295',
'295,295,295,295,295,295,295,295,,295,295,295,,295,295,,295,295,295,443',
'443,443,443,443,443,443,443,443,443,443,,443,443,,,443,443,,295,,,295',
',,295,295,,,295,,295,443,,443,295,443,443,,443,443,443,443,443,295,443',
',,,295,295,295,295,,295,295,295,295,,,,,295,295,0,0,0,0,0,0,295,,295',
'0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0',
'0,0,0,0,,0,0,0,,0,0,,0,0,0,444,444,444,444,444,444,444,444,444,444,444',
',444,444,,,444,444,,0,,,0,,,0,0,,,0,,0,444,,444,0,444,444,,444,444,444',
'444,444,0,444,,,,0,0,0,0,,0,0,0,0,,,,,0,0,290,290,290,290,290,290,0',
',0,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290',
'290,290,290,,,290,,,,,,290,290,290,290,290,290,290,290,290,290,290,290',
',290,290,290,,290,290,,290,290,290,460,460,460,460,460,460,460,,,460',
'460,,,,,,460,460,,290,,,290,,,290,290,,,290,,290,460,,460,290,460,460',
',460,460,460,460,460,290,460,,,,290,290,290,290,,290,290,290,290,,,',
',290,290,877,877,877,877,877,877,290,,290,877,877,,,,877,,877,877,877',
'877,877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,877,877',
'877,877,877,877,877,877,877,877,877,877,,877,877,877,,877,877,,877,877',
'877,461,461,461,461,461,461,461,,,461,461,,,,,,461,461,,877,,,877,,',
'877,877,,,877,,877,461,,461,877,461,461,,461,461,461,461,461,877,461',
',,,877,877,877,877,,877,877,877,877,,,,,877,877,561,561,561,561,561',
'561,877,,877,561,561,,,,561,,561,561,561,561,561,561,561,,,,,,561,561',
'561,561,561,561,561,,,561,,,,,,561,561,561,561,561,561,561,561,561,561',
'561,561,,561,561,561,,561,561,,561,561,561,467,467,467,467,467,467,467',
'467,,467,467,,,,,,467,467,,561,,,561,,,561,561,,,561,,561,467,,467,561',
'467,467,,467,467,467,467,467,561,467,,,,561,561,561,561,,561,561,561',
'561,,,,,561,561,643,643,643,643,643,643,561,,561,643,643,,,,643,,643',
'643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,638',
'643,643,643,643,643,643,643,643,643,643,643,643,,643,643,643,,643,643',
',643,643,643,638,638,638,638,638,638,638,638,638,638,638,,638,638,,',
'638,638,,643,,,643,,,643,643,,,643,,643,638,,638,643,638,638,,638,638',
'638,638,638,643,638,,,,643,643,643,643,,643,643,643,643,,,,,643,643',
',638,420,,,,643,,643,420,420,420,,,420,420,420,456,420,,,,,,,,,420,420',
'420,420,,,456,456,,,,420,420,,420,420,420,420,420,,,,456,,456,,456,456',
',456,456,,,456,,456,,,,,,,420,420,420,420,420,420,420,420,420,420,420',
'420,420,420,,,420,420,420,,,420,,,420,,,420,420,,420,,420,,420,,420',
'420,,420,420,420,420,420,,420,420,420,,,,,,,,,,,,,,420,,,420,420,420',
'420,,420,,420,649,649,649,649,649,649,,,,649,649,,,,649,,649,649,649',
'649,649,649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,649,649',
'649,649,649,649,649,649,649,649,649,649,,649,649,649,,649,649,,649,649',
'649,463,463,463,463,463,463,463,,,463,463,,,,,,463,463,,649,,,649,,',
'649,649,,,649,,649,463,,463,649,463,463,,463,463,463,463,463,649,463',
',,,649,649,649,649,,649,649,649,649,,,,,649,649,683,683,683,683,683',
'683,649,,649,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683',
'683,683,683,683,683,,,683,,,,,,683,683,683,683,683,683,683,683,683,683',
'683,683,,683,683,683,,683,683,,683,683,683,459,459,459,459,459,459,459',
',,459,459,,,,,,459,459,,683,,,683,,,683,683,,,683,,683,459,,459,683',
'459,459,,459,459,459,459,459,683,459,,,,683,683,683,683,,683,683,683',
'683,,,,,683,683,684,684,684,684,684,684,683,,683,684,684,,,,684,,684',
'684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,',
'684,684,684,684,684,684,684,684,684,684,684,684,,684,684,684,,684,684',
',684,684,684,453,,,,,,,,,,,,,,,,453,453,,684,,,684,,,684,684,,,684,',
'684,453,,,684,453,453,,453,453,,,,684,,,,,684,684,684,684,,684,684,684',
'684,,,,,684,684,226,226,226,226,226,226,684,,684,226,226,,,,226,,226',
'226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,',
'226,226,226,226,226,226,226,226,226,226,226,226,,226,226,226,,226,226',
',226,226,226,452,,,,,,,,,,,,,,,,452,452,,226,,,226,,,226,226,,,226,',
'226,452,,452,226,452,452,,452,452,,,,226,,,,,226,226,226,226,,226,226',
'226,226,,,,,226,226,728,728,728,728,728,728,226,,226,728,728,,,,728',
',728,728,728,728,728,728,728,,,,,,728,728,728,728,728,728,728,,,728',
',,,,,728,728,728,728,728,728,728,728,728,728,728,728,,728,728,728,,728',
'728,,728,728,728,,,,,,,,,,,,,,,,,,,,728,,,728,,,728,728,,,728,,728,',
',,728,,,,,,,,,728,,,,,728,728,728,728,,728,728,728,728,,,,,728,728,33',
'33,33,33,33,33,728,,728,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33',
'33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33',
'33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,,,33',
',,,,,,,,33,,,,,33,33,33,33,,33,33,33,33,,,,,33,33,733,733,733,733,733',
'733,33,,33,733,733,,,,733,,733,733,733,733,733,733,733,,,,,,733,733',
'733,733,733,733,733,,,733,,,,,,733,733,733,733,733,733,733,733,733,733',
'733,733,,733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,',
'733,,,733,733,,,733,,733,,,,733,,,,,,,,,733,,,,,733,733,733,733,,733',
'733,733,733,,,,,733,733,743,743,743,743,743,743,733,,733,743,743,,,',
'743,,743,743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743,,',
'743,,,,,,743,743,743,743,743,743,743,743,743,743,743,743,,743,743,743',
',743,743,,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,',
'743,,,,743,,,,,,,,,743,,,,,743,743,743,743,,743,743,743,743,,,,,743',
'743,844,844,844,844,844,844,743,,743,844,844,,,,844,,844,844,844,844',
'844,844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,,844,844,844',
'844,844,844,844,844,844,844,844,844,,844,844,844,,844,844,,844,844,844',
',,,,,,,,,,,,,,,,,,,844,,,844,,,844,844,,,844,,844,,,,844,,,,,,,,,844',
',,,,844,844,844,844,,844,844,844,844,,,,,844,844,838,838,838,838,838',
'838,844,,844,838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838',
'838,838,838,838,838,,,838,,,,,,838,838,838,838,838,838,838,838,838,838',
'838,838,,838,838,838,,838,838,,838,838,838,,,,,,,,,,,,,,,,,,,,838,,',
'838,,,838,838,,,838,,838,,,,838,,,,,,,,,838,,,,,838,838,838,838,,838',
'838,838,838,,,,,838,838,203,203,203,203,203,203,838,,838,203,203,,,',
'203,,203,203,203,203,203,203,203,,,,,,203,203,203,203,203,203,203,,',
'203,,,,,,203,203,203,203,203,203,203,203,203,203,203,203,,203,203,203',
',203,203,,203,203,203,,,,,,,,,,,,,,,,,,,,203,,,203,,,203,203,,,203,',
'203,,,,203,,,,,,,,,203,,,,,203,203,203,203,,203,203,203,203,,,,,203',
'203,835,835,835,835,835,835,203,,203,835,835,,,,835,,835,835,835,835',
'835,835,835,,,,,,835,835,835,835,835,835,835,,,835,,,,,,835,835,835',
'835,835,835,835,835,835,835,835,835,,835,835,835,,835,835,,835,835,835',
',,,,,,,,,,,,,,,,,,,835,,,835,,,835,835,,,835,,835,,,,835,,,,,,,,,835',
',,,,835,835,835,835,,835,835,835,835,,,,,835,835,834,834,834,834,834',
'834,835,,835,834,834,,,,834,,834,834,834,834,834,834,834,,,,,,834,834',
'834,834,834,834,834,,,834,,,,,,834,834,834,834,834,834,834,834,834,834',
'834,834,,834,834,834,,834,834,,834,834,834,,,,,,,,,,,,,,,,,,,,834,,',
'834,,,834,834,,,834,,834,,,,834,,,,,,,,,834,,,,,834,834,834,834,,834',
'834,834,834,,,,,834,834,118,118,118,118,118,118,834,,834,118,118,,,',
'118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,',
'118,,,,,,118,118,118,118,118,118,118,118,118,118,118,118,,118,118,118',
',118,118,,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,',
'118,,,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,,118',
'118,321,321,321,321,321,321,118,,118,321,321,,,,321,,321,321,321,321',
'321,321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,321,321,321',
'321,321,321,321,321,321,321,321,321,,321,321,321,,321,321,,321,321,321',
',,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,321,,,,321,,,,,,,,,321',
',,,,321,321,321,321,,321,321,321,321,,,,,321,321,493,493,493,493,493',
'493,321,,321,493,493,,,,493,,493,493,493,493,493,493,493,,,,,,493,493',
'493,493,493,493,493,,,493,,,,,,493,493,493,493,493,493,493,493,493,493',
'493,493,,493,493,493,,493,493,,493,493,493,,,,,,,,,,,,,,,,,,,,493,,',
'493,,,493,493,,,493,,493,,,,493,,,,,,,,,493,,,,,493,493,493,493,,493',
'493,493,493,,,,,493,493,791,791,791,791,791,791,493,,493,791,791,,,',
'791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791,,',
'791,,,,,,791,791,791,791,791,791,791,791,791,791,791,791,,791,791,791',
',791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,',
'791,,,,791,,,,,,,,,791,,,,,791,791,791,791,,791,791,791,791,,,,,791',
'791,803,803,803,803,803,803,791,,791,803,803,,,,803,,803,803,803,803',
'803,803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,404,803,803,803',
'803,803,803,803,803,803,803,803,803,,803,803,803,,803,803,,803,803,803',
'404,404,404,404,404,404,404,404,404,404,404,,404,404,,,404,404,,803',
',,803,,,803,803,,,803,,803,404,,404,803,404,404,,404,404,404,404,404',
'803,404,,,,803,803,803,803,,803,803,803,803,,,,,803,803,,404,56,,,,803',
',803,56,56,56,,,56,56,56,,56,,,,,,,,,,56,56,56,,,,,,,,56,56,,56,56,56',
'56,56,,,,,,,,,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,56,56,56,56,56,56',
'56,,,56,56,56,,,56,,,56,,,56,56,,56,,56,,56,,56,56,,56,56,56,56,56,',
'56,,56,,,,,,,,,,,,,,56,,,56,56,56,56,,56,,56,286,286,286,286,286,,,',
'286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286',
'286,286,,,286,,,,,,286,286,,286,286,286,286,286,286,286,286,286,,286',
'286,286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286',
',,286,,286,,,,286,,,,,,,,,286,,,,,286,286,286,286,,286,286,286,286,',
',,,286,286,,59,59,59,,59,286,,286,59,59,,,,59,,59,59,59,59,59,59,59',
',,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59',
'59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59',
',,,59,,,59,,,,,,59,,,,,59,59,59,59,,59,59,59,59,,,,,59,59,,60,60,60',
',60,59,,59,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60',
'60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60',
'60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,,,,',
'60,60,60,60,,60,60,60,60,,,,,60,60,,832,832,832,,832,60,,60,832,832',
',,,832,,832,832,832,832,832,832,832,,,,,,832,832,832,832,832,832,832',
',,832,,,,,,,832,,,832,832,832,832,832,832,832,832,,832,832,832,,832',
'832,,832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,,,,,832',
',,,,,,,,832,,,,,832,832,832,832,,832,832,832,832,,,,,832,832,,63,63',
'63,,63,832,,832,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,63,63',
'63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,,63,,,,,63',
'63,63,63,,63,63,63,63,,,,,63,63,,64,64,64,,64,63,,63,64,64,,,,64,,64',
'64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64',
'64,64,64,64,64,,64,64,64,,64,64,,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64',
',,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64,64,,,,,64',
'64,,67,67,67,,67,64,,64,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67',
'67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67',
'67,,67,67,67,672,672,672,672,672,672,672,672,672,672,672,,672,672,,',
'672,672,,67,,,67,,,67,67,,,67,,,672,,672,67,672,672,,672,672,672,672',
'672,67,672,,,,67,67,67,67,,67,67,67,67,,,,,67,67,67,672,,,,67,67,,67',
'68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68',
'68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,,,68',
',,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,,,,,,,,,,68,68,68',
'68,,68,68,68,68,,,,,68,68,,69,69,69,,69,68,,68,69,69,,,,69,,69,69,69',
'69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69',
'69,69,69,,69,69,69,,69,69,,,,69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69',
',,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,70,70,70',
',70,69,,69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70',
'70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,,,70,,',
',,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70',
',70,70,70,70,,,,,70,70,,785,785,785,,785,70,,70,785,785,,,,785,,785',
'785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785,,,785,,,,,',
',785,,,785,785,785,785,785,785,785,785,,785,785,785,,785,785,,,,785',
',,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,,,,,,,,,,,,,,,,,,,785',
'785,785,785,,785,785,785,785,,,,,785,785,,773,773,773,,773,785,,785',
'773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773',
'773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773,,773,773,773',
',773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773,,,773,',
',,,,773,,,,,,,,,773,,,,,773,773,773,773,,773,773,773,773,,,,,773,773',
',44,44,44,,44,773,,773,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44',
'44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44',
'44,,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,',
',44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,43,43,43,,43,44,,44,43,43',
',,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43',
',,43,43,43,43,43,43,43,43,,43,43,43,,43,43,,43,43,43,,,,,,,,,,,,,,,',
',,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43',
'43,,,,,43,43,,771,771,771,,771,43,,43,771,771,,,,771,,771,771,771,771',
'771,771,771,,,,,,771,771,771,771,771,771,771,,,771,,,,,,,771,,,771,771',
'771,771,771,771,771,771,,771,771,771,,771,771,,771,771,771,,,,,,,,,',
',,,,,,,,,,771,,,771,,,771,771,,,771,,,,,,771,,,,,,,,,771,,,,,771,771',
'771,771,,771,771,771,771,,,,,771,771,,108,108,108,108,108,771,,771,108',
'108,,,,108,,108,108,108,108,108,108,108,,,,,,108,108,108,108,108,108',
'108,,,108,,,,,,108,108,108,108,108,108,108,108,108,108,108,108,,108',
'108,108,,108,108,,108,108,108,516,516,516,516,516,516,516,516,516,516',
'516,,516,516,,,516,516,,108,,,108,,,108,108,,,108,,108,516,,516,108',
'516,516,,516,516,516,516,516,108,516,,,,108,108,108,108,,108,108,108',
'108,,,,,108,108,,516,,,,108,108,,108,113,113,113,,113,,,,113,113,,,',
'113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113,113,,',
'113,,,,,,,113,,,113,113,113,113,113,113,113,113,,113,113,113,,113,113',
',113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,,,,,113,',
',,,,,,,113,,,,,113,113,113,113,,113,113,113,113,,,,,113,113,,114,114',
'114,,114,113,,113,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114',
'114,114,114,114,114,114,,,114,,,,,,,114,,,114,114,114,114,114,114,114',
'114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114',
',,114,114,,,114,,,,,,114,,,,,,,,,114,,,,,114,114,114,114,,114,114,114',
'114,,,,,114,114,,115,115,115,,115,114,,114,115,115,,,,115,,115,115,115',
'115,115,115,115,,,,,,115,115,115,115,115,115,115,,,115,,,,,,,115,,,115',
'115,115,115,115,115,115,115,,115,115,115,,115,115,,115,115,115,,,,,',
',,,,,,,,,,,,,,115,,,115,,,115,115,,,115,,,,,,115,,,,,,,,,115,,,,,115',
'115,115,115,,115,115,115,115,,,,,115,115,,116,116,116,,116,115,,115',
'116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116',
'116,116,,,116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116,116,116',
',116,116,,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,',
',,,,116,,,,,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,,116,116',
',117,117,117,117,117,116,,116,117,117,,,,117,,117,117,117,117,117,117',
'117,,,,,,117,117,117,117,117,117,117,,,117,,,,,,117,117,,117,117,117',
'117,117,117,117,117,117,,117,117,117,,117,117,,117,117,117,,,,,,,,,',
',,,,,,,,,,117,,,117,,,117,117,,,117,,117,,,,117,,,,,,,,,117,,,,,117',
'117,117,117,,117,117,117,117,,,,,117,117,,42,42,42,,42,117,,117,42,42',
',,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42',
',,42,42,42,42,42,42,42,42,,42,42,42,,42,42,,42,42,42,,,,,,,,,,,,,,,',
',,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42',
'42,,,,,42,42,,770,770,770,,770,42,,42,770,770,,,,770,,770,770,770,770',
'770,770,770,,,,,,770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770',
'770,770,770,770,770,770,,770,770,770,,770,770,,770,770,770,,,,,,,,,',
',,,,,,,,,,770,,,770,,,770,770,,,770,,,,,,770,,,,,,,,,770,,,,,770,770',
'770,770,,770,770,770,770,,,,,770,770,,769,769,769,,769,770,,770,769',
'769,,,,769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769',
'769,,,769,,,,,,,769,,,769,769,769,769,769,769,769,769,,769,769,769,',
'769,769,,769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,',
',,,769,,,,,,,,,769,,,,,769,769,769,769,,769,769,769,769,,,,,769,769',
',837,837,837,,837,769,,769,837,837,,,,837,,837,837,837,837,837,837,837',
',,,,,837,837,837,837,837,837,837,,,837,,,,,,,837,,,837,837,837,837,837',
'837,837,837,,837,837,837,,837,837,,837,837,837,,,,,,,,,,,,,,,,,,,,837',
',,837,,,837,837,,,837,,837,,,,837,,,,,,,,,837,,,,,837,837,837,837,,837',
'837,837,837,,,,,837,837,,204,204,204,,204,837,,837,204,204,,,,204,,204',
'204,204,204,204,204,204,,,,,,204,204,204,204,204,204,204,,,204,,,,,',
',204,,,204,204,204,204,204,204,204,204,,204,204,204,,204,204,,204,204',
'204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204,204,,,204,,204,,,,204,,,,,,,',
',204,,,,,204,204,204,204,,204,204,204,204,,,,,204,204,,205,205,205,',
'205,204,,204,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205',
'205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205',
',205,205,205,,205,205,,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205',
'205,,,205,,,,,,205,,,,,,,,,205,,,,,205,205,205,205,,205,205,205,205',
',,,,205,205,,206,206,206,,206,205,,205,206,206,,,,206,,206,206,206,206',
'206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206',
'206,206,206,206,206,206,206,206,206,206,,206,206,,206,206,206,,,,,,',
',,,,,,,,,,,,,206,,,206,,,206,206,,,206,,206,,206,,206,,,206,,,,,,206',
',,,,206,206,206,206,,206,206,206,206,,,,,206,206,,768,768,768,,768,206',
',206,768,768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768',
'768,768,768,,,768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768,768',
'768,,768,768,,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768',
',,,,,768,,,,,,,,,768,,,,,768,768,768,768,,768,768,768,768,,,,,768,768',
',754,754,754,,754,768,,768,754,754,,,,754,,754,754,754,754,754,754,754',
',,,,,754,754,754,754,754,754,754,,,754,,,,,,,754,,,754,754,754,754,754',
'754,754,754,,754,754,754,,754,754,,754,754,754,,,,,,,,,,,,,,,,,,,,754',
',,754,,,754,754,,,754,,,,,,754,,,,,,,,,754,,,,,754,754,754,754,,754',
'754,754,754,,,,,754,754,,209,209,209,,209,754,,754,209,209,,,,209,,209',
'209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,',
',209,,,209,209,209,209,209,209,209,209,,209,209,209,,209,209,,209,209',
'209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,,209',
',,,,209,209,209,209,,209,209,209,209,,,,,209,209,,210,210,210,,210,209',
',209,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',210,,,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210,210,210,,,,,210',
'210,,211,211,211,,211,210,,210,211,211,,,,211,,211,211,211,211,211,211',
'211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211',
'211,211,211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,',
',,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,,211,,,,,211,211,211,211',
',211,211,211,211,,,,,211,211,,212,212,212,,212,211,,211,212,212,,,,212',
',212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212,212,,,212',
',,,,,,212,,,212,212,212,212,212,212,212,212,,212,212,212,,212,212,,212',
'212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,,,,,212,,,,,,',
',,212,,,,,212,212,212,212,,212,212,212,212,,,,,212,212,,213,213,213',
',213,212,,212,213,213,,,,213,,213,213,213,213,213,213,213,,,,,,213,213',
'213,213,213,213,213,,,213,,,,,,,213,,,213,213,213,213,213,213,213,213',
',213,213,213,,213,213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213',
'213,,,213,,,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213',
',,,,213,213,,214,214,214,,214,213,,213,214,214,,,,214,,214,214,214,214',
'214,214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214',
'214,214,214,214,214,214,,214,214,214,,214,214,,214,214,214,,,,,,,,,',
',,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214',
'214,214,,214,214,214,214,,,,,214,214,214,752,752,752,,752,214,,214,752',
'752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752,752',
'752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752,752,752,',
'752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,,',
',,,752,,,,,,,,,752,,,,,752,752,752,752,,752,752,752,752,,,,,752,752',
',35,35,35,,35,752,,752,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35',
'35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35',
'35,,,,35,758,758,758,758,758,758,758,758,758,758,758,,758,758,,,758',
'758,,35,,,35,,,35,35,,,35,,,758,,758,,758,758,,758,758,758,758,758,',
'758,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,758,,35,,,35,,35,34,34,34',
',34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,',
',34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,,34,,,,,,',
',,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,',
'34,34,34,34,,,,,34,34,,729,729,729,,729,34,,34,729,729,,,,729,,729,729',
'729,729,729,729,729,,,,,,729,729,729,729,729,729,729,,,729,,,,,,,729',
',,729,729,729,729,729,729,729,729,,729,729,729,,729,729,,729,729,729',
',,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,,729,,,,,,729,,,,,,,,,729,,',
',,729,729,729,729,,729,729,729,729,,,,,729,729,,31,31,31,,31,729,,729',
'31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,',
',,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31,,,,,,,',
',,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31',
'31,31,,31,31,31,31,,,,,31,31,,723,723,723,,723,31,,31,723,723,,,,723',
',723,723,723,723,723,723,723,,,,,,723,723,723,723,723,723,723,,,723',
',,,,,,723,,,723,723,723,723,723,723,723,723,,723,723,723,,723,723,,723',
'723,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723,723,,,723,,,,,,723,,,,,,',
',,723,,,,,723,723,723,723,,723,723,723,723,,,,,723,723,,442,442,442',
',442,723,,723,442,442,,,,442,,442,442,442,442,442,442,442,,,,,,442,442',
'442,442,442,442,442,,,442,,,,,,,442,,,442,442,442,442,442,442,442,442',
',442,442,442,,442,442,,442,442,442,,,,,,,,,,,,,,,,,,,,442,,,442,,,442',
'442,,,442,,,,,,442,,,,,,,,,442,,,,,442,442,442,442,,442,442,442,442',
',,,,442,442,,225,225,225,,225,442,,442,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,',
',,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,,225,,,,,225,225',
'225,225,,225,225,225,225,,,,,225,225,,30,30,30,,30,225,,225,30,30,,',
',30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,',
'30,30,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,',
',,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30',
'30,30,30,,,,,30,30,,696,696,696,,696,30,,30,696,696,,,,696,,696,696',
'696,696,696,696,696,,,,,,696,696,696,696,696,696,696,,,696,,,,,,,696',
',,696,696,696,696,696,696,696,696,,696,696,696,,696,696,,696,696,696',
',,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,,,,,696,,,,,,,,,696,,',
',,696,696,696,696,,696,696,696,696,,,,,696,696,,228,228,228,,228,696',
',696,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228',
'228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228,,228,228',
'228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228',
',,,,,228,,,,,,,,,228,,,,,228,228,228,228,,228,228,228,228,,,,,228,228',
',229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,229,,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,,229,,,,,229,229,229,229,,229',
'229,229,229,,,,,229,229,,230,230,230,,230,229,,229,230,230,,,,230,,230',
'230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,',
',230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,,230,230',
'230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,,230',
',,,,230,230,230,230,,230,230,230,230,,,,,230,230,,231,231,231,,231,230',
',230,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231',
'231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231',
'231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231',
',,,,,231,,,,,,,,,231,,,,,231,231,231,231,,231,231,231,231,,,,,231,231',
',232,232,232,,232,231,,231,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232',
'232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,232,,,232,,,,,,232,,,,,,,,,232,,,,,232,232,232,232,,232',
'232,232,232,,,,,232,232,,233,233,233,,233,232,,232,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
',233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233',
'233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,,233',
',,,,233,233,233,233,,233,233,233,233,,,,,233,233,,234,234,234,,234,233',
',233,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234',
'234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234',
'234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234',
',,,,,234,,,,,,,,,234,,,,,234,234,234,234,,234,234,234,234,,,,,234,234',
',235,235,235,,235,234,,234,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235',
'235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235',
',,235,,,235,235,,,235,,,,,,235,,,,,,,,,235,,,,,235,235,235,235,,235',
'235,235,235,,,,,235,235,,236,236,236,,236,235,,235,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236',
',,,,236,236,236,236,,236,236,236,236,,,,,236,236,,237,237,237,,237,236',
',236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237',
'237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237',
'237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237',
',,,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237',
',238,238,238,,238,237,,237,238,238,,,,238,,238,238,238,238,238,238,238',
',,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238',
'238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238',
',,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238',
'238,238,238,,,,,238,238,,239,239,239,,239,238,,238,239,239,,,,239,,239',
'239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,',
',239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239',
'239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,,239',
',,,,239,239,239,239,,239,239,239,239,,,,,239,239,,240,240,240,,240,239',
',239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240',
'240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240',
'240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240',
',,,,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240',
',241,241,241,,241,240,,240,241,241,,,,241,,241,241,241,241,241,241,241',
',,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241',
'241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241',
'241,241,241,,,,,241,241,,242,242,242,,242,241,,241,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242',
',,,,242,242,242,242,,242,242,242,242,,,,,242,242,,243,243,243,,243,242',
',242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243',
'243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243',
'243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243',
',,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243',
',244,244,244,,244,243,,243,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244',
'244,244,244,,,,,244,244,,245,245,245,,245,244,,244,245,245,,,,245,,245',
'245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,',
',245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245',
'245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245',
',,,,245,245,245,245,,245,245,245,245,,,,,245,245,,246,246,246,,246,245',
',245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246',
'246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246',
'246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246',
',,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246',
',247,247,247,,247,246,,246,247,247,,,,247,,247,247,247,247,247,247,247',
',,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247',
'247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247',
',,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247',
'247,247,247,,,,,247,247,,248,248,248,,248,247,,247,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248',
',,,,248,248,248,248,,248,248,248,248,,,,,248,248,,249,249,249,,249,248',
',248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249',
'249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249',
'249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249',
',,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',250,250,250,,250,249,,249,250,250,,,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250',
'250,250,250,,,,,250,250,,251,251,251,,251,250,,250,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,,251',
',,,,251,251,251,251,,251,251,251,251,,,,,251,251,,252,252,252,,252,251',
',251,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252',
'252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252',
'252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252',
',,,,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252',
',253,253,253,,253,252,,252,253,253,,,,253,,253,253,253,253,253,253,253',
',,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253',
'253,253,253,,,,,253,253,,29,29,29,,29,253,,253,29,29,,,,29,,29,29,29',
'29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29',
'29,29,29,29,29,29,29,,29,29,,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29',
'29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29',
'29,,441,441,441,,441,29,,29,441,441,,,,441,,441,441,441,441,441,441',
'441,,,,,,441,441,441,441,441,441,441,,,441,,,,,,,441,,,441,441,441,441',
'441,441,441,441,,441,441,441,,441,441,,441,441,441,,,,,,,,,,,,,,,,,',
',,441,,,441,,,441,441,,,441,,,,,,441,,,,,,,,,441,,,,,441,441,441,441',
',441,441,441,441,,,,,441,441,,260,260,260,,260,441,,441,260,260,,,,260',
',260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260',
',,,,,,260,,,260,260,260,260,260,260,260,260,260,260,260,260,,260,260',
',260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,260,,260',
',260,,,260,,,,,,260,,,,,260,260,260,260,,260,260,260,260,,,,,260,260',
',261,261,261,,261,260,,260,261,261,,,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,261,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,',
',261,,,261,,,261,261,,,261,,261,,261,,261,,,261,,,,,,261,,,,,261,261',
'261,261,,261,261,261,261,,,,,261,261,,269,269,269,,269,261,,261,269',
'269,,,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269',
'269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,269,269,269,269',
',269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,',
'269,,269,,269,,,269,,,,,,269,,,,,269,269,269,269,,269,269,269,269,,',
',,269,269,269,677,677,677,,677,269,,269,677,677,,,,677,,677,677,677',
'677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677',
'677,677,677,677,677,677,677,,677,677,677,,677,677,,677,677,677,,,,,',
',,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,677,,,,677,,,,,,,,,677,,,,',
'677,677,677,677,,677,677,677,677,,,,,677,677,,671,671,671,,671,677,',
'677,671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671',
'671,671,671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671',
'671,,671,671,,,,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,,',
',,,,,,,,,,,,,,,,671,671,671,671,,671,671,671,671,,,,,671,671,,660,660',
'660,,660,671,,671,660,660,,,,660,,660,660,660,660,660,660,660,,,,,,660',
'660,660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660,660,660',
'660,,660,660,660,,660,660,,,,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660',
'660,,,660,,,,,,,,,,,,,,,,,,,,660,660,660,660,,660,660,660,660,,,,,660',
'660,,276,276,276,,276,660,,660,276,276,,,,276,,276,276,276,276,276,276',
'276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276,276,276,276',
'276,276,276,276,,276,276,276,,276,276,,276,276,276,,,,,,,,,,,,,,,,,',
',,276,,,276,,,276,276,,,276,,,,,,276,,,,,,,,,276,,,,,276,276,276,276',
',276,276,276,276,,,,,276,276,,654,654,654,,654,276,,276,654,654,,,,654',
',654,654,654,654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654',
',,,,,,654,,,654,654,654,654,654,654,654,654,,654,654,654,,654,654,,654',
'654,654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,,,,,654,,,,,,',
',,654,,,,,654,654,654,654,,654,654,654,654,,,,,654,654,,278,278,278',
',278,654,,654,278,278,,,,278,,278,278,278,278,278,278,278,,,,,,278,278',
'278,278,278,278,278,,,278,,,,,,,278,,,278,278,278,278,278,278,278,278',
',278,278,278,,278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278',
'278,,,278,,,,,,278,,,,,,,,,278,,,,,278,278,278,278,,278,278,278,278',
',,,,278,278,,280,280,280,,280,278,,278,280,280,,,,280,,280,280,280,280',
'280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,,,280,,,280,280',
'280,280,280,280,280,280,,280,280,280,,280,280,,280,280,280,,,,,,,,,',
',,,,,,,,,,280,,,280,,,280,280,,,280,,,,,,280,,,,,,,,,280,,,,,280,280',
'280,280,,280,280,280,280,,,,,280,280,,281,281,281,,281,280,,280,281',
'281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281,281',
'281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281,281,',
'281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,',
',,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281,,,,,281,281',
',440,440,440,,440,281,,281,440,440,,,,440,,440,440,440,440,440,440,440',
',,,,,440,440,440,440,440,440,440,,,440,,,,,,,440,,,440,440,440,440,440',
'440,440,440,,440,440,440,,440,440,,440,440,440,,,,,,,,,,,,,,,,,,,,440',
',,440,,,440,440,,,440,,,,,,440,,,,,,,,,440,,,,,440,440,440,440,,440',
'440,440,440,,,,,440,440,,58,58,58,,58,440,,440,58,58,,,,58,,58,58,58',
'58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58,58,58',
'58,58,58,,58,58,58,,58,58,,58,58,58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58',
'58,,,58,,,,,,58,,,,,,,,,58,,,,,58,58,58,58,,58,58,58,58,,,,,58,58,,854',
'854,854,,854,58,,58,854,854,,,,854,,854,854,854,854,854,854,854,,,,',
',854,854,854,854,854,854,854,,,854,,,,,,,854,,,854,854,854,854,854,854',
'854,854,854,854,854,854,,854,854,,854,854,854,,,,,,,,,,,,,,,,,,,,854',
',,854,,,854,854,,,854,,,,854,,854,,,854,,,,,,854,,,,,854,854,854,854',
',854,854,854,854,,,,,854,854,,855,855,855,,855,854,,854,855,855,,,,855',
',855,855,855,855,855,855,855,,,,,,855,855,855,855,855,855,855,,,855',
',,,,,,855,,,855,855,855,855,855,855,855,855,,855,855,855,,855,855,,855',
'855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855,855,,,855,,,,,,855,,,,,,',
',,855,,,,,855,855,855,855,,855,855,855,855,,,,,855,855,,869,869,869',
',869,855,,855,869,869,,,,869,,869,869,869,869,869,869,869,,,,,,869,869',
'869,869,869,869,869,,,869,,,,,,,869,,,869,869,869,869,869,869,869,869',
',869,869,869,,869,869,,,,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869',
',,869,,,,,,,,,,,,,,,,,,,,869,869,869,869,,869,869,869,869,,,,,869,869',
',20,20,20,,20,869,,869,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20',
'20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20',
'20,,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,',
',20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,373,373,373,,373,20,,20',
'373,373,,,,373,,373,373,373,373,373,373,373,,,,,,373,373,373,373,373',
'373,373,,,373,,,,,,,373,,,373,373,373,373,373,373,373,373,,373,373,373',
',373,373,,373,373,373,,,,,,,,,,,,,,,,,,,,373,,,373,,,373,373,,,373,',
',,,,373,,,,,,,,,373,,,,,373,373,373,373,,373,373,373,373,,,,,373,373',
',630,630,630,,630,373,,373,630,630,,,,630,,630,630,630,630,630,630,630',
',,,,,630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630',
'630,630,630,,630,630,630,,630,630,,630,630,630,,,,,,,,,,,,,,,,,,,,630',
',,630,,,630,630,,,630,,,,,,630,,,,,,,,,630,,,,,630,630,630,630,,630',
'630,630,630,,,,,630,630,,629,629,629,,629,630,,630,629,629,,,,629,,629',
'629,629,629,629,629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,',
',629,,,629,629,629,629,629,629,629,629,,629,629,629,,629,629,,629,629',
'629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,,629',
',,,,629,629,629,629,,629,629,629,629,,,,,629,629,,294,294,294,,294,629',
',629,294,294,,,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294',
'294,294,294,,,294,,,,,,,294,,,294,294,294,294,294,294,294,294,,294,294',
'294,,294,294,,,,294,760,760,760,760,760,760,760,760,760,760,760,,760',
'760,,,760,760,,294,,,294,,,294,294,,,294,,,760,,760,,760,760,,760,760',
'760,760,760,,760,,,,294,294,294,294,,294,294,294,294,,,,,294,294,,760',
',294,,,294,,294,881,881,881,,881,,,,881,881,,,,881,,881,881,881,881',
'881,881,881,,,,,,881,881,881,881,881,881,881,,,881,,,,,,,881,,,881,881',
'881,881,881,881,881,881,,881,881,881,,881,881,,,,881,,,,,,,,,,,,,,,',
',,,,881,,,881,,,881,881,,,881,,,,,,,,,,,,,,,,,,,,881,881,881,881,,881',
'881,881,881,,,,,881,881,,626,626,626,,626,881,,881,626,626,,,,626,,626',
'626,626,626,626,626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,',
',626,,,626,626,626,626,626,626,626,626,,626,626,626,,626,626,,626,626',
'626,,,,,,,,,,,,,,,,,,,,626,,,626,,,626,626,,,626,,,,,,626,,,,,,,,,626',
',,,,626,626,626,626,,626,626,626,626,,,,,626,626,,625,625,625,,625,626',
',626,625,625,,,,625,,625,625,625,625,625,625,625,,,,,,625,625,625,625',
'625,625,625,,,625,,,,,,,625,,,625,625,625,625,625,625,625,625,,625,625',
'625,,625,625,,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,625,,,625',
',,,,,625,,,,,,,,,625,,,,,625,625,625,625,,625,625,625,625,,,,,625,625',
',621,621,621,,621,625,,625,621,621,,,,621,,621,621,621,621,621,621,621',
',,,,,621,621,621,621,621,621,621,,,621,,,,,,,621,,,621,621,621,621,621',
'621,621,621,,621,621,621,,621,621,,621,621,621,,,,,,,,,,,,,,,,,,,,621',
',,621,,,621,621,,,621,,,,,,621,,,,,,,,,621,,,,,621,621,621,621,,621',
'621,621,621,,,,,621,621,,491,491,491,491,491,621,,621,491,491,,,,491',
',491,491,491,491,491,491,491,,,,,,491,491,491,491,491,491,491,,,491',
',,,,,491,491,491,491,491,491,491,491,491,491,491,491,,491,491,491,,491',
'491,,491,491,491,763,763,763,763,763,763,763,763,763,763,763,,763,763',
',,763,763,,491,,,491,,,491,491,,,491,,491,763,,763,491,763,763,,763',
'763,763,763,763,491,763,,,,491,491,491,491,,491,491,491,491,,,,,491',
'491,,763,,,,491,491,,491,619,619,619,,619,,,,619,619,,,,619,,619,619',
'619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,,,619',
',,619,619,619,619,619,619,619,619,619,619,619,619,,619,619,,619,619',
'619,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619,,,,619,,619,,,619,',
',,,,619,,,,,619,619,619,619,,619,619,619,619,,,,,619,619,,618,618,618',
',618,619,,619,618,618,,,,618,,618,618,618,618,618,618,618,,,,,,618,618',
'618,618,618,618,618,,,618,,,,,,,618,,,618,618,618,618,618,618,618,618',
'618,618,618,618,,618,618,,618,618,618,,,,,,,,,,,,,,,,,,,,618,,,618,',
',618,618,,,618,,618,,618,,618,,,618,,,,,,618,,,,,618,618,618,618,,618',
'618,618,618,,,,,618,618,,615,615,615,,615,618,,618,615,615,,,,615,,615',
'615,615,615,615,615,615,,,,,,615,615,615,615,615,615,615,,,615,,,,,',
',615,,,615,615,615,615,615,615,615,615,,615,615,615,,615,615,,615,615',
'615,,,,,,,,,,,,,,,,,,,,615,,,615,,,615,615,,,615,,,,,,615,,,,,,,,,615',
',,,,615,615,615,615,,615,615,615,615,,,,,615,615,,614,614,614,,614,615',
',615,614,614,,,,614,,614,614,614,614,614,614,614,,,,,,614,614,614,614',
'614,614,614,,,614,,,,,,,614,,,614,614,614,614,614,614,614,614,,614,614',
'614,,614,614,,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,,614',
',614,,,,614,,,,,,,,,614,,,,,614,614,614,614,,614,614,614,614,,,,,614',
'614,,482,482,482,,482,614,,614,482,482,,,,482,,482,482,482,482,482,482',
'482,,,,,,482,482,482,482,482,482,482,,,482,,,,,,,482,,,482,482,482,482',
'482,482,482,482,482,482,482,482,,482,482,,482,482,482,,,,,,,,,,,,,,',
',,,,,482,,,482,,,482,482,,,482,,482,,482,,482,,,482,,,,,,482,,,,,482',
'482,482,482,,482,482,482,482,,,,,482,482,,438,438,438,,438,482,,482',
'438,438,,,,438,,438,438,438,438,438,438,438,,,,,,438,438,438,438,438',
'438,438,,,438,,,,,,,438,,,438,438,438,438,438,438,438,438,438,438,438',
'438,,438,438,,438,438,438,,,,,,,,,,,,,,,,,,,,438,,,438,,,438,438,,,438',
',438,,438,,438,,,438,,,,,,438,,,,,438,438,438,438,,438,438,438,438,',
',,,438,438,,580,580,580,,580,438,,438,580,580,,,,580,,580,580,580,580',
'580,580,580,,,,,,580,580,580,580,580,580,580,,,580,,,,,,,580,,,580,580',
'580,580,580,580,580,580,580,580,580,580,,580,580,,580,580,580,,,,,,',
',,,,,,,,,,,,,580,,,580,,,580,580,,,580,,580,,580,,580,,,580,,,,,,580',
',,,,580,580,580,580,,580,580,580,580,,,,,580,580,,311,311,311,,311,580',
',580,311,311,,,,311,,311,311,311,311,311,311,311,,,,,,311,311,311,311',
'311,311,311,,,311,,,,,,,311,,,311,311,311,311,311,311,311,311,,311,311',
'311,,311,311,,,,311,,,,,,,,,,,,,,,,,,,,311,,,311,,,311,311,,,311,,,',
',,,,,,,,,,,,,,,,311,311,311,311,,311,311,311,311,,,,,311,311,,570,570',
'570,,570,311,,311,570,570,,,,570,,570,570,570,570,570,570,570,,,,,,570',
'570,570,570,570,570,570,,,570,,,,,,,570,,,570,570,570,570,570,570,570',
'570,570,570,570,570,,570,570,,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570',
',,570,570,,,570,,570,,570,,570,,,570,,,,,,570,,,,,570,570,570,570,,570',
'570,570,570,,,,,570,570,,569,569,569,,569,570,,570,569,569,,,,569,,569',
'569,569,569,569,569,569,,,,,,569,569,569,569,569,569,569,,,569,,,,,',
',569,,,569,569,569,569,569,569,569,569,,569,569,569,,569,569,,569,569',
'569,,,,,,,,,,,,,,,,,,,,569,,,569,,,569,569,,,569,,569,,,,569,,,,,,,',
',569,,,,,569,569,569,569,,569,569,569,569,,,,,569,569,,974,974,974,',
'974,569,,569,974,974,,,,974,,974,974,974,974,974,974,974,,,,,,974,974',
'974,974,974,974,974,,,974,,,,,,,974,,,974,974,974,974,974,974,974,974',
'974,974,974,974,,974,974,,974,974,974,,,,,,,,,,,,,,,,,,,,974,,,974,',
',974,974,,,974,,974,,974,,974,,,974,,,,,,974,,,,,974,974,974,974,,974',
'974,974,974,,,,,974,974,,5,5,5,5,5,974,,974,5,5,,,,5,,5,5,5,5,5,5,5',
',,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,,5,5',
'5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,',
'5,5,5,5,,,,,5,5,,549,549,549,,549,5,,5,549,549,,,,549,,549,549,549,549',
'549,549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549',
'549,549,549,549,549,549,,549,549,549,,549,549,,549,549,549,,,,,,,,,',
',,,,,,,,,,549,,,549,,,549,549,,,549,,,,,,549,,,,,,,,,549,,,,,549,549',
'549,549,,549,549,549,549,,,,,549,549,,320,320,320,,320,549,,549,320',
'320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320,320,320,320',
'320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320,,320,320,320,',
'320,320,,320,320,320,,,,,,,,,,,,,,,,,,,,320,,,320,320,,320,320,,,320',
',,,,,320,,,,,,,,,320,,,,,320,320,320,320,,320,320,320,320,,,,,320,320',
',357,357,357,,357,320,,320,357,357,,,,357,,357,357,357,357,357,357,357',
',,,,,357,357,357,357,357,357,357,,,357,,,,,,,357,,,357,357,357,357,357',
'357,357,357,,357,357,357,,357,357,,357,357,357,,,,,,,,,,,,,,,,,,,,357',
',,357,,,357,357,,,357,,,,,,357,,,,,,,,,357,,,,,357,357,357,357,,357',
'357,357,357,,,,,357,357,,526,526,526,,526,357,,357,526,526,,,,526,,526',
'526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,',
',526,,,526,526,526,526,526,526,526,526,526,526,526,526,,526,526,,526',
'526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,526',
',,,,,526,,,,,526,526,526,526,,526,526,526,526,,,,,526,526,,523,523,523',
',523,526,,526,523,523,,,,523,,523,523,523,523,523,523,523,,,,,,523,523',
'523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523',
'523,523,523,523,,523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,',
',523,523,,,523,,523,,,,523,,,523,,,,,,523,,,,,523,523,523,523,,523,523',
'523,523,,,,,523,523,,517,517,517,,517,523,,523,517,517,,,,517,,517,517',
'517,517,517,517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517',
',,517,517,517,517,517,517,517,517,,517,517,517,,517,517,,517,517,517',
',,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517,,,,,,517,,,,,,,,,517,,',
',,517,517,517,517,,517,517,517,517,,,,,517,517,,513,513,513,,513,517',
',517,513,513,,,,513,,513,513,513,513,513,513,513,,,,,,513,513,513,513',
'513,513,513,,,513,,,,,,,513,,,513,513,513,513,513,513,513,513,,513,513',
'513,,513,513,,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513',
',,,,,513,,,,,,,,,513,,,,,513,513,513,513,,513,513,513,513,,,,,513,513',
',512,512,512,,512,513,,513,512,512,,,,512,,512,512,512,512,512,512,512',
',,,,,512,512,512,512,512,512,512,,,512,,,,,,,512,,,512,512,512,512,512',
'512,512,512,,512,512,512,,512,512,,512,512,512,,,,,,,,,,,,,,,,,,,,512',
',,512,,,512,512,,,512,,,,,,512,,,,,,,,,512,,,,,512,512,512,512,,512',
'512,512,512,,,,,512,512,,511,511,511,,511,512,,512,511,511,,,,511,,511',
'511,511,511,511,511,511,,,,,,511,511,511,511,511,511,511,,,511,,,,,',
',511,,,511,511,511,511,511,511,511,511,,511,511,511,,511,511,,511,511',
'511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,,511,,,,,,511,,,,,,,,,511',
',,,,511,511,511,511,,511,511,511,511,,,,,511,511,,508,508,508,,508,511',
',511,508,508,,,,508,,508,508,508,508,508,508,508,,,,,,508,508,508,508',
'508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508,508,508,,508,508',
'508,,508,508,,,,508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,,',
',,,,,,,,,,,,,,,,508,508,508,508,,508,508,508,508,,,,,508,508,,501,501',
'501,,501,508,,508,501,501,,,,501,,501,501,501,501,501,501,501,,,,,,501',
'501,501,501,501,501,501,,,501,,,,,,,501,,,501,501,501,501,501,501,501',
'501,501,501,501,501,,501,501,,501,501,501,,,,,,,,,,,,,,,,,,,,501,,,501',
',,501,501,,,501,,501,,501,,501,,,501,,,,,,501,,,,,501,501,501,501,,501',
'501,501,501,,,,,501,501,,499,499,499,,499,501,,501,499,499,,,,499,,499',
'499,499,499,499,499,499,,,,,,499,499,499,499,499,499,499,,,499,,,,,',
',499,,,499,499,499,499,499,499,499,499,,499,499,499,,499,499,,,,499',
',,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,,,,,,,,,,,,,,,,,,,499',
'499,499,499,,499,499,499,499,,,,,499,499,,401,401,401,,401,499,,499',
'401,401,,,,401,,401,401,401,401,401,401,401,,,,,,401,401,401,401,401',
'401,401,,,401,,,,,,,401,,,401,401,401,401,401,401,401,401,,401,401,401',
',401,401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,,401,',
',,,,401,,,,,,,,,401,,,,,401,401,401,401,,401,401,401,401,,,,,401,401',
',484,484,484,,484,401,,401,484,484,,,,484,,484,484,484,484,484,484,484',
',,,,,484,484,484,484,484,484,484,,,484,,,,,,,484,,,484,484,484,484,484',
'484,484,484,484,484,484,484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,,',
',484,,,484,,,484,484,,,484,,,,484,,484,,,484,,,,,,484,,,,,484,484,484',
'484,,484,484,484,484,,,,,484,484,,486,486,486,,486,484,,484,486,486',
',,,486,,486,486,486,486,486,486,486,,,,,,486,486,486,486,486,486,486',
',,486,,,,,,,486,,,486,486,486,486,486,486,486,486,,486,486,486,,486',
'486,,486,486,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486,,,,,,486',
',,,,,,,,486,,,,,486,486,486,486,,486,486,486,486,,,,,486,486,,337,337',
'337,,337,486,,486,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337',
'337,337,337,337,337,337,,,337,,,,,,,337,,,337,337,337,337,337,337,337',
'337,,337,337,337,,337,337,,337,337,337,,,,,,,,,,,,,,,,,,,,337,,,337',
',,337,337,,,337,,,,,,337,,,,,,,,,337,,,,,337,337,337,337,,337,337,337',
'337,,,,,337,337,,338,338,338,,338,337,,337,338,338,,,,338,,338,338,338',
'338,338,338,338,,,,,,338,338,338,338,338,338,338,,,338,,,,,,,338,,,338',
'338,338,338,338,338,338,338,,338,338,338,,338,338,,338,338,338,,,,,',
',,,,,,,,,,,,,,338,,,338,,,338,338,,,338,,,,,,338,,,,,,,,,338,,,,,338',
'338,338,338,,338,338,338,338,,,,,338,338,,620,620,620,,620,338,,338',
'620,620,,,,620,,620,620,620,620,620,620,620,,,,,,620,620,620,620,620',
'620,620,,,620,,,,,,,620,,,620,620,620,620,620,620,620,620,,620,620,620',
',620,620,,620,620,620,856,856,856,856,856,856,856,856,856,856,856,,856',
'856,,,856,856,,620,,,620,,,620,620,,,620,,,856,,856,620,856,856,,856',
'856,856,856,856,620,856,,,,620,620,620,620,,620,620,620,620,,,,,620',
'620,,856,28,,,,620,,620,28,28,28,,,28,28,28,,28,,,,,,,,,,28,28,,,,,',
',,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28',
'28,,28,28,28,28,28,,28,411,28,,,,,,411,411,411,,,411,411,411,28,411',
',28,28,,28,,28,,411,411,411,,,,,,,,,411,411,,411,411,411,411,411,,,',
',,,,,,,,,,,,,,,,,,,,411,411,411,411,411,411,411,411,411,411,411,411',
'411,411,,,411,411,411,,,411,,411,411,,,411,411,,411,,411,,411,,411,411',
',411,411,411,411,411,,411,411,411,,,,,,,,,,,,,,411,,470,411,411,,411',
',411,470,470,470,,,470,470,470,641,470,641,641,641,641,641,,,,470,470',
',,,,641,,,,,470,470,,470,470,470,470,470,,,,,,,,,,641,,,,,,,,,641,641',
'641,641,,,,641,,,,,,,,,470,,27,,,,,470,,27,27,27,470,470,27,27,27,641',
'27,,,,,,,,,27,27,27,,,,,,470,470,,27,27,,27,27,27,27,27,,,,,470,,,470',
',,,,470,,,,,,,,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27',
'27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27',
',,,,,,,,,,,,,27,,,27,27,,27,,27,392,392,392,392,392,392,392,392,392',
'392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,,,,392,392',
'392,392,392,392,392,392,392,392,,,,,,392,392,392,392,392,392,392,392',
'392,,,392,,,,,,,,,392,392,,392,392,392,392,392,392,392,,,392,392,,,',
'392,392,392,392,,,,,,,,,,,,,,392,392,,392,392,392,392,392,392,392,392',
'392,392,392,392,,,392,392,,,,,,,,,,,,,,392,611,611,611,611,611,611,611',
'611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611',
',,,611,611,611,611,611,611,611,611,611,611,,,,,,611,611,611,611,611',
'611,611,611,611,,,611,,,,,,,,,611,611,,611,611,611,611,611,611,611,',
',611,611,,,,611,611,611,611,,,,,,,,,,,,,,611,611,,611,611,611,611,611',
'611,611,611,611,611,611,611,,,611,611,,,,,,,,,,,,,,611,8,8,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8',
'8,8,8,8,8,8,8,,8,,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,',
',,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9',
'9,9,9,9,9,9,9,,,9,,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,',
',,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,736,736,736',
'736,736,736,736,736,736,736,736,736,736,736,736,736,736,736,736,736',
'736,736,736,736,,,,736,736,736,736,736,736,736,736,736,736,,,,,,736',
'736,736,736,736,736,736,736,736,,,736,,,,,,,,,736,736,,736,736,736,736',
'736,736,736,,,736,736,,,,736,736,736,736,,,,,,,,,,,,,,736,736,,736,736',
'736,736,736,736,736,736,736,736,736,736,,,736,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71,71,71',
'71,71,71,71,,,,,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,,,71,71',
',71,71,71,71,71,71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71',
'71,71,71,71,71,71,71,71,71,71,71,,,71,753,753,753,753,753,753,753,753',
'753,753,753,,753,753,,,753,753,,531,,531,531,531,531,531,,,,,,,753,',
'753,531,753,753,,753,753,753,753,753,,753,765,765,765,765,765,765,765',
'765,765,765,765,531,765,765,,,765,765,,753,531,531,531,531,,,,531,,',
',,765,,765,,765,765,,765,765,765,765,765,,765,468,468,468,468,468,468',
'468,468,468,468,468,,468,468,,,468,468,,765,,,889,,889,889,889,889,889',
',,,468,,468,,468,468,889,468,468,468,468,468,,468,853,853,853,853,853',
'853,853,853,853,853,853,,853,853,889,,853,853,468,468,,,,,,889,889,',
',,889,,853,,853,,853,853,,853,853,853,853,853,,853,21,21,21,21,21,21',
'21,21,21,21,21,,21,21,,,21,21,,853,,,962,,962,962,962,962,962,,,,21',
',21,,21,21,962,21,21,21,21,21,,21,767,767,767,767,767,767,767,767,767',
'767,767,,767,767,962,,767,767,,21,,,,,,962,962,,,,962,,767,,767,,767',
'767,,767,767,767,767,767,,767,271,271,271,271,271,271,271,271,271,271',
'271,,271,271,,,271,271,,767,,,966,,966,966,966,966,966,,,,271,,271,',
'271,271,966,271,271,271,271,271,,271,423,423,423,423,423,423,423,423',
'423,423,423,,423,423,966,,423,423,,271,,,,,,966,966,,,,966,,423,,423',
',423,423,,423,423,423,423,423,,423,,,,,208,208,,,208,,,,,,,,,208,208',
'423,208,208,208,208,208,208,208,,,208,208,,,,208,208,208,208,,,,,,208',
',,,,,,,208,208,,208,208,208,208,208,208,208,208,208,208,208,208,976',
'976,208,,976,,,,,,,,,976,976,,976,976,976,976,976,976,976,,,976,976',
',,,976,976,976,976,,,,,,976,,,,,,,,976,976,,976,976,976,976,976,976',
'976,976,976,976,976,976,256,256,976,,256,,,,,,,,,256,256,,256,256,256',
'256,256,256,256,,,256,256,,,,256,256,256,256,,,,,,,,,,,,,,256,256,,256',
'256,256,256,256,256,256,256,256,256,256,256,514,514,256,,514,,,,,,,',
',514,514,,514,514,514,514,514,514,514,,,514,514,,,,514,514,514,514,',
',,,,514,,,,,,,,514,514,,514,514,514,514,514,514,514,514,514,514,514',
'514,515,515,514,,515,,,,,,,,,515,515,,515,515,515,515,515,515,515,,',
'515,515,,,,515,515,515,515,,,,,,515,,,,,,,,515,515,,515,515,515,515',
'515,515,515,515,515,515,515,515,579,579,515,,579,,,,,,,,,579,579,,579',
'579,579,579,579,579,579,,,579,579,,,,579,579,579,579,,,,,,579,,,,,,',
',579,579,,579,579,579,579,579,579,579,579,579,579,579,579,578,578,579',
',578,,,,,,,,,578,578,,578,578,578,578,578,578,578,,,578,578,,,,578,578',
'578,578,,,,,,578,,,,,,,,578,578,,578,578,578,578,578,578,578,578,578',
'578,578,578,437,437,578,,437,,,,,,,,,437,437,,437,437,437,437,437,437',
'437,,,437,437,,,,437,437,437,437,,,,,,437,,,,,,,,437,437,,437,437,437',
'437,437,437,437,437,437,437,437,437,436,436,437,,436,,,,,,,,,436,436',
',436,436,436,436,436,436,436,,,436,436,,,,436,436,436,436,,,,,,436,',
',,,,,,436,436,,436,436,436,436,436,436,436,436,436,436,436,436,572,572',
'436,,572,,,,,,,,,572,572,,572,572,572,572,572,572,572,,,572,572,,,,572',
'572,572,572,,,,,,572,,,,,,,,572,572,,572,572,572,572,572,572,572,572',
'572,572,572,572,931,931,572,,931,,,,,,,,,931,931,,931,931,931,931,931',
'931,931,,,931,931,,,,931,931,931,931,,,,,,931,,,,,,,,931,931,,931,931',
'931,931,931,931,931,931,931,931,931,931,571,571,931,,571,,,,,,,,,571',
'571,,571,571,571,571,571,571,571,,,571,571,,,,571,571,571,571,,,,,,571',
',,,,,,,571,571,,571,571,571,571,571,571,571,571,571,571,571,571,207',
'207,571,,207,,,,,,,,,207,207,,207,207,207,207,207,207,207,,,207,207',
',,,207,207,207,207,,,,,,207,,,,,,,,207,207,,207,207,207,207,207,207',
'207,207,207,207,207,207,975,975,207,,975,,,,,,,,,975,975,,975,975,975',
'975,975,975,975,,,975,975,,,,975,975,975,975,,,,,,975,,,,,,,,975,975',
',975,975,975,975,975,975,975,975,975,975,975,975,502,502,975,,502,,',
',,,,,,502,502,,502,502,502,502,502,502,502,,,502,502,,,,502,502,502',
'502,,,,,,502,,,,,,,,502,502,,502,502,502,502,502,502,502,502,502,502',
'502,502,503,503,502,,503,,,,,,,,,503,503,,503,503,503,503,503,503,503',
',,503,503,,,,503,503,503,503,,,,,,503,,,,,,,,503,503,,503,503,503,503',
'503,503,503,503,503,503,503,503,,864,503,864,864,864,864,864,,862,,862',
'862,862,862,862,1004,864,1004,1004,1004,1004,1004,,860,862,860,860,860',
'860,860,,1004,,,,,,,864,860,,,,,,,862,,,864,864,,,1004,864,862,862,862',
'862,,,860,862,,1004,1004,,,,1004,860,860,860,860,,,587,860,587,587,587',
'587,587,,694,,694,694,694,694,694,,587,333,,333,333,333,333,333,694',
'960,,960,960,960,960,960,,333,,,,,587,587,,960,,,,,694,587,587,587,587',
',,,587,333,333,694,694,,,,694,960,333,333,333,333,,,,333,960,960,960',
'960,,,692,960,692,692,692,692,692,,690,,690,690,690,690,690,,692,,,',
',,,,690,914,,914,914,914,914,914,,,,,,,692,,,914,,,,,690,692,692,692',
'692,,,,692,690,690,690,690,,,,690,914,914,734,,734,734,734,734,734,914',
'914,914,914,,,,914,891,734,891,891,891,891,891,,978,,978,978,978,978',
'978,893,891,893,893,893,893,893,,734,978,,,,,,,893,734,734,734,734,',
',891,734,,,,,,,978,,,891,891,,,893,891,,,978,978,,,,978,,893,893,,,964',
'893,964,964,964,964,964,,,,,,,,,,964,,,,,,,,,,,,,,,,,,,,,,964,,,,,,',
',,,,964,964,,,,964' ]
        racc_action_check = arr = ::Array.new(25112, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1972,  1312,   nil,   310,   nil, 19713,  1177,  1179, 22902, 23031,
  1149,   nil,  1060,  1103,   791,   360,   934,   752,   nil,   -73,
 16967, 23507,   963,   nil,   489,   nil,   -24, 22509, 22186, 14627,
 10987, 10467,   nil,  3413, 10207, 10069,   nil,   795,   285,   414,
   841,   473,  7989,  6941,  6811,   751,   483,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  5106,   nil, 16447,  5373,
  5503,   -21,   nil,  5763,  5893,   nil,   nil,  6023,  6161,  6291,
  6421, 23274,   nil,   nil,   nil,   nil,   nil,   569,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   111,   nil,   nil,   246,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   668,   nil,  7201,   nil,
   nil,   nil,   nil,  7339,  7469,  7599,  7729,  7859,  4453,   nil,
   478,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   521,   nil,  4063,  8509,  8639,  8769, 24455, 23711,  9159,
  9289,  9419,  9549,  9679,  9809,   nil,   nil,   215,   -59,   -38,
   347,   289,   211,   161,   nil, 10857,  3153,   757, 11247, 11377,
 11507, 11637, 11767, 11897, 12027, 12157, 12287, 12417, 12547, 12677,
 12807, 12937, 13067, 13197, 13327, 13457, 13587, 13717, 13847, 13977,
 14107, 14237, 14367, 14497,   nil,   nil, 23835,   nil,   nil,   560,
 14887, 15017,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 15147,
   nil, 23599,   nil,   841,  1094,   nil, 15667,  1179, 15927,   nil,
 16057, 16187,   nil,   nil,   -38,   nil,  5243,  1192,  1194,  1160,
  2102,  1166,  1068,  1023, 17487,  1842,   841,   833,   794,   918,
   696,   nil,   816,   509,   188,   nil,   nil,   nil,   204,   679,
   202, 19193,   nil,   386,   275,   329,   527,   nil,   455,   nil,
 19973,  4583,   291,   522,   nil,   296,   365,   759,   764,  -100,
   866,   nil,   nil, 24797,   542,    33,    35, 21793, 21923,   581,
  1006,   888,     9,    39,   932,  1067,   -19,  1126,   nil,   nil,
   254,   350,   241,   nil,   935,   nil,    25, 20103,   nil,   nil,
   nil,   497,   462,   151,   495,   131,   313,   392,   585,   558,
   nil,   554,   nil, 17097,   nil,   243,   278,   306,   311,   379,
   -45,   -39,   -30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1151, 22644,   nil,   nil,   nil,   nil,  1092,   nil,  1071,
   nil, 21403,  1055,   nil,  4973,  1057,   nil,  1048,  1033,   358,
   399, 22299,   nil,   nil,   nil,     0,   651,  1066,   nil,   nil,
  2625,   924,   nil, 23645,   nil,  1013,   nil,   nil,   791,   nil,
   nil,   nil,   nil,    24,   nil,  1061, 24207, 24145, 18933,   124,
 16317, 14757, 10727,  1842,  1972,   -47,   -49,  1002,   992,   986,
   983,   578,  3153,  3023,  1582,  1712,  2573,  1192,  1062,  2893,
  2102,  2232,  1322,  2763,   404,   607,  1452,  2362, 23415,   -24,
 22429,   nil,   nil,   nil,   nil,   910,   nil,   -48,   -51,   908,
   nil,   nil, 18803,   nil, 21533,   nil, 21663,   nil,   nil,   nil,
   nil, 18145,  1047,  4713,   838,   825,   nil,   nil,   823, 21273,
   824, 21143, 24579, 24641,   595,   826,   nil,   nil, 21013,   771,
   nil, 20883, 20753, 20623, 23897, 23959,  7201, 20493,   777,   769,
   544,   581,   nil, 20363,   nil,   nil, 20233,   nil,   nil,   nil,
   -22, 23358,   nil,   504,   493,   nil,   482,   480,   447,   nil,
   nil,   nil,   nil,   nil,   nil,   429,   nil,   580,   nil, 19843,
   nil,   nil,   nil,   446,   nil,   nil,   nil,   430,   nil,   nil,
   392,  2362,   414,   nil,  1062,    91,   166,   369,   374, 19453,
 19323, 24393, 24269,    11,   nil,   nil,  1185,   nil, 24083, 24021,
 19063,   nil,   nil,   nil,   535,   140,  1712, 24780,   nil,   -26,
   nil,   nil,   nil,   492,   nil,   nil,   nil,   -67,   nil,   nil,
   275,   nil,   173,   nil,   nil,   -45,   nil,    58,   nil,   nil,
   nil, 22773,   nil,   172, 18673, 18543,   116,   710, 18413, 18283,
 22053, 18015,   938,   nil,   nil, 17885, 17755,  1001,   nil, 17357,
 17227,   nil,   nil,   117,   151,   516,   381,  1142,  2492,   771,
   nil, 22393,   nil,  2492,  1274,   -13,   -46,   nil,   791,  2763,
   nil,  1137,   nil,  1181, 15797,   nil,   nil,   nil,  1152,   127,
 15537,  1074,   nil,  1073,   135,   150,  1054,   321,   868,   915,
   855, 15407,  6023,   889,   855,   164,   877, 15277,   nil,   712,
   nil,   282,   nil,  2893,  3023,   331,   541,   nil,   nil,   632,
 24866,   nil, 24858,   nil, 24788,   nil, 11117,   nil,   718,   nil,
   -69,   177,   nil,    44,   nil,   nil,   nil,   nil,   753,   nil,
   193,   nil,   nil,   nil,   nil,   228,   nil,    26,   134,   -21,
     8,   173,   134, 10597,   389,  1040,   nil,   256,  3283, 10337,
   nil,   nil,   403,  3543, 24923,   434, 23160,   nil,   nil,   nil,
   nil,   nil,   nil,  3673,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   384,  9939, 23323,  9029,   nil,   472,   nil, 10069,   nil,
 17487,   nil,   nil, 18145,   nil, 23369,   nil, 23553,  8899,  8249,
  8119,  7071,   165,  6681,   549,   563,   nil,   575,   609,   617,
   nil,   646,   631,   632,   636,  6551,   nil,   nil,   771,   nil,
   nil,  4843,   684,   790,   nil,   nil,   nil,   666,   279,   nil,
   nil,   796,   nil,  4973,   681,   729,   nil,   nil,   nil,   nil,
   704,   810,   736,   694,   nil,   nil,   nil,   696,   697,   nil,
   698,   699,   nil,  -111,   nil,   720,   888,   739,   989,   nil,
   872,   nil,  5633,   877,  4323,  4193,   nil,  8379,  3933,    -5,
   104,   nil,   908,   608,  3803,   nil,   925,   813,   nil,   nil,
   819,   814,   nil, 23461, 16577, 16707, 22053,   471,   nil,   nil,
 24727,   nil, 24712,   nil, 24704,   nil,   nil,   878,   930, 16837,
   622,   956,   nil,   902,   nil,   nil,   nil,  2232,   nil,   nil,
    36, 17625,   nil,   nil,   nil,   nil,   nil,   648,   nil, 23453,
   nil, 24938,   nil, 24953,   nil,   nil,   nil,   nil,   308,   925,
   937,   nil,   -10,   nil,  1066,  1067,   nil,   296,   nil,   nil,
   nil,  1095,   nil,   nil, 24883,   nil,   998,   nil,   nil,  1001,
  1002,  1005,  1007,   nil,  1008,   nil,   146,   nil,   nil,   nil,
   976, 24331,   nil,   nil,   nil,  1582,  1183,  1170,  1055,  1107,
   524,   nil,  1036,  1037,  1041,  1042,  1043,   917,  1053,   509,
  1452,   nil,   nil,   nil,   nil,   nil,  1322,   nil,  1192,   nil,
 24805,   nil, 23545,   nil, 25006,   nil, 23637,   nil,   nil,   nil,
   994,  1139,  1162,  1253, 19583, 24517, 23773,   692, 24946,   nil,
   nil,   nil,   nil,  1048,  1138,   682,  1265,  1271,  1148,  1149,
  1152,  1153,   nil,   nil,  1158,    10,    13,    32,  1053,  1171,
  1172,   nil,   nil,   nil, 24719,   nil,   nil,   nil,   nil,    34,
   nil,  1183,   nil ]

racc_action_default = [
    -3,  -585,    -1,  -571,    -4,  -585,    -7,  -585,  -585,  -585,
  -585,   -29,  -585,  -585,  -585,  -279,  -585,   -41,   -44,  -573,
  -585,   -49,   -51,   -52,   -53,   -57,  -258,  -258,  -258,  -292,
  -327,  -328,   -69,   -11,   -73,   -81,   -83,  -585,  -482,  -483,
  -585,  -585,  -585,  -585,  -585,  -573,  -239,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -561,  -281,  -285,  -584,
  -552,  -300,  -388,  -585,  -585,  -305,  -308,  -571,  -585,  -585,
  -585,  -585,  -329,  -330,  -425,  -426,  -427,  -428,  -429,  -450,
  -432,  -433,  -452,  -454,  -437,  -442,  -446,  -448,  -464,  -452,
  -466,  -467,  -559,  -471,  -472,  -560,  -474,  -475,  -476,  -477,
  -478,  -479,  -480,  -481,  -486,  -487,  -585,    -2,  -572,  -580,
  -581,  -582,    -6,  -585,  -585,  -585,  -585,  -585,    -3,   -17,
  -585,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,
  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,   -22,  -121,   -11,  -585,  -585,  -248,  -585,  -585,  -585,
  -585,  -585,  -585,  -585,  -573,  -574,   -48,  -585,  -482,  -483,
  -585,  -279,  -585,  -585,  -231,  -585,   -11,  -585,  -585,  -585,
  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
  -585,  -585,  -585,  -585,  -394,  -396,  -585,  -569,  -570,   -58,
  -248,  -585,  -299,  -400,  -409,  -411,   -64,  -406,   -65,  -573,
   -66,  -240,  -253,  -262,  -262,  -257,  -585,  -263,  -585,  -554,
  -585,  -585,   -67,   -68,  -571,   -12,  -585,   -15,  -585,   -71,
   -11,  -573,  -585,   -74,   -77,   -11,   -89,   -90,  -585,  -585,
   -97,  -292,  -295,  -573,  -585,  -327,  -328,  -331,  -407,  -585,
   -79,  -585,   -85,  -289,  -468,  -469,  -585,  -216,  -217,  -232,
  -585,   -11,  -283,  -573,  -241,  -577,  -577,  -585,  -585,  -577,
  -585,  -301,  -302,  -514,   -50,  -585,  -585,  -585,  -585,  -571,
  -585,  -572,  -482,  -483,  -585,  -585,  -279,  -585,  -341,  -342,
  -107,  -108,  -585,  -110,  -585,  -279,  -585,  -585,  -482,  -483,
  -320,  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,
  -322,  -585,  -550,  -585,  -430,  -585,  -585,  -585,  -585,  -585,
  -585,  -585,  -585,  1013,    -5,  -583,   -23,   -24,   -25,   -26,
   -27,  -585,  -585,   -19,   -20,   -21,  -122,  -585,   -30,   -39,
   -40,  -585,  -585,   -31,  -197,  -573,  -249,  -262,  -262,  -562,
  -563,  -258,  -404,  -564,  -565,  -563,  -562,  -258,  -403,  -405,
  -564,  -565,   -37,  -205,   -38,  -585,   -42,   -43,  -195,  -263,
   -45,   -46,   -47,  -573,  -298,  -585,  -585,  -585,  -248,  -289,
  -585,  -585,  -585,  -206,  -207,  -208,  -209,  -210,  -211,  -212,
  -213,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,  -229,  -230,  -233,  -234,  -235,  -236,  -573,  -377,
  -258,  -562,  -563,   -55,   -59,  -573,  -259,  -377,  -377,  -573,
  -294,  -254,  -585,  -255,  -585,  -260,  -585,  -264,  -557,  -558,
   -10,  -572,   -14,    -3,  -573,   -70,  -287,   -86,   -75,  -585,
  -573,  -248,  -585,  -585,   -96,  -585,  -468,  -469,  -585,   -82,
   -87,  -585,  -585,  -585,  -585,  -585,  -237,  -585,  -417,  -585,
  -573,  -585,  -242,  -579,  -578,  -244,  -579,  -290,  -291,  -553,
  -585,  -514,  -391,  -549,  -549,  -497,  -499,  -499,  -499,  -513,
  -515,  -516,  -517,  -518,  -519,  -520,  -521,  -585,  -523,  -585,
  -529,  -531,  -532,  -534,  -539,  -541,  -542,  -544,  -545,  -546,
  -585,   -11,  -332,  -333,   -11,  -585,  -585,  -585,  -585,  -585,
  -248,  -585,  -585,  -289,  -313,  -107,  -108,  -109,  -585,  -585,
  -248,  -316,  -488,  -489,  -585,  -585,   -11,  -514,  -324,  -573,
  -431,  -451,  -456,  -585,  -458,  -434,  -453,  -585,  -455,  -436,
  -585,  -439,  -585,  -441,  -444,  -585,  -445,  -585,  -465,    -8,
   -18,  -585,   -28,  -269,  -585,  -585,  -408,  -585,  -250,  -252,
  -585,  -585,   -60,  -247,  -401,  -585,  -585,   -62,  -402,  -585,
  -585,  -297,  -575,  -562,  -563,  -562,  -563,  -573,  -195,  -585,
  -378,  -573,  -380,   -11,   -54,  -397,  -377,  -245,   -11,   -11,
  -293,  -262,  -261,  -265,  -585,  -555,  -556,   -13,  -585,   -72,
  -585,   -78,   -84,  -573,  -562,  -563,  -246,   -93,   -95,  -585,
   -80,  -585,  -204,  -214,  -215,  -573,  -584,  -584,  -282,  -585,
  -286,  -577,  -389,   -11,   -11,  -573,  -585,  -495,  -496,  -585,
  -585,  -506,  -585,  -509,  -585,  -511,  -585,  -343,  -585,  -345,
  -347,  -354,  -520,  -573,  -525,  -533,  -543,  -547,  -584,  -334,
  -584,  -306,  -335,  -336,  -309,  -585,  -312,  -585,  -573,  -562,
  -563,  -566,  -288,  -585,  -107,  -108,  -111,  -573,   -11,  -585,
  -491,  -318,  -585,   -11,  -514,  -585,  -585,  -551,  -457,  -460,
  -461,  -462,  -463,   -11,  -435,  -438,  -440,  -443,  -447,  -449,
  -123,  -267,  -585,  -198,  -585,  -576,  -262,   -33,  -200,   -34,
  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -585,  -585,
  -585,  -585,  -408,  -585,  -549,  -549,  -359,  -361,  -361,  -361,
  -376,  -585,  -573,  -382,  -520,  -585,  -527,  -537,  -585,  -399,
  -398,   -11,  -585,  -585,  -256,  -266,   -16,   -76,   -91,   -88,
  -296,  -584,  -339,   -11,  -418,  -584,  -419,  -420,  -284,  -243,
  -585,  -585,  -585,  -549,  -530,  -548,  -498,  -499,  -499,  -524,
  -499,  -499,  -540,  -499,  -535,  -573,  -585,  -352,  -585,  -522,
  -585,  -337,  -585,  -585,   -11,   -11,  -311,  -585,   -11,  -408,
  -585,  -408,  -585,  -585,   -11,  -321,  -585,  -573,  -493,  -325,
  -585,  -268,   -32,  -199,  -251,  -585,  -238,  -585,  -357,  -358,
  -367,  -369,  -585,  -372,  -585,  -374,  -379,  -585,  -585,  -585,
  -526,  -585,  -395,  -585,  -410,  -412,    -9,   -11,  -424,  -340,
  -585,  -585,  -422,  -392,  -393,  -390,  -494,  -585,  -502,  -585,
  -504,  -585,  -507,  -585,  -510,  -512,  -344,  -346,  -350,  -585,
  -355,  -303,  -585,  -304,  -585,  -585,  -265,  -584,  -314,  -317,
  -490,  -585,  -323,  -492,  -514,  -459,  -549,  -528,  -360,  -361,
  -361,  -361,  -361,  -538,  -361,  -381,  -573,  -384,  -386,  -387,
  -536,  -585,  -289,   -56,  -423,   -11,   -98,   -99,  -585,  -585,
  -106,  -421,  -499,  -499,  -499,  -499,  -348,  -585,  -353,  -585,
   -11,  -307,  -310,  -413,  -414,  -415,   -11,  -319,   -11,  -356,
  -585,  -364,  -585,  -366,  -585,  -370,  -585,  -373,  -375,  -383,
  -585,  -288,  -566,  -417,  -248,  -585,  -585,  -105,  -585,  -500,
  -503,  -505,  -508,  -585,  -351,  -584,  -585,  -585,  -361,  -361,
  -361,  -361,  -385,  -416,  -573,  -562,  -563,  -566,  -104,  -499,
  -349,  -338,  -315,  -326,  -585,  -362,  -365,  -368,  -371,  -408,
  -501,  -361,  -363 ]

clist = [
'213,324,331,26,370,255,676,322,26,111,411,417,334,334,405,427,334,293',
'272,272,272,539,2,26,483,532,320,119,202,474,127,127,26,26,26,108,26',
'129,129,568,655,733,307,307,124,124,335,336,522,525,339,400,529,256',
'561,564,830,424,216,470,822,26,334,334,334,334,26,26,475,310,26,616',
'107,111,509,16,307,307,307,801,16,6,655,900,687,688,6,289,577,434,519',
'781,259,266,268,291,386,387,388,389,703,897,273,273,273,711,714,124',
'16,819,378,26,778,833,844,112,26,26,26,26,26,26,643,652,927,652,274',
'274,274,929,648,649,325,586,376,812,340,587,923,736,391,382,914,348',
'480,356,360,270,282,283,600,602,779,581,948,347,326,329,483,956,430',
'431,432,433,723,780,495,332,328,372,645,782,327,611,835,655,338,926',
'591,834,598,601,601,16,337,530,682,333,646,6,392,469,16,16,477,272,478',
'953,390,6,805,818,984,820,880,374,26,26,26,26,375,323,26,26,26,26,26',
'26,384,539,377,728,520,685,897,349,992,379,380,26,381,929,867,738,743',
'775,923,729,1000,411,417,201,398,403,421,657,637,422,426,272,272,825',
'817,876,814,822,917,321,272,652,652,371,661,26,26,1,715,,,,,670,26,',
',539,,402,16,819,813,,,402,505,425,334,334,,26,111,,,26,510,,,,26,791',
',16,307,772,521,666,585,,631,663,954,,819,,726,,491,666,,307,565,566',
'589,,26,858,859,,498,798,,919,,1001,273,,,,,,26,26,273,,289,111,,,,289',
'647,,494,490,650,732,,500,274,,26,16,582,,886,16,274,492,958,659,16',
'920,,921,666,662,26,,718,476,908,,666,,839,819,617,479,727,,,,761,841',
',,16,766,942,,588,794,,746,809,746,,,567,,655,610,,,127,,,,,,,129,539',
'797,,,847,272,124,,,,,,427,,838,,,,,26,,,,,,,,639,,916,,,775,,775,,775',
',,993,,,737,,675,959,,,,988,,421,,,,622,,14,,,510,627,14,,,,,,272,510',
',15,26,652,26,842,15,217,,679,846,,26,,794,307,217,217,217,,14,298,298',
'658,307,,,,26,,,,806,,15,300,300,,,,,,,,644,217,,421,,,217,217,263,267',
'217,344,354,354,800,421,,,775,,775,,775,272,775,346,355,355,26,,16,26',
'16,272,,712,712,26,6,,,,829,651,,,,26,,,790,14,,26,730,731,217,217,217',
'217,14,14,775,935,,15,539,,,,955,,421,,15,15,,911,421,,,697,617,807',
'681,950,783,26,26,,,789,26,26,750,,26,127,,,16,,,16,129,,717,510,617',
',26,124,,,,26,26,,799,,,,757,759,1009,16,,762,764,,783,426,307,849,',
',334,,,,,,334,307,,,14,217,217,217,26,26,217,217,217,217,217,217,,,15',
',,617,896,,,,425,14,840,,617,,,,843,,,756,,,16,15,,,913,16,16,412,26',
'987,,,,26,26,,,,26,,,217,217,848,,878,,,26,882,217,,402,,,,,,,26,16',
'16,691,693,695,783,,14,,,697,14,,827,124,298,14,,,,666,15,,334,994,15',
',,,300,15,,298,,852,307,26,,,13,,,14,,13,16,300,,26,,16,,,,,,15,902',
'217,217,16,,,,263,292,,,267,,,,13,,,,,26,217,26,26,,,26,,,,,712,26,',
'910,,,217,,,,,,,,861,863,865,,,,16,,,,,,,,,,,307,16,,26,,,,,,,,,307',
',,,,776,,697,,697,,,,,,,13,,969,,16,16,777,,16,13,13,,217,,16,,,,,,',
',,,623,,,,,,628,,,26,815,,,815,,,,,,,,,,16,26,412,,941,,,26,,26,821',
'272,823,,,421,946,697,14,,14,,,617,,26,298,,217,,,,15,,15,298,623,,',
',300,397,,,217,,,,13,300,961,963,965,967,,968,,,16,,421,,,,292,697,',
'697,412,,,13,,16,,,,,,16,412,16,,,,,,,14,888,890,14,892,894,,895,,217',
',,,697,15,,,15,,217,,,,,,14,,,,,,1005,1006,1007,1008,,,,,15,292,,,13',
',292,742,13,,412,,,13,,1012,,,412,,217,217,,,,217,217,,,217,,815,,,776',
',776,,776,13,,,39,14,,,,39,14,14,,,,922,,924,,15,,,298,,15,15,,,,,,',
',298,,,300,39,297,297,943,,944,330,945,14,14,300,,979,980,981,982,,',
',,,,15,15,,,,,,,623,,,628,,343,359,359,359,,,,,,,,,,217,,,,,14,217,',
',,14,776,,776,,776,,776,,15,14,1010,,,15,,,39,989,,990,217,991,,15,',
'39,39,,,,,,,,,999,,,,,,,,,776,,,,,,,870,,,,,,14,,,,1011,,,,355,,,,14',
',15,,,,13,,13,,,,,,15,,,,,,,,399,,,,,,429,217,,14,14,,,14,,,,,,14,39',
',,15,15,,,15,,,,,,15,,,,,,,,,,39,930,,,708,38,,710,,14,38,13,,938,13',
'355,,,,,,,,15,,,,940,,485,,487,,488,489,,13,,38,296,296,,,,,,,,,,,,',
',,,,,,,39,,,,39,,,14,297,39,,,,342,358,358,358,,,,,15,14,,,297,788,',
'14,,14,792,793,13,,39,15,,13,13,,,15,,15,,217,,,,,,,38,,,,,,,,,38,38',
',,810,811,,,,,,13,13,,,,,,,,,,,,412,,,,,,,,613,,,,,,,,,,,,,,,,,,,,,',
',,13,,,,,13,,,850,,,,,,,13,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,38',
',,873,653,,330,,656,,13,,,,,879,,,,,,,13,,,,,,,,,,,,39,,39,,,,,,297',
',,653,904,905,330,,907,297,,13,13,,,13,,,38,,,13,38,,,,296,38,,704,',
',,,,,,,,,,,,296,,,,934,,429,,,,38,13,,,,,,,,39,,,39,,,,,,,,,,,,,,,,',
',,,,,39,,,,,,,751,,,,653,330,,,,,,973,,,,,,,13,,,,,,,,985,,,,,,986,13',
',,,,,13,795,13,,,,,,,,,39,,,,,39,39,,,,,,,804,,,,297,,,,,,,,,,,297,',
',,824,,,,,,,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,38,,,,39',
',296,851,,39,,,,,,296,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',359,,,,,,39,38,,,38,,,,,,,,39,,,,,,,,,,,,,906,38,,,,,,,,,,,,,,,,330',
'39,39,,,39,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,359,,,,,38,,,39,,38,38,937',
',,,,,,,,,296,,,,,,,,,,,296,,,,,,,224,,,,,38,38,,,271,271,271,,,,,,,',
',,,317,318,319,,39,,,,,,,,,,,,,271,271,39,,,,,,39,,39,38,,,,,38,,,,',
',,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,358,,,,,,38,,,,,,,',
',,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,38,,,38,,,,,,38,,,,,,,,,,,,',
',,,,,271,404,271,,,423,428,358,,,,,,,,38,,,,936,,224,,,443,444,445,446',
'447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463',
'464,465,466,467,468,,,,,,,271,271,,,,,,,,271,,,,,,,271,38,271,,271,271',
',,,,,,,,,,38,,,,,,38,,38,,,,,,,,,,,,,,,,,,,,516,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,423,638,404,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,271,,271,,271,,,,,,,,,,,,,,,271,,,,,,,,,,672,673',
'674,,,,,,,,,,271,,,271,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,',
'271,271,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,753,,,271',
'271,758,760,,,,763,765,,,638,767,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,',
',,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,271,,853,,,,,,,,,,,,,,758,760,765,763,,856',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,',
',,,,,,,,,,,,,,,271,853,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,271' ]
        racc_goto_table = arr = ::Array.new(2985, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,65,84,41,56,134,10,29,41,93,37,37,29,29,23,18,29,49,33,33,33,157',
'2,41,71,133,31,15,15,39,60,60,41,41,41,6,41,61,61,90,169,94,63,63,57',
'57,17,17,67,67,17,27,67,36,87,87,88,27,20,37,165,41,29,29,29,29,41,41',
'23,50,41,24,4,93,51,26,63,63,63,11,26,7,169,114,118,118,7,45,54,47,8',
'126,38,38,38,46,17,17,17,17,113,111,66,66,66,89,89,57,26,161,148,41',
'123,11,106,5,41,41,41,41,41,41,40,72,128,72,68,68,68,129,40,40,66,107',
'146,126,4,108,166,109,2,146,110,26,47,55,55,44,44,44,149,149,124,92',
'114,91,68,68,71,104,29,29,29,29,103,115,47,86,83,82,70,121,64,62,102',
'169,101,127,150,100,150,150,150,26,99,130,131,132,42,7,30,135,26,26',
'137,33,138,139,7,7,140,124,114,124,141,144,41,41,41,41,145,98,41,41',
'41,41,41,41,5,157,147,105,97,133,111,19,128,151,152,41,153,129,126,154',
'155,117,166,156,114,37,37,16,20,20,57,14,23,20,20,33,33,113,160,12,162',
'165,163,96,33,72,72,95,51,41,41,1,90,,,,,51,41,,,157,,66,26,161,117',
',,66,31,26,29,29,,41,93,,,41,49,,,,41,40,,26,63,24,31,37,29,,47,23,11',
',161,,54,,6,37,,63,17,17,29,,41,118,118,,50,24,,123,,88,66,,,,,,41,41',
'66,,45,93,,,,45,47,,46,4,47,8,,46,68,,41,26,93,,118,26,68,7,94,47,26',
'124,,124,37,47,41,,23,44,89,,37,,24,161,31,44,23,,,,39,24,,,26,39,124',
',36,71,,150,67,150,,,4,,169,15,,,60,,,,,,,61,157,51,,,133,33,57,,,,',
',18,,87,,,,,41,,,,,,,,31,,117,,,117,,117,,117,,,10,,,47,,29,118,,,,124',
',57,,,,38,,22,,,49,38,22,,,,,,33,49,,25,41,72,41,8,25,22,,31,8,,41,',
'71,63,22,22,22,,22,22,22,2,63,,,,41,,,,27,,25,25,25,,,,,,,,38,22,,57',
',,22,22,69,69,22,22,22,22,47,57,,,117,,117,,117,33,117,25,25,25,41,',
'26,41,26,33,,93,93,41,7,,,,47,68,,,,41,,,84,22,,41,93,93,22,22,22,22',
'22,22,117,87,,25,157,,,,90,,57,,25,25,,8,57,,,112,31,65,68,87,31,41',
'41,,,134,41,41,15,,41,60,,,26,,,26,61,,66,49,31,,41,57,,,,41,41,,49',
',,,20,20,24,26,,20,20,,31,20,63,56,,,29,,,,,,29,63,,,22,22,22,22,41',
'41,22,22,22,22,22,22,,,25,,,31,47,,,,26,22,17,,31,,,,17,,,68,,,26,25',
',,47,26,26,69,41,8,,,,41,41,,,,41,,,22,22,93,,65,,,41,65,22,,66,,,,',
',,41,26,26,159,159,159,31,,22,,,112,22,,112,57,22,22,,,,37,25,,29,23',
'25,,,,25,25,,22,,20,63,41,,,21,,,22,,21,26,25,,41,,26,,,,,,25,17,22',
'22,26,,,,69,9,,,69,,,,21,,,,,41,22,41,41,,,41,,,,,93,41,,93,,,22,,,',
',,,,120,120,120,,,,26,,,,,,,,,,,63,26,,41,,,,,,,,,63,,,,,119,,112,,112',
',,,,,,21,,31,,26,26,122,,26,21,21,,22,,26,,,,,,,,,,69,,,,,,69,,,41,119',
',,119,,,,,,,,,,26,41,69,,26,,,41,,41,122,33,122,,,57,112,112,22,,22',
',,31,,41,22,,22,,,,25,,25,22,69,,,,25,9,,,22,,,,21,25,120,120,120,120',
',120,,,26,,57,,,,9,112,,112,69,,,21,,26,,,,,,26,69,26,,,,,,,22,159,159',
'22,159,159,,159,,22,,,,112,25,,,25,,22,,,,,,22,,,,,,120,120,120,120',
',,,,25,9,,,21,,9,25,21,,69,,,21,,120,,,69,,22,22,,,,22,22,,,22,,119',
',,119,,119,,119,21,,,53,22,,,,53,22,22,,,,122,,122,,25,,,22,,25,25,',
',,,,,,22,,,25,53,53,53,122,,122,28,122,22,22,25,,159,159,159,159,,,',
',,,25,25,,,,,,,69,,,69,,53,53,53,53,,,,,,,,,,22,,,,,22,22,,,,22,119',
',119,,119,,119,,25,22,159,,,25,,,53,122,,122,22,122,,25,,53,53,,,,,',
',,,122,,,,,,,,,119,,,,,,,22,,,,,,22,,,,122,,,,25,,,,22,,25,,,,21,,21',
',,,,,25,,,,,,,,28,,,,,,28,22,,22,22,,,22,,,,,,22,53,,,25,25,,,25,,,',
',,25,,,,,,,,,,53,22,,,9,52,,9,,22,52,21,,22,21,25,,,,,,,,25,,,,25,,28',
',28,,28,28,,21,,52,52,52,,,,,,,,,,,,,,,,,,,,53,,,,53,,,22,53,53,,,,52',
'52,52,52,,,,,25,22,,,53,9,,22,,22,9,9,21,,53,25,,21,21,,,25,,25,,22',
',,,,,,52,,,,,,,,,52,52,,,9,9,,,,,,21,21,,,,,,,,,,,,69,,,,,,,,28,,,,',
',,,,,,,,,,,,,,,,,,,21,,,,,21,,,9,,,,,,,21,,,,,,,,,,,,,,,52,,,,,,,,,',
',,,,,,,,,,,,,52,,,9,28,,28,,28,,21,,,,,9,,,,,,,21,,,,,,,,,,,,53,,53',
',,,,,53,,,28,9,9,28,,9,53,,21,21,,,21,,,52,,,21,52,,,,52,52,,28,,,,',
',,,,,,,,,52,,,,9,,28,,,,52,21,,,,,,,,53,,,53,,,,,,,,,,,,,,,,,,,,,,53',
',,,,,,28,,,,28,28,,,,,,9,,,,,,,21,,,,,,,,9,,,,,,9,21,,,,,,21,28,21,',
',,,,,,,53,,,,,53,53,,,,,,,28,,,,53,,,,,,,,,,,53,,,,28,,,,,,,,53,53,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,52,,,,53,,52,28,,53,,,,,,52',
',,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,53,52,,,52,,',
',,,,,53,,,,,,,,,,,,,28,52,,,,,,,,,,,,,,,,28,53,53,,,53,,,,,,53,,,,,',
',,,,,,,,,,,,,,,,,,,53,,,,,52,,,53,,52,52,53,,,,,,,,,,52,,,,,,,,,,,52',
',,,,,,32,,,,,52,52,,,32,32,32,,,,,,,,,,,32,32,32,,53,,,,,,,,,,,,,32',
'32,53,,,,,,53,,53,52,,,,,52,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,52,,,,,,52,,,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'52,52,,,52,,,,,,52,,,,,,,,,,,,,,,,,,32,32,32,,,32,32,52,,,,,,,,52,,',
',52,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,32,,,,,,,32,32,,,,,,,,32,,,,,,,32,52,32,,32,32,,,,,,',
',,,,52,,,,,,52,,52,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,32,,32,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,32,,32,,32,,,,,,,,,,,,,,,32,,,,,,,,,,32,32,32,,,,,,,,,,32,,',
'32,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,32,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,32,,,32,32,32,32,,,,32,32,,,32,32,',
',,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,',
'32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,,',
',,,,,,,,,,32,32,32,32,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,32' ]
        racc_goto_check = arr = ::Array.new(2985, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   265,    22,   nil,    69,   110,    32,    81,  -231,   790,
  -512,  -597,  -548,   nil,  -246,    19,   232,   -17,  -195,   157,
    38,   797,   479,  -192,  -334,   493,    75,  -153,  1100,   -51,
    71,   -19,  2010,   -11,   nil,   nil,    29,  -197,    66,  -230,
  -347,     3,  -285,   nil,   118,    54,    62,  -125,   nil,   -17,
    34,  -237,  1352,  1121,  -264,    76,   -67,    36,   nil,   nil,
    22,    29,  -223,     8,   113,   -58,    73,  -277,    97,   518,
  -300,  -250,  -359,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    98,   108,   -59,   nil,   105,  -281,  -652,  -460,
  -301,    87,  -203,     6,  -546,   190,   200,  -100,   153,   119,
  -532,   110,  -540,  -410,  -749,  -360,  -617,  -227,  -233,  -449,
  -707,  -725,    70,  -447,  -745,  -476,   nil,  -406,  -449,   253,
    83,  -470,   270,  -529,  -489,   nil,  -550,  -691,  -744,  -739,
  -148,  -344,   125,  -308,   -17,   -63,   nil,   -70,   -69,  -710,
  -477,  -601,   nil,   nil,   128,   131,    52,   137,    26,  -228,
  -197,   142,   142,   143,  -360,  -360,  -346,  -312,   nil,   224,
  -438,  -581,  -432,  -601,   nil,  -632,  -724,   nil,   nil,  -444 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   341,   287,   nil,   518,
   nil,   831,   nil,   284,   285,   nil,   nil,   nil,    11,    12,
    18,   223,   316,   nil,   nil,   221,   222,   nil,   277,    17,
   nil,   435,    21,    22,    23,    24,   nil,   669,   nil,   nil,
   nil,   304,   nil,    25,   406,    32,   nil,   nil,    34,    37,
    36,   nil,   218,   219,   353,   nil,   126,   414,   125,   128,
    75,    76,   nil,    46,   nil,   802,   407,   nil,   408,   419,
   624,   481,   275,   261,    47,    48,    49,    50,    51,    52,
    53,    54,    55,   nil,   262,    61,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   562,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   699,   546,   nil,   700,   918,   774,   534,   nil,   535,
   nil,   nil,   536,   nil,   538,   640,   nil,   nil,   nil,   544,
   nil,   nil,   nil,   735,   nil,   nil,   418,   nil,   nil,   nil,
   nil,   nil,    74,    77,    78,   nil,   nil,   nil,   nil,   nil,
   596,   nil,   nil,   nil,   nil,   nil,   nil,   816,   533,   nil,
   537,   548,   550,   786,   553,   554,   787,   557,   560,   279 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 143, :_reduce_none,
  2, 144, :_reduce_2,
  0, 145, :_reduce_3,
  1, 145, :_reduce_4,
  3, 145, :_reduce_5,
  2, 145, :_reduce_6,
  1, 147, :_reduce_none,
  4, 147, :_reduce_8,
  4, 150, :_reduce_9,
  2, 151, :_reduce_10,
  0, 155, :_reduce_11,
  1, 155, :_reduce_12,
  3, 155, :_reduce_13,
  2, 155, :_reduce_14,
  1, 156, :_reduce_none,
  4, 156, :_reduce_16,
  0, 172, :_reduce_17,
  4, 149, :_reduce_18,
  3, 149, :_reduce_19,
  3, 149, :_reduce_20,
  3, 149, :_reduce_21,
  2, 149, :_reduce_22,
  3, 149, :_reduce_23,
  3, 149, :_reduce_24,
  3, 149, :_reduce_25,
  3, 149, :_reduce_26,
  3, 149, :_reduce_27,
  4, 149, :_reduce_28,
  1, 149, :_reduce_none,
  3, 149, :_reduce_30,
  3, 149, :_reduce_31,
  6, 149, :_reduce_32,
  5, 149, :_reduce_33,
  5, 149, :_reduce_34,
  5, 149, :_reduce_35,
  5, 149, :_reduce_36,
  3, 149, :_reduce_37,
  3, 149, :_reduce_38,
  3, 149, :_reduce_39,
  3, 149, :_reduce_40,
  1, 149, :_reduce_none,
  3, 160, :_reduce_42,
  3, 160, :_reduce_43,
  1, 171, :_reduce_none,
  3, 171, :_reduce_45,
  3, 171, :_reduce_46,
  3, 171, :_reduce_47,
  2, 171, :_reduce_48,
  1, 171, :_reduce_none,
  1, 159, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 176, :_reduce_none,
  4, 176, :_reduce_54,
  0, 184, :_reduce_55,
  5, 181, :_reduce_56,
  1, 183, :_reduce_none,
  2, 175, :_reduce_58,
  3, 175, :_reduce_59,
  4, 175, :_reduce_60,
  5, 175, :_reduce_61,
  4, 175, :_reduce_62,
  5, 175, :_reduce_63,
  2, 175, :_reduce_64,
  2, 175, :_reduce_65,
  2, 175, :_reduce_66,
  2, 175, :_reduce_67,
  2, 175, :_reduce_68,
  1, 161, :_reduce_69,
  3, 161, :_reduce_70,
  1, 188, :_reduce_71,
  3, 188, :_reduce_72,
  1, 187, :_reduce_none,
  2, 187, :_reduce_74,
  3, 187, :_reduce_75,
  5, 187, :_reduce_76,
  2, 187, :_reduce_77,
  4, 187, :_reduce_78,
  2, 187, :_reduce_79,
  4, 187, :_reduce_80,
  1, 187, :_reduce_81,
  3, 187, :_reduce_82,
  1, 191, :_reduce_none,
  3, 191, :_reduce_84,
  2, 190, :_reduce_85,
  3, 190, :_reduce_86,
  1, 193, :_reduce_87,
  3, 193, :_reduce_88,
  1, 192, :_reduce_89,
  1, 192, :_reduce_90,
  4, 192, :_reduce_91,
  3, 192, :_reduce_92,
  3, 192, :_reduce_93,
  3, 192, :_reduce_94,
  3, 192, :_reduce_95,
  2, 192, :_reduce_96,
  1, 192, :_reduce_97,
  1, 168, :_reduce_98,
  1, 168, :_reduce_99,
  4, 168, :_reduce_100,
  3, 168, :_reduce_101,
  3, 168, :_reduce_102,
  3, 168, :_reduce_103,
  3, 168, :_reduce_104,
  2, 168, :_reduce_105,
  1, 168, :_reduce_106,
  1, 196, :_reduce_107,
  1, 196, :_reduce_none,
  2, 197, :_reduce_109,
  1, 197, :_reduce_110,
  3, 197, :_reduce_111,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 201, :_reduce_117,
  1, 201, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 158, :_reduce_121,
  0, 204, :_reduce_122,
  4, 158, :_reduce_123,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  3, 174, :_reduce_195,
  5, 174, :_reduce_196,
  3, 174, :_reduce_197,
  5, 174, :_reduce_198,
  6, 174, :_reduce_199,
  5, 174, :_reduce_200,
  5, 174, :_reduce_201,
  5, 174, :_reduce_202,
  5, 174, :_reduce_203,
  4, 174, :_reduce_204,
  3, 174, :_reduce_205,
  3, 174, :_reduce_206,
  3, 174, :_reduce_207,
  3, 174, :_reduce_208,
  3, 174, :_reduce_209,
  3, 174, :_reduce_210,
  3, 174, :_reduce_211,
  3, 174, :_reduce_212,
  3, 174, :_reduce_213,
  4, 174, :_reduce_214,
  4, 174, :_reduce_215,
  2, 174, :_reduce_216,
  2, 174, :_reduce_217,
  3, 174, :_reduce_218,
  3, 174, :_reduce_219,
  3, 174, :_reduce_220,
  3, 174, :_reduce_221,
  3, 174, :_reduce_222,
  3, 174, :_reduce_223,
  3, 174, :_reduce_224,
  3, 174, :_reduce_225,
  3, 174, :_reduce_226,
  3, 174, :_reduce_227,
  3, 174, :_reduce_228,
  3, 174, :_reduce_229,
  3, 174, :_reduce_230,
  2, 174, :_reduce_231,
  2, 174, :_reduce_232,
  3, 174, :_reduce_233,
  3, 174, :_reduce_234,
  3, 174, :_reduce_235,
  3, 174, :_reduce_236,
  3, 174, :_reduce_237,
  6, 174, :_reduce_238,
  1, 174, :_reduce_none,
  1, 170, :_reduce_none,
  1, 206, :_reduce_none,
  2, 206, :_reduce_none,
  4, 206, :_reduce_243,
  2, 206, :_reduce_244,
  3, 211, :_reduce_245,
  0, 212, :_reduce_246,
  1, 212, :_reduce_none,
  0, 165, :_reduce_248,
  1, 165, :_reduce_none,
  2, 165, :_reduce_none,
  4, 165, :_reduce_251,
  2, 165, :_reduce_252,
  1, 186, :_reduce_253,
  2, 186, :_reduce_254,
  2, 186, :_reduce_255,
  4, 186, :_reduce_256,
  1, 186, :_reduce_257,
  0, 215, :_reduce_258,
  2, 180, :_reduce_259,
  2, 214, :_reduce_260,
  2, 213, :_reduce_261,
  0, 213, :_reduce_262,
  1, 208, :_reduce_263,
  2, 208, :_reduce_264,
  3, 208, :_reduce_265,
  4, 208, :_reduce_266,
  3, 169, :_reduce_267,
  4, 169, :_reduce_268,
  2, 169, :_reduce_269,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_280,
  0, 238, :_reduce_281,
  4, 205, :_reduce_282,
  0, 239, :_reduce_283,
  5, 205, :_reduce_284,
  0, 240, :_reduce_285,
  4, 205, :_reduce_286,
  3, 205, :_reduce_287,
  3, 205, :_reduce_288,
  2, 205, :_reduce_289,
  3, 205, :_reduce_290,
  3, 205, :_reduce_291,
  1, 205, :_reduce_292,
  4, 205, :_reduce_293,
  3, 205, :_reduce_294,
  1, 205, :_reduce_295,
  5, 205, :_reduce_296,
  4, 205, :_reduce_297,
  3, 205, :_reduce_298,
  2, 205, :_reduce_299,
  1, 205, :_reduce_none,
  2, 205, :_reduce_301,
  2, 205, :_reduce_302,
  6, 205, :_reduce_303,
  6, 205, :_reduce_304,
  0, 241, :_reduce_305,
  0, 242, :_reduce_306,
  7, 205, :_reduce_307,
  0, 243, :_reduce_308,
  0, 244, :_reduce_309,
  7, 205, :_reduce_310,
  5, 205, :_reduce_311,
  4, 205, :_reduce_312,
  0, 245, :_reduce_313,
  0, 246, :_reduce_314,
  9, 205, :_reduce_315,
  0, 247, :_reduce_316,
  6, 205, :_reduce_317,
  0, 248, :_reduce_318,
  7, 205, :_reduce_319,
  0, 249, :_reduce_320,
  5, 205, :_reduce_321,
  0, 250, :_reduce_322,
  6, 205, :_reduce_323,
  0, 251, :_reduce_324,
  0, 252, :_reduce_325,
  9, 205, :_reduce_326,
  1, 205, :_reduce_327,
  1, 205, :_reduce_328,
  1, 205, :_reduce_329,
  1, 205, :_reduce_330,
  1, 164, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  2, 229, :_reduce_334,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 230, :_reduce_none,
  5, 230, :_reduce_338,
  1, 153, :_reduce_none,
  2, 153, :_reduce_340,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 253, :_reduce_343,
  3, 253, :_reduce_344,
  1, 256, :_reduce_345,
  3, 256, :_reduce_346,
  1, 255, :_reduce_none,
  4, 255, :_reduce_348,
  6, 255, :_reduce_349,
  3, 255, :_reduce_350,
  5, 255, :_reduce_351,
  2, 255, :_reduce_352,
  4, 255, :_reduce_353,
  1, 255, :_reduce_354,
  3, 255, :_reduce_355,
  4, 257, :_reduce_356,
  2, 257, :_reduce_357,
  2, 257, :_reduce_358,
  1, 257, :_reduce_359,
  2, 262, :_reduce_360,
  0, 262, :_reduce_361,
  6, 263, :_reduce_362,
  8, 263, :_reduce_363,
  4, 263, :_reduce_364,
  6, 263, :_reduce_365,
  4, 263, :_reduce_366,
  2, 263, :_reduce_none,
  6, 263, :_reduce_368,
  2, 263, :_reduce_369,
  4, 263, :_reduce_370,
  6, 263, :_reduce_371,
  2, 263, :_reduce_372,
  4, 263, :_reduce_373,
  2, 263, :_reduce_374,
  4, 263, :_reduce_375,
  1, 263, :_reduce_none,
  0, 182, :_reduce_377,
  1, 182, :_reduce_378,
  3, 267, :_reduce_379,
  1, 267, :_reduce_380,
  4, 267, :_reduce_381,
  1, 268, :_reduce_382,
  4, 268, :_reduce_383,
  1, 269, :_reduce_384,
  3, 269, :_reduce_385,
  1, 270, :_reduce_386,
  1, 270, :_reduce_none,
  0, 274, :_reduce_388,
  3, 228, :_reduce_389,
  4, 272, :_reduce_390,
  1, 272, :_reduce_391,
  3, 273, :_reduce_392,
  3, 273, :_reduce_393,
  0, 277, :_reduce_394,
  5, 276, :_reduce_395,
  2, 177, :_reduce_396,
  4, 177, :_reduce_397,
  5, 177, :_reduce_398,
  5, 177, :_reduce_399,
  2, 227, :_reduce_400,
  4, 227, :_reduce_401,
  4, 227, :_reduce_402,
  3, 227, :_reduce_403,
  3, 227, :_reduce_404,
  3, 227, :_reduce_405,
  2, 227, :_reduce_406,
  1, 227, :_reduce_407,
  4, 227, :_reduce_408,
  0, 279, :_reduce_409,
  5, 226, :_reduce_410,
  0, 280, :_reduce_411,
  5, 226, :_reduce_412,
  5, 232, :_reduce_413,
  1, 281, :_reduce_414,
  1, 281, :_reduce_none,
  6, 152, :_reduce_416,
  0, 152, :_reduce_417,
  1, 282, :_reduce_418,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  2, 283, :_reduce_421,
  1, 283, :_reduce_none,
  2, 154, :_reduce_423,
  1, 154, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 217, :_reduce_428,
  1, 285, :_reduce_429,
  2, 285, :_reduce_430,
  3, 286, :_reduce_431,
  1, 286, :_reduce_432,
  1, 286, :_reduce_433,
  3, 218, :_reduce_434,
  4, 219, :_reduce_435,
  3, 220, :_reduce_436,
  0, 290, :_reduce_437,
  3, 290, :_reduce_438,
  1, 291, :_reduce_439,
  2, 291, :_reduce_440,
  3, 222, :_reduce_441,
  0, 293, :_reduce_442,
  3, 293, :_reduce_443,
  3, 221, :_reduce_444,
  3, 223, :_reduce_445,
  0, 294, :_reduce_446,
  3, 294, :_reduce_447,
  0, 295, :_reduce_448,
  3, 295, :_reduce_449,
  0, 287, :_reduce_450,
  2, 287, :_reduce_451,
  0, 288, :_reduce_452,
  2, 288, :_reduce_453,
  0, 289, :_reduce_454,
  2, 289, :_reduce_455,
  1, 292, :_reduce_456,
  2, 292, :_reduce_457,
  0, 297, :_reduce_458,
  4, 292, :_reduce_459,
  1, 296, :_reduce_460,
  1, 296, :_reduce_461,
  1, 296, :_reduce_462,
  1, 296, :_reduce_none,
  1, 202, :_reduce_464,
  3, 203, :_reduce_465,
  1, 284, :_reduce_466,
  1, 284, :_reduce_467,
  2, 284, :_reduce_468,
  2, 284, :_reduce_469,
  1, 194, :_reduce_470,
  1, 194, :_reduce_471,
  1, 194, :_reduce_472,
  1, 194, :_reduce_473,
  1, 194, :_reduce_474,
  1, 195, :_reduce_475,
  1, 195, :_reduce_476,
  1, 195, :_reduce_477,
  1, 195, :_reduce_478,
  1, 195, :_reduce_479,
  1, 195, :_reduce_480,
  1, 195, :_reduce_481,
  1, 224, :_reduce_482,
  1, 224, :_reduce_483,
  1, 163, :_reduce_484,
  1, 163, :_reduce_485,
  1, 167, :_reduce_486,
  1, 167, :_reduce_487,
  1, 234, :_reduce_488,
  0, 298, :_reduce_489,
  4, 234, :_reduce_490,
  2, 234, :_reduce_491,
  3, 236, :_reduce_492,
  2, 236, :_reduce_493,
  4, 299, :_reduce_494,
  2, 299, :_reduce_495,
  2, 299, :_reduce_496,
  1, 299, :_reduce_497,
  2, 301, :_reduce_498,
  0, 301, :_reduce_499,
  6, 275, :_reduce_500,
  8, 275, :_reduce_501,
  4, 275, :_reduce_502,
  6, 275, :_reduce_503,
  4, 275, :_reduce_504,
  6, 275, :_reduce_505,
  2, 275, :_reduce_506,
  4, 275, :_reduce_507,
  6, 275, :_reduce_508,
  2, 275, :_reduce_509,
  4, 275, :_reduce_510,
  2, 275, :_reduce_511,
  4, 275, :_reduce_512,
  1, 275, :_reduce_513,
  0, 275, :_reduce_514,
  1, 271, :_reduce_515,
  1, 271, :_reduce_516,
  1, 271, :_reduce_517,
  1, 271, :_reduce_518,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 303, :_reduce_521,
  3, 303, :_reduce_522,
  1, 264, :_reduce_523,
  3, 264, :_reduce_524,
  2, 304, :_reduce_525,
  2, 305, :_reduce_526,
  1, 258, :_reduce_527,
  3, 258, :_reduce_528,
  1, 300, :_reduce_529,
  3, 300, :_reduce_530,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  2, 259, :_reduce_533,
  1, 259, :_reduce_534,
  3, 307, :_reduce_535,
  3, 308, :_reduce_536,
  1, 265, :_reduce_537,
  3, 265, :_reduce_538,
  1, 302, :_reduce_539,
  3, 302, :_reduce_540,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  2, 266, :_reduce_543,
  1, 266, :_reduce_544,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  2, 261, :_reduce_547,
  2, 260, :_reduce_548,
  0, 260, :_reduce_549,
  1, 237, :_reduce_none,
  3, 237, :_reduce_551,
  0, 225, :_reduce_552,
  2, 225, :_reduce_none,
  1, 210, :_reduce_554,
  3, 210, :_reduce_555,
  3, 311, :_reduce_556,
  2, 311, :_reduce_557,
  2, 311, :_reduce_558,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  0, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 173, :_reduce_none,
  1, 173, :_reduce_none,
  2, 189, :_reduce_575,
  2, 166, :_reduce_576,
  0, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 235, :_reduce_580,
  1, 235, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_none,
  0, 207, :_reduce_584 ]

racc_reduce_n = 585

racc_shift_n = 1013

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tDSTAR => 105,
  :tPLUS => 106,
  :tMINUS => 107,
  :tLT => 108,
  :tGT => 109,
  :tPIPE => 110,
  :tBANG => 111,
  :tCARET => 112,
  :tLCURLY => 113,
  :tRCURLY => 114,
  :tBACK_REF2 => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tREGEXP_OPT => 120,
  :tWORDS_BEG => 121,
  :tQWORDS_BEG => 122,
  :tSYMBOLS_BEG => 123,
  :tQSYMBOLS_BEG => 124,
  :tSTRING_DBEG => 125,
  :tSTRING_DVAR => 126,
  :tSTRING_END => 127,
  :tSTRING_DEND => 128,
  :tSTRING => 129,
  :tSYMBOL => 130,
  :tNL => 131,
  :tEH => 132,
  :tCOLON => 133,
  :tCOMMA => 134,
  :tSPACE => 135,
  :tSEMI => 136,
  :tLAMBDA => 137,
  :tLAMBEG => 138,
  :tCHARACTER => 139,
  :tEQL => 140,
  :tLOWEST => 141 }

racc_nt_base = 142

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "operation3",
  "@22",
  "@23",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@24",
  "@25",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

  def _reduce_2(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end

  def _reduce_3(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_4(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_5(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_6(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

# reduce 7 omitted

  def _reduce_8(val, _values, result)
                          result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_9(val, _values, result)
                          rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
  end

  def _reduce_10(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end

  def _reduce_11(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_12(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_13(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_14(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

# reduce 15 omitted

  def _reduce_16(val, _values, result)
                          if in_def?
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_17(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_18(val, _values, result)
                          result = @builder.alias(val[0], val[1], val[3])
                    
    result
  end

  def _reduce_19(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
  end

  def _reduce_20(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
  end

  def _reduce_21(val, _values, result)
                          diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
  end

  def _reduce_22(val, _values, result)
                          result = @builder.undef_method(val[0], val[1])
                    
    result
  end

  def _reduce_23(val, _values, result)
                          result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
  end

  def _reduce_24(val, _values, result)
                          result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
  end

  def _reduce_25(val, _values, result)
                          result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_26(val, _values, result)
                          result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_27(val, _values, result)
                          rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
  end

  def _reduce_28(val, _values, result)
                          result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
  end

# reduce 29 omitted

  def _reduce_30(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_31(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_32(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end

  def _reduce_33(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_34(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_35(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_36(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_37(val, _values, result)
                          @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_38(val, _values, result)
                          result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end

  def _reduce_39(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_40(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end

# reduce 41 omitted

  def _reduce_42(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_43(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

# reduce 44 omitted

  def _reduce_45(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_46(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_47(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
  end

  def _reduce_48(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

  def _reduce_54(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_55(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_56(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

# reduce 57 omitted

  def _reduce_58(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_59(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_60(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_61(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_62(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_63(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_64(val, _values, result)
                          result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_65(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_66(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_67(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_68(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_69(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end

  def _reduce_70(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_71(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end

  def _reduce_72(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

# reduce 73 omitted

  def _reduce_74(val, _values, result)
                          result = val[0].
                                  push(val[1])
                    
    result
  end

  def _reduce_75(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
  end

  def _reduce_76(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
  end

  def _reduce_77(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
  end

  def _reduce_78(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
  end

  def _reduce_79(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

  def _reduce_80(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end

  def _reduce_81(val, _values, result)
                          result = [ @builder.splat(val[0]) ]
                    
    result
  end

  def _reduce_82(val, _values, result)
                          result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
  end

# reduce 83 omitted

  def _reduce_84(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_85(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_86(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_87(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_88(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_89(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_90(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_91(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_92(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_93(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_94(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_95(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end

  def _reduce_96(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end

  def _reduce_97(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_98(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_99(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_100(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_101(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_102(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_103(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_104(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end

  def _reduce_105(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end

  def _reduce_106(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_107(val, _values, result)
                          diagnostic :error, :module_name_const, nil, val[0]
                    
    result
  end

# reduce 108 omitted

  def _reduce_109(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end

  def _reduce_110(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end

  def _reduce_111(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

  def _reduce_117(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

  def _reduce_121(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_122(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_123(val, _values, result)
                          result = val[0] << val[3]
                    
    result
  end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

  def _reduce_195(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_196(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
  end

  def _reduce_197(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_198(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
  end

  def _reduce_199(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end

  def _reduce_200(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_201(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_202(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_203(val, _values, result)
                          const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
  end

  def _reduce_204(val, _values, result)
                          const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
  end

  def _reduce_205(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_206(val, _values, result)
                          result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_207(val, _values, result)
                          result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_208(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_209(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_210(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_211(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_212(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_213(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_214(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
  end

  def _reduce_215(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
  end

  def _reduce_216(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_217(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_218(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_219(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_220(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_221(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_222(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_223(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_224(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_225(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_226(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_227(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_228(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_229(val, _values, result)
                          result = @builder.match_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_230(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_231(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end

  def _reduce_232(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_233(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_234(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_235(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_236(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_237(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
  end

  def _reduce_238(val, _values, result)
                          result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
  end

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

  def _reduce_243(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end

  def _reduce_244(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end

  def _reduce_245(val, _values, result)
                          result = val
                    
    result
  end

  def _reduce_246(val, _values, result)
                          result = [ nil, [], nil ]
                    
    result
  end

# reduce 247 omitted

  def _reduce_248(val, _values, result)
                          result = []
                    
    result
  end

# reduce 249 omitted

# reduce 250 omitted

  def _reduce_251(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end

  def _reduce_252(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end

  def _reduce_253(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_254(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_255(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
  end

  def _reduce_256(val, _values, result)
                          assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
  end

  def _reduce_257(val, _values, result)
                          result =  [ val[0] ]
                    
    result
  end

  def _reduce_258(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
  end

  def _reduce_259(val, _values, result)
                          @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
  end

  def _reduce_260(val, _values, result)
                          result = @builder.block_pass(val[0], val[1])
                    
    result
  end

  def _reduce_261(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

  def _reduce_262(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_263(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_264(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

  def _reduce_265(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_266(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end

  def _reduce_267(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_268(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end

  def _reduce_269(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

  def _reduce_280(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0])
                    
    result
  end

  def _reduce_281(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
  end

  def _reduce_282(val, _values, result)
                          @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
  end

  def _reduce_283(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end

  def _reduce_284(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[4])
                    
    result
  end

  def _reduce_285(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end

  def _reduce_286(val, _values, result)
                          result = @builder.begin(val[0], nil, val[3])
                    
    result
  end

  def _reduce_287(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_288(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_289(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end

  def _reduce_290(val, _values, result)
                          result = @builder.array(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_291(val, _values, result)
                          result = @builder.associate(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_292(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0])
                    
    result
  end

  def _reduce_293(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_294(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
  end

  def _reduce_295(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0])
                    
    result
  end

  def _reduce_296(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
  end

  def _reduce_297(val, _values, result)
                          result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_298(val, _values, result)
                          result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
  end

  def _reduce_299(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

# reduce 300 omitted

  def _reduce_301(val, _values, result)
                          begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_302(val, _values, result)                                 ####???
                          lambda_call = @builder.call_lambda(val[0])

                      #args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_303(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
  end

  def _reduce_304(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
  end

  def _reduce_305(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_306(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_307(val, _values, result)
                          result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end

  def _reduce_308(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_309(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_310(val, _values, result)
                          result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end

  def _reduce_311(val, _values, result)                                 ####???
                          #*when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
  end

  def _reduce_312(val, _values, result)                                 ####???)
                          #*when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
  end

  def _reduce_313(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_314(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_315(val, _values, result)
                          result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
  end

  def _reduce_316(val, _values, result)
                          @static_env.extend_static
                    
    result
  end

  def _reduce_317(val, _values, result)
                          if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @static_env.unextend
                    
    result
  end

  def _reduce_318(val, _values, result)
                          result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                    
    result
  end

  def _reduce_319(val, _values, result)
                          result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @static_env.unextend

                      @def_level = val[4]
                    
    result
  end

  def _reduce_320(val, _values, result)
                          @static_env.extend_static
                    
    result
  end

  def _reduce_321(val, _values, result)
                          if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @static_env.unextend
                    
    result
  end

  def _reduce_322(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                    
    result
  end

  def _reduce_323(val, _values, result)
                          result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end

  def _reduce_324(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_325(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                    
    result
  end

  def _reduce_326(val, _values, result)
                          result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end

  def _reduce_327(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0])
                    
    result
  end

  def _reduce_328(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0])
                    
    result
  end

  def _reduce_329(val, _values, result)
                          result = @builder.keyword_cmd(:redo, val[0])
                    
    result
  end

  def _reduce_330(val, _values, result)
                          result = @builder.keyword_cmd(:retry, val[0])
                    
    result
  end

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

  def _reduce_334(val, _values, result)
                          result = val[1]
                    
    result
  end

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

  def _reduce_338(val, _values, result)
                          else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
  end

# reduce 339 omitted

  def _reduce_340(val, _values, result)
                          result = val
                    
    result
  end

# reduce 341 omitted

# reduce 342 omitted

  def _reduce_343(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
  end

  def _reduce_344(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_345(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_346(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

# reduce 347 omitted

  def _reduce_348(val, _values, result)
                          @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
  end

  def _reduce_349(val, _values, result)
                          @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
  end

  def _reduce_350(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
  end

  def _reduce_351(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
  end

  def _reduce_352(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end

  def _reduce_353(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end

  def _reduce_354(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end

  def _reduce_355(val, _values, result)
                          result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
  end

  def _reduce_356(val, _values, result)
                          result = val[0].concat(val[2]).concat(val[3])
                    
    result
  end

  def _reduce_357(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_358(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_359(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_360(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_361(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_362(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_363(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end

  def _reduce_364(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_365(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_366(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

# reduce 367 omitted

  def _reduce_368(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_369(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_370(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_371(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_372(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_373(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_374(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_375(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

# reduce 376 omitted

  def _reduce_377(val, _values, result)
                          result = @builder.args(nil, [], nil)
                    
    result
  end

  def _reduce_378(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end

  def _reduce_379(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_380(val, _values, result)
                          result = @builder.args(val[0], [], val[0])
                    
    result
  end

  def _reduce_381(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end

  def _reduce_382(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_383(val, _values, result)
                          result = val[2]
                    
    result
  end

  def _reduce_384(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_385(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_386(val, _values, result)
                          result = @builder.shadowarg(val[0])
                    
    result
  end

# reduce 387 omitted

  def _reduce_388(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_389(val, _values, result)
                          result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_390(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end

  def _reduce_391(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end

  def _reduce_392(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end

  def _reduce_393(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end

  def _reduce_394(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_395(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_396(val, _values, result)
                          begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
  end

  def _reduce_397(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_398(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_399(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_400(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_401(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_402(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_403(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_404(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_405(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_406(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_407(val, _values, result)
                          result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
  end

  def _reduce_408(val, _values, result)
                          result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_409(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_410(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_411(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_412(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_413(val, _values, result)
                          result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
  end

  def _reduce_414(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

# reduce 415 omitted

  def _reduce_416(val, _values, result)
                          assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
  end

  def _reduce_417(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_418(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

# reduce 419 omitted

# reduce 420 omitted

  def _reduce_421(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end

# reduce 422 omitted

  def _reduce_423(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

  def _reduce_428(val, _values, result)
                          result = @builder.string_compose(nil, val[0], nil)
                    
    result
  end

  def _reduce_429(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_430(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_431(val, _values, result)
                          result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_432(val, _values, result)
                          result = @builder.string(val[0])
                    
    result
  end

  def _reduce_433(val, _values, result)
                          result = @builder.character(val[0])
                    
    result
  end

  def _reduce_434(val, _values, result)
                          result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_435(val, _values, result)
                          opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
  end

  def _reduce_436(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_437(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_438(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end

  def _reduce_439(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_440(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_441(val, _values, result)
                          result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_442(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_443(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end

  def _reduce_444(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_445(val, _values, result)
                          result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_446(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_447(val, _values, result)
                          result = val[0] << @builder.string_internal(val[1])
                    
    result
  end

  def _reduce_448(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_449(val, _values, result)
                          result = val[0] << @builder.symbol_internal(val[1])
                    
    result
  end

  def _reduce_450(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_451(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_452(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_453(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_454(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_455(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_456(val, _values, result)
                          result = @builder.string_internal(val[0])
                    
    result
  end

  def _reduce_457(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_458(val, _values, result)
                          @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
  end

  def _reduce_459(val, _values, result)
                          @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
  end

  def _reduce_460(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end

  def _reduce_461(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end

  def _reduce_462(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end

# reduce 463 omitted

  def _reduce_464(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end

  def _reduce_465(val, _values, result)
                          result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_466(val, _values, result)
                          result = @builder.integer(val[0])
                    
    result
  end

  def _reduce_467(val, _values, result)
                          result = @builder.float(val[0])
                    
    result
  end

  def _reduce_468(val, _values, result)
                          result = @builder.negate(val[0],
                                  @builder.integer(val[1]))
                    
    result
  end

  def _reduce_469(val, _values, result)
                          result = @builder.negate(val[0],
                                  @builder.float(val[1]))
                    
    result
  end

  def _reduce_470(val, _values, result)
                          result = @builder.ident(val[0])
                    
    result
  end

  def _reduce_471(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end

  def _reduce_472(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end

  def _reduce_473(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end

  def _reduce_474(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end

  def _reduce_475(val, _values, result)
                          result = @builder.nil(val[0])
                    
    result
  end

  def _reduce_476(val, _values, result)
                          result = @builder.self(val[0])
                    
    result
  end

  def _reduce_477(val, _values, result)
                          result = @builder.true(val[0])
                    
    result
  end

  def _reduce_478(val, _values, result)
                          result = @builder.false(val[0])
                    
    result
  end

  def _reduce_479(val, _values, result)
                          result = @builder.__FILE__(val[0])
                    
    result
  end

  def _reduce_480(val, _values, result)
                          result = @builder.__LINE__(val[0])
                    
    result
  end

  def _reduce_481(val, _values, result)
                          result = @builder.__ENCODING__(val[0])
                    
    result
  end

  def _reduce_482(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end

  def _reduce_483(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end

  def _reduce_484(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_485(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_486(val, _values, result)
                          result = @builder.nth_ref(val[0])
                    
    result
  end

  def _reduce_487(val, _values, result)
                          result = @builder.back_ref(val[0])
                    
    result
  end

  def _reduce_488(val, _values, result)
                          result = nil
                    
    result
  end

  def _reduce_489(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end

  def _reduce_490(val, _values, result)
                          result = [ val[0], val[2] ]
                    
    result
  end

  def _reduce_491(val, _values, result)
                          yyerrok
                      result = nil
                    
    result
  end

  def _reduce_492(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
  end

  def _reduce_493(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end

  def _reduce_494(val, _values, result)
                          result = val[0].concat(val[2]).concat(val[3])
                    
    result
  end

  def _reduce_495(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_496(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_497(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_498(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_499(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_500(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_501(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end

  def _reduce_502(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_503(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_504(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_505(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_506(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_507(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_508(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_509(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_510(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_511(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_512(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_513(val, _values, result)
                          result = val[0]
                    
    result
  end

  def _reduce_514(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_515(val, _values, result)
                          diagnostic :error, :argument_const, nil, val[0]
                    
    result
  end

  def _reduce_516(val, _values, result)
                          diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
  end

  def _reduce_517(val, _values, result)
                          diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
  end

  def _reduce_518(val, _values, result)
                          diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
  end

# reduce 519 omitted

# reduce 520 omitted

  def _reduce_521(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
  end

  def _reduce_522(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_523(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_524(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_525(val, _values, result)
                          check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
  end

  def _reduce_526(val, _values, result)
                          check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
  end

  def _reduce_527(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_528(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_529(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_530(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

# reduce 531 omitted

# reduce 532 omitted

  def _reduce_533(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
  end

  def _reduce_534(val, _values, result)
                          result = [ @builder.kwrestarg(val[0]) ]
                    
    result
  end

  def _reduce_535(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_536(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_537(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_538(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_539(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_540(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

# reduce 541 omitted

# reduce 542 omitted

  def _reduce_543(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end

  def _reduce_544(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end

# reduce 545 omitted

# reduce 546 omitted

  def _reduce_547(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
  end

  def _reduce_548(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

  def _reduce_549(val, _values, result)
                          result = []
                    
    result
  end

# reduce 550 omitted

  def _reduce_551(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_552(val, _values, result)
                          result = []
                    
    result
  end

# reduce 553 omitted

  def _reduce_554(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_555(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_556(val, _values, result)
                          result = @builder.pair(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_557(val, _values, result)
                          result = @builder.pair_keyword(val[0], val[1])
                    
    result
  end

  def _reduce_558(val, _values, result)
                          result = @builder.kwsplat(val[0], val[1])
                    
    result
  end

# reduce 559 omitted

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

  def _reduce_575(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_576(val, _values, result)
                          result = val[1]
                    
    result
  end

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

  def _reduce_580(val, _values, result)
                        yyerrok
                  
    result
  end

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

  def _reduce_584(val, _values, result)
                        result = nil
                  
    result
  end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby20
  end   # module Parser
