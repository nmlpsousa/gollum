# -*- encoding:utf-8; warn-indent:false -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

Parser.check_for_encoding_support

module Parser
  class Ruby21 < Parser::Base


  def version
    21
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-288,268,565,685,268,-105,-97,-288,-288,-288,586,768,217,-288,-288,803',
'-288,571,-83,-104,-101,607,565,-98,644,546,-69,543,542,541,594,544,904',
'-99,385,609,-288,-288,-100,-288,-288,-288,-288,-288,-99,565,565,-102',
'565,218,713,218,546,218,543,542,541,525,544,643,527,214,215,699,-102',
'-100,-100,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,214,215,-288,-288,-288,-567,627,606,267,699,-288,267,-103',
'-288,596,595,214,215,-288,803,-288,608,-288,-288,745,-288,-288,-288',
'-288,-288,-472,-288,684,-288,-96,-88,585,-472,-472,-472,113,-101,-472',
'-472,-472,112,-472,-288,-95,-92,-288,-288,-89,-94,-472,-288,-472,-472',
'-472,113,113,-103,-90,838,112,112,-472,-472,713,-472,-472,-472,-472',
'-472,113,218,-100,769,-568,112,-91,-100,-99,113,113,-102,113,-99,112',
'112,-102,112,713,-93,-91,218,837,-472,-472,-472,-472,-472,-472,-472',
'-472,-472,-472,-472,-472,-472,-472,113,268,-472,-472,-472,112,-472,-472',
'-567,443,-472,-94,398,-472,-472,-487,-472,-482,-472,594,-472,-102,-472',
'-472,-482,-472,-472,-472,-472,-472,594,-472,-475,-472,91,92,-91,214',
'215,-475,-475,-475,91,92,-475,-475,-475,-472,-475,-101,-472,-472,-472',
'-472,-101,-472,-475,-472,-475,-475,-475,-472,113,218,-105,-564,263,112',
'-475,-475,-98,-475,-475,-475,-475,-475,-91,113,525,-91,-93,527,112,268',
'596,595,113,-91,513,267,525,112,-571,524,747,596,595,597,-408,-475,-475',
'-475,-475,-475,-475,-475,-475,-475,-475,-475,-475,-475,-475,93,94,-475',
'-475,-475,-472,-475,-475,93,94,-475,856,-472,-475,-475,-565,-475,-564',
'-475,218,-475,-472,-475,-475,594,-475,-475,-475,-475,-475,-104,-475',
'-571,-475,-93,263,644,113,-408,-571,-564,594,112,644,-567,-408,-486',
'-475,-571,-571,-475,-475,-475,-475,-408,-475,-571,-475,267,644,808,-475',
'803,-571,-571,-571,-99,-571,-475,-571,-571,643,-571,-408,-93,-475,260',
'-93,643,238,-565,-571,113,261,-475,-93,594,112,79,596,595,599,-571,-571',
'643,-571,-571,-571,-571,-571,80,-97,-571,-565,976,-289,596,595,605,-571',
'81,977,-289,546,-567,543,542,541,-571,544,975,-289,673,-571,-571,-571',
'-571,-571,-571,-571,-571,-571,-571,-571,-571,-571,-571,-571,263,-571',
'-571,-571,546,628,543,542,541,-571,544,594,-571,596,595,610,594,-571',
'113,-571,622,-571,-571,112,-571,-571,-571,-571,-571,-288,-571,-571,-571',
'623,561,560,-288,-288,-288,513,550,-288,-288,-288,525,-288,-571,527',
'113,-571,-571,553,-92,112,-571,-288,-288,-288,829,218,-101,263,971,212',
'-487,-288,-288,-91,-288,-288,-288,-288,-288,218,-486,-100,596,595,601',
'218,-93,596,595,592,561,560,-95,948,-102,554,113,833,803,754,-104,112',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-96,-89,-288,-288,-288,238,771,-288,-105,-98,-288,-88,673,-288,-288',
'796,-288,-481,-288,-97,-288,846,-288,-288,-481,-288,-288,-288,-288,-288',
'-90,-288,-279,-288,214,215,260,235,-99,-279,489,237,236,261,233,234',
'487,-288,-279,442,-288,-288,-288,-288,257,-288,-571,-288,69,70,71,-103',
'57,-571,-571,-571,63,64,-571,-571,-571,67,-571,65,66,68,308,309,72,73',
'773,-571,-571,-571,-571,304,305,311,101,100,102,103,-571,-571,230,-571',
'-571,-571,-571,-571,-263,45,214,215,105,104,106,95,56,97,96,98,-478',
'99,107,108,218,91,92,-478,42,43,41,-571,-571,-571,-571,-571,-571,-571',
'-571,-571,-571,-571,-571,-571,-571,833,803,-571,-571,-571,223,770,-571',
'229,218,-571,58,59,-571,-571,60,-571,-477,-571,444,-571,44,-571,-571',
'-477,-571,-571,-571,-571,-571,228,-571,-571,-571,855,89,79,82,83,-475',
'84,86,85,87,214,215,-475,-571,80,88,-571,-571,-571,-571,445,-571,62',
'-571,81,93,94,-101,289,69,70,71,9,57,-483,577,-484,63,64,578,217,-483',
'67,-484,65,66,68,30,31,72,73,476,-484,476,476,316,29,28,27,101,100,102',
'103,395,485,19,487,315,397,396,632,8,45,291,10,105,104,106,95,56,97',
'96,98,-479,99,107,108,489,91,92,-479,42,43,41,238,242,247,248,249,244',
'246,254,255,250,251,-279,231,232,-289,755,252,253,-279,40,858,-289,33',
'690,861,58,59,-279,863,60,-289,35,235,865,241,44,237,236,867,233,234',
'245,243,239,20,240,218,869,870,89,79,82,83,573,84,86,85,87,496,-472',
'574,-480,80,88,873,256,-472,-238,-480,572,62,-262,81,93,94,289,69,70',
'71,9,57,875,876,-289,63,64,673,749,878,67,-289,65,66,68,30,31,72,73',
'748,-289,-261,882,884,29,28,27,101,100,102,103,739,740,19,885,741,107',
'108,617,8,45,291,10,105,104,106,95,56,97,96,98,886,99,107,108,690,91',
'92,888,42,43,41,238,242,247,248,249,244,246,254,255,250,251,-288,231',
'232,581,890,252,253,-288,40,892,580,33,-568,894,58,59,-288,894,60,582',
'35,235,218,241,44,237,236,744,233,234,245,243,239,20,240,900,-68,902',
'89,79,82,83,581,84,86,85,87,257,827,932,218,80,88,499,256,500,213,716',
'582,62,571,81,93,94,289,69,70,71,9,57,910,709,515,63,64,707,913,218',
'67,516,65,66,68,30,31,72,73,916,441,-264,706,705,29,28,27,101,100,102',
'103,208,697,19,695,693,691,690,632,8,45,291,10,105,104,106,95,56,97',
'96,98,926,99,107,108,687,91,92,207,42,43,41,238,242,247,248,249,244',
'246,254,255,250,251,-288,231,232,-484,507,252,253,-288,40,933,-484,33',
'-568,934,58,59,-288,206,60,-484,35,235,681,241,44,237,236,218,233,234',
'245,243,239,20,240,679,678,272,89,79,82,83,439,84,86,85,87,218,673,440',
'263,80,88,950,256,518,952,953,441,62,218,81,93,94,5,69,70,71,9,57,958',
'510,-485,63,64,690,961,963,67,-485,65,66,68,30,31,72,73,965,-485,967',
'967,662,29,28,27,101,100,102,103,-83,929,19,543,542,541,218,544,8,45',
'7,10,105,104,106,95,56,97,96,98,514,99,107,108,238,91,92,218,42,43,41',
'238,242,247,248,249,244,246,254,255,250,251,-485,231,232,210,218,252',
'253,-485,40,978,211,33,238,979,58,59,-485,894,60,209,35,235,894,241',
'44,237,236,894,233,234,245,243,239,20,240,984,238,950,89,79,82,83,-331',
'84,86,85,87,238,121,-331,238,80,88,218,256,528,634,631,-331,62,263,81',
'93,94,289,69,70,71,9,57,529,-568,505,63,64,-567,678,109,67,506,65,66',
'68,30,31,72,73,621,504,620,218,616,29,28,27,101,100,102,103,489,929',
'19,543,542,541,950,544,8,45,291,10,105,104,106,95,56,97,96,98,-261,99',
'107,108,1003,91,92,1004,42,43,41,238,242,247,248,249,244,246,254,255',
'250,251,-288,231,232,581,1005,252,253,-288,40,967,932,33,-568,967,58',
'59,-288,967,60,582,35,235,218,241,44,237,236,614,233,234,245,243,239',
'20,240,611,576,575,89,79,82,83,894,84,86,85,87,950,387,571,967,80,88',
',256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,116,117,118,119,120,29,28,27,101,100,102,103,,,19,116,117,118',
'119,120,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42',
'43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252,253',
',40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20',
'240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,116,117,118,119,120',
'29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255',
'250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249',
'244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35',
'235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45',
'291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,242',
'247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40,,,293,,,58',
'59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,218,256,,,,,62,,81,93,94,289,69,70,71,9',
'57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252',
'253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231',
'232,,,252,253,,40,,,293,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62',
',81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255',
'250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249',
'244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35',
'235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45',
'291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,242',
'247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58',
'59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,',
'42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252',
'253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231',
'232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62',
',81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255',
'250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,550,,,,29,28,27,101,100,102,103,553,546,19,543,542,541,,544',
'8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41',
'238,,561,560,,,238,554,699,546,,543,542,541,,544,,702,,40,,,33,,,58',
'59,,238,60,,35,235,,,44,237,236,235,233,234,,237,236,20,,,699,,89,79',
'82,83,,84,86,85,87,,,235,,80,88,237,236,,,,,62,,81,93,94,289,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,546,19,543,542,541,,544,8,45,291,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,,42,43,41,546,,543,542,541,,544,546,699,543,542,541',
',544,,,,899,,40,,,33,,,58,59,,,60,546,35,543,542,541,44,544,,699,,,',
',,20,699,,702,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,699,,62,,81,93',
'94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,,42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,,,58',
'59,,,60,,35,235,,241,44,237,236,,233,234,,,239,20,240,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
'8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41',
'238,-590,-590,-590,-590,244,246,,,-590,-590,,,,,,252,253,,40,,,293,',
',58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,',
'42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241',
'44,237,236,,233,234,,,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,-590,-590,-590,-590',
'244,246,,,-590,-590,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241',
'44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,,,,,,,,,,,,',
',,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,,',
'239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94',
'289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,42,43,41,238,-590,-590,-590,-590,244,246,,,-590,-590',
',,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,42,43,41,238,-590,-590,-590,-590,244,246,,,-590,-590',
',,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,,42,43,41,238,-590,-590,-590,-590,244,246,,,-590',
'-590,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233',
'234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62',
',81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,',
'29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,,42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33',
',,58,59,,,60,,35,235,,241,44,237,236,,233,234,,,239,20,240,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,238,242,247,248,249,244,246,,,250,251,,,,,,252,253,,40,,,33,,,58',
'59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,238,242,247,248,249,244,246,254,,250,251,,,,,,252,253,,40,,,33,,',
'58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,',
'42,43,41,238,242,247,248,249,244,246,254,255,250,251,,-590,-590,,,252',
'253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,',
'42,43,41,238,-590,-590,-590,-590,244,246,,,-590,-590,,,,,,252,253,,223',
',,229,,,58,59,,,60,,,235,,241,44,237,236,,233,234,245,243,239,228,240',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,238,242,247,248,249,244,246,254,255,250,251,,-590,-590,,,252,253',
',223,,,229,,,58,59,,,60,,,235,,241,44,237,236,,233,234,245,243,239,228',
'240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238',
',,,,,,,,,,,,,,,252,253,,223,,,229,,,58,59,,,60,,,235,,,44,237,236,,233',
'234,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92',
',42,43,41,238,,,,,,,,,,,,,,,,252,253,,223,,,229,,,58,59,,,60,,281,235',
',241,44,237,236,284,233,234,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73',
',,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,283,99,107,108,,91,92,,42,43,41,238,,,,,,,,,,,,,,,,252,253',
',223,,,229,,,58,59,,,60,,,235,,241,44,237,236,284,233,234,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,',
'60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,113,,,',
',112,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,308,309,72,73',
',,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,347,,,33,,,58',
'59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305',
'311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,352,56,97,96,353,',
'99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,359,,,354,,,229,,,58,59,,,60',
',,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101',
'100,102,103,,,230,,,,,,,306,,,105,104,106,352,56,97,96,353,,99,107,108',
',91,92,,,,312,,,,,,,,,,,,,,,,,,,,354,,,229,,,58,59,,,60,,,,,,,,,,,,',
',,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103',
',,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,387,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,',
',58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,',
',,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,',
'20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,',
',,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,',
',,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,',
',,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,',
',,,,302,,,229,,,58,59,,,60,,546,,543,542,541,550,544,,,,,,,,,,553,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,314,,548,62,,81,93,94,69,70,71,,57',
'561,560,,63,64,554,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,403,,,,44,,',
',,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,',
',,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41,,',
',,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,403,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312',
',,,,,,,,,,,,,,,,,,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,',
',229,,,58,59,,,60,,403,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,',
'44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,',
'20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,',
',,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,218,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,',
',,,,,,,,,,,,,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,302',
',,298,,,58,59,,,60,,297,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,',
',58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,',
',229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,',
',,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,872,,,229,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,',
'44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101',
'100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,',
',,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,',
',,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,',
'42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,',
',,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,',
',,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,',
',,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,',
',,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304',
'305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,',
'60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305',
'311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,',
',,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,',
'44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101',
'100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,',
',,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,',
',,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,',
'42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,',
',,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,',
',,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,',
',,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,',
'60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,',
'44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,',
'91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279',
',44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,',
'91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279',
',44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,',
'91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279',
',44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,218,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,',
',,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,',
'42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,',
',,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,279,,44,,,284,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,',
',,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,',
',,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,',
',,,,,,223,,,229,,,58,59,,,60,,656,,279,,44,,,284,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,',
',,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,752,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,',
',,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,',
',229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,',
',58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309',
'72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,',
',229,,,58,59,,,60,,281,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,302,,,229,',
',58,59,,,60,,546,,543,542,541,550,544,,,,,,,,,,553,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,502,,548,62,,81,93,94,69,70,71,,57,561,560,,63',
'64,554,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103',
',,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,656,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,279,,44,,,284,,,',
',,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,',
'42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230',
',,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,284,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230',
',,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,656,,,,44,,,284,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,',
',,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,',
',,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,',
',,,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,',
',229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,302',
',,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,',
',,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311',
'101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,872,,,229,,,58,59,,,60,,546,,543',
'542,541,550,544,,,,,,,,,,553,,89,79,82,83,,84,86,85,87,,,,,80,88,,,',
',,548,62,,81,93,94,69,70,71,9,57,561,560,,63,64,554,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,,,387,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68',
'308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,518,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,',
'940,,,229,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,',
',229,,,58,59,,,60,,656,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,',
',,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283',
'99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283',
'99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,',
'304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59',
',,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,',
',,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,',
',,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,-573,,62,,81,93,94,-573,-573,-573,,,-573,-573,-573',
',-573,,,,,,,,,-573,-573,-573,-573,,,,,,,,-573,-573,,-573,-573,-573,-573',
'-573,,,,,,,,,,,,,,,,,,,,,,,,-573,-573,-573,-573,-573,-573,-573,-573',
'-573,-573,-573,-573,-573,-573,,,-573,-573,-573,,,-573,,,-573,,,-573',
'-573,,-573,,-573,,-573,,-573,-573,,-573,-573,-573,-573,-573,,-573,-573',
'-573,,,,,,,,,,,,,,-573,,,-573,-573,-573,-573,-280,-573,,-573,,,,-280',
'-280,-280,,,-280,-280,-280,,-280,,,,,,,,,,-280,-280,-280,,,,,,,,-280',
'-280,,-280,-280,-280,-280,-280,,,,,,,,,,,,,,,,,,,,,,,,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,,,-280,-280,-280',
',,-280,,,-280,,,-280,-280,,-280,,-280,,-280,,-280,-280,,-280,-280,-280',
'-280,-280,,-280,,-280,,,,,,,,,,,,,,-280,,,-280,-280,-280,-280,-572,-280',
',-280,,,,-572,-572,-572,,,-572,-572,-572,,-572,,,,,,,,,-572,-572,-572',
'-572,,,,,,,,-572,-572,,-572,-572,-572,-572,-572,,,,,,,,,,,,,,,,,,,,',
',,,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572',
'-572,,,-572,-572,-572,,,-572,,,-572,,,-572,-572,,-572,,-572,,-572,,-572',
'-572,,-572,-572,-572,-572,-572,,-572,-572,-572,,,,,,,,,,,,,,-572,,,-572',
'-572,-572,-572,-295,-572,,-572,,,,-295,-295,-295,,,-295,-295,-295,,-295',
',,,,,,,,,-295,-295,,,,,,,,,-295,-295,,-295,-295,-295,-295,-295,,,,,',
',,,,,,,,,,,,,,,,,,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,,,-295,-295,-295,,,-295,,272,-295,,,-295,-295,,-295',
',-295,,-295,,-295,-295,,-295,-295,-295,-295,-295,,-295,-244,-295,,,',
',,-244,-244,-244,,,-244,-244,-244,-295,-244,,-295,-295,,-295,,-295,',
'-244,-244,,,,,,,,,,-244,-244,,-244,-244,-244,-244,-244,,,,,,,,,,,,,',
',,,,546,,543,542,541,550,544,,,,,,,,,,553,-244,,-244,,,,,-244,,-244',
'-244,-244,263,-244,-244,-244,-244,,-244,,,548,,,,,,-244,-244,-244,558',
'557,561,560,,-244,-244,554,-244,-244,,-244,-244,-244,-244,-244,,,,,-244',
',,-244,,,,,-244,,,,,218,,,,,,-244,-244,-244,-244,-244,-244,-244,-244',
'-244,-244,-244,-244,-244,-244,,,-244,-244,-244,,,-244,,263,-244,,,-244',
'-244,,-244,,-244,,-244,,-244,-244,,-244,-244,-244,-244,-244,,-244,-244',
'-244,,,,,,,,,,,,,,-244,,-407,-244,-244,,-244,,-244,-407,-407,-407,,',
'-407,-407,-407,,-407,,,,,,,,,-407,-407,-407,,,,,,,,,-407,-407,,-407',
'-407,-407,-407,-407,,,,,,,,,,,,,,,,,,,,,,,,-407,-407,-407,-407,-407',
'-407,-407,-407,-407,-407,-407,-407,-407,-407,,,-407,-407,-407,,,-407',
',263,-407,,,-407,-407,,-407,,-407,,-407,,-407,-407,,-407,-407,-407,-407',
'-407,,-407,-407,-407,,,,,,,,,,,,,,-407,,,-407,-407,,-407,,-407,173,184',
'174,197,170,190,180,179,200,201,195,178,177,172,198,202,203,182,171',
'185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187,,,,,',
'168,175,166,167,163,164,165,124,126,,,125,,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135',
'156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,,,,,88',
'173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202,203',
'182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187',
',,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,',
',,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198',
'202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169',
'188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,',
',,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89',
',,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177',
'172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196',
'181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,123,,125,,',
',,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201',
'195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194',
'370,369,371,368,169,188,187,,,,,,168,175,166,167,365,366,367,363,126',
'97,96,364,,99,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,',
',,159,160,146,147,,,,,,375,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,,,162,173,184,174,197,170,190,180,179,200,201,195',
'178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193',
'186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125',
',,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,998,423,162,,999,,,,,,,,,157,158,,154,136,137,138,145,142,144,,',
'139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,637,423,162,,638,,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,635,416,162',
',636,,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,637,423,162,,638,,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,419,423,162,,418,,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,669,423',
'162,,670,,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,666,416,162,,667,,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,412,416,162,,413,,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,635',
'416,162,,636,,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,474,416,162,,475,,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,724,423,162,,725,,',
',,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,973,423,162,,972,,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,474,416,162,,475,,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,719,416,162,,720',
',,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,721,423,162,,722,,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,996,416,162,,997,,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,546,162,543',
'542,541,550,544,,546,,543,542,541,550,544,546,553,543,542,541,550,544',
',546,553,543,542,541,550,544,,553,,,,,,,548,553,,,,,,,548,558,557,561',
'560,,,548,554,558,557,561,560,,,548,554,,561,560,,,,554,,,561,560,,',
'546,554,543,542,541,550,544,546,,543,542,541,550,544,,546,553,543,542',
'541,550,544,,553,546,,543,542,541,550,544,553,,,,,,,548,734,553,,,,',
'548,,558,557,561,560,,,548,554,,561,560,,,,554,548,,561,560,,,,554,',
'558,557,561,560,,,546,554,543,542,541,550,544,,546,,543,542,541,550',
'544,546,553,543,542,541,550,544,,,553,,,,,,,553,,,,,,,548,734,,,,,,',
'548,558,557,561,560,,,548,554,558,557,561,560,,,,554,,561,560,,,546',
'554,543,542,541,550,544,,546,,543,542,541,550,544,,553,546,,543,542',
'541,550,544,553,546,,543,542,541,550,544,,553,,,,,548,,,553,,,,,548',
'558,557,561,560,,,,554,548,532,561,560,,,,554,548,558,557,561,560,,',
',554,558,557,561,560,,,546,554,543,542,541,550,544,,546,,543,542,541',
'550,544,,553,,,,,,,546,553,543,542,541,550,544,,,,,,,,,548,553,,,,,',
',548,,,561,560,,,,554,558,557,561,560,,,548,554,,,,,,,,558,557,561,560',
',,,554' ]
        racc_action_table = arr = ::Array.new(25068, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'418,61,881,531,647,348,344,418,418,418,358,635,19,418,418,908,418,908',
'661,575,721,382,717,345,648,829,661,829,829,829,602,829,834,840,109',
'383,418,418,996,418,418,418,418,418,1010,903,337,997,338,703,841,686',
'948,19,948,948,948,682,948,648,682,676,676,829,720,719,635,418,418,418',
'418,418,418,418,418,418,418,418,418,418,418,436,436,418,418,418,721',
'418,382,61,948,418,647,722,418,602,602,587,587,418,710,418,383,418,418',
'602,418,418,418,418,418,95,418,531,418,348,344,358,95,95,95,881,998',
'95,95,95,881,95,418,575,721,418,418,345,418,95,418,95,95,95,358,717',
'418,840,717,358,717,95,95,567,95,95,95,95,95,841,676,996,636,722,841',
'666,996,1010,903,337,997,338,1010,903,337,997,338,568,720,719,436,715',
'95,95,95,95,95,95,95,95,95,95,95,95,95,95,587,26,95,95,95,587,95,95',
'998,224,95,722,204,95,95,222,95,365,95,604,95,636,95,95,365,95,95,95',
'95,95,378,95,98,95,41,41,666,591,591,98,98,98,312,312,98,98,98,95,98',
'998,95,95,95,95,998,95,98,95,98,98,98,95,567,718,224,352,26,567,98,98',
'222,98,98,98,98,98,666,735,328,666,667,328,735,307,604,604,568,666,442',
'26,327,568,669,327,604,378,378,378,798,98,98,98,98,98,98,98,98,98,98',
'98,98,98,98,41,41,98,98,98,352,98,98,312,312,98,772,352,98,98,353,98',
'352,98,591,98,352,98,98,379,98,98,98,98,98,442,98,669,98,667,307,480',
'3,798,669,352,381,3,472,669,798,221,98,669,724,98,98,98,98,798,98,419',
'98,307,481,680,98,677,419,419,419,772,669,353,419,419,480,419,798,667',
'353,24,667,472,675,353,419,341,24,353,667,384,341,77,379,379,379,419',
'419,481,419,419,419,419,419,77,221,724,353,939,578,381,381,381,724,77',
'939,578,702,724,702,702,702,724,702,939,578,672,419,419,419,419,419',
'419,419,419,419,419,419,419,419,419,724,671,419,419,419,899,419,899',
'899,899,419,899,380,419,384,384,384,377,419,586,419,412,419,419,586',
'419,419,419,419,419,638,419,419,419,413,690,690,638,638,638,316,858',
'638,638,638,331,638,419,331,287,419,419,858,419,287,419,638,638,638',
'702,927,419,668,927,15,39,638,638,412,638,638,638,638,638,665,38,412',
'380,380,380,727,413,377,377,377,858,858,316,899,413,858,844,708,708',
'618,316,844,638,638,638,638,638,638,638,638,638,638,638,638,638,638',
'15,39,638,638,638,467,638,638,15,39,638,38,663,638,638,660,638,366,638',
'38,638,732,638,638,366,638,638,638,638,638,618,638,303,638,17,17,373',
'467,618,303,655,467,467,373,467,467,653,638,303,223,638,638,638,638',
'646,638,637,638,283,283,283,638,283,637,637,637,283,283,637,637,637',
'283,637,283,283,283,283,283,283,283,641,637,637,637,637,283,283,283',
'283,283,283,283,637,637,283,637,637,637,637,637,751,283,336,336,283',
'283,283,283,283,283,283,283,370,283,283,283,45,283,283,370,283,283,283',
'637,637,637,637,637,637,637,637,637,637,637,637,637,637,986,986,637',
'637,637,283,637,637,283,639,637,283,283,637,637,283,637,369,637,225',
'637,283,637,637,369,637,637,637,637,637,283,637,637,637,756,283,283',
'283,283,364,283,283,283,283,324,324,364,637,283,283,637,637,637,637',
'226,637,283,637,283,283,283,637,588,588,588,588,588,588,367,354,299',
'588,588,354,230,367,588,299,588,588,588,588,588,588,588,629,299,262',
'624,40,588,588,588,588,588,588,588,123,276,588,277,37,123,123,431,588',
'588,588,588,588,588,588,588,588,588,588,588,371,588,588,588,280,588',
'588,371,588,588,588,431,431,431,431,431,431,431,431,431,431,431,941',
'431,431,978,619,431,431,941,588,774,978,588,775,777,588,588,941,778',
'588,978,588,431,779,431,588,431,431,781,431,431,431,431,431,588,431',
'782,783,784,588,588,588,588,346,588,588,588,588,291,363,346,368,588',
'588,788,431,363,431,368,346,588,615,588,588,588,323,323,323,323,323',
'323,792,793,507,323,323,797,609,801,323,507,323,323,323,323,323,323',
'323,607,507,804,805,810,323,323,323,323,323,323,323,595,595,323,811',
'595,595,595,407,323,323,323,323,323,323,323,323,323,323,323,323,812',
'323,323,323,813,323,323,817,323,323,323,407,407,407,407,407,407,407',
'407,407,407,407,999,407,407,356,818,407,407,999,323,820,356,323,999',
'821,323,323,999,823,323,356,323,407,826,407,323,407,407,599,407,407',
'407,407,407,323,407,828,292,831,323,323,323,323,931,323,323,323,323',
'22,701,931,294,323,323,295,407,296,16,570,931,323,569,323,323,323,878',
'878,878,878,878,878,843,564,318,878,878,562,847,848,878,318,878,878',
'878,878,878,878,878,851,318,852,559,555,878,878,878,878,878,878,878',
'13,547,878,539,538,537,535,640,878,878,878,878,878,878,878,878,878,878',
'878,878,868,878,878,878,534,878,878,12,878,878,878,640,640,640,640,640',
'640,640,640,640,640,640,670,640,640,937,302,640,640,670,878,872,937',
'878,670,874,878,878,670,10,878,937,878,640,522,640,878,640,640,521,640',
'640,640,640,640,878,640,520,519,305,878,878,878,878,220,878,878,878',
'878,306,511,220,311,878,878,901,640,508,905,906,220,878,503,878,878',
'878,496,496,496,496,496,496,912,313,938,496,496,917,920,921,496,938',
'496,496,496,496,496,496,496,922,938,923,925,501,496,496,496,496,496',
'496,496,498,971,496,971,971,971,497,971,496,496,496,496,496,496,496',
'496,496,496,496,496,317,496,496,496,320,496,496,482,496,496,496,758',
'758,758,758,758,758,758,758,758,758,758,300,758,758,14,478,758,758,300',
'496,940,14,496,453,943,496,496,300,944,496,14,496,758,945,758,496,758',
'758,946,758,758,758,758,758,496,758,947,452,949,496,496,496,496,46,496',
'496,496,496,451,7,46,450,496,496,325,758,329,438,428,46,496,420,496',
'496,496,563,563,563,563,563,563,330,972,301,563,563,973,974,1,563,301',
'563,563,563,563,563,563,563,411,301,410,408,404,563,563,563,563,563',
'563,563,332,869,563,869,869,869,985,869,563,563,563,563,563,563,563',
'563,563,563,563,563,402,563,563,563,987,563,563,988,563,563,563,753',
'753,753,753,753,753,753,753,753,753,753,725,753,753,871,989,753,753',
'725,563,990,871,563,725,991,563,563,725,992,563,871,563,753,995,753',
'563,753,753,399,753,753,753,753,753,563,753,393,349,347,563,563,563',
'563,1000,563,563,563,563,1001,343,342,1012,563,563,,753,,,,,563,,563',
'563,563,566,566,566,566,566,566,,,,566,566,,,,566,,566,566,566,566,566',
'566,566,290,290,290,290,290,566,566,566,566,566,566,566,,,566,6,6,6',
'6,6,566,566,566,566,566,566,566,566,566,566,566,566,,566,566,566,,566',
'566,,566,566,566,763,763,763,763,763,763,763,763,763,763,763,,763,763',
',,763,763,,566,,,566,,,566,566,,,566,,566,763,,763,566,763,763,,763',
'763,763,763,763,566,763,,,,566,566,566,566,,566,566,566,566,,,,,566',
'566,,763,,,,,566,,566,566,566,845,845,845,845,845,845,,,,845,845,,,',
'845,,845,845,845,845,845,845,845,495,495,495,495,495,845,845,845,845',
'845,845,845,,,845,,,,,,845,845,845,845,845,845,845,845,845,845,845,845',
',845,845,845,,845,845,,845,845,845,765,765,765,765,765,765,765,765,765',
'765,765,,765,765,,,765,765,,845,,,845,,,845,845,,,845,,845,765,,765',
'845,765,765,,765,765,765,765,765,845,765,,,,845,845,845,845,,845,845',
'845,845,,,,,845,845,,765,,,,,845,,845,845,845,839,839,839,839,839,839',
',,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,,839,839,839,839',
'839,839,839,,,839,,,,,,839,839,839,839,839,839,839,839,839,839,839,839',
',839,839,839,,839,839,,839,839,839,426,426,426,426,426,426,426,426,426',
'426,426,,426,426,,,426,426,,839,,,839,,,839,839,,,839,,839,426,,426',
'839,426,426,,426,426,426,426,426,839,426,,,,839,839,839,839,,839,839',
'839,839,,,,,839,839,,426,,,,,839,,839,839,839,298,298,298,298,298,298',
',,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298,298,298',
'298,298,298,,,298,,,,,,298,298,298,298,298,298,298,298,298,298,298,298',
',298,298,298,,298,298,,298,298,298,471,471,471,471,471,471,471,471,471',
'471,471,,471,471,,,471,471,,298,,,298,,,298,298,,,298,,298,471,,471',
'298,471,471,,471,471,471,471,471,298,471,,,,298,298,298,298,,298,298',
'298,298,,,,,298,298,471,471,,,,,298,,298,298,298,836,836,836,836,836',
'836,,,,836,836,,,,836,,836,836,836,836,836,836,836,,,,,,836,836,836',
'836,836,836,836,,,836,,,,,,836,836,836,836,836,836,836,836,836,836,836',
'836,,836,836,836,,836,836,,836,836,836,274,274,274,274,274,274,274,274',
'274,274,274,,274,274,,,274,274,,836,,,836,,,836,836,,,836,,836,274,',
'274,836,274,274,,274,274,274,274,274,836,274,,,,836,836,836,836,,836',
'836,836,836,,,,,836,836,,274,,,,,836,,836,836,836,293,293,293,293,293',
'293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,,,293,293,293',
'293,293,293,293,,,293,,,,,,293,293,293,293,293,293,293,293,293,293,293',
'293,,293,293,293,,293,293,,293,293,293,674,674,674,674,674,674,674,674',
'674,674,674,,674,674,,,674,674,,293,,,293,,,293,293,,,293,,293,674,',
'674,293,674,674,,674,674,674,674,674,293,674,,,,293,293,293,293,,293',
'293,293,293,,,,,293,293,,674,,,,,293,,293,293,293,835,835,835,835,835',
'835,,,,835,835,,,,835,,835,835,835,835,835,835,835,,,,,,835,835,835',
'835,835,835,835,,,835,,,,,,835,835,835,835,835,835,835,835,835,835,835',
'835,,835,835,835,,835,835,,835,835,835,21,21,21,21,21,21,21,21,21,21',
'21,,21,21,,,21,21,,835,,,835,,,835,835,,,835,,835,21,,21,835,21,21,',
'21,21,21,21,21,835,21,,,,835,835,835,835,,835,835,835,835,,,,,835,835',
',21,,,,,835,,835,835,835,936,936,936,936,936,936,,,,936,936,,,,936,',
'936,936,936,936,936,936,936,,,,,,936,936,936,936,936,936,936,,,936,',
',,,,936,936,936,936,936,936,936,936,936,936,936,936,,936,936,936,,936',
'936,,936,936,936,854,854,854,854,854,854,854,854,854,854,854,,854,854',
',,854,854,,936,,,936,,,936,936,,,936,,936,854,,854,936,854,854,,854',
'854,854,854,854,936,854,,,,936,936,936,936,,936,936,936,936,,,,,936',
'936,,854,,,,,936,,936,936,936,803,803,803,803,803,803,,,,803,803,,,',
'803,,803,803,803,803,803,803,803,,,,,,803,803,803,803,803,803,803,,',
'803,,,,,,803,803,803,803,803,803,803,803,803,803,803,803,,803,803,803',
',803,803,,803,803,803,857,857,857,857,857,857,857,857,857,857,857,,857',
'857,,,857,857,,803,,,803,,,803,803,,,803,,803,857,,857,803,857,857,',
'857,857,857,857,857,803,857,,,,803,803,803,803,,803,803,803,803,,,,',
'803,803,,857,,,,,803,,803,803,803,791,791,791,791,791,791,,,,791,791',
',,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791',
',,791,,,,,,791,791,791,791,791,791,791,791,791,791,791,791,,791,791',
'791,,791,791,,791,791,791,760,760,760,760,760,760,760,760,760,760,760',
',760,760,,,760,760,,791,,,791,,,791,791,,,791,,791,760,,760,791,760',
'760,,760,760,760,760,760,791,760,,,,791,791,791,791,,791,791,791,791',
',,,,791,791,,760,,,,,791,,791,791,791,229,229,229,229,229,229,,,,229',
'229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229',
'229,,,229,,,,,,229,229,229,229,229,229,229,229,229,229,229,229,,229',
'229,229,,229,229,,229,229,229,767,767,767,767,767,767,767,767,767,767',
'767,,767,767,,,767,767,,229,,,229,,,229,229,,,229,,229,767,,767,229',
'767,767,,767,767,767,767,767,229,767,,,,229,229,229,229,,229,229,229',
'229,,,,,229,229,,767,,,,,229,,229,229,229,951,951,951,951,951,951,,',
',951,951,,,,951,,951,951,951,951,951,951,951,,,,,,951,951,951,951,951',
'951,951,,,951,,,,,,951,951,951,951,951,951,951,951,951,951,951,951,',
'951,951,951,,951,951,,951,951,951,517,517,517,517,517,517,517,517,517',
'517,517,,517,517,,,517,517,,951,,,951,,,951,951,,,951,,951,517,,517',
'951,517,517,,517,517,517,517,517,951,517,,,,951,951,951,951,,951,951',
'951,951,,,,,951,951,,517,,,,,951,,951,951,951,957,957,957,957,957,957',
',,,957,957,,,,957,,957,957,957,957,957,957,957,,687,,,,957,957,957,957',
'957,957,957,687,548,957,548,548,548,,548,957,957,957,957,957,957,957',
'957,957,957,957,957,,957,957,957,,957,957,,957,957,957,468,,687,687',
',,448,687,548,950,,950,950,950,,950,,548,,957,,,957,,,957,957,,449,957',
',957,468,,,957,468,468,448,468,468,,448,448,957,,,950,,957,957,957,957',
',957,957,957,957,,,449,,957,957,449,449,,,,,957,,957,957,957,645,645',
'645,645,645,645,,,,645,645,,,,645,,645,645,645,645,645,645,645,,,,,',
'645,645,645,645,645,645,645,,827,645,827,827,827,,827,645,645,645,645',
'645,645,645,645,645,645,645,645,,645,645,645,,645,645,,645,645,645,699',
',699,699,699,,699,984,827,984,984,984,,984,,,,827,,645,,,645,,,645,645',
',,645,900,645,900,900,900,645,900,,699,,,,,,645,984,,699,,645,645,645',
'645,,645,645,645,645,,,,,645,645,,,,,900,,645,,645,645,645,650,650,650',
'650,650,650,,,,650,650,,,,650,,650,650,650,650,650,650,650,,,,,,650',
'650,650,650,650,650,650,,,650,,,,,,650,650,650,650,650,650,650,650,650',
'650,650,650,,650,650,650,,650,650,,650,650,650,458,,,,,,,,,,,,,,,,458',
'458,,650,,,650,,,650,650,,,650,,650,458,,458,650,458,458,,458,458,,',
'458,650,458,,,,650,650,650,650,,650,650,650,650,,,,,650,650,,,,,,,650',
',650,650,650,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33',
',,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33',
'33,,33,33,33,,33,33,,33,33,33,462,462,462,462,462,462,462,,,462,462',
',,,,,462,462,,33,,,33,,,33,33,,,33,,33,462,,462,33,462,462,,462,462',
'462,462,462,33,462,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,,,,,,33,,33',
'33,33,651,651,651,651,651,651,,,,651,651,,,,651,,651,651,651,651,651',
'651,651,,,,,,651,651,651,651,651,651,651,,,651,,,,,,651,651,651,651',
'651,651,651,651,651,651,651,651,,651,651,651,,651,651,,651,651,651,461',
',,,,,,,,,,,,,,,461,461,,651,,,651,,,651,651,,,651,,651,461,,461,651',
'461,461,,461,461,,,461,651,461,,,,651,651,651,651,,651,651,651,651,',
',,,651,651,,,,,,,651,,651,651,651,206,206,206,206,206,206,,,,206,206',
',,,206,,206,206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206',
',,206,,,,,,206,206,206,206,206,206,206,206,206,206,206,206,,206,206',
'206,,206,206,,206,206,206,463,463,463,463,463,463,463,,,463,463,,,,',
',463,463,,206,,,206,,,206,206,,,206,,206,463,,463,206,463,463,,463,463',
'463,463,463,206,463,,,,206,206,206,206,,206,206,206,206,,,,,206,206',
',,,,,,206,,206,206,206,684,684,684,684,684,684,,,,684,684,,,,684,,684',
'684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,',
'684,684,684,684,684,684,684,684,684,684,684,684,,684,684,684,,684,684',
',684,684,684,460,,,,,,,,,,,,,,,,460,460,,684,,,684,,,684,684,,,684,',
'684,460,,460,684,460,460,,460,460,,,460,684,460,,,,684,684,684,684,',
'684,684,684,684,,,,,684,684,,,,,,,684,,684,684,684,685,685,685,685,685',
'685,,,,685,685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685',
'685,685,685,685,,,685,,,,,,685,685,685,685,685,685,685,685,685,685,685',
'685,,685,685,685,,685,685,,685,685,685,464,464,464,464,464,464,464,',
',464,464,,,,,,464,464,,685,,,685,,,685,685,,,685,,685,464,,464,685,464',
'464,,464,464,464,464,464,685,464,,,,685,685,685,685,,685,685,685,685',
',,,,685,685,,,,,,,685,,685,685,685,121,121,121,121,121,121,,,,121,121',
',,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121',
',,121,,,,,,121,121,121,121,121,121,121,121,121,121,121,121,,121,121',
'121,,121,121,,121,121,121,465,465,465,465,465,465,465,,,465,465,,,,',
',465,465,,121,,,121,,,121,121,,,121,,121,465,,465,121,465,465,,465,465',
'465,465,465,121,465,,,,121,121,121,121,,121,121,121,121,,,,,121,121',
',,,,,,121,,121,121,121,959,959,959,959,959,959,,,,959,959,,,,959,,959',
'959,959,959,959,959,959,,,,,,959,959,959,959,959,959,959,,,959,,,,,',
'959,959,959,959,959,959,959,959,959,959,959,959,,959,959,959,,959,959',
',959,959,959,466,466,466,466,466,466,466,,,466,466,,,,,,466,466,,959',
',,959,,,959,959,,,959,,959,466,,466,959,466,466,,466,466,466,466,466',
'959,466,,,,959,959,959,959,,959,959,959,959,,,,,959,959,,,,,,,959,,959',
'959,959,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,',
'0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,,0,0,0,459,,,,,,,,,,,,,,',
',459,459,,0,,,0,,,0,0,,,0,,0,459,,459,0,459,459,,459,459,,,459,0,459',
',,,0,0,0,0,,0,0,0,0,,,,,0,0,,,,,,,0,,0,0,0,728,728,728,728,728,728,',
',,728,728,,,,728,,728,728,728,728,728,728,728,,,,,,728,728,728,728,728',
'728,728,,,728,,,,,,728,728,728,728,728,728,728,728,728,728,728,728,',
'728,728,728,,728,728,,728,728,728,469,469,469,469,469,469,469,,,469',
'469,,,,,,469,469,,728,,,728,,,728,728,,,728,,728,469,,469,728,469,469',
',469,469,469,469,469,728,469,,,,728,728,728,728,,728,728,728,728,,,',
',728,728,,,,,,,728,,728,728,728,733,733,733,733,733,733,,,,733,733,',
',,733,,733,733,733,733,733,733,733,,,,,,733,733,733,733,733,733,733',
',,733,,,,,,733,733,733,733,733,733,733,733,733,733,733,733,,733,733',
'733,,733,733,,733,733,733,470,470,470,470,470,470,470,470,,470,470,',
',,,,470,470,,733,,,733,,,733,733,,,733,,733,470,,470,733,470,470,,470',
'470,470,470,470,733,470,,,,733,733,733,733,,733,733,733,733,,,,,733',
'733,,,,,,,733,,733,733,733,743,743,743,743,743,743,,,,743,743,,,,743',
',743,743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743,,,743',
',,,,,743,743,743,743,743,743,743,743,743,743,743,743,,743,743,743,,743',
'743,,743,743,743,447,447,447,447,447,447,447,447,447,447,447,,447,447',
',,447,447,,743,,,743,,,743,743,,,743,,743,447,,447,743,447,447,,447',
'447,447,447,447,743,447,,,,743,743,743,743,,743,743,743,743,,,,,743',
'743,,,,44,44,44,743,44,743,743,743,44,44,,,,44,,44,44,44,44,44,44,44',
',,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44',
'44,44,,44,44,,44,44,44,457,457,457,457,457,457,457,,,457,457,,,,,,457',
'457,,44,,,44,,,44,44,,,44,,,457,,457,44,457,457,,457,457,457,457,457',
'44,457,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,43,43,43,44,43,44,44',
'44,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43',
',,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,,43,43,43,446,446',
'446,446,446,446,446,446,446,446,446,,446,446,,,446,446,,43,,,43,,,43',
'43,,,43,,,446,,446,43,446,446,,446,446,446,446,446,43,446,,,,43,43,43',
'43,,43,43,43,43,,,,,43,43,,,,58,58,58,43,58,43,43,43,58,58,,,,58,,58',
'58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58',
'58,58,58,58,58,,58,58,58,,58,58,,58,58,58,456,,,,,,,,,,,,,,,,456,456',
',58,,,58,,,58,58,,,58,,,456,,,58,456,456,,456,456,,,,58,,,,,58,58,58',
'58,,58,58,58,58,,,,,58,58,,,,59,59,59,58,59,58,58,58,59,59,,,,59,,59',
'59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59',
'59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,454,,,,,,,,,,,,,,,,454,454',
',59,,,59,,,59,59,,,59,,59,454,,454,59,454,454,59,454,454,,,,59,,,,,59',
'59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,',
'60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60',
'60,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60,60,455,,,,,,,,,,,,,,',
',455,455,,60,,,60,,,60,60,,,60,,,455,,455,60,455,455,60,455,455,,,,60',
',,,,60,60,60,60,,60,60,60,60,,,,,60,60,,,,729,729,729,60,729,60,60,60',
'729,729,,,,729,,729,729,729,729,729,729,729,,,,,,729,729,729,729,729',
'729,729,,,729,,,,,,,729,,,729,729,729,729,729,729,729,729,,729,729,729',
',729,729,,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,,729,',
',,,,729,,,,,,,,,729,,,,,729,729,729,729,,729,729,729,729,,,,,729,729',
',,,63,63,63,729,63,729,729,729,63,63,,,,63,,63,63,63,63,63,63,63,,,',
',,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63',
'63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63',
',,,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,64,64,64,63,64',
'63,63,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64',
',,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,,64,64,64,',
',,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64',
'64,64,,64,64,64,64,,,,,64,64,,,,67,67,67,64,67,64,64,64,67,67,,,,67',
',67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67',
'67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,',
',67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,,67,67,67,67,,,',
',67,67,67,,,,,67,67,,67,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68',
'68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68',
'68,68,68,,68,68,68,,68,68,,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,',
',68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,69,69',
'69,68,69,68,68,68,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69',
'69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,',
',69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69',
'69,69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,',
'70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70',
'70,70,70,70,70,70,70,,70,70,70,,70,70,,,,70,,,,,,,,,,,,,,,,,,,,70,,',
'70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70',
',,,42,42,42,70,42,70,70,70,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42',
'42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42',
',42,42,,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,',
',,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,723,723,723,42,723',
'42,42,42,723,723,,,,723,,723,723,723,723,723,723,723,,,,,,723,723,723',
'723,723,723,723,,,723,,,,,,,723,,,723,723,723,723,723,723,723,723,,723',
'723,723,,723,723,,723,723,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723,723',
',,723,,,,,,723,,,,,,,,,723,,,,,723,723,723,723,,723,723,723,723,,,,',
'723,723,,,,754,754,754,723,754,723,723,723,754,754,,,,754,,754,754,754',
'754,754,754,754,,,,,,754,754,754,754,754,754,754,,,754,,,,,,,754,,,754',
'754,754,754,754,754,754,754,,754,754,754,,754,754,,754,754,754,,,,,',
',,,,,,,,,,,,,,754,,,754,,,754,754,,,754,,,,,,754,,,,,,,,,754,,,,,754',
'754,754,754,,754,754,754,754,,,,,754,754,,,,768,768,768,754,768,754',
'754,754,768,768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768',
'768,768,768,768,,,768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768',
'768,768,,768,768,,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768',
',,768,,,,,,768,,,,,,,,,768,,,,,768,768,768,768,,768,768,768,768,,,,',
'768,768,,,,697,697,697,768,697,768,768,768,697,697,,,,697,,697,697,697',
'697,697,697,697,,,,,,697,697,697,697,697,697,697,,,697,,,,,,,697,,,697',
'697,697,697,697,697,697,697,,697,697,697,,697,697,,697,697,697,,,,,',
',,,,,,,,,,,,,,697,,,697,,,697,697,,,697,,,,,,697,,,,,,,,,697,,,,,697',
'697,697,697,,697,697,697,697,,,,,697,697,,,,,,,697,,697,697,697,111',
'111,111,111,111,,,,111,111,,,,111,,111,111,111,111,111,111,111,,,,,',
'111,111,111,111,111,111,111,,,111,,,,,,111,111,111,111,111,111,111,111',
'111,111,111,111,,111,111,111,,111,111,,111,111,111,,,,,,,,,,,,,,,,,',
',,111,,,111,,,111,111,,,111,,111,,,,111,,,,,,,,,111,,,,,111,111,111',
'111,,111,111,111,111,,,,,111,111,,,,,,111,111,,111,111,111,116,116,116',
',116,,,,116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116',
'116,116,116,116,,,116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116',
'116,116,,116,116,,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116',
',,116,,,,,,116,,,,,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,',
'116,116,,,,117,117,117,116,117,116,116,116,117,117,,,,117,,117,117,117',
'117,117,117,117,,,,,,117,117,117,117,117,117,117,,,117,,,,,,,117,,,117',
'117,117,117,117,117,117,117,,117,117,117,,117,117,,117,117,117,,,,,',
',,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,,,,,117,,,,,,,,,117,,,,,117',
'117,117,117,,117,117,117,117,,,,,117,117,,,,118,118,118,117,118,117',
'117,117,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118',
'118,118,118,118,,,118,,,,,,,118,,,118,118,118,118,118,118,118,118,,118',
'118,118,,118,118,,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118',
',,118,,,,,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,',
'118,118,,,,119,119,119,118,119,118,118,118,119,119,,,,119,,119,119,119',
'119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119',
'119,119,119,119,119,119,119,,119,119,119,,119,119,,119,119,119,,,,,',
',,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119',
'119,119,119,,119,119,119,119,,,,,119,119,,,,,,,119,,119,119,119,120',
'120,120,120,120,,,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,',
'120,120,120,120,120,120,120,,,120,,,,,,120,120,,120,120,120,120,120',
'120,120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,',
',,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,,,120,,,,,120,120,120',
'120,,120,120,120,120,,,,,120,120,,,,769,769,769,120,769,120,120,120',
'769,769,,,,769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769',
'769,769,,,769,,,,,,,769,,,769,769,769,769,769,769,769,769,,769,769,769',
',769,769,,769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,',
',,,,769,,,,,,,,,769,,,,,769,769,769,769,,769,769,769,769,,,,,769,769',
',,,770,770,770,769,770,769,769,769,770,770,,,,770,,770,770,770,770,770',
'770,770,,,,,,770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770',
'770,770,770,770,770,,770,770,770,,770,770,,770,770,770,,,,,,,,,,,,,',
',,,,,,770,,,770,,,770,770,,,770,,,,,,770,,,,,,,,,770,,,,,770,770,770',
'770,,770,770,770,770,,,,,770,770,,,,771,771,771,770,771,770,770,770',
'771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771,771',
'771,771,,,771,,,,,,,771,,,771,771,771,771,771,771,771,771,,771,771,771',
',771,771,,771,771,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,',
',,,,771,,,,,,,,,771,,,,,771,771,771,771,,771,771,771,771,,,,,771,771',
',,,35,35,35,771,35,771,771,771,35,35,,,,35,,35,35,35,35,35,35,35,,,',
',,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35',
'35,,35,35,,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,965,,965,965',
'965,965,965,,,,,,,,,,965,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,',
'965,35,,35,35,35,207,207,207,,207,965,965,,207,207,965,,,207,,207,207',
'207,207,207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207',
',,207,207,207,207,207,207,207,207,,207,207,207,,207,207,,207,207,207',
',,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,207,,,,207,,,,,,,,,207',
',,,,207,207,207,207,,207,207,207,207,,,,,207,207,,,,208,208,208,207',
'208,207,207,207,208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208',
'208,208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208',
'208,,208,208,208,,208,208,,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208',
',,208,208,,,208,,,,,,208,,,,,,,,,208,,,,,208,208,208,208,,208,208,208',
'208,,,,,208,208,,,,209,209,209,208,209,208,208,208,209,209,,,,209,,209',
'209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,',
',209,,,209,209,209,209,209,209,209,209,209,209,209,209,,209,209,,209',
'209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,209,,209,,209',
',,209,,,,,,209,,,,,209,209,209,209,,209,209,209,209,,,,,209,209,,,,678',
'678,678,209,678,209,209,209,678,678,,,,678,,678,678,678,678,678,678',
'678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678',
'678,678,678,678,,678,678,678,,678,678,,678,678,678,,,,,,,,,,,,,,,,,',
',,678,,,678,,,678,678,,,678,,678,,,,678,,,,,,,,,678,,,,,678,678,678',
'678,,678,678,678,678,,,,,678,678,,,,673,673,673,678,673,678,678,678',
'673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673,673',
'673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673,673,,673,673,673',
',673,673,,,,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,,',
',,,,,,,,,,,,673,673,673,673,,673,673,673,673,,,,,673,673,,,,212,212',
'212,673,212,673,673,673,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212',
',,212,,,212,212,,,212,,,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212',
'212,212,212,,,,,212,212,,,,213,213,213,212,213,212,212,212,213,213,',
',,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213,213,213,213',
',,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213,213,213,,213',
'213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,213,',
',,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,,,,,213,213,',
',,214,214,214,213,214,213,213,213,214,214,,,,214,,214,214,214,214,214',
'214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214',
'214,214,214,214,214,,214,214,214,,214,214,,214,214,214,,,,,,,,,,,,,',
',,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214',
'214,,214,214,214,214,,,,,214,214,,,,215,215,215,214,215,214,214,214',
'215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215',
'215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215',
',215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,',
',,,,215,,,,,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215,215',
',,,216,216,216,215,216,215,215,215,216,216,,,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,',
',,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,,216,,,,,216,216,216',
'216,,216,216,216,216,,,,,216,216,,,,217,217,217,216,217,216,216,216',
'217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217',
'217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217',
',217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,',
',,,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217,,,,,217,217',
'217,,,662,662,662,217,662,217,217,217,662,662,,,,662,,662,662,662,662',
'662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662',
'662,662,662,662,662,662,,662,662,662,,662,662,,,,662,,,,,,,,,,,,,,,',
',,,,662,,,662,,,662,662,,,662,,,,,,,,,,,,,,,,,,,,662,662,662,662,,662',
'662,662,662,,,,,662,662,,,,656,656,656,662,656,662,662,662,656,656,',
',,656,,656,656,656,656,656,656,656,,,,,,656,656,656,656,656,656,656',
',,656,,,,,,,656,,,656,656,656,656,656,656,656,656,,656,656,656,,656',
'656,,656,656,656,,,,,,,,,,,,,,,,,,,,656,,,656,,,656,656,,,656,,,,,,656',
',,,,,,,,656,,,,,656,656,656,656,,656,656,656,656,,,,,656,656,,,,34,34',
'34,656,34,656,656,656,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34',
'34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34',
',,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34',
'34,34,34,,34,34,34,34,,,,,34,34,,,,31,31,31,34,31,34,34,34,31,31,,,',
'31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31',
'31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31,,,,,,,,,,,,,,,,,,',
',31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31',
'31,31,,,,,31,31,,,,30,30,30,31,30,31,31,31,30,30,,,,30,,30,30,30,30',
'30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30',
'30,30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30',
',,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30',
',,,29,29,29,30,29,30,30,30,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29',
'29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29',
',29,29,,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29',
',,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,773,773,773,29',
'773,29,29,29,773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773',
'773,773,773,773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773',
',773,773,773,,773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773',
'773,,,773,,,,,,773,,,,,,,,,773,,,,,773,773,773,773,,773,773,773,773',
',,,,773,773,,,,228,228,228,773,228,773,773,773,228,228,,,,228,,228,228',
'228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228',
',,228,228,228,228,228,228,228,228,,228,228,228,,228,228,,228,228,228',
',,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,,228,,',
',,228,228,228,228,,228,228,228,228,,,,,228,228,,,,785,785,785,228,785',
'228,228,228,785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785',
'785,785,785,785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785',
',785,785,785,,785,785,,,,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785',
',,785,,,,,,,,,,,,,,,,,,,,785,785,785,785,,785,785,785,785,,,,,785,785',
',,,632,632,632,785,632,785,785,785,632,632,,,,632,,632,632,632,632,632',
'632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632',
'632,632,632,632,632,,632,632,632,,632,632,,632,632,632,,,,,,,,,,,,,',
',,,,,,632,,,632,,,632,632,,,632,,,,,,632,,,,,,,,,632,,,,,632,632,632',
'632,,632,632,632,632,,,,,632,632,,,,231,231,231,632,231,632,632,632',
'231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231',
'231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231',
',231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,',
',,,,231,,,,,,,,,231,,,,,231,231,231,231,,231,231,231,231,,,,,231,231',
',,,232,232,232,231,232,231,231,231,232,232,,,,232,,232,232,232,232,232',
'232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232',
'232,232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,',
',,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,,232,,,,,232,232,232',
'232,,232,232,232,232,,,,,232,232,,,,233,233,233,232,233,232,232,232',
'233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233',
'233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233',
',233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,',
',,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233,233,,,,,233,233',
',,,234,234,234,233,234,233,233,233,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234',
'234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,',
',,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234',
'234,,234,234,234,234,,,,,234,234,,,,235,235,235,234,235,234,234,234',
'235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235',
'235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235',
',235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,',
',,,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235',
',,,236,236,236,235,236,235,235,235,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,',
',,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236',
'236,,236,236,236,236,,,,,236,236,,,,237,237,237,236,237,236,236,236',
'237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237',
'237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237',
',237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,',
',,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237',
',,,238,238,238,237,238,237,237,237,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,',
',,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238',
'238,,238,238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238',
'239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,',
',,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,240,240,240,239,240,239,239,239,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,',
',,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240',
'240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240',
'241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241',
',241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,',
',,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',,,242,242,242,241,242,241,241,241,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,',
',,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242',
'242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242,242,242',
'243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243',
'243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243',
',243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,',
',,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243',
',,,244,244,244,243,244,243,243,243,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,',
',,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244',
'244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244,244,244',
'245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,',
',,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,246,246,246,245,246,245,245,245,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,',
',,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,247,247,247,246,247,246,246,246',
'247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247',
'247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,',
',,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,248,248,248,247,248,247,247,247,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,',
',,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248',
'248,,248,248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,',
',,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',,,250,250,250,249,250,249,249,249,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,',
',,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,',
',,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,',
',,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253',
'253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253',
',253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,',
',,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,',
',,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255',
',255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,',
',,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,256,256,256,255,256,255,255,255,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,',
',,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,631,631,631,256,631,256,256,256',
'631,631,,,,631,,631,631,631,631,631,631,631,,,,,,631,631,631,631,631',
'631,631,,,631,,,,,,,631,,,631,631,631,631,631,631,631,631,,631,631,631',
',631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,',
',,,,631,,,,,,,,,631,,,,,631,631,631,631,,631,631,631,631,,,,,631,631',
',,,628,628,628,631,628,631,631,631,628,628,,,,628,,628,628,628,628,628',
'628,628,,,,,,628,628,628,628,628,628,628,,,628,,,,,,,628,,,628,628,628',
'628,628,628,628,628,,628,628,628,,628,628,,628,628,628,,,,,,,,,,,,,',
',,,,,,628,,,628,,,628,628,,,628,,,,,,628,,,,,,,,,628,,,,,628,628,628',
'628,,628,628,628,628,,,,,628,628,,,,263,263,263,628,263,628,628,628',
'263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263',
'263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,263,263,263',
'263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263',
',263,,263,,263,,,263,,,,,,263,,,,,263,263,263,263,,263,263,263,263,',
',,,263,263,,,,264,264,264,263,264,263,263,263,264,264,,,,264,,264,264',
'264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264',
',,264,264,264,264,264,264,264,264,264,264,264,264,,264,264,,264,264',
'264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,264,,264,,264,,,264',
',,,,,264,,,,,264,264,264,264,,264,264,264,264,,,,,264,264,,,,272,272',
'272,264,272,264,264,264,272,272,,,,272,,272,272,272,272,272,272,272',
',,,,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272',
'272,272,272,272,272,272,272,,272,272,,272,272,272,,,,,,,,,,,,,,,,,,',
',272,,,272,,,272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272',
'272,272,,272,272,272,272,,,,,272,272,272,,,627,627,627,272,627,272,272',
'272,627,627,,,,627,,627,627,627,627,627,627,627,,,,,,627,627,627,627',
'627,627,627,,,627,,,,,,,627,,,627,627,627,627,627,627,627,627,,627,627',
'627,,627,627,,627,627,627,,,,,,,,,,,,,,,,,,,,627,,,627,,,627,627,,,627',
',,,,,627,,,,,,,,,627,,,,,627,627,627,627,,627,627,627,627,,,,,627,627',
',,,623,623,623,627,623,627,627,627,623,623,,,,623,,623,623,623,623,623',
'623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623,,,623,623,623',
'623,623,623,623,623,,623,623,623,,623,623,,623,623,623,,,,,,,,,,,,,',
',,,,,,623,,,623,,,623,623,,,623,,,,,,623,,,,,,,,,623,,,,,623,623,623',
'623,,623,623,623,623,,,,,623,623,,,,622,622,622,623,622,623,623,623',
'622,622,,,,622,,622,622,622,622,622,622,622,,,,,,622,622,622,622,622',
'622,622,,,622,,,,,,,622,,,622,622,622,622,622,622,622,622,,622,622,622',
',622,622,,622,622,622,,,,,,,,,,,,,,,,,,,,622,,,622,,,622,622,,,622,',
',,,,622,,,,,,,,,622,,,,,622,622,622,622,,622,622,622,622,,,,,622,622',
',,,279,279,279,622,279,622,622,622,279,279,,,,279,,279,279,279,279,279',
'279,279,,,,,,279,279,279,279,279,279,279,,,279,,,,,,,279,,,279,279,279',
'279,279,279,279,279,,279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,',
',,,,,,279,,,279,,,279,279,,,279,,,,,,279,,,,,,,,,279,,,,,279,279,279',
'279,,279,279,279,279,,,,,279,279,,,,621,621,621,279,621,279,279,279',
'621,621,,,,621,,621,621,621,621,621,621,621,,,,,,621,621,621,621,621',
'621,621,,,621,,,,,,,621,,,621,621,621,621,621,621,621,621,621,621,621',
'621,,621,621,,621,621,621,,,,,,,,,,,,,,,,,,,,621,,,621,,,621,621,,,621',
',,,621,,621,,,621,,,,,,621,,,,,621,621,621,621,,621,621,621,621,,,,',
'621,621,,,,281,281,281,621,281,621,621,621,281,281,,,,281,,281,281,281',
'281,281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,,,281,,,281',
'281,281,281,281,281,281,281,,281,281,281,,281,281,,281,281,281,,,,,',
',,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,,,,,281,,,,,,,,,281,,,,,281',
'281,281,281,,281,281,281,281,,,,,281,281,,,,752,752,752,281,752,281',
'281,281,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752',
'752,752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752',
'752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752',
',,752,,,,,,752,,,,,,,,,752,,,,,752,752,752,752,,752,752,752,752,,,,',
'752,752,,,,284,284,284,752,284,752,752,752,284,284,,,,284,,284,284,284',
'284,284,284,284,,,,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284',
'284,284,284,284,284,284,284,,284,284,284,,284,284,,284,284,284,,,,,',
',,,,,,,,,,,,,,284,,,284,,,284,284,,,284,,,,,,284,,,,,,,,,284,,,,,284',
'284,284,284,,284,284,284,284,,,,,284,284,,,,620,620,620,284,620,284',
'284,284,620,620,,,,620,,620,620,620,620,620,620,620,,,,,,620,620,620',
'620,620,620,620,,,620,,,,,,,620,,,620,620,620,620,620,620,620,620,620',
'620,620,620,,620,620,,620,620,620,,,,,,,,,,,,,,,,,,,,620,,,620,,,620',
'620,,,620,,620,,620,,620,,,620,,,,,,620,,,,,620,620,620,620,,620,620',
'620,620,,,,,620,620,,,,,,,620,,620,620,620,289,289,289,289,289,,,,289',
'289,,,,289,,289,289,289,289,289,289,289,,,,,,289,289,289,289,289,289',
'289,,,289,,,,,,289,289,,289,289,289,289,289,289,289,289,289,,289,289',
'289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289',
',289,,,,289,,,,,,,,,289,,,,,289,289,289,289,,289,289,289,289,,,,,289',
'289,,,,617,617,617,289,617,289,289,289,617,617,,,,617,,617,617,617,617',
'617,617,617,,,,,,617,617,617,617,617,617,617,,,617,,,,,,,617,,,617,617',
'617,617,617,617,617,617,,617,617,617,,617,617,,617,617,617,,,,,,,,,',
',,,,,,,,,,617,,,617,,,617,617,,,617,,,,,,617,,,,,,,,,617,,,,,617,617',
'617,617,,617,617,617,617,,,,,617,617,,,,616,616,616,617,616,617,617',
'617,616,616,,,,616,,616,616,616,616,616,616,616,,,,,,616,616,616,616',
'616,616,616,,,616,,,,,,,616,,,616,616,616,616,616,616,616,616,,616,616',
'616,,616,616,,616,616,616,,,,,,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616',
',616,,,,616,,,,,,,,,616,,,,,616,616,616,616,,616,616,616,616,,,,,616',
'616,,,,833,833,833,616,833,616,616,616,833,833,,,,833,,833,833,833,833',
'833,833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,,,833,,,833,833',
'833,833,833,833,833,833,,833,833,833,,833,833,,833,833,833,,,,,,,,,',
',,,,,,,,,,833,,,833,,,833,833,,,833,,,,,,833,,,,,,,,,833,,,,,833,833',
'833,833,,833,833,833,833,,,,,833,833,,,,20,20,20,833,20,833,833,833',
'20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,',
',,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,,20,20,20,,,,,,,,,',
',,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20',
'20,20,20,,,,,20,20,,,,582,582,582,20,582,20,20,20,582,582,,,,582,,582',
'582,582,582,582,582,582,,,,,,582,582,582,582,582,582,582,,,582,,,,,',
',582,,,582,582,582,582,582,582,582,582,582,582,582,582,,582,582,,582',
'582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582,582,,,582,,582,,582,,582',
',,582,,,,,,582,,,,,582,582,582,582,,582,582,582,582,,,,,582,582,,,,572',
'572,572,582,572,582,582,582,572,572,,,,572,,572,572,572,572,572,572',
'572,,,,,,572,572,572,572,572,572,572,,,572,,,,,,,572,,,572,572,572,572',
'572,572,572,572,572,572,572,572,,572,572,,572,572,572,,,,,,,,,,,,,,',
',,,,,572,,,572,,,572,572,,,572,,572,,572,,572,,,572,,,,,,572,,,,,572',
'572,572,572,,572,572,572,572,,,,,572,572,,,,571,571,571,572,571,572',
'572,572,571,571,,,,571,,571,571,571,571,571,571,571,,,,,,571,571,571',
'571,571,571,571,,,571,,,,,,,571,,,571,571,571,571,571,571,571,571,,571',
'571,571,,571,571,,571,571,571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571,571',
',,571,,571,,,,571,,,,,,,,,571,,,,,571,571,571,571,,571,571,571,571,',
',,,571,571,,,,297,297,297,571,297,571,571,571,297,297,,,,297,,297,297',
'297,297,297,297,297,,,,,,297,297,297,297,297,297,297,,,297,,,,,,,297',
',,297,297,297,297,297,297,297,297,,297,297,297,,297,297,,,,297,,,,,',
',,,,,,,,,,,,,,297,,,297,,,297,297,,,297,,967,,967,967,967,967,967,,',
',,,,,,,967,,297,297,297,297,,297,297,297,297,,,,,297,297,,,,297,,967',
'297,,297,297,297,838,838,838,,838,967,967,,838,838,967,,,838,,838,838',
'838,838,838,838,838,,,,,,838,838,838,838,838,838,838,,,838,,,,,,,838',
',,838,838,838,838,838,838,838,838,,838,838,838,,838,838,,838,838,838',
',,,,,,,,,,,,,,,,,,,838,,,838,,,838,838,,,838,,838,,,,838,,,,,,,,,838',
',,,,838,838,838,838,,838,838,838,838,,,,,838,838,,,,855,855,855,838',
'855,838,838,838,855,855,,,,855,,855,855,855,855,855,855,855,,,,,,855',
'855,855,855,855,855,855,,,855,,,,,,,855,,,855,855,855,855,855,855,855',
'855,855,855,855,855,,855,855,,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855',
',,855,855,,,855,,,,855,,855,,,855,,,,,,855,,,,,855,855,855,855,,855',
'855,855,855,,,,,855,855,,,,856,856,856,855,856,855,855,855,856,856,',
',,856,,856,856,856,856,856,856,856,,,,,,856,856,856,856,856,856,856',
',,856,,,,,,,856,,,856,856,856,856,856,856,856,856,,856,856,856,,856',
'856,,856,856,856,,,,,,,,,,,,,,,,,,,,856,,,856,,,856,856,,,856,,,,,,856',
',,,,,,,,856,,,,,856,856,856,856,,856,856,856,856,,,,,856,856,,,,551',
'551,551,856,551,856,856,856,551,551,,,,551,,551,551,551,551,551,551',
'551,,,,,,551,551,551,551,551,551,551,,,551,,,,,,,551,,,551,551,551,551',
'551,551,551,551,,551,551,551,,551,551,,551,551,551,,,,,,,,,,,,,,,,,',
',,551,,,551,,,551,551,,,551,,,,,,551,,,,,,,,,551,,,,,551,551,551,551',
',551,551,551,551,,,,,551,551,,,,527,527,527,551,527,551,551,551,527',
'527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527,527,527,527,527',
'527,,,527,,,,,,,527,,,527,527,527,527,527,527,527,527,527,527,527,527',
',527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,,527,',
',,,,527,,,527,,,,,,527,,,,,527,527,527,527,,527,527,527,527,,,,,527',
'527,,,,524,524,524,527,524,527,527,527,524,524,,,,524,,524,524,524,524',
'524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524,524',
'524,524,524,524,524,524,524,524,524,524,,524,524,,524,524,524,,,,,,',
',,,,,,,,,,,,,524,,,524,,,524,524,,,524,,524,,,,524,,,524,,,,,,524,,',
',,524,524,524,524,,524,524,524,524,,,,,524,524,,,,339,339,339,524,339',
'524,524,524,339,339,,,,339,,339,339,339,339,339,339,339,,,,,,339,339',
'339,339,339,339,339,,,339,,,,,,,339,,,339,339,339,339,339,339,339,339',
',339,339,339,,339,339,,339,339,339,,,,,,,,,,,,,,,,,,,,339,,,339,,,339',
'339,,,339,,,,,,339,,,,,,,,,339,,,,,339,339,339,339,,339,339,339,339',
',,,,339,339,,,,514,514,514,339,514,339,339,339,514,514,,,,514,,514,514',
'514,514,514,514,514,,,,,,514,514,514,514,514,514,514,,,514,,,,,,,514',
',,514,514,514,514,514,514,514,514,,514,514,514,,514,514,,514,514,514',
',,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,,,,,514,,,,,,,,,514,,',
',,514,514,514,514,,514,514,514,514,,,,,514,514,,,,513,513,513,514,513',
'514,514,514,513,513,,,,513,,513,513,513,513,513,513,513,,,,,,513,513',
'513,513,513,513,513,,,513,,,,,,,513,,,513,513,513,513,513,513,513,513',
',513,513,513,,513,513,,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513',
'513,,,513,,,,,,513,,,,,,,,,513,,,,,513,513,513,513,,513,513,513,513',
',,,,513,513,,,,510,510,510,513,510,513,513,513,510,510,,,,510,,510,510',
'510,510,510,510,510,,,,,,510,510,510,510,510,510,510,,,510,,,,,,,510',
',,510,510,510,510,510,510,510,510,,510,510,510,,510,510,,,,510,,,,,',
',,,,,,,,,,,,,,510,,,510,,,510,510,,,510,,,,,,,,,,,,,,,,,,,,510,510,510',
'510,,510,510,510,510,,,,,510,510,,,,504,504,504,510,504,510,510,510',
'504,504,,,,504,,504,504,504,504,504,504,504,,,,,,504,504,504,504,504',
'504,504,,,504,,,,,,,504,,,504,504,504,504,504,504,504,504,504,504,504',
'504,,504,504,,504,504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504',
',504,,504,,504,,,504,,,,,,504,,,,,504,504,504,504,,504,504,504,504,',
',,,504,504,,,,502,502,502,504,502,504,504,504,502,502,,,,502,,502,502',
'502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,,,,502',
',,502,502,502,502,502,502,502,502,,502,502,502,,502,502,,,,502,,,,,',
',,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,,,,,,,,,,,,,,,,,,,502,502,502',
'502,,502,502,502,502,,,,,502,502,,,,314,314,314,502,314,502,502,502',
'314,314,,,,314,,314,314,314,314,314,314,314,,,,,,314,314,314,314,314',
'314,314,,,314,,,,,,,314,,,314,314,314,314,314,314,314,314,,314,314,314',
',314,314,,,,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,,314,,,,,,,',
',,,,,,,,,,,,314,314,314,314,,314,314,314,314,,,,,314,314,,,,870,870',
'870,314,870,314,314,314,870,870,,,,870,,870,870,870,870,870,870,870',
',,,,,870,870,870,870,870,870,870,,,870,,,,,,,870,,,870,870,870,870,870',
'870,870,870,,870,870,870,,870,870,,,,870,,,,,,,,,,,,,,,,,,,,870,,,870',
',,870,870,,,870,,894,,894,894,894,894,894,,,,,,,,,,894,,870,870,870',
'870,,870,870,870,870,,,,,870,870,,,,,,894,870,,870,870,870,494,494,494',
'494,494,894,894,,494,494,894,,,494,,494,494,494,494,494,494,494,,,,',
',494,494,494,494,494,494,494,,,494,,,,,,494,494,494,494,494,494,494',
'494,494,494,494,494,,494,494,494,,494,494,,494,494,494,,,,,,,,,,,,,',
',,,,,,494,,,494,,,494,494,,,494,,494,,,,494,,,,,,,,,494,,,,,494,494',
'494,494,,494,494,494,494,,,,,494,494,,,,,,494,494,,494,494,494,489,489',
'489,,489,,,,489,489,,,,489,,489,489,489,489,489,489,489,,,,,,489,489',
'489,489,489,489,489,,,489,,,,,,,489,,,489,489,489,489,489,489,489,489',
',489,489,489,,489,489,,489,489,489,,,,,,,,,,,,,,,,,,,,489,,,489,,,489',
'489,,,489,,,,,,489,,,,,,,,,489,,,,,489,489,489,489,,489,489,489,489',
',,,,489,489,,,,487,487,487,489,487,489,489,489,487,487,,,,487,,487,487',
'487,487,487,487,487,,,,,,487,487,487,487,487,487,487,,,487,,,,,,,487',
',,487,487,487,487,487,487,487,487,487,487,487,487,,487,487,,487,487',
'487,,,,,,,,,,,,,,,,,,,,487,,,487,,,487,487,,,487,,,,487,,487,,,487,',
',,,,487,,,,,487,487,487,487,,487,487,487,487,,,,,487,487,,,,322,322',
'322,487,322,487,487,487,322,322,,,,322,,322,322,322,322,322,322,322',
',,,,,322,322,322,322,322,322,322,,,322,,,,,,,322,,,322,322,322,322,322',
'322,322,322,,322,322,322,,322,322,,322,322,322,,,,,,,,,,,,,,,,,,,,322',
',,322,322,,322,322,,,322,,,,,,322,,,,,,,,,322,,,,,322,322,322,322,,322',
'322,322,322,,,,,322,322,,,,882,882,882,322,882,322,322,322,882,882,',
',,882,,882,882,882,882,882,882,882,,,,,,882,882,882,882,882,882,882',
',,882,,,,,,,882,,,882,882,882,882,882,882,882,882,,882,882,882,,882',
'882,,,,882,,,,,,,,,,,,,,,,,,,,882,,,882,,,882,882,,,882,,,,,,,,,,,,',
',,,,,,,882,882,882,882,,882,882,882,882,,,,,882,882,,,,485,485,485,882',
'485,882,882,882,485,485,,,,485,,485,485,485,485,485,485,485,,,,,,485',
'485,485,485,485,485,485,,,485,,,,,,,485,,,485,485,485,485,485,485,485',
'485,485,485,485,485,,485,485,,485,485,485,,,,,,,,,,,,,,,,,,,,485,,,485',
',,485,485,,,485,,485,,485,,485,,,485,,,,,,485,,,,,485,485,485,485,,485',
'485,485,485,,,,,485,485,,,,445,445,445,485,445,485,485,485,445,445,',
',,445,,445,445,445,445,445,445,445,,,,,,445,445,445,445,445,445,445',
',,445,,,,,,,445,,,445,445,445,445,445,445,445,445,,445,445,445,,445',
'445,,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445,,,,,,445',
',,,,,,,,445,,,,,445,445,445,445,,445,445,445,445,,,,,445,445,,,,444',
'444,444,445,444,445,445,445,444,444,,,,444,,444,444,444,444,444,444',
'444,,,,,,444,444,444,444,444,444,444,,,444,,,,,,,444,,,444,444,444,444',
'444,444,444,444,,444,444,444,,444,444,,444,444,444,,,,,,,,,,,,,,,,,',
',,444,,,444,,,444,444,,,444,,,,,,444,,,,,,,,,444,,,,,444,444,444,444',
',444,444,444,444,,,,,444,444,,,,443,443,443,444,443,444,444,444,443',
'443,,,,443,,443,443,443,443,443,443,443,,,,,,443,443,443,443,443,443',
'443,,,443,,,,,,,443,,,443,443,443,443,443,443,443,443,,443,443,443,',
'443,443,,443,443,443,,,,,,,,,,,,,,,,,,,,443,,,443,,,443,443,,,443,,',
',,,443,,,,,,,,,443,,,,,443,443,443,443,,443,443,443,443,,,,,443,443',
',,,441,441,441,443,441,443,443,443,441,441,,,,441,,441,441,441,441,441',
'441,441,,,,,,441,441,441,441,441,441,441,,,441,,,,,,,441,,,441,441,441',
'441,441,441,441,441,441,441,441,441,,441,441,,441,441,441,,,,,,,,,,',
',,,,,,,,,441,,,441,,,441,441,,,441,,441,,441,,441,,,441,,,,,,441,,,',
',441,441,441,441,,441,441,441,441,,,,,441,441,,,,,,,441,,441,441,441',
'5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5',
'5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5',
'5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,975,975,975',
'5,975,5,5,5,975,975,,,,975,,975,975,975,975,975,975,975,,,,,,975,975',
'975,975,975,975,975,,,975,,,,,,,975,,,975,975,975,975,975,975,975,975',
'975,975,975,975,,975,975,,975,975,975,,,,,,,,,,,,,,,,,,,,975,,,975,',
',975,975,,,975,,975,,975,,975,,,975,,,,,,975,,,,,975,975,975,975,,975',
'975,975,975,,,,,975,975,,,,403,403,403,975,403,975,975,975,403,403,',
',,403,,403,403,403,403,403,403,403,,,,,,403,403,403,403,403,403,403',
',,403,,,,,,,403,,,403,403,403,403,403,403,403,403,,403,403,403,,403',
'403,,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403,403,,,403,,,,,,403',
',,,,,,,,403,,,,,403,403,403,403,,403,403,403,403,,,,,403,403,,,,375',
'375,375,403,375,403,403,403,375,375,,,,375,,375,375,375,375,375,375',
'375,,,,,,375,375,375,375,375,375,375,,,375,,,,,,,375,,,375,375,375,375',
'375,375,375,375,,375,375,375,,375,375,,375,375,375,,,,,,,,,,,,,,,,,',
',,375,,,375,,,375,375,,,375,,,,,,375,,,,,,,,,375,,,,,375,375,375,375',
',375,375,375,375,,,,,375,375,,,,359,359,359,375,359,375,375,375,359',
'359,,,,359,,359,359,359,359,359,359,359,,,,,,359,359,359,359,359,359',
'359,,,359,,,,,,,359,,,359,359,359,359,359,359,359,359,,359,359,359,',
'359,359,,359,359,359,,,,,,,,,,,,,,,,,,,,359,,,359,,,359,359,,,359,,',
',,,359,,,,,,,,,359,,,,,359,359,359,359,,359,359,359,359,,,,,359,359',
',,,340,340,340,359,340,359,359,359,340,340,,,,340,,340,340,340,340,340',
'340,340,,,,,,340,340,340,340,340,340,340,,,340,,,,,,,340,,,340,340,340',
'340,340,340,340,340,,340,340,340,,340,340,,340,340,340,,,,,,,,,,,,,',
',,,,,,340,,,340,,,340,340,,,340,,,,,,340,,,,,,,,,340,,,,,340,340,340',
'340,,340,340,340,340,,,,,340,340,,,,518,518,518,340,518,340,340,340',
'518,518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518',
'518,518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518,,518,518,518',
',518,518,,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,',
',,,,518,,,,,,,,,518,,,,,518,518,518,518,,518,518,518,518,,,,,518,518',
',,,,424,,518,,518,518,518,424,424,424,,,424,424,424,,424,,,,,,,,,424',
'424,424,424,,,,,,,,424,424,,424,424,424,424,424,,,,,,,,,,,,,,,,,,,,',
',,,424,424,424,424,424,424,424,424,424,424,424,424,424,424,,,424,424',
'424,,,424,,,424,,,424,424,,424,,424,,424,,424,424,,424,424,424,424,424',
',424,424,424,,,,,,,,,,,,,,424,,,424,424,424,424,56,424,,424,,,,56,56',
'56,,,56,56,56,,56,,,,,,,,,,56,56,56,,,,,,,,56,56,,56,56,56,56,56,,,',
',,,,,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,56,56,56,56,56,56,56,,,56,56',
'56,,,56,,,56,,,56,56,,56,,56,,56,,56,56,,56,56,56,56,56,,56,,56,,,,',
',,,,,,,,,56,,,56,56,56,56,423,56,,56,,,,423,423,423,,,423,423,423,,423',
',,,,,,,,423,423,423,423,,,,,,,,423,423,,423,423,423,423,423,,,,,,,,',
',,,,,,,,,,,,,,,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
',,423,423,423,,,423,,,423,,,423,423,,423,,423,,423,,423,423,,423,423',
'423,423,423,,423,423,423,,,,,,,,,,,,,,423,,,423,423,423,423,28,423,',
'423,,,,28,28,28,,,28,28,28,,28,,,,,,,,,,28,28,,,,,,,,,28,28,,28,28,28',
'28,28,,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28,,28,28,28,28,28',
',28,473,28,,,,,,473,473,473,,,473,473,473,28,473,,28,28,,28,,28,,473',
'473,,,,,,,,,,473,473,,473,473,473,473,473,,,,,,,,,,,,,,,,,,643,,643',
'643,643,643,643,,,,,,,,,,643,473,,414,,,,,473,,414,414,414,473,473,414',
'414,414,,414,,,643,,,,,,414,414,414,643,643,643,643,,473,473,643,414',
'414,,414,414,414,414,414,,,,,473,,,473,,,,,473,,,,,643,,,,,,414,414',
'414,414,414,414,414,414,414,414,414,414,414,414,,,414,414,414,,,414',
',414,414,,,414,414,,414,,414,,414,,414,414,,414,414,414,414,414,,414',
'414,414,,,,,,,,,,,,,,414,,27,414,414,,414,,414,27,27,27,,,27,27,27,',
'27,,,,,,,,,27,27,27,,,,,,,,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,',
',,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27',
',,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27,,,,,,,,,,,,,,27',
',,27,27,,27,,27,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9',
'9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,,9,9,,9,9,9,9,9',
'9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9',
',,,,,,,,,,,,,9,394,394,394,394,394,394,394,394,394,394,394,394,394,394',
'394,394,394,394,394,394,394,394,394,394,,,,394,394,394,394,394,394,394',
'394,394,394,,,,,,394,394,394,394,394,394,394,394,394,,,394,,,,,,,,,394',
'394,,394,394,394,394,394,394,394,,,394,394,,,,394,394,394,394,,,,,,',
',,,,,,,394,394,,394,394,394,394,394,394,394,394,394,394,394,394,,,394',
'394,,,,,,,,,,,,,,394,613,613,613,613,613,613,613,613,613,613,613,613',
'613,613,613,613,613,613,613,613,613,613,613,613,,,,613,613,613,613,613',
'613,613,613,613,613,,,,,,613,613,613,613,613,613,613,613,613,,,613,',
',,,,,,,613,613,,613,613,613,613,613,613,613,,,613,613,,,,613,613,613',
'613,,,,,,,,,,,,,,613,613,,613,613,613,613,613,613,613,613,613,613,613',
'613,,,613,613,,,,,,,,,,,,,,613,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,',
',8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8',
'8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,',
',,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,,,71,71,,71,71,71,71',
'71,71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71',
'71,71,71,71,71,71,71,,,71,736,736,736,736,736,736,736,736,736,736,736',
'736,736,736,736,736,736,736,736,736,736,736,736,736,,,,736,736,736,736',
'736,736,736,736,736,736,,,,,,736,736,736,736,736,736,736,736,736,,,736',
',,,,,,,,736,736,,736,736,736,736,736,736,736,,,736,736,,,,736,736,736',
'736,,,,,,,,,,,,,,736,736,,736,736,736,736,736,736,736,736,736,736,736',
'736,977,977,736,,977,,,,,,,,,977,977,,977,977,977,977,977,977,977,,',
'977,977,,,,977,977,977,977,,,,,,977,,,,,,,,977,977,,977,977,977,977',
'977,977,977,977,977,977,977,977,516,516,977,,516,,,,,,,,,516,516,,516',
'516,516,516,516,516,516,,,516,516,,,,516,516,516,516,,,,,,516,,,,,,',
',516,516,,516,516,516,516,516,516,516,516,516,516,516,516,515,515,516',
',515,,,,,,,,,515,515,,515,515,515,515,515,515,515,,,515,515,,,,515,515',
'515,515,,,,,,515,,,,,,,,515,515,,515,515,515,515,515,515,515,515,515',
'515,515,515,440,440,515,,440,,,,,,,,,440,440,,440,440,440,440,440,440',
'440,,,440,440,,,,440,440,440,440,,,,,,440,,,,,,,,440,440,,440,440,440',
'440,440,440,440,440,440,440,440,440,211,211,440,,211,,,,,,,,,211,211',
',211,211,211,211,211,211,211,,,211,211,,,,211,211,211,211,,,,,,211,',
',,,,,,211,211,,211,211,211,211,211,211,211,211,211,211,211,211,506,506',
'211,,506,,,,,,,,,506,506,,506,506,506,506,506,506,506,,,506,506,,,,506',
'506,506,506,,,,,,506,,,,,,,,506,506,,506,506,506,506,506,506,506,506',
'506,506,506,506,505,505,506,,505,,,,,,,,,505,505,,505,505,505,505,505',
'505,505,,,505,505,,,,505,505,505,505,,,,,,505,,,,,,,,505,505,,505,505',
'505,505,505,505,505,505,505,505,505,505,210,210,505,,210,,,,,,,,,210',
'210,,210,210,210,210,210,210,210,,,210,210,,,,210,210,210,210,,,,,,210',
',,,,,,,210,210,,210,210,210,210,210,210,210,210,210,210,210,210,439',
'439,210,,439,,,,,,,,,439,439,,439,439,439,439,439,439,439,,,439,439',
',,,439,439,439,439,,,,,,439,,,,,,,,439,439,,439,439,439,439,439,439',
'439,439,439,439,439,439,581,581,439,,581,,,,,,,,,581,581,,581,581,581',
'581,581,581,581,,,581,581,,,,581,581,581,581,,,,,,581,,,,,,,,581,581',
',581,581,581,581,581,581,581,581,581,581,581,581,580,580,581,,580,,',
',,,,,,580,580,,580,580,580,580,580,580,580,,,580,580,,,,580,580,580',
'580,,,,,,580,,,,,,,,580,580,,580,580,580,580,580,580,580,580,580,580',
'580,580,932,932,580,,932,,,,,,,,,932,932,,932,932,932,932,932,932,932',
',,932,932,,,,932,932,932,932,,,,,,932,,,,,,,,932,932,,932,932,932,932',
'932,932,932,932,932,932,932,932,259,259,932,,259,,,,,,,,,259,259,,259',
'259,259,259,259,259,259,,,259,259,,,,259,259,259,259,,,,,,,,,,,,,,259',
'259,,259,259,259,259,259,259,259,259,259,259,259,259,573,573,259,,573',
',,,,,,,,573,573,,573,573,573,573,573,573,573,,,573,573,,,,573,573,573',
'573,,,,,,573,,,,,,,,573,573,,573,573,573,573,573,573,573,573,573,573',
'573,573,574,574,573,,574,,,,,,,,,574,574,,574,574,574,574,574,574,574',
',,574,574,,,,574,574,574,574,,,,,,574,,,,,,,,574,574,,574,574,574,574',
'574,574,574,574,574,574,574,574,976,976,574,,976,,,,,,,,,976,976,,976',
'976,976,976,976,976,976,,,976,976,,,,976,976,976,976,,,,,,976,,,,,,',
',976,976,,976,976,976,976,976,976,976,976,976,976,976,976,,691,976,691',
'691,691,691,691,,693,,693,693,693,693,693,963,691,963,963,963,963,963',
',1005,693,1005,1005,1005,1005,1005,,963,,,,,,,691,1005,,,,,,,693,691',
'691,691,691,,,963,691,693,693,693,693,,,1005,693,,963,963,,,,963,,,1005',
'1005,,,589,1005,589,589,589,589,589,892,,892,892,892,892,892,,890,589',
'890,890,890,890,890,,892,888,,888,888,888,888,888,890,,,,,,,589,589',
'888,,,,,892,,589,589,589,589,,,890,589,,892,892,,,,892,888,,890,890',
',,,890,,888,888,888,888,,,915,888,915,915,915,915,915,,861,,861,861',
'861,861,861,979,915,979,979,979,979,979,,,861,,,,,,,979,,,,,,,915,915',
',,,,,,861,915,915,915,915,,,979,915,861,861,861,861,,,,861,,979,979',
',,734,979,734,734,734,734,734,,695,,695,695,695,695,695,,734,335,,335',
'335,335,335,335,695,532,,532,532,532,532,532,,335,,,,,734,,,532,,,,',
'695,734,734,734,734,,,,734,335,335,695,695,,,,695,532,335,335,335,335',
',,,335,532,532,532,532,,,865,532,865,865,865,865,865,,863,,863,863,863',
'863,863,,865,,,,,,,961,863,961,961,961,961,961,,,,,,,,,865,961,,,,,',
',863,,,865,865,,,,865,863,863,863,863,,,961,863,,,,,,,,961,961,961,961',
',,,961' ]
        racc_action_check = arr = ::Array.new(25068, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4558,  1329,   nil,   211,   nil, 21165,  1456,  1187, 23342, 22955,
  1015,   nil,   954,   982,  1177,   419,   884,   551,   nil,   -78,
 17305,  2302,   990,   nil,   303,   nil,   168, 22820, 22497, 10829,
 10697, 10565,   nil,  3571, 10433,  8577,   nil,   657,   430,   420,
   724,   165,  6705,  5245,  5113,   538,  1216,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 22227,   nil,  5377,  5509,
  5641,   -24,   nil,  5905,  6037,   nil,   nil,  6169,  6309,  6441,
  6573, 23471,   nil,   nil,   nil,   nil,   nil,   276,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   111,   nil,   nil,   224,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,
   nil,  7373,   nil,   nil,   nil,   nil,  7513,  7645,  7777,  7909,
  8049,  4276,   nil,   734,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    70,   nil,  3853,  8717,  8849,  8981,
 24081, 23895,  9377,  9509,  9641,  9773,  9905, 10037,   nil,   nil,
  1075,   264,   120,   547,   114,   567,   657,   nil, 11093,  2866,
   674, 11489, 11621, 11753, 11885, 12017, 12149, 12281, 12413, 12545,
 12677, 12809, 12941, 13073, 13205, 13337, 13469, 13601, 13733, 13865,
 13997, 14129, 14261, 14393, 14525, 14657, 14789,   nil,   nil, 24391,
   nil,   nil,   680, 15185, 15317,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 15449,   nil,  2020,   nil,   654,   656,   nil, 15977,
   723, 16241,   nil,   609, 16505,   nil,   nil,   360,   nil, 16777,
  1441,   763,   864,  2161,   889,   932,   891, 17833,  1879,   682,
  1174,  1246,  1060,   507,   nil,  1058,  1027,   250,   nil,   nil,
   nil,  1071,   173,  1048, 19557,   nil,   395,  1163,   964,   nil,
  1167,   nil, 20233,   892,   698,  1174,   nil,   151,   139,  1212,
  1208,   356,  1263,   nil,   nil, 24878,   619,    34,    36, 18765,
 21825,   256,  1426,  1305,   -18,    -1,   793,  1375,   -19,  1405,
   nil,   nil,   232,   295,   708,   nil,   895,   nil,     9, 21693,
   nil,   nil,   nil,   799,   651,   131,   492,   680,   801,   629,
   587,   729,   nil,   511,   nil, 21561,   nil,   399,   162,   269,
   394,   286,   -39,   -25,   331,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1314, 23084,   nil,   nil,   nil,   nil,  1306,
   nil,   nil,  1237, 21429,  1209,   nil,   nil,   892,  1211,   nil,
  1207,  1205,   376,   389, 22690,   nil,   nil,   nil,     0,   361,
  1222,   nil,   nil, 22362, 22092,   nil,  1738,   nil,  1167,   nil,
   nil,   751,   nil,   nil,   nil,   nil,    45,   nil,  1217, 24143,
 23833, 21025,   193, 20893, 20761, 20629,  5245,  4981,  3154,  3176,
  1235,  1232,  1221,  1197,  5509,  5641,  5377,  5113,  3430,  4558,
  3994,  3712,  3571,  3853,  4135,  4276,  4417,   491,  3148,  4699,
  4840,  1879,   273, 22610,   nil,   nil,   nil,   nil,  1125,   nil,
   266,   289,  1106,   nil,   nil, 20497,   nil, 20101,   nil, 19969,
   nil,   nil,   nil,   nil, 19829,  1582,  1174,  1085,  1076,   nil,
   nil,  1068, 19425,  1040, 19293, 24019, 23957,   823,  1076,   nil,
 19161,  1025,   nil, 19029, 18897, 23771, 23709,  3007, 21957,  1140,
  1137,  1007,  1042,   nil, 18633,   nil,   nil, 18501,   nil,   nil,
   nil,   -25, 24886,   nil,   959,   941,   nil,   940,   939,   938,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   928,  3134,   nil,
   nil, 18369,   nil,   nil,   nil,  1010,   nil,   nil,   nil,  1009,
   nil,   nil,   994,  1315,  1029,   nil,  1456,   123,   147,  1014,
  1018, 17701, 17569, 24453, 24515,    -5,   nil,   nil,   332,   nil,
 24267, 24205, 17437,   nil,   nil,   nil,   330,    61,   751, 24716,
   nil,   193,   nil,   nil,   nil,   875,   nil,   nil,   nil,   877,
   nil,   nil,   -30,   nil,   151,   nil,   nil,   781,   nil,   770,
   nil,   nil,   nil, 23213,   nil,   755, 17041, 16909,   449,   738,
 16637, 16109, 15845, 15713,   681,   nil,   nil, 15581, 15053,   678,
   nil, 14921, 11357,   nil,   nil,   -76,    71,   609,   472,   568,
  1033,   500,   nil, 22620,   nil,  3289,   580,   -21,   -51,   nil,
  3430,  3712,   nil,   465,   nil,   505, 10301,   nil,   nil,   nil,
   454,  -116, 10169,   431,   nil,   385,   137,   248,   414,   259,
  1033,   353,   293,  9245,  2161,   317,    25,   353,  9113,   nil,
   274,   nil,   -74,   nil,  3994,  4135,   -80,  3117,   nil,   nil,
   377, 24640,   nil, 24648,   nil, 24869,   nil,  7233,   nil,  3305,
   nil,   884,   367,   -82,   nil,   nil,   nil,   nil,   521,   nil,
    86,   nil,   nil,   nil,   nil,   168,   nil,    10,   124,    41,
    40,    -4,    69,  6837,   329,  1315,   nil,   391,  4699,  5773,
   nil,   nil,   565,  4840, 24861,   138, 23585,   nil,   nil,   nil,
   nil,   nil,   nil,  4981,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   519, 16373,  1315,  6969,   nil,   590,   nil,  1174,   nil,
  2725,   nil,   nil,  1456,   nil,  1597,   nil,  2866,  7101,  8181,
  8313,  8445,   229, 10961,   704,   707,   nil,   708,   712,   717,
   nil,   746,   733,   729,   724, 11225,   nil,   nil,   873,   nil,
   nil,  2725,   785,   891,   nil,   nil,   nil,   770,   265,   nil,
   nil,   898,   nil,  2584,   784,   831,   nil,   nil,   nil,   nil,
   806,   922,   857,   818,   nil,   nil,   nil,   821,   840,   nil,
   845,   849,   nil,   853,   nil,   nil,   861,  3275,   871,   -26,
   nil,   998,   nil, 17173,    23,  2302,  2020,   nil, 17973,  1738,
     9,    24,   nil,  1031,   402,  1597,   nil,  1037,   916,   nil,
   nil,   929,   925,   nil,  2443, 18105, 18237,  2584,   427,   nil,
   nil, 24801,   nil, 24947,   nil, 24939,   nil,   nil,   979,  1301,
 19689,  1318,  1065,   nil,  1010,   nil,   nil,   nil,  1033,   nil,
   nil,   -10, 20365,   nil,   nil,   nil,   nil,   nil, 24740,   nil,
 24731,   nil, 24723,   nil, 19736,   nil,   nil,   nil,   nil,   396,
  3335,  1030,   nil,    33,   nil,  1158,  1159,   nil,     1,   nil,
   nil,   nil,  1172,   nil,   nil, 24793,   nil,  1052,   nil,   nil,
  1053,  1054,  1064,  1066,   nil,  1067,   nil,   371,   nil,   nil,
   nil,   934, 24329,   nil,   nil,   nil,  2443,  1036,  1105,   331,
  1206,   751,   nil,  1131,  1135,  1140,  1145,  1153,     1,  1155,
  3173,  3007,   nil,   nil,   nil,   nil,   nil,  3148,   nil,  4417,
   nil, 24962,   nil, 24655,   nil,  8624,   nil, 17880,   nil,   nil,
   nil,  1160,  1233,  1237,  1321, 21297, 24577, 23647,   754, 24808,
   nil,   nil,   nil,   nil,  3312,  1223,   677,  1366,  1369,  1263,
  1268,  1272,  1276,   nil,   nil,  1284,    26,    35,   110,   892,
  1301,  1306,   nil,   nil,   nil, 24663,   nil,   nil,   nil,   nil,
    32,   nil,  1309,   nil ]

racc_action_default = [
    -3,  -590,    -1,  -576,    -4,  -590,    -7,  -590,  -590,  -590,
  -590,   -29,  -590,  -590,  -590,  -279,  -590,   -40,   -43,  -578,
  -590,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -292,
  -327,  -328,   -68,   -11,   -72,   -80,   -82,  -590,  -484,  -485,
  -590,  -590,  -590,  -590,  -590,  -578,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -566,  -281,  -285,  -589,
  -557,  -300,  -388,  -590,  -590,  -305,  -308,  -576,  -590,  -590,
  -590,  -590,  -329,  -330,  -425,  -426,  -427,  -428,  -429,  -450,
  -432,  -433,  -452,  -454,  -437,  -442,  -446,  -448,  -464,  -452,
  -466,  -468,  -469,  -470,  -471,  -564,  -473,  -474,  -565,  -476,
  -477,  -478,  -479,  -480,  -481,  -482,  -483,  -488,  -489,  -590,
    -2,  -577,  -585,  -586,  -587,    -6,  -590,  -590,  -590,  -590,
  -590,    -3,   -17,  -590,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -590,  -590,  -246,
  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -578,  -579,   -47,
  -590,  -484,  -485,  -590,  -279,  -590,  -590,  -229,  -590,   -11,
  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,
  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,
  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -394,  -396,  -590,
  -574,  -575,   -57,  -246,  -590,  -299,  -400,  -409,  -411,   -63,
  -406,   -64,  -578,   -65,  -238,  -251,  -260,  -260,  -255,  -590,
  -261,  -590,  -559,  -590,  -590,   -66,   -67,  -576,   -12,  -590,
   -15,  -590,   -70,   -11,  -578,  -590,   -73,   -76,   -11,   -88,
   -89,  -590,  -590,   -96,  -292,  -295,  -578,  -590,  -327,  -328,
  -331,  -407,  -590,   -78,  -590,   -84,  -289,  -467,  -590,  -214,
  -215,  -230,  -590,   -11,  -283,  -578,  -239,  -582,  -582,  -590,
  -590,  -582,  -590,  -301,  -302,  -516,   -49,  -590,  -590,  -590,
  -590,  -576,  -590,  -577,  -484,  -485,  -590,  -590,  -279,  -590,
  -341,  -342,  -106,  -107,  -590,  -109,  -590,  -279,  -590,  -590,
  -484,  -485,  -320,  -111,  -112,  -153,  -154,  -155,  -171,  -176,
  -183,  -186,  -322,  -590,  -555,  -590,  -430,  -590,  -590,  -590,
  -590,  -590,  -590,  -590,  -590,  1014,    -5,  -588,   -23,   -24,
   -25,   -26,   -27,  -590,  -590,   -19,   -20,   -21,  -121,  -590,
   -30,   -39,  -266,  -590,  -590,  -265,   -31,  -196,  -578,  -247,
  -260,  -260,  -567,  -568,  -256,  -404,  -569,  -570,  -568,  -567,
  -256,  -403,  -405,  -569,  -570,   -37,  -204,   -38,  -590,   -41,
   -42,  -194,  -261,   -44,   -45,   -46,  -578,  -298,  -590,  -590,
  -590,  -246,  -289,  -590,  -590,  -590,  -205,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -216,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -231,  -232,  -233,
  -234,  -578,  -377,  -256,  -567,  -568,   -54,   -58,  -578,  -257,
  -377,  -377,  -578,  -294,  -252,  -590,  -253,  -590,  -258,  -590,
  -262,  -562,  -563,   -10,  -577,   -14,    -3,  -578,   -69,  -287,
   -85,   -74,  -590,  -578,  -246,  -590,  -590,   -95,  -590,  -467,
  -590,   -81,   -86,  -590,  -590,  -590,  -590,  -235,  -590,  -417,
  -590,  -578,  -590,  -240,  -584,  -583,  -242,  -584,  -290,  -291,
  -558,  -590,  -516,  -391,  -554,  -554,  -499,  -501,  -501,  -501,
  -515,  -517,  -518,  -519,  -520,  -521,  -522,  -523,  -590,  -525,
  -527,  -529,  -534,  -536,  -537,  -539,  -544,  -546,  -547,  -549,
  -550,  -551,  -590,   -11,  -332,  -333,   -11,  -590,  -590,  -590,
  -590,  -590,  -246,  -590,  -590,  -289,  -313,  -106,  -107,  -108,
  -590,  -590,  -246,  -316,  -490,  -491,  -590,  -590,   -11,  -516,
  -324,  -578,  -431,  -451,  -456,  -590,  -458,  -434,  -453,  -590,
  -455,  -436,  -590,  -439,  -590,  -441,  -444,  -590,  -445,  -590,
  -465,    -8,   -18,  -590,   -28,  -269,  -590,  -590,  -408,  -590,
  -248,  -250,  -590,  -590,   -59,  -245,  -401,  -590,  -590,   -61,
  -402,  -590,  -590,  -297,  -580,  -567,  -568,  -567,  -568,  -578,
  -194,  -590,  -378,  -578,  -380,   -11,   -53,  -397,  -377,  -243,
   -11,   -11,  -293,  -260,  -259,  -263,  -590,  -560,  -561,   -13,
  -590,   -71,  -590,   -77,   -83,  -578,  -567,  -568,  -244,   -92,
   -94,  -590,   -79,  -590,  -203,  -213,  -578,  -589,  -589,  -282,
  -590,  -286,  -582,  -389,   -11,   -11,  -578,  -590,  -497,  -498,
  -590,  -590,  -508,  -590,  -511,  -590,  -513,  -590,  -343,  -590,
  -345,  -347,  -354,  -578,  -528,  -538,  -548,  -552,  -589,  -334,
  -589,  -306,  -335,  -336,  -309,  -590,  -312,  -590,  -578,  -567,
  -568,  -571,  -288,  -590,  -106,  -107,  -110,  -578,   -11,  -590,
  -493,  -318,  -590,   -11,  -516,  -590,  -590,  -556,  -457,  -460,
  -461,  -462,  -463,   -11,  -435,  -438,  -440,  -443,  -447,  -449,
  -122,  -267,  -590,  -197,  -590,  -581,  -260,   -33,  -199,   -34,
  -200,   -60,   -35,  -202,   -36,  -201,   -62,  -195,  -590,  -590,
  -590,  -590,  -408,  -590,  -554,  -554,  -359,  -361,  -361,  -361,
  -376,  -590,  -578,  -382,  -523,  -531,  -532,  -542,  -590,  -399,
  -398,   -11,  -590,  -590,  -254,  -264,   -16,   -75,   -90,   -87,
  -296,  -589,  -339,   -11,  -418,  -589,  -419,  -420,  -284,  -241,
  -590,  -590,  -590,  -554,  -535,  -553,  -500,  -501,  -501,  -526,
  -501,  -501,  -545,  -501,  -523,  -540,  -578,  -590,  -352,  -590,
  -524,  -590,  -337,  -590,  -590,   -11,   -11,  -311,  -590,   -11,
  -408,  -590,  -408,  -590,  -590,   -11,  -321,  -590,  -578,  -495,
  -325,  -590,  -268,   -32,  -198,  -249,  -590,  -236,  -590,  -357,
  -358,  -367,  -369,  -590,  -372,  -590,  -374,  -379,  -590,  -590,
  -590,  -530,  -590,  -395,  -590,  -410,  -412,    -9,   -11,  -424,
  -340,  -590,  -590,  -422,  -392,  -393,  -390,  -496,  -590,  -504,
  -590,  -506,  -590,  -509,  -590,  -512,  -514,  -344,  -346,  -350,
  -590,  -355,  -303,  -590,  -304,  -590,  -590,  -263,  -589,  -314,
  -317,  -492,  -590,  -323,  -494,  -516,  -459,  -554,  -533,  -360,
  -361,  -361,  -361,  -361,  -543,  -361,  -381,  -578,  -384,  -386,
  -387,  -541,  -590,  -289,   -55,  -423,   -11,   -97,   -98,  -590,
  -590,  -105,  -421,  -501,  -501,  -501,  -501,  -348,  -590,  -353,
  -590,   -11,  -307,  -310,  -413,  -414,  -415,   -11,  -319,   -11,
  -356,  -590,  -364,  -590,  -366,  -590,  -370,  -590,  -373,  -375,
  -383,  -590,  -288,  -571,  -417,  -246,  -590,  -590,  -104,  -590,
  -502,  -505,  -507,  -510,  -590,  -351,  -589,  -590,  -590,  -361,
  -361,  -361,  -361,  -385,  -416,  -578,  -567,  -568,  -571,  -103,
  -501,  -349,  -338,  -315,  -326,  -590,  -362,  -365,  -368,  -371,
  -408,  -503,  -361,  -363 ]

clist = [
'216,372,618,26,275,275,275,520,26,326,127,127,486,310,310,114,258,266',
'270,414,420,333,677,26,132,132,322,122,205,570,408,2,26,26,26,324,26',
'130,130,533,336,336,563,566,336,6,657,310,310,310,6,337,338,405,430',
'341,111,540,477,427,259,26,778,262,269,271,26,26,473,654,26,654,831',
'127,523,526,733,296,530,114,110,579,313,511,478,898,657,901,317,292',
'219,819,703,336,336,336,336,115,277,277,277,711,714,378,388,389,390',
'391,294,822,384,379,781,845,26,688,689,801,437,26,26,26,26,26,26,930',
'928,295,328,331,588,276,276,276,273,285,286,924,602,604,358,362,589',
'785,342,736,486,915,957,723,834,836,393,340,645,812,6,780,949,835,648',
'327,650,651,339,392,6,325,782,394,521,401,593,483,600,603,603,323,927',
'373,657,583,531,683,275,335,351,204,472,480,481,433,434,435,436,498',
'954,805,881,376,377,415,349,386,654,654,985,728,898,26,26,26,26,424',
'380,26,26,26,26,26,26,613,647,381,382,383,738,930,993,743,729,659,26',
'772,877,924,686,817,275,275,779,334,1001,826,329,814,918,275,414,420',
'330,868,374,1,540,,715,,,798,,819,639,,,,26,26,,,,663,732,,,26,310,400',
'406,672,920,,425,429,,,,508,818,,820,,26,310,819,,26,,266,114,399,26',
'270,,822,,522,726,,404,,540,840,13,668,404,336,336,13,,,842,,295,668',
'665,26,567,568,,791,,,277,495,,587,633,,,494,277,26,26,501,,13,,955',
'292,1002,,591,114,292,859,860,512,785,509,,785,26,785,493,785,276,819',
'497,479,584,,,503,276,909,,482,26,649,,,668,652,,,,295,794,619,668,',
'295,718,887,,127,746,661,746,,,959,727,664,625,,,,590,132,630,843,612',
'657,,275,847,569,,761,,839,130,13,766,,,,809,415,797,,13,13,,,,848,654',
',,424,,26,,,,,,,624,641,,,,540,629,921,,922,785,,785,625,785,,785,,',
',,430,,,,,994,,275,,310,,,,943,,,,310,,794,737,,,676,415,26,960,26,',
',680,,,785,415,26,424,,646,,,,,,,,424,13,,26,,,806,,,660,,912,,,,,,',
',,,,,6,13,,,512,,275,,,,,,512,653,,,275,989,,,,,,415,,26,,,26,,,415',
',,26,424,800,,712,712,,424,,,26,936,,,1010,,26,,682,,956,,,730,731,',
',13,,830,,13,790,951,,,13,,,,127,,,,,619,,,,783,26,26,,807,132,26,26',
'750,,26,,13,540,,,789,310,130,988,,,619,,26,,,14,310,26,26,,14,708,',
'625,710,,630,,,,850,783,,332,,220,,717,,,,,,,220,220,220,,14,301,301',
'26,26,756,,775,757,759,,,,762,764,619,336,429,,,,512,336,,619,220,,841',
',,220,220,799,844,220,346,356,356,692,694,696,,26,897,,,,26,26,,,813',
'26,776,127,788,,,,,792,793,26,849,,914,,879,,,,883,,26,,,,,14,783,310',
',,220,220,220,220,14,14,777,,,,,810,811,404,815,,,815,668,,,,,,,,,26',
',995,,,,,,,,,,26,13,,13,336,,,,,,402,,,,,903,432,821,853,823,,,,,,,',
',,,26,851,26,26,,,26,,,,,,26,310,,,,712,,,911,14,220,220,220,310,,220',
'220,220,220,220,220,,,,,,,,13,,,13,14,26,,,,874,,,488,,490,,491,492',
',,,880,,,,13,,,,,917,,970,775,,775,15,775,220,220,,15,,,,,,220,,,,,',
'905,906,,,908,424,,,,,26,14,,,,14,15,303,303,301,14,275,,815,,26,776',
',776,13,776,26,,26,13,13,301,,415,,862,864,866,935,,14,,619,,26,424',
'348,357,357,,,,,,,,220,220,,923,,925,,13,13,,,,889,891,,893,895,,896',
'775,220,775,615,775,,775,,,944,,945,,946,15,,,220,,,,974,,15,15,,,,',
',,,13,,,,986,13,,,,,987,,775,,776,13,776,,776,,776,,,,,,,,,,,,,,16,',
',,,16,,,,,,,,,,,990,220,991,655,992,332,,658,776,,,,,13,,,,16,1000,',
',962,964,966,968,13,969,15,,,,,,,,,,980,981,982,983,,655,,1012,332,',
',,,15,,350,,14,,14,13,13,,,13,301,,220,,,13,,704,301,,,,,,,,220,,,,',
',,,,,,432,1006,1007,1008,1009,1011,16,,,,,13,,,,16,16,,,,,15,,,1013',
'15,,,,303,15,,,,14,,,14,,,,,39,220,,751,303,39,,655,332,,,220,,15,,',
',14,,,,,,,,,,13,,,,,,39,300,300,,,,,,,13,795,,,,,13,,13,220,220,,,,220',
'220,,16,220,,,,,804,428,,345,361,361,361,,,14,,,,,14,14,,16,,825,,,',
',,,301,,,,,,,,,,,301,,,,,,,,,39,,14,14,,,,,,39,39,,,,,,,,,,,,,,,,,,852',
',547,16,,,,16,,,,,16,220,,,,,14,220,,,,14,,,,,,,,,,14,,,,16,,,,,,,220',
'15,,15,,,,,,303,,,,,,,,303,,,,,,39,,,,,,,,871,,,,,,14,,,,,907,,,,39',
',,14,,,,,,,,,,332,,,,,,,,,,,15,,,15,,,,,38,220,,14,14,38,,14,,,,,,14',
',,,15,,,,,,,742,,,,39,,,,39,38,299,299,300,39,931,,,,,,,,14,,,,939,',
',300,,,,,,,,,39,,,,,,344,360,360,360,,,15,,,547,,15,15,,,,,,16,,16,',
',303,,698,,,,,,,,,303,,14,,,,,,,38,,15,15,,,,,14,38,38,,,,14,,14,,,',
',,,547,,,,,,,,,220,,,,,,,,,,,,16,,15,16,,,,15,,,,,,,,,,15,,,,,,,,16',
',,,,,,,784,,,,,,,,,,,,,,,,,,38,,,,,,,,357,,,,,,15,,,428,,,,,,38,,,15',
'39,,39,547,16,547,,,300,16,16,698,,,828,,300,,,,,,,,,,,,,,,15,15,,,15',
',,,,,15,,16,16,,547,,,,,,,,,,38,,,,38,,,,299,38,357,,,39,,,39,,15,,',
',941,,,299,,,,,,16,,,38,,16,,39,,,,,,,,16,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,15,,,,,,,698,,698,,,,,,15,,,16,39,,15,,15,39,39,,,,,16,,,,,,300,',
',,,784,,784,,,,300,,,,,,,,,,,39,39,,,16,16,,,16,,547,,,,16,,,,,,,947',
'698,,,,,,,,,,,,,,,547,,,,,,,39,,,16,,39,,942,,,,,,,,39,,,,,,,,,,,698',
'38,698,38,,,,,,299,,,,784,,,,299,,,,,,,,,,,,,,361,,,,16,698,39,,,,,',
',,,,,,39,16,,,,,,16,,16,,,,,,,,,,,,38,,,38,,,,,,,,39,39,,,39,,,,,,39',
',,,38,,,,,,,,,,,,,,,,,,,,,361,,,,,,,,39,,,,938,,,,,,,,,,,,,,,,,,,,,',
',,38,,,,,38,38,,,,,,,,,,,299,,,,,,,,,,,299,,39,,,,,,,,,38,38,,,,,39',
',,,,,39,227,39,,,,,,,,274,274,274,,,,,,,,,,,319,320,321,,,,,,,38,,,',
',38,,,274,274,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,360,',
',,,,38,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,38,,,38,,,,,',
'38,,,,,,,,,,,,,,,,,,,,,,,,,360,,,,,,,,38,,,,937,,274,407,274,,,426,431',
',,,,,,,,,,,,,,227,,,446,447,448,449,450,451,452,453,454,455,456,457',
'458,459,460,461,462,463,464,465,466,467,468,469,470,471,,,38,,,,274',
'274,,,,,,,,274,,38,,,,,274,38,274,38,274,274,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,274,,426,640,407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,274',
',274,,,,,,,,,,,,,,,274,,,,,,,,,674,675,,,,,,,,,,274,,,274,,,,,,,,,,',
',,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,274,274,,,,,,,,,,274,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,274,753,,,274,274,758,760,,,,763,765,,,640,767',
',,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,',
',,274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,854',
',,,,,,,,,,,,,758,760,765,763,,857,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,274,854,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274' ]
        racc_goto_table = arr = ::Array.new(3136, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,56,24,41,33,33,33,8,41,67,57,57,73,64,64,95,136,71,71,37,37,86,10',
'41,61,61,31,15,15,92,23,2,41,41,41,29,41,60,60,135,29,29,89,89,29,7',
'172,64,64,64,7,17,17,27,18,17,6,159,39,27,36,41,125,38,38,38,41,41,37',
'74,41,74,90,57,69,69,96,49,69,95,4,54,50,51,23,113,172,116,63,45,20',
'163,115,29,29,29,29,5,70,70,70,91,91,148,17,17,17,17,46,168,148,149',
'128,108,41,120,120,11,47,41,41,41,41,41,41,131,130,9,70,70,109,68,68',
'68,44,44,44,169,151,151,55,55,110,164,4,111,73,112,106,105,11,104,2',
'103,40,128,7,117,116,102,42,68,40,40,101,7,7,100,123,30,99,28,152,47',
'152,152,152,98,129,97,172,94,132,133,33,134,19,16,137,139,140,29,29',
'29,29,47,141,142,143,146,147,71,93,5,74,74,116,107,113,41,41,41,41,57',
'150,41,41,41,41,41,41,62,72,153,154,155,156,131,130,157,158,14,41,24',
'12,169,135,162,33,33,126,88,116,115,66,165,166,33,37,37,85,128,84,1',
'159,,92,,,24,,163,23,,,,41,41,,,,51,8,,,41,64,20,20,51,125,,20,20,,',
',31,126,,126,,41,64,163,,41,,71,95,9,41,71,,168,,31,54,,68,,159,24,21',
'37,68,29,29,21,,,24,,9,37,23,41,17,17,,40,,,70,7,,29,47,,,6,70,41,41',
'50,,21,,11,45,90,,29,95,45,120,120,49,164,63,,164,41,164,4,164,68,163',
'46,44,95,,,46,68,91,,44,41,47,,,37,47,,,,9,73,31,37,,9,23,120,,57,152',
'47,152,,,96,23,47,71,,,,36,61,71,8,15,172,,33,8,4,,39,,89,60,21,39,',
',,69,71,51,,21,21,,,,135,74,,,57,,41,,,,,,,38,31,,,,159,38,126,,126',
'164,,164,71,164,,164,,,,,18,,,,,10,,33,,64,,,,126,,,,64,,73,47,,,29',
'71,41,120,41,,,31,,,164,71,41,57,,38,,,,,,,,57,21,,41,,,27,,,2,,8,,',
',,,,,,,,,7,21,,,49,,33,,,,,,49,70,,,33,126,,,,,,71,,41,,,41,,,71,,,41',
'57,47,,95,95,,57,,,41,89,,,24,,41,,70,,92,,,95,95,,,21,,47,,21,86,89',
',,21,,,,57,,,,,31,,,,31,41,41,,67,61,41,41,15,,41,,21,159,,,136,64,60',
'8,,,31,,41,,,22,64,41,41,,22,9,,71,9,,71,,,,56,31,,65,,22,,68,,,,,,',
'22,22,22,,22,22,22,41,41,70,,119,20,20,,,,20,20,31,29,20,,,,49,29,,31',
'22,,17,,,22,22,49,17,22,22,22,22,161,161,161,,41,47,,,,41,41,,,119,41',
'121,57,9,,,,,9,9,41,95,,47,,67,,,,67,,41,,,,,22,31,64,,,22,22,22,22',
'22,22,124,,,,,9,9,68,121,,,121,37,,,,,,,,,41,,23,,,,,,,,,,41,21,,21',
'29,,,,,,65,,,,,17,65,124,20,124,,,,,,,,,,,41,9,41,41,,,41,,,,,,41,64',
',,,95,,,95,22,22,22,22,64,,22,22,22,22,22,22,,,,,,,,21,,,21,22,41,,',
',9,,,65,,65,,65,65,,,,9,,,,21,,,,,119,,31,119,,119,25,119,22,22,,25',
',,,,,22,,,,,,9,9,,,9,57,,,,,41,22,,,,22,25,25,25,22,22,33,,121,,41,121',
',121,21,121,41,,41,21,21,22,,71,,122,122,122,9,,22,,31,,41,57,25,25',
'25,,,,,,,,22,22,,124,,124,,21,21,,,,161,161,,161,161,,161,119,22,119',
'65,119,,119,,,124,,124,,124,25,,,22,,,,9,,25,25,,,,,,,,21,,,,9,21,,',
',,9,,119,,121,21,121,,121,,121,,,,,,,,,,,,,,26,,,,,26,,,,,,,,,,,124',
'22,124,65,124,65,,65,121,,,,,21,,,,26,124,,,122,122,122,122,21,122,25',
',,,,,,,,,161,161,161,161,,65,,124,65,,,,,25,,26,,22,,22,21,21,,,21,22',
',22,,,21,,65,22,,,,,,,,22,,,,,,,,,,,65,122,122,122,122,161,26,,,,,21',
',,,26,26,,,,,25,,,122,25,,,,25,25,,,,22,,,22,,,,,53,22,,65,25,53,,65',
'65,,,22,,25,,,,22,,,,,,,,,,21,,,,,,53,53,53,,,,,,,21,65,,,,,21,,21,22',
'22,,,,22,22,,26,22,,,,,65,26,,53,53,53,53,,,22,,,,,22,22,,26,,65,,,',
',,,22,,,,,,,,,,,22,,,,,,,,,53,,22,22,,,,,,53,53,,,,,,,,,,,,,,,,,,65',
',114,26,,,,26,,,,,26,22,,,,,22,22,,,,22,,,,,,,,,,22,,,,26,,,,,,,22,25',
',25,,,,,,25,,,,,,,,25,,,,,,53,,,,,,,,22,,,,,,22,,,,,65,,,,53,,,22,,',
',,,,,,,65,,,,,,,,,,,25,,,25,,,,,52,22,,22,22,52,,22,,,,,,22,,,,25,,',
',,,,25,,,,53,,,,53,52,52,52,53,53,22,,,,,,,,22,,,,22,,,53,,,,,,,,,53',
',,,,,52,52,52,52,,,25,,,114,,25,25,,,,,,26,,26,,,25,,114,,,,,,,,,25',
',22,,,,,,,52,,25,25,,,,,22,52,52,,,,22,,22,,,,,,,114,,,,,,,,,22,,,,',
',,,,,,,26,,25,26,,,,25,,,,,,,,,,25,,,,,,,,26,,,,,,,,114,,,,,,,,,,,,',
',,,,,52,,,,,,,,25,,,,,,25,,,26,,,,,,52,,,25,53,,53,114,26,114,,,53,26',
'26,114,,,114,,53,,,,,,,,,,,,,,,25,25,,,25,,,,,,25,,26,26,,114,,,,,,',
',,,52,,,,52,,,,52,52,25,,,53,,,53,,25,,,,25,,,52,,,,,,26,,,52,,26,,53',
',,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,114,,114,,,,,,25,,,26',
'53,,25,,25,53,53,,,,,26,,,,,,53,,,,,114,,114,,,,53,,,,,,,,,,,53,53,',
',26,26,,,26,,114,,,,26,,,,,,,114,114,,,,,,,,,,,,,,,114,,,,,,,53,,,26',
',53,,26,,,,,,,,53,,,,,,,,,,,114,52,114,52,,,,,,52,,,,114,,,,52,,,,,',
',,,,,,,,53,,,,26,114,53,,,,,,,,,,,,53,26,,,,,,26,,26,,,,,,,,,,,,52,',
',52,,,,,,,,53,53,,,53,,,,,,53,,,,52,,,,,,,,,,,,,,,,,,,,,53,,,,,,,,53',
',,,53,,,,,,,,,,,,,,,,,,,,,,,,52,,,,,52,52,,,,,,,,,,,52,,,,,,,,,,,52',
',53,,,,,,,,,52,52,,,,,53,,,,,,53,32,53,,,,,,,,32,32,32,,,,,,,,,,,32',
'32,32,,,,,,,52,,,,,52,,,32,32,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,52,,,,,,52,,,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52',
'52,,,52,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,,,,,52,,,,52,,32,32,32',
',,32,32,,,,,,,,,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,32,32,,,52,,,,32,32,,,,,,,,32,,52,,,,',
'32,52,32,52,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,32,32,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,32,,,,,,,,,,,,,,,32,,,,,,,,,32,32',
',,,,,,,,,32,,,32,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,32,32',
',,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,32,,,32,32,32,32,,,',
'32,32,,,32,32,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,32,,,,',
',,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,32,,32,,,,,,,,,,,,,,32,32,32,32,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32,32,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32' ]
        racc_goto_check = arr = ::Array.new(3136, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   253,    31,   nil,    77,    92,    53,    45,  -316,    94,
  -497,  -560,  -567,   nil,  -263,    19,   178,   -12,  -159,   118,
    70,   313,   651,  -179,  -406,   912,  1075,  -154,   -36,   -23,
    47,   -19,  2160,   -25,   nil,   nil,    36,  -191,    37,  -204,
  -318,     3,  -316,   nil,   105,    56,    75,   -99,   nil,    43,
    47,  -231,  1483,  1222,  -273,    71,   -70,     2,   nil,   nil,
    29,    16,  -177,    47,   -21,   609,   185,   -50,   102,  -253,
    69,    -9,  -251,  -265,  -416,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   181,   190,   -40,   nil,   179,  -295,
  -636,  -466,  -313,   134,  -177,    12,  -513,   108,   120,  -154,
   109,    99,  -552,    87,  -563,  -427,  -761,  -376,  -618,  -232,
  -230,  -445,  -703,  -742,  1028,  -456,  -742,  -486,   nil,    48,
  -419,    94,   192,  -475,   130,  -581,  -403,   nil,  -531,  -691,
  -743,  -744,  -153,  -348,   123,  -296,    -6,   -69,   nil,   -78,
   -78,  -712,  -481,  -607,   nil,   nil,   122,   121,    21,    28,
   130,  -242,  -205,   138,   138,   138,  -369,  -367,  -355,  -278,
   nil,   185,  -454,  -600,  -500,  -442,  -612,   nil,  -584,  -726,
   nil,   nil,  -441 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   343,   290,   nil,   519,
   nil,   832,   nil,   287,   288,   nil,   nil,   nil,    11,    12,
    18,   226,   318,   nil,   nil,   224,   225,   nil,   nil,    17,
   nil,   438,    21,    22,    23,    24,   nil,   671,   nil,   nil,
   nil,   307,   nil,    25,   409,    32,   nil,   nil,    34,    37,
    36,   nil,   221,   222,   355,   nil,   129,   417,   128,   131,
    75,    76,   nil,    90,    46,   280,   nil,   802,   410,   nil,
   411,   422,   626,   484,   278,   264,    47,    48,    49,    50,
    51,    52,    53,    54,    55,   nil,   265,    61,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   564,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   700,   824,   nil,   701,   919,   774,   535,
   nil,   536,   nil,   nil,   537,   nil,   539,   642,   nil,   nil,
   nil,   545,   nil,   nil,   nil,   735,   nil,   nil,   421,   nil,
   nil,   nil,   nil,   nil,    74,    77,    78,   nil,   nil,   nil,
   nil,   nil,   598,   nil,   nil,   nil,   nil,   nil,   nil,   816,
   534,   nil,   538,   549,   551,   552,   786,   555,   556,   787,
   559,   562,   282 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 145, :_reduce_none,
  2, 146, :_reduce_2,
  0, 147, :_reduce_3,
  1, 147, :_reduce_4,
  3, 147, :_reduce_5,
  2, 147, :_reduce_6,
  1, 149, :_reduce_none,
  4, 149, :_reduce_8,
  4, 152, :_reduce_9,
  2, 153, :_reduce_10,
  0, 157, :_reduce_11,
  1, 157, :_reduce_12,
  3, 157, :_reduce_13,
  2, 157, :_reduce_14,
  1, 158, :_reduce_none,
  4, 158, :_reduce_16,
  0, 174, :_reduce_17,
  4, 151, :_reduce_18,
  3, 151, :_reduce_19,
  3, 151, :_reduce_20,
  3, 151, :_reduce_21,
  2, 151, :_reduce_22,
  3, 151, :_reduce_23,
  3, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  4, 151, :_reduce_28,
  1, 151, :_reduce_none,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  6, 151, :_reduce_32,
  5, 151, :_reduce_33,
  5, 151, :_reduce_34,
  5, 151, :_reduce_35,
  5, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  1, 151, :_reduce_none,
  3, 162, :_reduce_41,
  3, 162, :_reduce_42,
  1, 173, :_reduce_none,
  3, 173, :_reduce_44,
  3, 173, :_reduce_45,
  3, 173, :_reduce_46,
  2, 173, :_reduce_47,
  1, 173, :_reduce_none,
  1, 161, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 178, :_reduce_none,
  4, 178, :_reduce_53,
  0, 186, :_reduce_54,
  5, 183, :_reduce_55,
  1, 185, :_reduce_none,
  2, 177, :_reduce_57,
  3, 177, :_reduce_58,
  4, 177, :_reduce_59,
  5, 177, :_reduce_60,
  4, 177, :_reduce_61,
  5, 177, :_reduce_62,
  2, 177, :_reduce_63,
  2, 177, :_reduce_64,
  2, 177, :_reduce_65,
  2, 177, :_reduce_66,
  2, 177, :_reduce_67,
  1, 163, :_reduce_68,
  3, 163, :_reduce_69,
  1, 190, :_reduce_70,
  3, 190, :_reduce_71,
  1, 189, :_reduce_none,
  2, 189, :_reduce_73,
  3, 189, :_reduce_74,
  5, 189, :_reduce_75,
  2, 189, :_reduce_76,
  4, 189, :_reduce_77,
  2, 189, :_reduce_78,
  4, 189, :_reduce_79,
  1, 189, :_reduce_80,
  3, 189, :_reduce_81,
  1, 193, :_reduce_none,
  3, 193, :_reduce_83,
  2, 192, :_reduce_84,
  3, 192, :_reduce_85,
  1, 195, :_reduce_86,
  3, 195, :_reduce_87,
  1, 194, :_reduce_88,
  1, 194, :_reduce_89,
  4, 194, :_reduce_90,
  3, 194, :_reduce_91,
  3, 194, :_reduce_92,
  3, 194, :_reduce_93,
  3, 194, :_reduce_94,
  2, 194, :_reduce_95,
  1, 194, :_reduce_96,
  1, 170, :_reduce_97,
  1, 170, :_reduce_98,
  4, 170, :_reduce_99,
  3, 170, :_reduce_100,
  3, 170, :_reduce_101,
  3, 170, :_reduce_102,
  3, 170, :_reduce_103,
  2, 170, :_reduce_104,
  1, 170, :_reduce_105,
  1, 198, :_reduce_106,
  1, 198, :_reduce_none,
  2, 199, :_reduce_108,
  1, 199, :_reduce_109,
  3, 199, :_reduce_110,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 203, :_reduce_116,
  1, 203, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 160, :_reduce_120,
  0, 206, :_reduce_121,
  4, 160, :_reduce_122,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  3, 176, :_reduce_194,
  5, 176, :_reduce_195,
  3, 176, :_reduce_196,
  5, 176, :_reduce_197,
  6, 176, :_reduce_198,
  5, 176, :_reduce_199,
  5, 176, :_reduce_200,
  5, 176, :_reduce_201,
  5, 176, :_reduce_202,
  4, 176, :_reduce_203,
  3, 176, :_reduce_204,
  3, 176, :_reduce_205,
  3, 176, :_reduce_206,
  3, 176, :_reduce_207,
  3, 176, :_reduce_208,
  3, 176, :_reduce_209,
  3, 176, :_reduce_210,
  3, 176, :_reduce_211,
  3, 176, :_reduce_212,
  4, 176, :_reduce_213,
  2, 176, :_reduce_214,
  2, 176, :_reduce_215,
  3, 176, :_reduce_216,
  3, 176, :_reduce_217,
  3, 176, :_reduce_218,
  3, 176, :_reduce_219,
  3, 176, :_reduce_220,
  3, 176, :_reduce_221,
  3, 176, :_reduce_222,
  3, 176, :_reduce_223,
  3, 176, :_reduce_224,
  3, 176, :_reduce_225,
  3, 176, :_reduce_226,
  3, 176, :_reduce_227,
  3, 176, :_reduce_228,
  2, 176, :_reduce_229,
  2, 176, :_reduce_230,
  3, 176, :_reduce_231,
  3, 176, :_reduce_232,
  3, 176, :_reduce_233,
  3, 176, :_reduce_234,
  3, 176, :_reduce_235,
  6, 176, :_reduce_236,
  1, 176, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  4, 210, :_reduce_241,
  2, 210, :_reduce_242,
  3, 215, :_reduce_243,
  0, 216, :_reduce_244,
  1, 216, :_reduce_none,
  0, 167, :_reduce_246,
  1, 167, :_reduce_none,
  2, 167, :_reduce_none,
  4, 167, :_reduce_249,
  2, 167, :_reduce_250,
  1, 188, :_reduce_251,
  2, 188, :_reduce_252,
  2, 188, :_reduce_253,
  4, 188, :_reduce_254,
  1, 188, :_reduce_255,
  0, 219, :_reduce_256,
  2, 182, :_reduce_257,
  2, 218, :_reduce_258,
  2, 217, :_reduce_259,
  0, 217, :_reduce_260,
  1, 212, :_reduce_261,
  2, 212, :_reduce_262,
  3, 212, :_reduce_263,
  4, 212, :_reduce_264,
  1, 172, :_reduce_265,
  1, 172, :_reduce_none,
  3, 171, :_reduce_267,
  4, 171, :_reduce_268,
  2, 171, :_reduce_269,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_280,
  0, 242, :_reduce_281,
  4, 208, :_reduce_282,
  0, 243, :_reduce_283,
  5, 208, :_reduce_284,
  0, 244, :_reduce_285,
  4, 208, :_reduce_286,
  3, 208, :_reduce_287,
  3, 208, :_reduce_288,
  2, 208, :_reduce_289,
  3, 208, :_reduce_290,
  3, 208, :_reduce_291,
  1, 208, :_reduce_292,
  4, 208, :_reduce_293,
  3, 208, :_reduce_294,
  1, 208, :_reduce_295,
  5, 208, :_reduce_296,
  4, 208, :_reduce_297,
  3, 208, :_reduce_298,
  2, 208, :_reduce_299,
  1, 208, :_reduce_none,
  2, 208, :_reduce_301,
  2, 208, :_reduce_302,
  6, 208, :_reduce_303,
  6, 208, :_reduce_304,
  0, 245, :_reduce_305,
  0, 246, :_reduce_306,
  7, 208, :_reduce_307,
  0, 247, :_reduce_308,
  0, 248, :_reduce_309,
  7, 208, :_reduce_310,
  5, 208, :_reduce_311,
  4, 208, :_reduce_312,
  0, 249, :_reduce_313,
  0, 250, :_reduce_314,
  9, 208, :_reduce_315,
  0, 251, :_reduce_316,
  6, 208, :_reduce_317,
  0, 252, :_reduce_318,
  7, 208, :_reduce_319,
  0, 253, :_reduce_320,
  5, 208, :_reduce_321,
  0, 254, :_reduce_322,
  6, 208, :_reduce_323,
  0, 255, :_reduce_324,
  0, 256, :_reduce_325,
  9, 208, :_reduce_326,
  1, 208, :_reduce_327,
  1, 208, :_reduce_328,
  1, 208, :_reduce_329,
  1, 208, :_reduce_330,
  1, 166, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  2, 233, :_reduce_334,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  1, 234, :_reduce_none,
  5, 234, :_reduce_338,
  1, 155, :_reduce_none,
  2, 155, :_reduce_340,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 257, :_reduce_343,
  3, 257, :_reduce_344,
  1, 260, :_reduce_345,
  3, 260, :_reduce_346,
  1, 259, :_reduce_none,
  4, 259, :_reduce_348,
  6, 259, :_reduce_349,
  3, 259, :_reduce_350,
  5, 259, :_reduce_351,
  2, 259, :_reduce_352,
  4, 259, :_reduce_353,
  1, 259, :_reduce_354,
  3, 259, :_reduce_355,
  4, 261, :_reduce_356,
  2, 261, :_reduce_357,
  2, 261, :_reduce_358,
  1, 261, :_reduce_359,
  2, 266, :_reduce_360,
  0, 266, :_reduce_361,
  6, 267, :_reduce_362,
  8, 267, :_reduce_363,
  4, 267, :_reduce_364,
  6, 267, :_reduce_365,
  4, 267, :_reduce_366,
  2, 267, :_reduce_none,
  6, 267, :_reduce_368,
  2, 267, :_reduce_369,
  4, 267, :_reduce_370,
  6, 267, :_reduce_371,
  2, 267, :_reduce_372,
  4, 267, :_reduce_373,
  2, 267, :_reduce_374,
  4, 267, :_reduce_375,
  1, 267, :_reduce_none,
  0, 184, :_reduce_377,
  1, 184, :_reduce_378,
  3, 271, :_reduce_379,
  1, 271, :_reduce_380,
  4, 271, :_reduce_381,
  1, 272, :_reduce_382,
  4, 272, :_reduce_383,
  1, 273, :_reduce_384,
  3, 273, :_reduce_385,
  1, 274, :_reduce_386,
  1, 274, :_reduce_none,
  0, 278, :_reduce_388,
  3, 232, :_reduce_389,
  4, 276, :_reduce_390,
  1, 276, :_reduce_391,
  3, 277, :_reduce_392,
  3, 277, :_reduce_393,
  0, 281, :_reduce_394,
  5, 280, :_reduce_395,
  2, 179, :_reduce_396,
  4, 179, :_reduce_397,
  5, 179, :_reduce_398,
  5, 179, :_reduce_399,
  2, 231, :_reduce_400,
  4, 231, :_reduce_401,
  4, 231, :_reduce_402,
  3, 231, :_reduce_403,
  3, 231, :_reduce_404,
  3, 231, :_reduce_405,
  2, 231, :_reduce_406,
  1, 231, :_reduce_407,
  4, 231, :_reduce_408,
  0, 283, :_reduce_409,
  5, 230, :_reduce_410,
  0, 284, :_reduce_411,
  5, 230, :_reduce_412,
  5, 236, :_reduce_413,
  1, 285, :_reduce_414,
  1, 285, :_reduce_none,
  6, 154, :_reduce_416,
  0, 154, :_reduce_417,
  1, 286, :_reduce_418,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  2, 287, :_reduce_421,
  1, 287, :_reduce_none,
  2, 156, :_reduce_423,
  1, 156, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 221, :_reduce_428,
  1, 289, :_reduce_429,
  2, 289, :_reduce_430,
  3, 290, :_reduce_431,
  1, 290, :_reduce_432,
  1, 290, :_reduce_433,
  3, 222, :_reduce_434,
  4, 223, :_reduce_435,
  3, 224, :_reduce_436,
  0, 294, :_reduce_437,
  3, 294, :_reduce_438,
  1, 295, :_reduce_439,
  2, 295, :_reduce_440,
  3, 226, :_reduce_441,
  0, 297, :_reduce_442,
  3, 297, :_reduce_443,
  3, 225, :_reduce_444,
  3, 227, :_reduce_445,
  0, 298, :_reduce_446,
  3, 298, :_reduce_447,
  0, 299, :_reduce_448,
  3, 299, :_reduce_449,
  0, 291, :_reduce_450,
  2, 291, :_reduce_451,
  0, 292, :_reduce_452,
  2, 292, :_reduce_453,
  0, 293, :_reduce_454,
  2, 293, :_reduce_455,
  1, 296, :_reduce_456,
  2, 296, :_reduce_457,
  0, 301, :_reduce_458,
  4, 296, :_reduce_459,
  1, 300, :_reduce_460,
  1, 300, :_reduce_461,
  1, 300, :_reduce_462,
  1, 300, :_reduce_none,
  1, 204, :_reduce_464,
  3, 205, :_reduce_465,
  1, 288, :_reduce_466,
  2, 288, :_reduce_467,
  1, 207, :_reduce_468,
  1, 207, :_reduce_469,
  1, 207, :_reduce_470,
  1, 207, :_reduce_471,
  1, 196, :_reduce_472,
  1, 196, :_reduce_473,
  1, 196, :_reduce_474,
  1, 196, :_reduce_475,
  1, 196, :_reduce_476,
  1, 197, :_reduce_477,
  1, 197, :_reduce_478,
  1, 197, :_reduce_479,
  1, 197, :_reduce_480,
  1, 197, :_reduce_481,
  1, 197, :_reduce_482,
  1, 197, :_reduce_483,
  1, 228, :_reduce_484,
  1, 228, :_reduce_485,
  1, 165, :_reduce_486,
  1, 165, :_reduce_487,
  1, 169, :_reduce_488,
  1, 169, :_reduce_489,
  1, 238, :_reduce_490,
  0, 302, :_reduce_491,
  4, 238, :_reduce_492,
  2, 238, :_reduce_493,
  3, 240, :_reduce_494,
  2, 240, :_reduce_495,
  4, 303, :_reduce_496,
  2, 303, :_reduce_497,
  2, 303, :_reduce_498,
  1, 303, :_reduce_499,
  2, 305, :_reduce_500,
  0, 305, :_reduce_501,
  6, 279, :_reduce_502,
  8, 279, :_reduce_503,
  4, 279, :_reduce_504,
  6, 279, :_reduce_505,
  4, 279, :_reduce_506,
  6, 279, :_reduce_507,
  2, 279, :_reduce_508,
  4, 279, :_reduce_509,
  6, 279, :_reduce_510,
  2, 279, :_reduce_511,
  4, 279, :_reduce_512,
  2, 279, :_reduce_513,
  4, 279, :_reduce_514,
  1, 279, :_reduce_515,
  0, 279, :_reduce_516,
  1, 275, :_reduce_517,
  1, 275, :_reduce_518,
  1, 275, :_reduce_519,
  1, 275, :_reduce_520,
  1, 258, :_reduce_none,
  1, 258, :_reduce_522,
  1, 307, :_reduce_523,
  3, 307, :_reduce_524,
  1, 268, :_reduce_525,
  3, 268, :_reduce_526,
  1, 308, :_reduce_527,
  2, 309, :_reduce_528,
  1, 309, :_reduce_529,
  2, 310, :_reduce_530,
  1, 310, :_reduce_531,
  1, 262, :_reduce_532,
  3, 262, :_reduce_533,
  1, 304, :_reduce_534,
  3, 304, :_reduce_535,
  1, 311, :_reduce_none,
  1, 311, :_reduce_none,
  2, 263, :_reduce_538,
  1, 263, :_reduce_539,
  3, 312, :_reduce_540,
  3, 313, :_reduce_541,
  1, 269, :_reduce_542,
  3, 269, :_reduce_543,
  1, 306, :_reduce_544,
  3, 306, :_reduce_545,
  1, 314, :_reduce_none,
  1, 314, :_reduce_none,
  2, 270, :_reduce_548,
  1, 270, :_reduce_549,
  1, 315, :_reduce_none,
  1, 315, :_reduce_none,
  2, 265, :_reduce_552,
  2, 264, :_reduce_553,
  0, 264, :_reduce_554,
  1, 241, :_reduce_none,
  3, 241, :_reduce_556,
  0, 229, :_reduce_557,
  2, 229, :_reduce_none,
  1, 214, :_reduce_559,
  3, 214, :_reduce_560,
  3, 316, :_reduce_561,
  2, 316, :_reduce_562,
  2, 316, :_reduce_563,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 175, :_reduce_none,
  1, 175, :_reduce_none,
  2, 191, :_reduce_580,
  2, 168, :_reduce_581,
  0, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 239, :_reduce_585,
  1, 239, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_none,
  0, 211, :_reduce_589 ]

racc_reduce_n = 590

racc_shift_n = 1014

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tDSTAR => 105,
  :tPLUS => 106,
  :tMINUS => 107,
  :tLT => 108,
  :tGT => 109,
  :tPIPE => 110,
  :tBANG => 111,
  :tCARET => 112,
  :tLCURLY => 113,
  :tRCURLY => 114,
  :tBACK_REF2 => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tREGEXP_OPT => 120,
  :tWORDS_BEG => 121,
  :tQWORDS_BEG => 122,
  :tSYMBOLS_BEG => 123,
  :tQSYMBOLS_BEG => 124,
  :tSTRING_DBEG => 125,
  :tSTRING_DVAR => 126,
  :tSTRING_END => 127,
  :tSTRING_DEND => 128,
  :tSTRING => 129,
  :tSYMBOL => 130,
  :tNL => 131,
  :tEH => 132,
  :tCOLON => 133,
  :tCOMMA => 134,
  :tSPACE => 135,
  :tSEMI => 136,
  :tLAMBDA => 137,
  :tLAMBEG => 138,
  :tCHARACTER => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "operation3",
  "@22",
  "@23",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@24",
  "@25",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

  def _reduce_2(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end

  def _reduce_3(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_4(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_5(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_6(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

# reduce 7 omitted

  def _reduce_8(val, _values, result)
                          result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_9(val, _values, result)
                          rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
  end

  def _reduce_10(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end

  def _reduce_11(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_12(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_13(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_14(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

# reduce 15 omitted

  def _reduce_16(val, _values, result)
                          diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
  end

  def _reduce_17(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_18(val, _values, result)
                          result = @builder.alias(val[0], val[1], val[3])
                    
    result
  end

  def _reduce_19(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
  end

  def _reduce_20(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
  end

  def _reduce_21(val, _values, result)
                          diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
  end

  def _reduce_22(val, _values, result)
                          result = @builder.undef_method(val[0], val[1])
                    
    result
  end

  def _reduce_23(val, _values, result)
                          result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
  end

  def _reduce_24(val, _values, result)
                          result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
  end

  def _reduce_25(val, _values, result)
                          result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_26(val, _values, result)
                          result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_27(val, _values, result)
                          rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
  end

  def _reduce_28(val, _values, result)
                          result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
  end

# reduce 29 omitted

  def _reduce_30(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_31(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_32(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end

  def _reduce_33(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_34(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_35(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_36(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_37(val, _values, result)
                          @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_38(val, _values, result)
                          result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end

  def _reduce_39(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end

# reduce 40 omitted

  def _reduce_41(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_42(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

# reduce 43 omitted

  def _reduce_44(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_45(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_46(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
  end

  def _reduce_47(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

  def _reduce_53(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_54(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_55(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

# reduce 56 omitted

  def _reduce_57(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_58(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_59(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_60(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_61(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end

  def _reduce_62(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_63(val, _values, result)
                          result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_64(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_65(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_66(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_67(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
  end

  def _reduce_68(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end

  def _reduce_69(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_70(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end

  def _reduce_71(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

# reduce 72 omitted

  def _reduce_73(val, _values, result)
                          result = val[0].
                                  push(val[1])
                    
    result
  end

  def _reduce_74(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
  end

  def _reduce_75(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
  end

  def _reduce_76(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
  end

  def _reduce_77(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
  end

  def _reduce_78(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

  def _reduce_79(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end

  def _reduce_80(val, _values, result)
                          result = [ @builder.splat(val[0]) ]
                    
    result
  end

  def _reduce_81(val, _values, result)
                          result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
  end

# reduce 82 omitted

  def _reduce_83(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_84(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_85(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_86(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_87(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_88(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_89(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_90(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_91(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_92(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_93(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_94(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end

  def _reduce_95(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end

  def _reduce_96(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_97(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_98(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_99(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_100(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_101(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_102(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_103(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end

  def _reduce_104(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end

  def _reduce_105(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_106(val, _values, result)
                          diagnostic :error, :module_name_const, nil, val[0]
                    
    result
  end

# reduce 107 omitted

  def _reduce_108(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end

  def _reduce_109(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end

  def _reduce_110(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

  def _reduce_116(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

  def _reduce_120(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_121(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_122(val, _values, result)
                          result = val[0] << val[3]
                    
    result
  end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

  def _reduce_194(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_195(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
  end

  def _reduce_196(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_197(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
  end

  def _reduce_198(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end

  def _reduce_199(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_200(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_201(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end

  def _reduce_202(val, _values, result)
                          const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
  end

  def _reduce_203(val, _values, result)
                          const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
  end

  def _reduce_204(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_205(val, _values, result)
                          result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_206(val, _values, result)
                          result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_207(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_208(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_209(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_210(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_211(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_212(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_213(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
  end

  def _reduce_214(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_215(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_216(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_217(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_218(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_219(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_220(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_221(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_222(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_223(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_224(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_225(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_226(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_227(val, _values, result)
                          result = @builder.match_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_228(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_229(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end

  def _reduce_230(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end

  def _reduce_231(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_232(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_233(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_234(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end

  def _reduce_235(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
  end

  def _reduce_236(val, _values, result)
                          result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
  end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

  def _reduce_241(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end

  def _reduce_242(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end

  def _reduce_243(val, _values, result)
                          result = val
                    
    result
  end

  def _reduce_244(val, _values, result)
                          result = [ nil, [], nil ]
                    
    result
  end

# reduce 245 omitted

  def _reduce_246(val, _values, result)
                          result = []
                    
    result
  end

# reduce 247 omitted

# reduce 248 omitted

  def _reduce_249(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end

  def _reduce_250(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end

  def _reduce_251(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_252(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_253(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
  end

  def _reduce_254(val, _values, result)
                          assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
  end

  def _reduce_255(val, _values, result)
                          result =  [ val[0] ]
                    
    result
  end

  def _reduce_256(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
  end

  def _reduce_257(val, _values, result)
                          @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
  end

  def _reduce_258(val, _values, result)
                          result = @builder.block_pass(val[0], val[1])
                    
    result
  end

  def _reduce_259(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

  def _reduce_260(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_261(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_262(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

  def _reduce_263(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_264(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end

  def _reduce_265(val, _values, result)
                          result = @builder.array(nil, val[0], nil)
                    
    result
  end

# reduce 266 omitted

  def _reduce_267(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_268(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end

  def _reduce_269(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

  def _reduce_280(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0])
                    
    result
  end

  def _reduce_281(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
  end

  def _reduce_282(val, _values, result)
                          @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
  end

  def _reduce_283(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end

  def _reduce_284(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[4])
                    
    result
  end

  def _reduce_285(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end

  def _reduce_286(val, _values, result)
                          result = @builder.begin(val[0], nil, val[3])
                    
    result
  end

  def _reduce_287(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_288(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_289(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end

  def _reduce_290(val, _values, result)
                          result = @builder.array(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_291(val, _values, result)
                          result = @builder.associate(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_292(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0])
                    
    result
  end

  def _reduce_293(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_294(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
  end

  def _reduce_295(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0])
                    
    result
  end

  def _reduce_296(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
  end

  def _reduce_297(val, _values, result)
                          result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_298(val, _values, result)
                          result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
  end

  def _reduce_299(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

# reduce 300 omitted

  def _reduce_301(val, _values, result)
                          begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_302(val, _values, result)                                 ####???
                          lambda_call = @builder.call_lambda(val[0])

                      #args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_303(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
  end

  def _reduce_304(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
  end

  def _reduce_305(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_306(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_307(val, _values, result)
                          result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end

  def _reduce_308(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_309(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_310(val, _values, result)
                          result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end

  def _reduce_311(val, _values, result)                                 ####???
                          #*when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
  end

  def _reduce_312(val, _values, result)                                 ####???
                          #*when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
  end

  def _reduce_313(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end

  def _reduce_314(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end

  def _reduce_315(val, _values, result)
                          result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
  end

  def _reduce_316(val, _values, result)
                          @static_env.extend_static
                    
    result
  end

  def _reduce_317(val, _values, result)
                          if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @static_env.unextend
                    
    result
  end

  def _reduce_318(val, _values, result)
                          result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                    
    result
  end

  def _reduce_319(val, _values, result)
                          result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @static_env.unextend

                      @def_level = val[4]
                    
    result
  end

  def _reduce_320(val, _values, result)
                          @static_env.extend_static
                    
    result
  end

  def _reduce_321(val, _values, result)
                          if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @static_env.unextend
                    
    result
  end

  def _reduce_322(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                    
    result
  end

  def _reduce_323(val, _values, result)
                          result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end

  def _reduce_324(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end

  def _reduce_325(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                    
    result
  end

  def _reduce_326(val, _values, result)
                          result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end

  def _reduce_327(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0])
                    
    result
  end

  def _reduce_328(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0])
                    
    result
  end

  def _reduce_329(val, _values, result)
                          result = @builder.keyword_cmd(:redo, val[0])
                    
    result
  end

  def _reduce_330(val, _values, result)
                          result = @builder.keyword_cmd(:retry, val[0])
                    
    result
  end

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

  def _reduce_334(val, _values, result)
                          result = val[1]
                    
    result
  end

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

  def _reduce_338(val, _values, result)
                          else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
  end

# reduce 339 omitted

  def _reduce_340(val, _values, result)
                          result = val
                    
    result
  end

# reduce 341 omitted

# reduce 342 omitted

  def _reduce_343(val, _values, result)
                          result = @builder.arg(val[0])
                    
    result
  end

  def _reduce_344(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_345(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_346(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

# reduce 347 omitted

  def _reduce_348(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
  end

  def _reduce_349(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
  end

  def _reduce_350(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
  end

  def _reduce_351(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
  end

  def _reduce_352(val, _values, result)
                          result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end

  def _reduce_353(val, _values, result)
                          result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end

  def _reduce_354(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end

  def _reduce_355(val, _values, result)
                          result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
  end

  def _reduce_356(val, _values, result)
                          result = val[0].concat(val[2]).concat(val[3])
                    
    result
  end

  def _reduce_357(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_358(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_359(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_360(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_361(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_362(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_363(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end

  def _reduce_364(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_365(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_366(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

# reduce 367 omitted

  def _reduce_368(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_369(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_370(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_371(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_372(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_373(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_374(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_375(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

# reduce 376 omitted

  def _reduce_377(val, _values, result)
                          result = @builder.args(nil, [], nil)
                    
    result
  end

  def _reduce_378(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end

  def _reduce_379(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_380(val, _values, result)
                          result = @builder.args(val[0], [], val[0])
                    
    result
  end

  def _reduce_381(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end

  def _reduce_382(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_383(val, _values, result)
                          result = val[2]
                    
    result
  end

  def _reduce_384(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_385(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_386(val, _values, result)
                          result = @builder.shadowarg(val[0])
                    
    result
  end

# reduce 387 omitted

  def _reduce_388(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_389(val, _values, result)
                          result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_390(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end

  def _reduce_391(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end

  def _reduce_392(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end

  def _reduce_393(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end

  def _reduce_394(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_395(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_396(val, _values, result)
                          begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
  end

  def _reduce_397(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_398(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_399(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end

  def _reduce_400(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_401(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_402(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_403(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_404(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_405(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_406(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end

  def _reduce_407(val, _values, result)
                          result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
  end

  def _reduce_408(val, _values, result)
                          result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
  end

  def _reduce_409(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_410(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_411(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end

  def _reduce_412(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end

  def _reduce_413(val, _values, result)
                          result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
  end

  def _reduce_414(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

# reduce 415 omitted

  def _reduce_416(val, _values, result)
                          assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
  end

  def _reduce_417(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_418(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

# reduce 419 omitted

# reduce 420 omitted

  def _reduce_421(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end

# reduce 422 omitted

  def _reduce_423(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

  def _reduce_428(val, _values, result)
                          result = @builder.string_compose(nil, val[0], nil)
                    
    result
  end

  def _reduce_429(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_430(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_431(val, _values, result)
                          result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_432(val, _values, result)
                          result = @builder.string(val[0])
                    
    result
  end

  def _reduce_433(val, _values, result)
                          result = @builder.character(val[0])
                    
    result
  end

  def _reduce_434(val, _values, result)
                          result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_435(val, _values, result)
                          opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
  end

  def _reduce_436(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_437(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_438(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end

  def _reduce_439(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_440(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_441(val, _values, result)
                          result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_442(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_443(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end

  def _reduce_444(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_445(val, _values, result)
                          result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_446(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_447(val, _values, result)
                          result = val[0] << @builder.string_internal(val[1])
                    
    result
  end

  def _reduce_448(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_449(val, _values, result)
                          result = val[0] << @builder.symbol_internal(val[1])
                    
    result
  end

  def _reduce_450(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_451(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_452(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_453(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_454(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_455(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end

  def _reduce_456(val, _values, result)
                          result = @builder.string_internal(val[0])
                    
    result
  end

  def _reduce_457(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_458(val, _values, result)
                          @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
  end

  def _reduce_459(val, _values, result)
                          @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
  end

  def _reduce_460(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end

  def _reduce_461(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end

  def _reduce_462(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end

# reduce 463 omitted

  def _reduce_464(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end

  def _reduce_465(val, _values, result)
                          result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_466(val, _values, result)
                          result = val[0]
                    
    result
  end

  def _reduce_467(val, _values, result)
                          result = @builder.negate(val[0], val[1])
                    
    result
  end

  def _reduce_468(val, _values, result)
                          result = @builder.integer(val[0])
                    
    result
  end

  def _reduce_469(val, _values, result)
                          result = @builder.float(val[0])
                    
    result
  end

  def _reduce_470(val, _values, result)
                          result = @builder.rational(val[0])
                    
    result
  end

  def _reduce_471(val, _values, result)
                          result = @builder.complex(val[0])
                    
    result
  end

  def _reduce_472(val, _values, result)
                          result = @builder.ident(val[0])
                    
    result
  end

  def _reduce_473(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end

  def _reduce_474(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end

  def _reduce_475(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end

  def _reduce_476(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end

  def _reduce_477(val, _values, result)
                          result = @builder.nil(val[0])
                    
    result
  end

  def _reduce_478(val, _values, result)
                          result = @builder.self(val[0])
                    
    result
  end

  def _reduce_479(val, _values, result)
                          result = @builder.true(val[0])
                    
    result
  end

  def _reduce_480(val, _values, result)
                          result = @builder.false(val[0])
                    
    result
  end

  def _reduce_481(val, _values, result)
                          result = @builder.__FILE__(val[0])
                    
    result
  end

  def _reduce_482(val, _values, result)
                          result = @builder.__LINE__(val[0])
                    
    result
  end

  def _reduce_483(val, _values, result)
                          result = @builder.__ENCODING__(val[0])
                    
    result
  end

  def _reduce_484(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end

  def _reduce_485(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end

  def _reduce_486(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_487(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end

  def _reduce_488(val, _values, result)
                          result = @builder.nth_ref(val[0])
                    
    result
  end

  def _reduce_489(val, _values, result)
                          result = @builder.back_ref(val[0])
                    
    result
  end

  def _reduce_490(val, _values, result)
                          result = nil
                    
    result
  end

  def _reduce_491(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end

  def _reduce_492(val, _values, result)
                          result = [ val[0], val[2] ]
                    
    result
  end

  def _reduce_493(val, _values, result)
                          yyerrok
                      result = nil
                    
    result
  end

  def _reduce_494(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
  end

  def _reduce_495(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end

  def _reduce_496(val, _values, result)
                          result = val[0].concat(val[2]).concat(val[3])
                    
    result
  end

  def _reduce_497(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_498(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end

  def _reduce_499(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_500(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_501(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_502(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_503(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end

  def _reduce_504(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_505(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_506(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_507(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_508(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_509(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_510(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end

  def _reduce_511(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_512(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_513(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end

  def _reduce_514(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end

  def _reduce_515(val, _values, result)
                          result = val[0]
                    
    result
  end

  def _reduce_516(val, _values, result)
                          result = []
                    
    result
  end

  def _reduce_517(val, _values, result)
                          diagnostic :error, :argument_const, nil, val[0]
                    
    result
  end

  def _reduce_518(val, _values, result)
                          diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
  end

  def _reduce_519(val, _values, result)
                          diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
  end

  def _reduce_520(val, _values, result)
                          diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
  end

# reduce 521 omitted

  def _reduce_522(val, _values, result)
                          @static_env.declare val[0][0]

                      result = val[0]
                    
    result
  end

  def _reduce_523(val, _values, result)
                          result = @builder.arg(val[0])
                    
    result
  end

  def _reduce_524(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_525(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_526(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_527(val, _values, result)
                          check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
  end

  def _reduce_528(val, _values, result)
                          result = @builder.kwoptarg(val[0], val[1])
                    
    result
  end

  def _reduce_529(val, _values, result)
                          result = @builder.kwarg(val[0])
                    
    result
  end

  def _reduce_530(val, _values, result)
                          result = @builder.kwoptarg(val[0], val[1])
                    
    result
  end

  def _reduce_531(val, _values, result)
                          result = @builder.kwarg(val[0])
                    
    result
  end

  def _reduce_532(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_533(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_534(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_535(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

# reduce 536 omitted

# reduce 537 omitted

  def _reduce_538(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
  end

  def _reduce_539(val, _values, result)
                          result = [ @builder.kwrestarg(val[0]) ]
                    
    result
  end

  def _reduce_540(val, _values, result)
                          result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_541(val, _values, result)
                          result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_542(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_543(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_544(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_545(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

# reduce 546 omitted

# reduce 547 omitted

  def _reduce_548(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end

  def _reduce_549(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end

# reduce 550 omitted

# reduce 551 omitted

  def _reduce_552(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
  end

  def _reduce_553(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end

  def _reduce_554(val, _values, result)
                          result = []
                    
    result
  end

# reduce 555 omitted

  def _reduce_556(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_557(val, _values, result)
                          result = []
                    
    result
  end

# reduce 558 omitted

  def _reduce_559(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end

  def _reduce_560(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end

  def _reduce_561(val, _values, result)
                          result = @builder.pair(val[0], val[1], val[2])
                    
    result
  end

  def _reduce_562(val, _values, result)
                          result = @builder.pair_keyword(val[0], val[1])
                    
    result
  end

  def _reduce_563(val, _values, result)
                          result = @builder.kwsplat(val[0], val[1])
                    
    result
  end

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

  def _reduce_580(val, _values, result)
                          result = val[1]
                    
    result
  end

  def _reduce_581(val, _values, result)
                          result = val[1]
                    
    result
  end

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

  def _reduce_585(val, _values, result)
                        yyerrok
                  
    result
  end

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

  def _reduce_589(val, _values, result)
                        result = nil
                  
    result
  end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby21
  end   # module Parser
