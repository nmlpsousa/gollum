(function(undefined) {
  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // The actual class for BasicObject
  var RubyBasicObject;

  // The actual Object class
  var RubyObject;

  // The actual Module class
  var RubyModule;

  // The actual Class class
  var RubyClass;

  // Constructor for instances of BasicObject
  function BasicObject(){}

  // Constructor for instances of Object
  function Object(){}

  // Constructor for instances of Class
  function Class(){}

  // Constructor for instances of Module
  function Module(){}

  // Constructor for instances of NilClass (nil)
  function NilClass(){}

  // All bridged classes - keep track to donate methods from Object
  var bridged_classes = [];

  // TopScope is used for inheriting constants from the top scope
  var TopScope = function(){};

  // Opal just acts as the top scope
  TopScope.prototype = Opal;

  // To inherit scopes
  Opal.constructor  = TopScope;

  Opal.constants = [];

  // This is a useful reference to global object inside ruby files
  Opal.global = this;

  // Minify common function calls
  var $hasOwn = Opal.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Generates unique id for every ruby object
  var unique_id = 0;

  // Return next unique id
  Opal.uid = function() {
    return unique_id++;
  };

  // Table holds all class variables
  Opal.cvars = {};

  // Globals table
  Opal.gvars = {};

  /*
   * Create a new constants scope for the given class with the given
   * base. Constants are looked up through their parents, so the base
   * scope will be the outer scope of the new klass.
   */
  function create_scope(base, klass, id) {
    var const_alloc   = function() {};
    var const_scope   = const_alloc.prototype = new base.constructor();
    klass._scope      = const_scope;
    const_scope.base  = klass;
    klass._base_module = base.base;
    const_scope.constructor = const_alloc;
    const_scope.constants = [];

    if (id) {
      klass._orig_scope = base;
      base[id] = base.constructor[id] = klass;
      base.constants.push(id);
    }
  }

  Opal.create_scope = create_scope;

  /*
   * A `class Foo; end` expression in ruby is compiled to call this runtime
   * method which either returns an existing class of the given name, or creates
   * a new class in the given `base` scope.
   *
   * If a constant with the given name exists, then we check to make sure that
   * it is a class and also that the superclasses match. If either of these
   * fail, then we raise a `TypeError`. Note, superklass may be null if one was
   * not specified in the ruby code.
   *
   * We pass a constructor to this method of the form `function ClassName() {}`
   * simply so that classes show up with nicely formatted names inside debuggers
   * in the web browser (or node/sprockets).
   *
   * The `base` is the current `self` value where the class is being created
   * from. We use this to get the scope for where the class should be created.
   * If `base` is an object (not a class/module), we simple get its class and
   * use that as the base instead.
   *
   * @param [Object] base where the class is being created
   * @param [Class] superklass superclass of the new class (may be null)
   * @param [String] id the name of the class to be created
   * @param [Function] constructor function to use as constructor
   * @return [Class] new or existing ruby class
   */
  Opal.klass = function(base, superklass, id, constructor) {

    // If base is an object, use its class
    if (!base._isClass) {
      base = base._klass;
    }

    // Not specifying a superclass means we can assume it to be Object
    if (superklass === null) {
      superklass = RubyObject;
    }

    var klass = base._scope[id];

    // If a constant exists in the scope, then we must use that
    if ($hasOwn.call(base._scope, id) && klass._orig_scope === base._scope) {

      // Make sure the existing constant is a class, or raise error
      if (!klass._isClass) {
        throw Opal.TypeError.$new(id + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superklass !== klass._super && superklass !== RubyObject) {
        throw Opal.TypeError.$new("superclass mismatch for class " + id);
      }
    }
    else if (typeof(superklass) === 'function') {
      // passed native constructor as superklass, so bridge it as ruby class
      return bridge_class(id, superklass);
    }
    else {
      // if class doesnt exist, create a new one with given superclass
      klass = boot_class(superklass, constructor);

      // name class using base (e.g. Foo or Foo::Baz)
      klass._name = id;

      // every class gets its own constant scope, inherited from current scope
      create_scope(base._scope, klass, id);

      // Name new class directly onto current scope (Opal.Foo.Baz = klass)
      base[id] = base._scope[id] = klass;

      // Copy all parent constants to child, unless parent is Object
      if (superklass !== RubyObject && superklass !== RubyBasicObject) {
        Opal.donate_constants(superklass, klass);
      }

      // call .inherited() hook with new class on the superclass
      if (superklass.$inherited) {
        superklass.$inherited(klass);
      }
    }

    return klass;
  };

  // Create generic class with given superclass.
  var boot_class = Opal.boot = function(superklass, constructor) {
    // instances
    var ctor = function() {};
        ctor.prototype = superklass._proto;

    constructor.prototype = new ctor();

    constructor.prototype.constructor = constructor;

    return boot_class_meta(superklass, constructor);
  };

  // class itself
  function boot_class_meta(superklass, constructor) {
    var mtor = function() {};
    mtor.prototype = superklass.constructor.prototype;

    function OpalClass() {};
    OpalClass.prototype = new mtor();

    var klass = new OpalClass();

    klass._id         = unique_id++;
    klass._alloc      = constructor;
    klass._isClass    = true;
    klass.constructor = OpalClass;
    klass._super      = superklass;
    klass._methods    = [];
    klass.__inc__     = [];
    klass.__parent    = superklass;
    klass._proto      = constructor.prototype;

    constructor.prototype._klass = klass;

    return klass;
  }

  // Define new module (or return existing module)
  Opal.module = function(base, id) {
    var module;

    if (!base._isClass) {
      base = base._klass;
    }

    if ($hasOwn.call(base._scope, id)) {
      module = base._scope[id];

      if (!module.__mod__ && module !== RubyObject) {
        throw Opal.TypeError.$new(id + " is not a module")
      }
    }
    else {
      module = boot_module()
      module._name = id;

      create_scope(base._scope, module, id);

      // Name new module directly onto current scope (Opal.Foo.Baz = module)
      base[id] = base._scope[id] = module;
    }

    return module;
  };

  /*
   * Internal function to create a new module instance. This simply sets up
   * the prototype hierarchy and method tables.
   */
  function boot_module() {
    var mtor = function() {};
    mtor.prototype = RubyModule.constructor.prototype;

    function OpalModule() {};
    OpalModule.prototype = new mtor();

    var module = new OpalModule();

    module._id         = unique_id++;
    module._isClass    = true;
    module.constructor = OpalModule;
    module._super      = RubyModule;
    module._methods    = [];
    module.__inc__     = [];
    module.__parent    = RubyModule;
    module._proto      = {};
    module.__mod__     = true;
    module.__dep__     = [];

    return module;
  }

  // Boot a base class (makes instances).
  var boot_defclass = function(id, constructor, superklass) {
    if (superklass) {
      var ctor           = function() {};
          ctor.prototype = superklass.prototype;

      constructor.prototype = new ctor();
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  };

  // Boot the actual (meta?) classes of core classes
  var boot_makemeta = function(id, constructor, superklass) {

    var mtor = function() {};
    mtor.prototype  = superklass.prototype;

    function OpalClass() {};
    OpalClass.prototype = new mtor();

    var klass = new OpalClass();

    klass._id         = unique_id++;
    klass._alloc      = constructor;
    klass._isClass    = true;
    klass._name       = id;
    klass._super      = superklass;
    klass.constructor = OpalClass;
    klass._methods    = [];
    klass.__inc__     = [];
    klass.__parent    = superklass;
    klass._proto      = constructor.prototype;

    constructor.prototype._klass = klass;

    Opal[id] = klass;
    Opal.constants.push(id);

    return klass;
  };

  /*
   * For performance, some core ruby classes are toll-free bridged to their
   * native javascript counterparts (e.g. a ruby Array is a javascript Array).
   *
   * This method is used to setup a native constructor (e.g. Array), to have
   * its prototype act like a normal ruby class. Firstly, a new ruby class is
   * created using the native constructor so that its prototype is set as the
   * target for th new class. Note: all bridged classes are set to inherit
   * from Object.
   *
   * Bridged classes are tracked in `bridged_classes` array so that methods
   * defined on Object can be "donated" to all bridged classes. This allows
   * us to fake the inheritance of a native prototype from our Object
   * prototype.
   *
   * Example:
   *
   *    bridge_class("Proc", Function);
   *
   * @param [String] name the name of the ruby class to create
   * @param [Function] constructor native javascript constructor to use
   * @return [Class] returns new ruby class
   */
  function bridge_class(name, constructor) {
    var klass = boot_class_meta(RubyObject, constructor);

    klass._name = name;

    create_scope(Opal, klass, name);
    bridged_classes.push(klass);

    var object_methods = RubyBasicObject._methods.concat(RubyObject._methods);

    for (var i = 0, len = object_methods.length; i < len; i++) {
      var meth = object_methods[i];
      constructor.prototype[meth] = RubyObject._proto[meth];
    }

    return klass;
  };

  /*
   * constant assign
   */
  Opal.casgn = function(base_module, name, value) {
    var scope = base_module._scope;

    if (value._isClass && value._name === nil) {
      value._name = name;
    }

    if (value._isClass) {
      value._base_module = base_module;
    }

    scope.constants.push(name);
    return scope[name] = value;
  };

  /*
   * constant decl
   */
  Opal.cdecl = function(base_scope, name, value) {
    base_scope.constants.push(name);
    return base_scope[name] = value;
  };

  /*
   * constant get
   */
  Opal.cget = function(base_scope, path) {
    if (path == null) {
      path       = base_scope;
      base_scope = Opal.Object;
    }

    var result = base_scope;

    path = path.split('::');
    while (path.length != 0) {
      result = result.$const_get(path.shift());
    }

    return result;
  }

  /*
   * When a source module is included into the target module, we must also copy
   * its constants to the target.
   */
  Opal.donate_constants = function(source_mod, target_mod) {
    var source_constants = source_mod._scope.constants,
        target_scope     = target_mod._scope,
        target_constants = target_scope.constants;

    for (var i = 0, length = source_constants.length; i < length; i++) {
      target_constants.push(source_constants[i]);
      target_scope[source_constants[i]] = source_mod._scope[source_constants[i]];
    }
  };

  /*
   * Methods stubs are used to facilitate method_missing in opal. A stub is a
   * placeholder function which just calls `method_missing` on the receiver.
   * If no method with the given name is actually defined on an object, then it
   * is obvious to say that the stub will be called instead, and then in turn
   * method_missing will be called.
   *
   * When a file in ruby gets compiled to javascript, it includes a call to
   * this function which adds stubs for every method name in the compiled file.
   * It should then be safe to assume that method_missing will work for any
   * method call detected.
   *
   * Method stubs are added to the BasicObject prototype, which every other
   * ruby object inherits, so all objects should handle method missing. A stub
   * is only added if the given property name (method name) is not already
   * defined.
   *
   * Note: all ruby methods have a `$` prefix in javascript, so all stubs will
   * have this prefix as well (to make this method more performant).
   *
   *    Opal.add_stubs(["$foo", "$bar", "$baz="]);
   *
   * All stub functions will have a private `rb_stub` property set to true so
   * that other internal methods can detect if a method is just a stub or not.
   * `Kernel#respond_to?` uses this property to detect a methods presence.
   *
   * @param [Array] stubs an array of method stubs to add
   */
  Opal.add_stubs = function(stubs) {
    for (var i = 0, length = stubs.length; i < length; i++) {
      var stub = stubs[i];

      if (!BasicObject.prototype[stub]) {
        BasicObject.prototype[stub] = true;
        add_stub_for(BasicObject.prototype, stub);
      }
    }
  };

  /*
   * Actuall add a method_missing stub function to the given prototype for the
   * given name.
   *
   * @param [Prototype] prototype the target prototype
   * @param [String] stub stub name to add (e.g. "$foo")
   */
  function add_stub_for(prototype, stub) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing._p = method_missing_stub._p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub._p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      return this.$method_missing.apply(this, [stub.slice(1)].concat($slice.call(arguments)));
    }

    method_missing_stub.rb_stub = true;
    prototype[stub] = method_missing_stub;
  }

  // Expose for other parts of Opal to use
  Opal.add_stub_for = add_stub_for;

  // Const missing dispatcher
  Opal.cm = function(name) {
    return this.base.$const_missing(name);
  };

  // Arity count error dispatcher
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = (object._isClass ? object._name + '.' : object._klass._name + '#') + meth;
    var msg = '[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')';
    throw Opal.ArgumentError.$new(msg);
  };

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, jsid, current_func, iter, defs) {
    var dispatcher;

    if (defs) {
      dispatcher = obj._isClass ? defs._super : obj._klass._proto;
    }
    else {
      if (obj._isClass) {
        dispatcher = obj._super;
      }
      else {
        dispatcher = find_obj_super_dispatcher(obj, jsid, current_func);
      }
    }

    dispatcher = dispatcher['$' + jsid];
    dispatcher._p = iter;

    return dispatcher;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, iter, defs) {
    if (current_func._def) {
      return Opal.find_super_dispatcher(obj, current_func._jsid, current_func, iter, defs);
    }
    else {
      return Opal.find_super_dispatcher(obj, jsid, current_func, iter, defs);
    }
  };

  var find_obj_super_dispatcher = function(obj, jsid, current_func) {
    var klass = obj.__meta__ || obj._klass;

    while (klass) {
      if (klass._proto['$' + jsid] === current_func) {
        // ok
        break;
      }

      klass = klass.__parent;
    }

    // if we arent in a class, we couldnt find current?
    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    klass = klass.__parent;

    // else, let's find the next one
    while (klass) {
      var working = klass._proto['$' + jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.__parent;
    }

    return klass._proto;
  };

  /*
   * Used to return as an expression. Sometimes, we can't simply return from
   * a javascript function as if we were a method, as the return is used as
   * an expression, or even inside a block which must "return" to the outer
   * method. This helper simply throws an error which is then caught by the
   * method. This approach is expensive, so it is only used when absolutely
   * needed.
   */
  Opal.$return = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // handles yield calls for 1 yielded arg
  Opal.$yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1) {
      if (arg._isArray) {
        return block.apply(null, arg);
      }
      else {
        return block(arg);
      }
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.$yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length == 1) {
      if (args[0]._isArray) {
        return block.apply(null, args[0]);
      }
    }

    if (!args._isArray) {
      args = $slice.call(args);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.$rescue = function(exception, candidates) {
    for (var i = 0; i != candidates.length; i++) {
      var candidate = candidates[i];
      if (candidate._isArray) {
        var subresult;
        if (subresult = Opal.$rescue(exception, candidate)) {
          return subresult;
        }
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }
    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.__meta__ === klass) {
      return true;
    }

    var search = object._klass;

    while (search) {
      if (search === klass) {
        return true;
      }

      for (var i = 0, length = search.__inc__.length; i < length; i++) {
        if (search.__inc__[i] == klass) {
          return true;
        }
      }

      search = search._super;
    }

    return false;
  }

  // Helper to convert the given object to an array
  Opal.to_ary = function(value) {
    if (value._isArray) {
      return value;
    }
    else if (value.$to_ary && !value.$to_ary.rb_stub) {
      return value.$to_ary();
    }

    return [value];
  };

  /*
    Call a ruby method on a ruby object with some arguments:

      var my_array = [1, 2, 3, 4]
      Opal.send(my_array, 'length')     # => 4
      Opal.send(my_array, 'reverse!')   # => [4, 3, 2, 1]

    A missing method will be forwarded to the object via
    method_missing.

    The result of either call with be returned.

    @param [Object] recv the ruby object
    @param [String] mid ruby method to call
  */
  Opal.send = function(recv, mid) {
    var args = $slice.call(arguments, 2),
        func = recv['$' + mid];

    if (func) {
      return func.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args));
  };

  Opal.block_send = function(recv, mid, block) {
    var args = $slice.call(arguments, 3),
        func = recv['$' + mid];

    if (func) {
      func._p = block;
      return func.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args));
  };

  /**
   * Donate methods for a class/module
   */
  Opal.donate = function(klass, defined, indirect) {
    var methods = klass._methods, included_in = klass.__dep__;

    // if (!indirect) {
      klass._methods = methods.concat(defined);
    // }

    if (included_in) {
      for (var i = 0, length = included_in.length; i < length; i++) {
        var includee = included_in[i];
        var dest = includee._proto;

        for (var j = 0, jj = defined.length; j < jj; j++) {
          var method = defined[j];
          dest[method] = klass._proto[method];
          dest[method]._donated = true;
        }

        if (includee.__dep__) {
          Opal.donate(includee, defined, true);
        }
      }
    }
  };

  Opal.defn = function(obj, jsid, body) {
    if (obj.__mod__) {
      obj._proto[jsid] = body;
      Opal.donate(obj, [jsid]);
    }
    else if (obj._isClass) {
      obj._proto[jsid] = body;

      if (obj === RubyBasicObject) {
        define_basic_object_method(jsid, body);
      }
      else if (obj === RubyObject) {
        Opal.donate(obj, [jsid]);
      }
    }
    else {
      obj[jsid] = body;
    }

    return nil;
  };

  /*
   * Define a singleton method on the given object.
   */
  Opal.defs = function(obj, jsid, body) {
    if (obj._isClass || obj.__mod__) {
      obj.constructor.prototype[jsid] = body;
    }
    else {
      obj[jsid] = body;
    }
  };

  function define_basic_object_method(jsid, body) {
    RubyBasicObject._methods.push(jsid);
    for (var i = 0, len = bridged_classes.length; i < len; i++) {
      bridged_classes[i]._proto[jsid] = body;
    }
  }

  Opal.hash = function() {
    if (arguments.length == 1 && arguments[0]._klass == Opal.Hash) {
      return arguments[0];
    }

    var hash   = new Opal.Hash._alloc,
        keys   = [],
        assocs = {};

    hash.map   = assocs;
    hash.keys  = keys;

    if (arguments.length == 1) {
      if (arguments[0]._isArray) {
        var args = arguments[0];

        for (var i = 0, length = args.length; i < length; i++) {
          var pair = args[i];

          if (pair.length !== 2) {
            throw Opal.ArgumentError.$new("value not of length 2: " + pair.$inspect());
          }

          var key = pair[0],
              obj = pair[1];

          if (assocs[key] == null) {
            keys.push(key);
          }

          assocs[key] = obj;
        }
      }
      else {
        var obj = arguments[0];
        for (var key in obj) {
          assocs[key] = obj[key];
          keys.push(key);
        }
      }
    }
    else {
      var length = arguments.length;
      if (length % 2 !== 0) {
        throw Opal.ArgumentError.$new("odd number of arguments for Hash");
      }

      for (var i = 0; i < length; i++) {
        var key = arguments[i],
            obj = arguments[++i];

        if (assocs[key] == null) {
          keys.push(key);
        }

        assocs[key] = obj;
      }
    }

    return hash;
  };

  /*
   * hash2 is a faster creator for hashes that just use symbols and
   * strings as keys. The map and keys array can be constructed at
   * compile time, so they are just added here by the constructor
   * function
   */
  Opal.hash2 = function(keys, map) {
    var hash = new Opal.Hash._alloc;

    hash.keys = keys;
    hash.map  = map;

    return hash;
  };

  /*
   * Create a new range instance with first and last values, and whether the
   * range excludes the last value.
   */
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range._alloc;
        range.begin   = first;
        range.end     = last;
        range.exclude = exc;

    return range;
  };

  // Initialization
  // --------------

  // Constructors for *instances* of core objects
  boot_defclass('BasicObject', BasicObject);
  boot_defclass('Object', Object, BasicObject);
  boot_defclass('Module', Module, Object);
  boot_defclass('Class', Class, Module);

  // Constructors for *classes* of core objects
  RubyBasicObject = boot_makemeta('BasicObject', BasicObject, Class);
  RubyObject      = boot_makemeta('Object', Object, RubyBasicObject.constructor);
  RubyModule      = boot_makemeta('Module', Module, RubyObject.constructor);
  RubyClass       = boot_makemeta('Class', Class, RubyModule.constructor);

  // Fix booted classes to use their metaclass
  RubyBasicObject._klass = RubyClass;
  RubyObject._klass = RubyClass;
  RubyModule._klass = RubyClass;
  RubyClass._klass = RubyClass;

  // Fix superclasses of booted classes
  RubyBasicObject._super = null;
  RubyObject._super = RubyBasicObject;
  RubyModule._super = RubyObject;
  RubyClass._super = RubyModule;

  // Internally, Object acts like a module as it is "included" into bridged
  // classes. In other words, we donate methods from Object into our bridged
  // classes as their prototypes don't inherit from our root Object, so they
  // act like module includes.
  RubyObject.__dep__ = bridged_classes;

  Opal.base = RubyObject;
  RubyBasicObject._scope = RubyObject._scope = Opal;
  RubyBasicObject._orig_scope = RubyObject._orig_scope = Opal;
  Opal.Kernel = RubyObject;

  RubyModule._scope = RubyObject._scope;
  RubyClass._scope = RubyObject._scope;
  RubyModule._orig_scope = RubyObject._orig_scope;
  RubyClass._orig_scope = RubyObject._orig_scope;

  RubyObject._proto.toString = function() {
    return this.$to_s();
  };

  Opal.top = new RubyObject._alloc();

  Opal.klass(RubyObject, RubyObject, 'NilClass', NilClass);

  var nil = Opal.nil = new NilClass;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };

  Opal.breaker  = new Error('unexpected break');
  Opal.returner = new Error('unexpected return');

  bridge_class('Array', Array);
  bridge_class('Boolean', Boolean);
  bridge_class('Numeric', Number);
  bridge_class('String', String);
  bridge_class('Proc', Function);
  bridge_class('Exception', Error);
  bridge_class('Regexp', RegExp);
  bridge_class('Time', Date);

  TypeError._super = Error;
}).call(this);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$name', '$inspect']);
  return (function($base) {
    var self = $module($base, 'Opal');

    var def = self._proto, $scope = self._scope;

    $opal.defs(self, '$type_error', function(object, type, method, coerced) {
      var $a, $b, self = this;

      if (method == null) {
        method = nil
      }
      if (coerced == null) {
        coerced = nil
      }
      if ((($a = (($b = method !== false && method !== nil) ? coerced : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return (($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a).$new("can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return (($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a).$new("no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    });

    $opal.defs(self, '$coerce_to', function(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && (!$a._isBoolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    });

    $opal.defs(self, '$coerce_to!', function(object, type, method) {
      var $a, self = this, coerced = nil;

      coerced = self.$coerce_to(object, type, method);
      if ((($a = type['$==='](coerced)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    });

    $opal.defs(self, '$coerce_to?', function(object, type, method) {
      var $a, self = this, coerced = nil;

      if ((($a = object['$respond_to?'](method)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ((($a = coerced['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return nil};
      if ((($a = type['$==='](coerced)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    });

    $opal.defs(self, '$try_convert', function(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && (!$a._isBoolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && (!$a._isBoolean || $a == true))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    });

    $opal.defs(self, '$compare', function(a, b) {
      var $a, self = this, compare = nil;

      compare = a['$<=>'](b);
      if ((($a = compare === nil) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison of " + (a.$class().$name()) + " with " + (b.$class().$name()) + " failed")};
      return compare;
    });

    $opal.defs(self, '$destructure', function(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args._isArray) {
        return args;
      }
      else {
        return $slice.call(args);
      }
    
    });

    $opal.defs(self, '$respond_to?', function(obj, method) {
      var self = this;

      
      if (obj == null || !obj._klass) {
        return false;
      }
    
      return obj['$respond_to?'](method);
    });

    $opal.defs(self, '$inspect', function(obj) {
      var self = this;

      
      if (obj === undefined) {
        return "undefined";
      }
      else if (obj === null) {
        return "null";
      }
      else if (!obj._klass) {
        return obj.toString();
      }
      else {
        return obj.$inspect();
      }
    
    });
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$attr_writer', '$=~', '$raise', '$const_missing', '$to_str', '$to_proc', '$append_features', '$included', '$name', '$new', '$to_s']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4;

    $opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      
      function AnonModule(){}
      var klass     = Opal.boot(Opal.Module, AnonModule);
      klass._name   = nil;
      klass._klass  = Opal.Module;
      klass.__dep__ = []
      klass.__mod__ = true;
      klass._proto  = {};

      // inherit scope from parent
      $opal.create_scope(Opal.Module._scope, klass);

      if (block !== nil) {
        var block_self = block._s;
        block._s = null;
        block.call(klass);
        block._s = block_self;
      }

      return klass;
    
    });

    def['$==='] = function(object) {
      var $a, self = this;

      if ((($a = object == null) !== nil && (!$a._isBoolean || $a == true))) {
        return false};
      return $opal.is_a(object, self);
    };

    def['$<'] = function(other) {
      var self = this;

      
      var working = self;

      while (working) {
        if (working === other) {
          return true;
        }

        working = working.__parent;
      }

      return false;
    
    };

    def.$alias_method = function(newname, oldname) {
      var self = this;

      
      self._proto['$' + newname] = self._proto['$' + oldname];

      if (self._methods) {
        $opal.donate(self, ['$' + newname ])
      }
    
      return self;
    };

    def.$alias_native = function(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid
      }
      return self._proto['$' + mid] = self._proto[jsid];
    };

    def.$ancestors = function() {
      var self = this;

      
      var parent = self,
          result = [];

      while (parent) {
        result.push(parent);
        result = result.concat(parent.__inc__);

        parent = parent._super;
      }

      return result;
    
    };

    def.$append_features = function(klass) {
      var self = this;

      
      var module   = self,
          included = klass.__inc__;

      // check if this module is already included in the klass
      for (var i = 0, length = included.length; i < length; i++) {
        if (included[i] === module) {
          return;
        }
      }

      included.push(module);
      module.__dep__.push(klass);

      // iclass
      var iclass = {
        name: module._name,

        _proto:   module._proto,
        __parent: klass.__parent,
        __iclass: true
      };

      klass.__parent = iclass;

      var donator   = module._proto,
          prototype = klass._proto,
          methods   = module._methods;

      for (var i = 0, length = methods.length; i < length; i++) {
        var method = methods[i];

        if (prototype.hasOwnProperty(method) && !prototype[method]._donated) {
          // if the target class already has a method of the same name defined
          // and that method was NOT donated, then it must be a method defined
          // by the class so we do not want to override it
        }
        else {
          prototype[method] = donator[method];
          prototype[method]._donated = true;
        }
      }

      if (klass.__dep__) {
        $opal.donate(klass, methods.slice(), true);
      }

      $opal.donate_constants(module, klass);
    
      return self;
    };

    def.$attr_accessor = function(names) {
      var $a, $b, self = this;

      names = $slice.call(arguments, 0);
      ($a = self).$attr_reader.apply($a, [].concat(names));
      return ($b = self).$attr_writer.apply($b, [].concat(names));
    };

    def.$attr_reader = function(names) {
      var self = this;

      names = $slice.call(arguments, 0);
      
      var proto = self._proto, cls = self;
      for (var i = 0, length = names.length; i < length; i++) {
        (function(name) {
          proto[name] = nil;
          var func = function() { return this[name] };

          if (cls._isSingleton) {
            proto.constructor.prototype['$' + name] = func;
          }
          else {
            proto['$' + name] = func;
            $opal.donate(self, ['$' + name ]);
          }
        })(names[i]);
      }
    
      return nil;
    };

    def.$attr_writer = function(names) {
      var self = this;

      names = $slice.call(arguments, 0);
      
      var proto = self._proto, cls = self;
      for (var i = 0, length = names.length; i < length; i++) {
        (function(name) {
          proto[name] = nil;
          var func = function(value) { return this[name] = value; };

          if (cls._isSingleton) {
            proto.constructor.prototype['$' + name + '='] = func;
          }
          else {
            proto['$' + name + '='] = func;
            $opal.donate(self, ['$' + name + '=']);
          }
        })(names[i]);
      }
    
      return nil;
    };

    $opal.defn(self, '$attr', def.$attr_accessor);

    def.$constants = function() {
      var self = this;

      return self._scope.constants;
    };

    def['$const_defined?'] = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true
      }
      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.NameError) == null ? $opal.cm('NameError') : $a), "wrong constant name " + (name))
      };
      
      scopes = [self._scope];
      if (inherit || self === Opal.Object) {
        var parent = self._super;
        while (parent !== Opal.BasicObject) {
          scopes.push(parent._scope);
          parent = parent._super;
        }
      }

      for (var i = 0, len = scopes.length; i < len; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return true;
        }
      }

      return false;
    
    };

    def.$const_get = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true
      }
      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.NameError) == null ? $opal.cm('NameError') : $a), "wrong constant name " + (name))
      };
      
      var scopes = [self._scope];
      if (inherit || self == Opal.Object) {
        var parent = self._super;
        while (parent !== Opal.BasicObject) {
          scopes.push(parent._scope);
          parent = parent._super;
        }
      }

      for (var i = 0, len = scopes.length; i < len; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return scopes[i][name];
        }
      }

      return self.$const_missing(name);
    
    };

    def.$const_missing = function(const$) {
      var $a, self = this, name = nil;

      name = self._name;
      return self.$raise((($a = $scope.NameError) == null ? $opal.cm('NameError') : $a), "uninitialized constant " + (name) + "::" + (const$));
    };

    def.$const_set = function(name, value) {
      var $a, self = this;

      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.NameError) == null ? $opal.cm('NameError') : $a), "wrong constant name " + (name))
      };
      try {
      name = name.$to_str()
      } catch ($err) {if (true) {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "conversion with #to_str failed")
        }else { throw $err; }
      };
      
      $opal.casgn(self, name, value);
      return value
    ;
    };

    def.$define_method = TMP_2 = function(name, method) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      
      if (method) {
        block = method.$to_proc();
      }

      if (block === nil) {
        throw new Error("no block given");
      }

      var jsid    = '$' + name;
      block._jsid = name;
      block._s    = null;
      block._def  = block;

      self._proto[jsid] = block;
      $opal.donate(self, [jsid]);

      return name;
    ;
    };

    def.$remove_method = function(name) {
      var self = this;

      
      var jsid    = '$' + name;
      var current = self._proto[jsid];
      delete self._proto[jsid];

      // Check if we need to reverse $opal.donate
      // $opal.retire(self, [jsid]);
      return self;
    
    };

    def.$include = function(mods) {
      var self = this;

      mods = $slice.call(arguments, 0);
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (mod === self) {
          continue;
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    
      return self;
    };

    def['$include?'] = function(mod) {
      var self = this;

      
      for (var cls = self; cls; cls = cls.parent) {
        for (var i = 0; i != cls.__inc__.length; i++) {
          var mod2 = cls.__inc__[i];
          if (mod === mod2) {
            return true;
          }
        }
      }
      return false;
    
    };

    def.$instance_method = function(name) {
      var $a, self = this;

      
      var meth = self._proto['$' + name];

      if (!meth || meth.rb_stub) {
        self.$raise((($a = $scope.NameError) == null ? $opal.cm('NameError') : $a), "undefined method `" + (name) + "' for class `" + (self.$name()) + "'");
      }

      return (($a = $scope.UnboundMethod) == null ? $opal.cm('UnboundMethod') : $a).$new(self, meth, name);
    
    };

    def.$instance_methods = function(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = false
      }
      
      var methods = [], proto = self._proto;

      for (var prop in self._proto) {
        if (!include_super && !proto.hasOwnProperty(prop)) {
          continue;
        }

        if (!include_super && proto[prop]._donated) {
          continue;
        }

        if (prop.charAt(0) === '$') {
          methods.push(prop.substr(1));
        }
      }

      return methods;
    
    };

    def.$included = function(mod) {
      var self = this;

      return nil;
    };

    def.$extended = function(mod) {
      var self = this;

      return nil;
    };

    def.$module_eval = TMP_3 = function() {
      var $a, self = this, $iter = TMP_3._p, block = $iter || nil;

      TMP_3._p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "no block given")
      };
      
      var old = block._s,
          result;

      block._s = null;
      result = block.call(self);
      block._s = old;

      return result;
    
    };

    $opal.defn(self, '$class_eval', def.$module_eval);

    def.$module_exec = TMP_4 = function() {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      
      if (block === nil) {
        throw new Error("no block given");
      }

      var block_self = block._s, result;

      block._s = null;
      result = block.apply(self, $slice.call(arguments));
      block._s = block_self;

      return result;
    
    };

    $opal.defn(self, '$class_exec', def.$module_exec);

    def['$method_defined?'] = function(method) {
      var self = this;

      
      var body = self._proto['$' + method];
      return (!!body) && !body.rb_stub;
    
    };

    def.$module_function = function(methods) {
      var self = this;

      methods = $slice.call(arguments, 0);
      
      for (var i = 0, length = methods.length; i < length; i++) {
        var meth = methods[i], func = self._proto['$' + meth];

        self.constructor.prototype['$' + meth] = func;
      }

      return self;
    
    };

    def.$name = function() {
      var self = this;

      
      if (self._full_name) {
        return self._full_name;
      }

      var result = [], base = self;

      while (base) {
        if (base._name === nil) {
          return result.length === 0 ? nil : result.join('::');
        }

        result.unshift(base._name);

        base = base._base_module;

        if (base === $opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self._full_name = result.join('::');
    
    };

    def.$public = function() {
      var self = this;

      return nil;
    };

    def.$private_class_method = function(name) {
      var self = this;

      return self['$' + name] || nil;
    };

    $opal.defn(self, '$private', def.$public);

    $opal.defn(self, '$protected', def.$public);

    def['$private_method_defined?'] = function(obj) {
      var self = this;

      return false;
    };

    def.$private_constant = function() {
      var self = this;

      return nil;
    };

    $opal.defn(self, '$protected_method_defined?', def['$private_method_defined?']);

    $opal.defn(self, '$public_instance_methods', def.$instance_methods);

    $opal.defn(self, '$public_method_defined?', def['$method_defined?']);

    def.$remove_class_variable = function() {
      var self = this;

      return nil;
    };

    def.$remove_const = function(name) {
      var self = this;

      
      var old = self._scope[name];
      delete self._scope[name];
      return old;
    
    };

    def.$to_s = function() {
      var self = this;

      return self.$name().$to_s();
    };

    return (def.$undef_method = function(symbol) {
      var self = this;

      $opal.add_stub_for(self._proto, "$" + symbol);
      return self;
    }, nil) && 'undef_method';
  })(self, null)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$raise', '$allocate']);
  ;
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2;

    $opal.defs(self, '$new', TMP_1 = function(sup) {
      var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

      if (sup == null) {
        sup = (($a = $scope.Object) == null ? $opal.cm('Object') : $a)
      }
      TMP_1._p = null;
      
      if (!sup._isClass || sup.__mod__) {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "superclass must be a Class");
      }

      function AnonClass(){};
      var klass       = Opal.boot(sup, AnonClass)
      klass._name     = nil;
      klass.__parent  = sup;

      // inherit scope from parent
      $opal.create_scope(sup._scope, klass);

      sup.$inherited(klass);

      if (block !== nil) {
        var block_self = block._s;
        block._s = null;
        block.call(klass);
        block._s = block_self;
      }

      return klass;
    ;
    });

    def.$allocate = function() {
      var self = this;

      
      var obj = new self._alloc;
      obj._id = Opal.uid();
      return obj;
    
    };

    def.$inherited = function(cls) {
      var self = this;

      return nil;
    };

    def.$new = TMP_2 = function(args) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_2._p = null;
      
      var obj = self.$allocate();

      obj.$initialize._p = block;
      obj.$initialize.apply(obj, args);
      return obj;
    ;
    };

    return (def.$superclass = function() {
      var self = this;

      return self._super || nil;
    }, nil) && 'superclass';
  })(self, null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$raise']);
  return (function($base, $super) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4;

    $opal.defn(self, '$initialize', function() {
      var self = this;

      return nil;
    });

    $opal.defn(self, '$==', function(other) {
      var self = this;

      return self === other;
    });

    $opal.defn(self, '$__id__', function() {
      var self = this;

      return self._id || (self._id = Opal.uid());
    });

    $opal.defn(self, '$__send__', TMP_1 = function(symbol, args) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1._p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func._p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing._p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    });

    $opal.defn(self, '$!', function() {
      var self = this;

      return false;
    });

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$equal?', def['$==']);

    $opal.defn(self, '$instance_eval', TMP_2 = function() {
      var $a, self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      if (block !== false && block !== nil) {
        } else {
        (($a = $scope.Kernel) == null ? $opal.cm('Kernel') : $a).$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "no block given")
      };
      
      var old = block._s,
          result;

      block._s = null;
      result = block.call(self, self);
      block._s = old;

      return result;
    
    });

    $opal.defn(self, '$instance_exec', TMP_3 = function(args) {
      var $a, self = this, $iter = TMP_3._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3._p = null;
      if (block !== false && block !== nil) {
        } else {
        (($a = $scope.Kernel) == null ? $opal.cm('Kernel') : $a).$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "no block given")
      };
      
      var block_self = block._s,
          result;

      block._s = null;
      result = block.apply(self, args);
      block._s = block_self;

      return result;
    
    });

    return ($opal.defn(self, '$method_missing', TMP_4 = function(symbol, args) {
      var $a, self = this, $iter = TMP_4._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_4._p = null;
      return (($a = $scope.Kernel) == null ? $opal.cm('Kernel') : $a).$raise((($a = $scope.NoMethodError) == null ? $opal.cm('NoMethodError') : $a), "undefined method `" + (symbol) + "' for BasicObject instance");
    }), nil) && 'method_missing';
  })(self, null)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $gvars = $opal.gvars;

  $opal.add_stubs(['$raise', '$inspect', '$==', '$name', '$class', '$new', '$respond_to?', '$to_ary', '$to_a', '$allocate', '$copy_instance_variables', '$initialize_clone', '$initialize_copy', '$singleton_class', '$initialize_dup', '$for', '$to_proc', '$append_features', '$extended', '$to_i', '$to_s', '$to_f', '$*', '$===', '$empty?', '$ArgumentError', '$nan?', '$infinite?', '$to_int', '$>', '$length', '$print', '$format', '$puts', '$each', '$<=', '$[]', '$nil?', '$is_a?', '$rand', '$coerce_to', '$respond_to_missing?']);
  return (function($base) {
    var self = $module($base, 'Kernel');

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9;

    def.$method_missing = TMP_1 = function(symbol, args) {
      var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1._p = null;
      return self.$raise((($a = $scope.NoMethodError) == null ? $opal.cm('NoMethodError') : $a), "undefined method `" + (symbol) + "' for " + (self.$inspect()));
    };

    def['$=~'] = function(obj) {
      var self = this;

      return false;
    };

    def['$==='] = function(other) {
      var self = this;

      return self['$=='](other);
    };

    def['$<=>'] = function(other) {
      var self = this;

      
      if (self['$=='](other)) {
        return 0;
      }

      return nil;
    ;
    };

    def.$method = function(name) {
      var $a, self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.rb_stub) {
        self.$raise((($a = $scope.NameError) == null ? $opal.cm('NameError') : $a), "undefined method `" + (name) + "' for class `" + (self.$class().$name()) + "'");
      }

      return (($a = $scope.Method) == null ? $opal.cm('Method') : $a).$new(self, meth, name);
    
    };

    def.$methods = function(all) {
      var self = this;

      if (all == null) {
        all = true
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!$opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].rb_stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    };

    def.$Array = TMP_2 = function(object, args) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_2._p = null;
      
      if (object == null || object === nil) {
        return [];
      }
      else if (object['$respond_to?']("to_ary")) {
        return object.$to_ary();
      }
      else if (object['$respond_to?']("to_a")) {
        return object.$to_a();
      }
      else {
        return [object];
      }
    ;
    };

    def.$caller = function() {
      var self = this;

      return [];
    };

    def.$class = function() {
      var self = this;

      return self._klass;
    };

    def.$copy_instance_variables = function(other) {
      var self = this;

      
      for (var name in other) {
        if (name.charAt(0) !== '$') {
          if (name !== '_id' && name !== '_klass') {
            self[name] = other[name];
          }
        }
      }
    
    };

    def.$clone = function() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_clone(self);
      return copy;
    };

    def.$initialize_clone = function(other) {
      var self = this;

      return self.$initialize_copy(other);
    };

    def.$define_singleton_method = TMP_3 = function(name) {
      var $a, self = this, $iter = TMP_3._p, body = $iter || nil;

      TMP_3._p = null;
      if (body !== false && body !== nil) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to create Proc object without a block")
      };
      
      var jsid   = '$' + name;
      body._jsid = name;
      body._s    = null;
      body._def  = body;

      self.$singleton_class()._proto[jsid] = body;

      return self;
    
    };

    def.$dup = function() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    };

    def.$initialize_dup = function(other) {
      var self = this;

      return self.$initialize_copy(other);
    };

    def.$enum_for = TMP_4 = function(method, args) {
      var $a, $b, $c, self = this, $iter = TMP_4._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      if (method == null) {
        method = "each"
      }
      TMP_4._p = null;
      return ($a = ($b = (($c = $scope.Enumerator) == null ? $opal.cm('Enumerator') : $c)).$for, $a._p = block.$to_proc(), $a).apply($b, [self, method].concat(args));
    };

    $opal.defn(self, '$to_enum', def.$enum_for);

    def['$equal?'] = function(other) {
      var self = this;

      return self === other;
    };

    def.$extend = function(mods) {
      var self = this;

      mods = $slice.call(arguments, 0);
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    };

    def.$format = function(format, args) {
      var self = this;

      args = $slice.call(arguments, 1);
      
      var idx = 0;
      return format.replace(/%(\d+\$)?([-+ 0]*)(\d*|\*(\d+\$)?)(?:\.(\d*|\*(\d+\$)?))?([cspdiubBoxXfgeEG])|(%%)/g, function(str, idx_str, flags, width_str, w_idx_str, prec_str, p_idx_str, spec, escaped) {
        if (escaped) {
          return '%';
        }

        var width,
        prec,
        is_integer_spec = ("diubBoxX".indexOf(spec) != -1),
        is_float_spec = ("eEfgG".indexOf(spec) != -1),
        prefix = '',
        obj;

        if (width_str === undefined) {
          width = undefined;
        } else if (width_str.charAt(0) == '*') {
          var w_idx = idx++;
          if (w_idx_str) {
            w_idx = parseInt(w_idx_str, 10) - 1;
          }
          width = (args[w_idx]).$to_i();
        } else {
          width = parseInt(width_str, 10);
        }
        if (!prec_str) {
          prec = is_float_spec ? 6 : undefined;
        } else if (prec_str.charAt(0) == '*') {
          var p_idx = idx++;
          if (p_idx_str) {
            p_idx = parseInt(p_idx_str, 10) - 1;
          }
          prec = (args[p_idx]).$to_i();
        } else {
          prec = parseInt(prec_str, 10);
        }
        if (idx_str) {
          idx = parseInt(idx_str, 10) - 1;
        }
        switch (spec) {
        case 'c':
          obj = args[idx];
          if (obj._isString) {
            str = obj.charAt(0);
          } else {
            str = String.fromCharCode((obj).$to_i());
          }
          break;
        case 's':
          str = (args[idx]).$to_s();
          if (prec !== undefined) {
            str = str.substr(0, prec);
          }
          break;
        case 'p':
          str = (args[idx]).$inspect();
          if (prec !== undefined) {
            str = str.substr(0, prec);
          }
          break;
        case 'd':
        case 'i':
        case 'u':
          str = (args[idx]).$to_i().toString();
          break;
        case 'b':
        case 'B':
          str = (args[idx]).$to_i().toString(2);
          break;
        case 'o':
          str = (args[idx]).$to_i().toString(8);
          break;
        case 'x':
        case 'X':
          str = (args[idx]).$to_i().toString(16);
          break;
        case 'e':
        case 'E':
          str = (args[idx]).$to_f().toExponential(prec);
          break;
        case 'f':
          str = (args[idx]).$to_f().toFixed(prec);
          break;
        case 'g':
        case 'G':
          str = (args[idx]).$to_f().toPrecision(prec);
          break;
        }
        idx++;
        if (is_integer_spec || is_float_spec) {
          if (str.charAt(0) == '-') {
            prefix = '-';
            str = str.substr(1);
          } else {
            if (flags.indexOf('+') != -1) {
              prefix = '+';
            } else if (flags.indexOf(' ') != -1) {
              prefix = ' ';
            }
          }
        }
        if (is_integer_spec && prec !== undefined) {
          if (str.length < prec) {
            str = "0"['$*'](prec - str.length) + str;
          }
        }
        var total_len = prefix.length + str.length;
        if (width !== undefined && total_len < width) {
          if (flags.indexOf('-') != -1) {
            str = str + " "['$*'](width - total_len);
          } else {
            var pad_char = ' ';
            if (flags.indexOf('0') != -1) {
              str = "0"['$*'](width - total_len) + str;
            } else {
              prefix = " "['$*'](width - total_len) + prefix;
            }
          }
        }
        var result = prefix + str;
        if ('XEG'.indexOf(spec) != -1) {
          result = result.toUpperCase();
        }
        return result;
      });
    
    };

    def.$hash = function() {
      var self = this;

      return self._id;
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return nil;
    };

    def.$inspect = function() {
      var self = this;

      return self.$to_s();
    };

    def['$instance_of?'] = function(klass) {
      var self = this;

      return self._klass === klass;
    };

    def['$instance_variable_defined?'] = function(name) {
      var self = this;

      return $opal.hasOwnProperty.call(self, name.substr(1));
    };

    def.$instance_variable_get = function(name) {
      var self = this;

      
      var ivar = self[name.substr(1)];

      return ivar == null ? nil : ivar;
    
    };

    def.$instance_variable_set = function(name, value) {
      var self = this;

      return self[name.substr(1)] = value;
    };

    def.$instance_variables = function() {
      var self = this;

      
      var result = [];

      for (var name in self) {
        if (name.charAt(0) !== '$') {
          if (name !== '_klass' && name !== '_id') {
            result.push('@' + name);
          }
        }
      }

      return result;
    
    };

    def.$Integer = function(value, base) {
      var $a, $b, self = this, $case = nil;

      if (base == null) {
        base = nil
      }
      if ((($a = (($b = $scope.String) == null ? $opal.cm('String') : $b)['$==='](value)) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = value['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "invalid value for Integer: (empty string)")};
        return parseInt(value, ((($a = base) !== false && $a !== nil) ? $a : undefined));};
      if (base !== false && base !== nil) {
        self.$raise(self.$ArgumentError("base is only valid for String values"))};
      return (function() {$case = value;if ((($a = $scope.Integer) == null ? $opal.cm('Integer') : $a)['$===']($case)) {return value}else if ((($a = $scope.Float) == null ? $opal.cm('Float') : $a)['$===']($case)) {if ((($a = ((($b = value['$nan?']()) !== false && $b !== nil) ? $b : value['$infinite?']())) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.FloatDomainError) == null ? $opal.cm('FloatDomainError') : $a), "unable to coerce " + (value) + " to Integer")};
      return value.$to_int();}else if ((($a = $scope.NilClass) == null ? $opal.cm('NilClass') : $a)['$===']($case)) {return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "can't convert nil into Integer")}else {if ((($a = value['$respond_to?']("to_int")) !== nil && (!$a._isBoolean || $a == true))) {
        return value.$to_int()
      } else if ((($a = value['$respond_to?']("to_i")) !== nil && (!$a._isBoolean || $a == true))) {
        return value.$to_i()
        } else {
        return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "can't convert " + (value.$class()) + " into Integer")
      }}})();
    };

    def.$Float = function(value) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.String) == null ? $opal.cm('String') : $b)['$==='](value)) !== nil && (!$a._isBoolean || $a == true))) {
        return parseFloat(value);
      } else if ((($a = value['$respond_to?']("to_f")) !== nil && (!$a._isBoolean || $a == true))) {
        return value.$to_f()
        } else {
        return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "can't convert " + (value.$class()) + " into Float")
      };
    };

    def['$is_a?'] = function(klass) {
      var self = this;

      return $opal.is_a(self, klass);
    };

    $opal.defn(self, '$kind_of?', def['$is_a?']);

    def.$lambda = TMP_5 = function() {
      var self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      block.is_lambda = true;
      return block;
    };

    def.$loop = TMP_6 = function() {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      
      while (true) {
        if (block() === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def['$nil?'] = function() {
      var self = this;

      return false;
    };

    $opal.defn(self, '$object_id', def.$__id__);

    def.$printf = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      if (args.$length()['$>'](0)) {
        self.$print(($a = self).$format.apply($a, [].concat(args)))};
      return nil;
    };

    def.$private_methods = function() {
      var self = this;

      return [];
    };

    def.$proc = TMP_7 = function() {
      var $a, self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to create Proc object without a block")
      };
      block.is_lambda = false;
      return block;
    };

    def.$puts = function(strs) {
      var $a, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      strs = $slice.call(arguments, 0);
      return ($a = $gvars.stdout).$puts.apply($a, [].concat(strs));
    };

    def.$p = function(args) {
      var $a, $b, TMP_8, self = this;

      args = $slice.call(arguments, 0);
      ($a = ($b = args).$each, $a._p = (TMP_8 = function(obj){var self = TMP_8._s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_8._s = self, TMP_8), $a).call($b);
      if (args.$length()['$<='](1)) {
        return args['$[]'](0)
        } else {
        return args
      };
    };

    def.$print = function(strs) {
      var $a, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      strs = $slice.call(arguments, 0);
      return ($a = $gvars.stdout).$print.apply($a, [].concat(strs));
    };

    def.$warn = function(strs) {
      var $a, $b, self = this;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      strs = $slice.call(arguments, 0);
      if ((($a = ((($b = $gvars.VERBOSE['$nil?']()) !== false && $b !== nil) ? $b : strs['$empty?']())) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        ($a = $gvars.stderr).$puts.apply($a, [].concat(strs))
      };
      return nil;
    };

    def.$raise = function(exception, string) {
      var $a, self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      
      if (exception == null && $gvars["!"]) {
        exception = $gvars["!"];
      }
      else if (exception._isString) {
        exception = (($a = $scope.RuntimeError) == null ? $opal.cm('RuntimeError') : $a).$new(exception);
      }
      else if (!exception['$is_a?']((($a = $scope.Exception) == null ? $opal.cm('Exception') : $a))) {
        exception = exception.$new(string);
      }

      $gvars["!"] = exception;
      throw exception;
    ;
    };

    $opal.defn(self, '$fail', def.$raise);

    def.$rand = function(max) {
      var $a, self = this;

      
      if (max === undefined) {
        return Math.random();
      }
      else if (max._isRange) {
        var arr = max.$to_a();

        return arr[self.$rand(arr.length)];
      }
      else {
        return Math.floor(Math.random() *
          Math.abs((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(max, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")));
      }
    
    };

    $opal.defn(self, '$srand', def.$rand);

    def['$respond_to?'] = function(name, include_all) {
      var $a, self = this;

      if (include_all == null) {
        include_all = false
      }
      if ((($a = self['$respond_to_missing?'](name)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.rb_stub) {
        return true;
      }
    
      return false;
    };

    $opal.defn(self, '$send', def.$__send__);

    $opal.defn(self, '$public_send', def.$__send__);

    def.$singleton_class = function() {
      var self = this;

      
      if (self._isClass) {
        if (self.__meta__) {
          return self.__meta__;
        }

        var meta = new $opal.Class._alloc;
        meta._klass = $opal.Class;
        self.__meta__ = meta;
        // FIXME - is this right? (probably - methods defined on
        // class' singleton should also go to subclasses?)
        meta._proto = self.constructor.prototype;
        meta._isSingleton = true;
        meta.__inc__ = [];
        meta._methods = [];

        meta._scope = self._scope;

        return meta;
      }

      if (self._isClass) {
        return self._klass;
      }

      if (self.__meta__) {
        return self.__meta__;
      }

      else {
        var orig_class = self._klass,
            class_id   = "#<Class:#<" + orig_class._name + ":" + orig_class._id + ">>";

        var Singleton = function () {};
        var meta = Opal.boot(orig_class, Singleton);
        meta._name = class_id;

        meta._proto = self;
        self.__meta__ = meta;
        meta._klass = orig_class._klass;
        meta._scope = orig_class._scope;
        meta.__parent = orig_class;

        return meta;
      }
    
    };

    $opal.defn(self, '$sprintf', def.$format);

    def.$String = function(str) {
      var self = this;

      return String(str);
    };

    def.$tap = TMP_9 = function() {
      var self = this, $iter = TMP_9._p, block = $iter || nil;

      TMP_9._p = null;
      if ($opal.$yield1(block, self) === $breaker) return $breaker.$v;
      return self;
    };

    def.$to_proc = function() {
      var self = this;

      return self;
    };

    def.$to_s = function() {
      var self = this;

      return "#<" + self.$class().$name() + ":" + self._id + ">";
    };

    def.$freeze = function() {
      var self = this;

      self.___frozen___ = true;
      return self;
    };

    def['$frozen?'] = function() {
      var $a, self = this;
      if (self.___frozen___ == null) self.___frozen___ = nil;

      return ((($a = self.___frozen___) !== false && $a !== nil) ? $a : false);
    };

    def['$respond_to_missing?'] = function(method_name) {
      var self = this;

      return false;
    };
        ;$opal.donate(self, ["$method_missing", "$=~", "$===", "$<=>", "$method", "$methods", "$Array", "$caller", "$class", "$copy_instance_variables", "$clone", "$initialize_clone", "$define_singleton_method", "$dup", "$initialize_dup", "$enum_for", "$to_enum", "$equal?", "$extend", "$format", "$hash", "$initialize_copy", "$inspect", "$instance_of?", "$instance_variable_defined?", "$instance_variable_get", "$instance_variable_set", "$instance_variables", "$Integer", "$Float", "$is_a?", "$kind_of?", "$lambda", "$loop", "$nil?", "$object_id", "$printf", "$private_methods", "$proc", "$puts", "$p", "$print", "$warn", "$raise", "$fail", "$rand", "$srand", "$respond_to?", "$send", "$public_send", "$singleton_class", "$sprintf", "$String", "$tap", "$to_proc", "$to_s", "$freeze", "$frozen?", "$respond_to_missing?"]);
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$raise']);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self._proto, $scope = self._scope;

    def['$!'] = function() {
      var self = this;

      return true;
    };

    def['$&'] = function(other) {
      var self = this;

      return false;
    };

    def['$|'] = function(other) {
      var self = this;

      return other !== false && other !== nil;
    };

    def['$^'] = function(other) {
      var self = this;

      return other !== false && other !== nil;
    };

    def['$=='] = function(other) {
      var self = this;

      return other === nil;
    };

    def.$dup = function() {
      var $a, self = this;

      return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a));
    };

    def.$inspect = function() {
      var self = this;

      return "nil";
    };

    def['$nil?'] = function() {
      var self = this;

      return true;
    };

    def.$singleton_class = function() {
      var $a, self = this;

      return (($a = $scope.NilClass) == null ? $opal.cm('NilClass') : $a);
    };

    def.$to_a = function() {
      var self = this;

      return [];
    };

    def.$to_h = function() {
      var self = this;

      return $opal.hash();
    };

    def.$to_i = function() {
      var self = this;

      return 0;
    };

    $opal.defn(self, '$to_f', def.$to_i);

    def.$to_s = function() {
      var self = this;

      return "";
    };

    def.$object_id = function() {
      var $a, self = this;

      return (($a = $scope.NilClass) == null ? $opal.cm('NilClass') : $a)._id || ((($a = $scope.NilClass) == null ? $opal.cm('NilClass') : $a)._id = $opal.uid());
    };

    return $opal.defn(self, '$hash', def.$object_id);
  })(self, null);
  return $opal.cdecl($scope, 'NIL', nil);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$undef_method']);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self._proto, $scope = self._scope;

    def._isBoolean = true;

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$undef_method("new")
    })(self.$singleton_class());

    def['$!'] = function() {
      var self = this;

      return self != true;
    };

    def['$&'] = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    };

    def['$|'] = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    };

    def['$^'] = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    };

    def['$=='] = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    };

    $opal.defn(self, '$equal?', def['$==']);

    $opal.defn(self, '$singleton_class', def.$class);

    return (def.$to_s = function() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, nil) && 'to_s';
  })(self, null);
  $opal.cdecl($scope, 'TrueClass', (($a = $scope.Boolean) == null ? $opal.cm('Boolean') : $a));
  $opal.cdecl($scope, 'FalseClass', (($a = $scope.Boolean) == null ? $opal.cm('Boolean') : $a));
  $opal.cdecl($scope, 'TRUE', true);
  return $opal.cdecl($scope, 'FALSE', false);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $module = $opal.module;

  $opal.add_stubs(['$attr_reader', '$name', '$class']);
  (function($base, $super) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self._proto, $scope = self._scope;

    def.message = nil;
    self.$attr_reader("message");

    $opal.defs(self, '$new', function(message) {
      var self = this;

      if (message == null) {
        message = ""
      }
      
      var err = new Error(message);
      err._klass = self;
      err.name = self._name;
      return err;
    
    });

    def.$backtrace = function() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    };

    def.$inspect = function() {
      var self = this;

      return "#<" + (self.$class().$name()) + ": '" + (self.message) + "'>";
    };

    return $opal.defn(self, '$to_s', def.$message);
  })(self, null);
  (function($base, $super) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.Exception) == null ? $opal.cm('Exception') : $a));
  (function($base, $super) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.ScriptError) == null ? $opal.cm('ScriptError') : $a));
  (function($base, $super) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.ScriptError) == null ? $opal.cm('ScriptError') : $a));
  (function($base, $super) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.ScriptError) == null ? $opal.cm('ScriptError') : $a));
  (function($base, $super) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.Exception) == null ? $opal.cm('Exception') : $a));
  (function($base, $super) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.Exception) == null ? $opal.cm('Exception') : $a));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.NameError) == null ? $opal.cm('NameError') : $a));
  (function($base, $super) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  (function($base, $super) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  (function($base, $super) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  (function($base, $super) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  (function($base, $super) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  (function($base, $super) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a));
  (function($base, $super) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a));
  (function($base, $super) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  (function($base, $super) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.RangeError) == null ? $opal.cm('RangeError') : $a));
  (function($base, $super) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  (function($base, $super) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));
  return (function($base) {
    var self = $module($base, 'Errno');

    var def = self._proto, $scope = self._scope, $a;

    (function($base, $super) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self._proto, $scope = self._scope, TMP_1;

      return ($opal.defs(self, '$new', TMP_1 = function() {
        var self = this, $iter = TMP_1._p, $yield = $iter || nil;

        TMP_1._p = null;
        return $opal.find_super_dispatcher(self, 'new', TMP_1, null, $EINVAL).apply(self, ["Invalid argument"]);
      }), nil) && 'new'
    })(self, (($a = $scope.SystemCallError) == null ? $opal.cm('SystemCallError') : $a))
    
  })(self);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $gvars = $opal.gvars;

  $opal.add_stubs(['$respond_to?', '$to_str', '$to_s', '$coerce_to', '$new', '$raise', '$class', '$call']);
  return (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self._proto, $scope = self._scope, TMP_1;

    def._isRegexp = true;

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self._proto.$escape = function(string) {
        var self = this;

        
        return string.replace(/([-[\]/{}()*+?.^$\\| ])/g, '\\$1')
                     .replace(/[\n]/g, '\\n')
                     .replace(/[\r]/g, '\\r')
                     .replace(/[\f]/g, '\\f')
                     .replace(/[\t]/g, '\\t');
      
      };
      self._proto.$quote = self._proto.$escape;
      self._proto.$union = function(parts) {
        var self = this;

        parts = $slice.call(arguments, 0);
        return new RegExp(parts.join(''));
      };
      return (self._proto.$new = function(regexp, options) {
        var self = this;

        return new RegExp(regexp, options);
      }, nil) && 'new';
    })(self.$singleton_class());

    def['$=='] = function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString();
    };

    def['$==='] = function(str) {
      var self = this;

      
      if (!str._isString && str['$respond_to?']("to_str")) {
        str = str.$to_str();
      }

      if (!str._isString) {
        return false;
      }

      return self.test(str);
    ;
    };

    def['$=~'] = function(string) {
      var $a, self = this;

      if ((($a = string === nil) !== nil && (!$a._isBoolean || $a == true))) {
        $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
        return nil;};
      string = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(string, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();
      
      var re = self;

      if (re.global) {
        // should we clear it afterwards too?
        re.lastIndex = 0;
      }
      else {
        // rewrite regular expression to add the global flag to capture pre/post match
        re = new RegExp(re.source, 'g' + (re.multiline ? 'm' : '') + (re.ignoreCase ? 'i' : ''));
      }

      var result = re.exec(string);

      if (result) {
        $gvars["~"] = (($a = $scope.MatchData) == null ? $opal.cm('MatchData') : $a).$new(re, result);
      }
      else {
        $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
      }

      return result ? result.index : nil;
    
    };

    $opal.defn(self, '$eql?', def['$==']);

    def.$inspect = function() {
      var self = this;

      return self.toString();
    };

    def.$match = TMP_1 = function(string, pos) {
      var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      if ((($a = string === nil) !== nil && (!$a._isBoolean || $a == true))) {
        $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
        return nil;};
      if ((($a = string._isString == null) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = string['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "no implicit conversion of " + (string.$class()) + " into String")
        };
        string = string.$to_str();};
      
      var re = self;

      if (re.global) {
        // should we clear it afterwards too?
        re.lastIndex = 0;
      }
      else {
        re = new RegExp(re.source, 'g' + (re.multiline ? 'm' : '') + (re.ignoreCase ? 'i' : ''));
      }

      var result = re.exec(string);

      if (result) {
        result = $gvars["~"] = (($a = $scope.MatchData) == null ? $opal.cm('MatchData') : $a).$new(re, result);

        if (block === nil) {
          return result;
        }
        else {
          return block.$call(result);
        }
      }
      else {
        return $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
      }
    
    };

    def.$source = function() {
      var self = this;

      return self.source;
    };

    return $opal.defn(self, '$to_s', def.$source);
  })(self, null)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$==', '$normalize', '$raise', '$class', '$>=', '$<=']);
  return (function($base) {
    var self = $module($base, 'Comparable');

    var def = self._proto, $scope = self._scope;

    $opal.defs(self, '$normalize', function(what) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Integer) == null ? $opal.cm('Integer') : $b)['$==='](what)) !== nil && (!$a._isBoolean || $a == true))) {
        return what};
      if (what['$>'](0)) {
        return 1};
      if (what['$<'](0)) {
        return -1};
      return 0;
    });

    def['$=='] = function(other) {
      var $a, self = this, cmp = nil;

      try {
      if ((($a = self['$equal?'](other)) !== nil && (!$a._isBoolean || $a == true))) {
          return true};
        if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          return false
        };
        return (($a = $scope.Comparable) == null ? $opal.cm('Comparable') : $a).$normalize(cmp)['$=='](0);
      } catch ($err) {if ($opal.$rescue($err, [(($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a)])) {
        return false
        }else { throw $err; }
      };
    };

    def['$>'] = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return (($a = $scope.Comparable) == null ? $opal.cm('Comparable') : $a).$normalize(cmp)['$>'](0);
    };

    def['$>='] = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return (($a = $scope.Comparable) == null ? $opal.cm('Comparable') : $a).$normalize(cmp)['$>='](0);
    };

    def['$<'] = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return (($a = $scope.Comparable) == null ? $opal.cm('Comparable') : $a).$normalize(cmp)['$<'](0);
    };

    def['$<='] = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return (($a = $scope.Comparable) == null ? $opal.cm('Comparable') : $a).$normalize(cmp)['$<='](0);
    };

    def['$between?'] = function(min, max) {
      var self = this;

      if (self['$<'](min)) {
        return false};
      if (self['$>'](max)) {
        return false};
      return true;
    };
        ;$opal.donate(self, ["$==", "$>", "$>=", "$<", "$<=", "$between?"]);
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$raise', '$enum_for', '$flatten', '$map', '$==', '$destructure', '$nil?', '$coerce_to!', '$coerce_to', '$===', '$new', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$yield', '$enumerator_size', '$respond_to?', '$size', '$private', '$compare', '$<=>', '$dup', '$sort', '$call', '$first', '$zip', '$to_a']);
  return (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_35, TMP_36, TMP_40, TMP_41;

    def['$all?'] = TMP_1 = function() {
      var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      
      var result = true;

      if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
            result = false;
            return $breaker;
          }
        }
      }
      else {
        self.$each._p = function(obj) {
          if (arguments.length == 1 && (($a = obj) === nil || ($a._isBoolean && $a == false))) {
            result = false;
            return $breaker;
          }
        }
      }

      self.$each();

      return result;
    
    };

    def['$any?'] = TMP_2 = function() {
      var $a, self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      
      var result = false;

      if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result = true;
            return $breaker;
          }
        };
      }
      else {
        self.$each._p = function(obj) {
          if (arguments.length != 1 || (($a = obj) !== nil && (!$a._isBoolean || $a == true))) {
            result = true;
            return $breaker;
          }
        }
      }

      self.$each();

      return result;
    
    };

    def.$chunk = TMP_3 = function(state) {
      var $a, self = this, $iter = TMP_3._p, block = $iter || nil;

      TMP_3._p = null;
      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$collect = TMP_4 = function() {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect")
      };
      
      var result = [];

      self.$each._p = function() {
        var value = $opal.$yieldX(block, arguments);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        result.push(value);
      };

      self.$each();

      return result;
    
    };

    def.$collect_concat = TMP_5 = function() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect_concat")
      };
      return ($a = ($b = self).$map, $a._p = (TMP_6 = function(item){var self = TMP_6._s || this, $a;
if (item == null) item = nil;
      return $a = $opal.$yield1(block, item), $a === $breaker ? $a : $a}, TMP_6._s = self, TMP_6), $a).call($b).$flatten(1);
    };

    def.$count = TMP_7 = function(object) {
      var $a, self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      
      var result = 0;

      if (object != null) {
        block = function() {
          return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments)['$=='](object);
        };
      }
      else if (block === nil) {
        block = function() { return true; };
      }

      self.$each._p = function() {
        var value = $opal.$yieldX(block, arguments);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
          result++;
        }
      }

      self.$each();

      return result;
    
    };

    def.$cycle = TMP_8 = function(n) {
      var $a, self = this, $iter = TMP_8._p, block = $iter || nil;

      if (n == null) {
        n = nil
      }
      TMP_8._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        n = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](n, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        if ((($a = n <= 0) !== nil && (!$a._isBoolean || $a == true))) {
          return nil};
      };
      
      var result,
          all  = [];

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }
    
      if ((($a = n['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        
        while (true) {
          for (var i = 0, length = all.length; i < length; i++) {
            var value = $opal.$yield1(block, all[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }
        }
      
        } else {
        
        while (n > 1) {
          for (var i = 0, length = all.length; i < length; i++) {
            var value = $opal.$yield1(block, all[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }

          n--;
        }
      
      };
    };

    def.$detect = TMP_9 = function(ifnone) {
      var $a, self = this, $iter = TMP_9._p, block = $iter || nil;

      TMP_9._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      
      var result = undefined;

      self.$each._p = function() {
        var params = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value  = $opal.$yield1(block, params);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
          result = params;
          return $breaker;
        }
      };

      self.$each();

      if (result === undefined && ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          result = ifnone();
        }
        else {
          result = ifnone;
        }
      }

      return result === undefined ? nil : result;
    
    };

    def.$drop = function(number) {
      var $a, self = this;

      number = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(number, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      if ((($a = number < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each._p = function() {
        if (number <= current) {
          result.push((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    
    };

    def.$drop_while = TMP_10 = function() {
      var $a, self = this, $iter = TMP_10._p, block = $iter || nil;

      TMP_10._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

        if (dropping) {
          var value = $opal.$yield1(block, param);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    };

    def.$each_cons = TMP_11 = function(n) {
      var $a, self = this, $iter = TMP_11._p, block = $iter || nil;

      TMP_11._p = null;
      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$each_entry = TMP_12 = function() {
      var $a, self = this, $iter = TMP_12._p, block = $iter || nil;

      TMP_12._p = null;
      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$each_slice = TMP_13 = function(n) {
      var $a, self = this, $iter = TMP_13._p, block = $iter || nil;

      TMP_13._p = null;
      n = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(n, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      if ((($a = n <= 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_slice", n)
      };
      
      var result,
          slice = []

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          if ($opal.$yield1(block, slice) === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        if ($opal.$yield1(block, slice) === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return nil;
    };

    def.$each_with_index = TMP_14 = function(args) {
      var $a, $b, self = this, $iter = TMP_14._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_14._p = null;
      if ((block !== nil)) {
        } else {
        return ($a = self).$enum_for.apply($a, ["each_with_index"].concat(args))
      };
      
      var result,
          index = 0;

      self.$each._p = function() {
        var param = (($b = $scope.Opal) == null ? $opal.cm('Opal') : $b).$destructure(arguments),
            value = block(param, index);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    
      return self;
    };

    def.$each_with_object = TMP_15 = function(object) {
      var $a, self = this, $iter = TMP_15._p, block = $iter || nil;

      TMP_15._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_with_object", object)
      };
      
      var result;

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = block(param, object);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return object;
    };

    def.$entries = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      
      var result = [];

      self.$each._p = function() {
        result.push((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    };

    $opal.defn(self, '$find', def.$detect);

    def.$find_all = TMP_16 = function() {
      var $a, self = this, $iter = TMP_16._p, block = $iter || nil;

      TMP_16._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("find_all")
      };
      
      var result = [];

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    };

    def.$find_index = TMP_17 = function(object) {
      var $a, self = this, $iter = TMP_17._p, block = $iter || nil;

      TMP_17._p = null;
      if ((($a = object === undefined && block === nil) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$enum_for("find_index")};
      
      var result = nil,
          index  = 0;

      if (object != null) {
        self.$each._p = function() {
          var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if ((param)['$=='](object)) {
            result = index;
            return $breaker;
          }

          index += 1;
        };
      }
      else if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result = index;
            return $breaker;
          }

          index += 1;
        };
      }

      self.$each();

      return result;
    
    };

    def.$first = function(number) {
      var $a, self = this, result = nil;

      if ((($a = number === undefined) !== nil && (!$a._isBoolean || $a == true))) {
        result = nil;
        
        self.$each._p = function() {
          result = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          return $breaker;
        };

        self.$each();
      ;
        } else {
        result = [];
        number = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(number, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        if ((($a = number < 0) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "attempt to take negative size")};
        if ((($a = number == 0) !== nil && (!$a._isBoolean || $a == true))) {
          return []};
        
        var current = 0,
            number  = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(number, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

        self.$each._p = function() {
          result.push((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments));

          if (number <= ++current) {
            return $breaker;
          }
        };

        self.$each();
      ;
      };
      return result;
    };

    $opal.defn(self, '$flat_map', def.$collect_concat);

    def.$grep = TMP_18 = function(pattern) {
      var $a, self = this, $iter = TMP_18._p, block = $iter || nil;

      TMP_18._p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each._p = function() {
          var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            value = $opal.$yield1(block, param);

            if (value === $breaker) {
              result = $breaker.$v;
              return $breaker;
            }

            result.push(value);
          }
        };
      }
      else {
        self.$each._p = function() {
          var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    ;
    };

    def.$group_by = TMP_19 = function() {
      var $a, $b, $c, self = this, $iter = TMP_19._p, block = $iter || nil, hash = nil;

      TMP_19._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("group_by")
      };
      hash = (($a = $scope.Hash) == null ? $opal.cm('Hash') : $a).$new();
      
      var result;

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        (($a = value, $b = hash, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    };

    def['$include?'] = function(obj) {
      var $a, self = this;

      
      var result = false;

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

        if ((param)['$=='](obj)) {
          result = true;
          return $breaker;
        }
      }

      self.$each();

      return result;
    
    };

    def.$inject = TMP_20 = function(object, sym) {
      var $a, self = this, $iter = TMP_20._p, block = $iter || nil;

      TMP_20._p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each._p = function() {
          var value = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = $opal.$yieldX(block, [result, value]);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!(($a = $scope.Symbol) == null ? $opal.cm('Symbol') : $a)['$==='](object)) {
            self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each._p = function() {
          var value = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    };

    def.$lazy = function() {
      var $a, $b, TMP_21, $c, $d, self = this;

      return ($a = ($b = (($c = ((($d = $scope.Enumerator) == null ? $opal.cm('Enumerator') : $d))._scope).Lazy == null ? $c.cm('Lazy') : $c.Lazy)).$new, $a._p = (TMP_21 = function(enum$, args){var self = TMP_21._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
      return ($a = enum$).$yield.apply($a, [].concat(args))}, TMP_21._s = self, TMP_21), $a).call($b, self, self.$enumerator_size());
    };

    def.$enumerator_size = function() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("size")) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$size()
        } else {
        return nil
      };
    };

    self.$private("enumerator_size");

    $opal.defn(self, '$map', def.$collect);

    def.$max = TMP_22 = function() {
      var $a, self = this, $iter = TMP_22._p, block = $iter || nil;

      TMP_22._p = null;
      
      var result;

      if (block !== nil) {
        self.$each._p = function() {
          var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if (value === nil) {
            self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison failed");
          }

          if (value > 0) {
            result = param;
          }
        };
      }
      else {
        self.$each._p = function() {
          var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$compare(param, result) > 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    };

    def.$max_by = TMP_23 = function() {
      var $a, self = this, $iter = TMP_23._p, block = $iter || nil;

      TMP_23._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("max_by")
      };
      
      var result,
          by;

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    };

    $opal.defn(self, '$member?', def['$include?']);

    def.$min = TMP_24 = function() {
      var $a, self = this, $iter = TMP_24._p, block = $iter || nil;

      TMP_24._p = null;
      
      var result;

      if (block !== nil) {
        self.$each._p = function() {
          var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if (value === nil) {
            self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each._p = function() {
          var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    };

    def.$min_by = TMP_25 = function() {
      var $a, self = this, $iter = TMP_25._p, block = $iter || nil;

      TMP_25._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("min_by")
      };
      
      var result,
          by;

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    };

    def.$minmax = TMP_26 = function() {
      var $a, self = this, $iter = TMP_26._p, block = $iter || nil;

      TMP_26._p = null;
      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$minmax_by = TMP_27 = function() {
      var $a, self = this, $iter = TMP_27._p, block = $iter || nil;

      TMP_27._p = null;
      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def['$none?'] = TMP_28 = function() {
      var $a, self = this, $iter = TMP_28._p, block = $iter || nil;

      TMP_28._p = null;
      
      var result = true;

      if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result = false;
            return $breaker;
          }
        }
      }
      else {
        self.$each._p = function() {
          var value = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result = false;
            return $breaker;
          }
        };
      }

      self.$each();

      return result;
    
    };

    def['$one?'] = TMP_29 = function() {
      var $a, self = this, $iter = TMP_29._p, block = $iter || nil;

      TMP_29._p = null;
      
      var result = false;

      if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            if (result === true) {
              result = false;
              return $breaker;
            }

            result = true;
          }
        }
      }
      else {
        self.$each._p = function() {
          var value = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            if (result === true) {
              result = false;
              return $breaker;
            }

            result = true;
          }
        }
      }

      self.$each();

      return result;
    
    };

    def.$partition = TMP_30 = function() {
      var $a, self = this, $iter = TMP_30._p, block = $iter || nil;

      TMP_30._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("partition")
      };
      
      var truthy = [], falsy = [];

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    
    };

    $opal.defn(self, '$reduce', def.$inject);

    def.$reject = TMP_31 = function() {
      var $a, self = this, $iter = TMP_31._p, block = $iter || nil;

      TMP_31._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject")
      };
      
      var result = [];

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    };

    def.$reverse_each = TMP_32 = function() {
      var self = this, $iter = TMP_32._p, block = $iter || nil;

      TMP_32._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reverse_each")
      };
      
      var result = [];

      self.$each._p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        $opal.$yieldX(block, result[i]);
      }

      return result;
    
    };

    $opal.defn(self, '$select', def.$find_all);

    def.$slice_before = TMP_33 = function(pattern) {
      var $a, $b, TMP_34, $c, self = this, $iter = TMP_33._p, block = $iter || nil;

      TMP_33._p = null;
      if ((($a = pattern === undefined && block === nil || arguments.length > 1) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      return ($a = ($b = (($c = $scope.Enumerator) == null ? $opal.cm('Enumerator') : $c)).$new, $a._p = (TMP_34 = function(e){var self = TMP_34._s || this, $a;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each._p = function() {
              var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
                  value = $opal.$yield1(block, param);

              if ((($a = value) !== nil && (!$a._isBoolean || $a == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each._p = function() {
              var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ((($a = value) !== nil && (!$a._isBoolean || $a == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each._p = function() {
            var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a._isBoolean || $a == true)) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, TMP_34._s = self, TMP_34), $a).call($b);
    };

    def.$sort = TMP_35 = function() {
      var $a, self = this, $iter = TMP_35._p, block = $iter || nil;

      TMP_35._p = null;
      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$sort_by = TMP_36 = function() {
      var $a, $b, TMP_37, $c, $d, TMP_38, $e, $f, TMP_39, self = this, $iter = TMP_36._p, block = $iter || nil;

      TMP_36._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("sort_by")
      };
      return ($a = ($b = ($c = ($d = ($e = ($f = self).$map, $e._p = (TMP_39 = function(){var self = TMP_39._s || this, $a;

      arg = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments);
        return [block.$call(arg), arg];}, TMP_39._s = self, TMP_39), $e).call($f)).$sort, $c._p = (TMP_38 = function(a, b){var self = TMP_38._s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$[]'](0)['$<=>'](b['$[]'](0))}, TMP_38._s = self, TMP_38), $c).call($d)).$map, $a._p = (TMP_37 = function(arg){var self = TMP_37._s || this;
if (arg == null) arg = nil;
      return arg[1];}, TMP_37._s = self, TMP_37), $a).call($b);
    };

    def.$take = function(num) {
      var self = this;

      return self.$first(num);
    };

    def.$take_while = TMP_40 = function() {
      var $a, self = this, $iter = TMP_40._p, block = $iter || nil;

      TMP_40._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("take_while")
      };
      
      var result = [];

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
          return $breaker;
        }

        result.push(param);
      };

      self.$each();

      return result;
    
    };

    $opal.defn(self, '$to_a', def.$entries);

    def.$zip = TMP_41 = function(others) {
      var $a, self = this, $iter = TMP_41._p, block = $iter || nil;

      others = $slice.call(arguments, 0);
      TMP_41._p = null;
      return ($a = self.$to_a()).$zip.apply($a, [].concat(others));
    };
        ;$opal.donate(self, ["$all?", "$any?", "$chunk", "$collect", "$collect_concat", "$count", "$cycle", "$detect", "$drop", "$drop_while", "$each_cons", "$each_entry", "$each_slice", "$each_with_index", "$each_with_object", "$entries", "$find", "$find_all", "$find_index", "$first", "$flat_map", "$grep", "$group_by", "$include?", "$inject", "$lazy", "$enumerator_size", "$map", "$max", "$max_by", "$member?", "$min", "$min_by", "$minmax", "$minmax_by", "$none?", "$one?", "$partition", "$reduce", "$reject", "$reverse_each", "$select", "$slice_before", "$sort", "$sort_by", "$take", "$take_while", "$to_a", "$zip"]);
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$destructure', '$name', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  ;
  return (function($base, $super) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self._proto, $scope = self._scope, $a, TMP_1, TMP_2, TMP_3, TMP_4;

    def.size = def.args = def.object = def.method = nil;
    self.$include((($a = $scope.Enumerable) == null ? $opal.cm('Enumerable') : $a));

    $opal.defs(self, '$for', TMP_1 = function(object, method, args) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 2);
      if (method == null) {
        method = "each"
      }
      TMP_1._p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    });

    def.$initialize = TMP_2 = function() {
      var $a, $b, $c, self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      if (block !== false && block !== nil) {
        self.object = ($a = ($b = (($c = $scope.Generator) == null ? $opal.cm('Generator') : $c)).$new, $a._p = block.$to_proc(), $a).call($b);
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ((($a = self.size) !== nil && (!$a._isBoolean || $a == true))) {
          return self.size = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(self.size, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")
          } else {
          return nil
        };
        } else {
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return self.size = nil;
      };
    };

    def.$each = TMP_3 = function(args) {
      var $a, $b, $c, self = this, $iter = TMP_3._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3._p = null;
      if ((($a = ($b = block['$nil?'](), $b !== false && $b !== nil ?args['$empty?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      args = self.args['$+'](args);
      if ((($a = block['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return ($a = self.$class()).$new.apply($a, [self.object, self.method].concat(args))};
      return ($b = ($c = self.object).$__send__, $b._p = block.$to_proc(), $b).apply($c, [self.method].concat(args));
    };

    def.$size = function() {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Proc) == null ? $opal.cm('Proc') : $b)['$==='](self.size)) !== nil && (!$a._isBoolean || $a == true))) {
        return ($a = self.size).$call.apply($a, [].concat(self.args))
        } else {
        return self.size
      };
    };

    def.$with_index = TMP_4 = function(offset) {
      var $a, self = this, $iter = TMP_4._p, block = $iter || nil;

      if (offset == null) {
        offset = 0
      }
      TMP_4._p = null;
      if (offset !== false && offset !== nil) {
        offset = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(offset, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")
        } else {
        offset = 0
      };
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("with_index", offset)
      };
      
      var result

      self.$each._p = function() {
        var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(arguments),
            value = block(param, index);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        index++;
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
    };

    $opal.defn(self, '$with_object', def.$each_with_object);

    def.$inspect = function() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class().$name()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ((($a = self.args['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        result = result['$+']("(" + (self.args.$inspect()['$[]']((($a = $scope.Range) == null ? $opal.cm('Range') : $a).$new(1, -2))) + ")")
      };
      return result['$+'](">");
    };

    (function($base, $super) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self._proto, $scope = self._scope, $a, TMP_5, TMP_6;

      def.block = nil;
      self.$include((($a = $scope.Enumerable) == null ? $opal.cm('Enumerable') : $a));

      def.$initialize = TMP_5 = function() {
        var $a, self = this, $iter = TMP_5._p, block = $iter || nil;

        TMP_5._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise((($a = $scope.LocalJumpError) == null ? $opal.cm('LocalJumpError') : $a), "no block given")
        };
        return self.block = block;
      };

      return (def.$each = TMP_6 = function(args) {
        var $a, $b, $c, self = this, $iter = TMP_6._p, block = $iter || nil, yielder = nil;

        args = $slice.call(arguments, 0);
        TMP_6._p = null;
        yielder = ($a = ($b = (($c = $scope.Yielder) == null ? $opal.cm('Yielder') : $c)).$new, $a._p = block.$to_proc(), $a).call($b);
        
        try {
          args.unshift(yielder);

          if ($opal.$yieldX(self.block, args) === $breaker) {
            return $breaker.$v;
          }
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, nil) && 'each';
    })(self, null);

    (function($base, $super) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self._proto, $scope = self._scope, TMP_7;

      def.block = nil;
      def.$initialize = TMP_7 = function() {
        var self = this, $iter = TMP_7._p, block = $iter || nil;

        TMP_7._p = null;
        return self.block = block;
      };

      def.$yield = function(values) {
        var self = this;

        values = $slice.call(arguments, 0);
        
        var value = $opal.$yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      };

      return (def['$<<'] = function(values) {
        var $a, self = this;

        values = $slice.call(arguments, 0);
        ($a = self).$yield.apply($a, [].concat(values));
        return self;
      }, nil) && '<<';
    })(self, null);

    return (function($base, $super) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self._proto, $scope = self._scope, $a, TMP_8, TMP_11, TMP_13, TMP_18, TMP_20, TMP_21, TMP_23, TMP_26, TMP_29;

      def.enumerator = nil;
      (function($base, $super) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self._proto, $scope = self._scope;

        return nil;
      })(self, (($a = $scope.Exception) == null ? $opal.cm('Exception') : $a));

      def.$initialize = TMP_8 = function(object, size) {
        var $a, TMP_9, self = this, $iter = TMP_8._p, block = $iter || nil;

        if (size == null) {
          size = nil
        }
        TMP_8._p = null;
        if ((block !== nil)) {
          } else {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return $opal.find_super_dispatcher(self, 'initialize', TMP_8, (TMP_9 = function(yielder, each_args){var self = TMP_9._s || this, $a, $b, TMP_10;
if (yielder == null) yielder = nil;each_args = $slice.call(arguments, 1);
        try {
          return ($a = ($b = object).$each, $a._p = (TMP_10 = function(args){var self = TMP_10._s || this;
args = $slice.call(arguments, 0);
            
              args.unshift(yielder);

              if ($opal.$yieldX(block, args) === $breaker) {
                return $breaker;
              }
            ;}, TMP_10._s = self, TMP_10), $a).apply($b, [].concat(each_args))
          } catch ($err) {if ($opal.$rescue($err, [(($a = $scope.Exception) == null ? $opal.cm('Exception') : $a)])) {
            return nil
            }else { throw $err; }
          }}, TMP_9._s = self, TMP_9)).apply(self, [size]);
      };

      $opal.defn(self, '$force', def.$to_a);

      def.$lazy = function() {
        var self = this;

        return self;
      };

      def.$collect = TMP_11 = function() {
        var $a, $b, TMP_12, $c, self = this, $iter = TMP_11._p, block = $iter || nil;

        TMP_11._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to call lazy map without a block")
        };
        return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_12 = function(enum$, args){var self = TMP_12._s || this;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          enum$.$yield(value);
        }, TMP_12._s = self, TMP_12), $a).call($b, self, self.$enumerator_size());
      };

      def.$collect_concat = TMP_13 = function() {
        var $a, $b, TMP_14, $c, self = this, $iter = TMP_13._p, block = $iter || nil;

        TMP_13._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to call lazy map without a block")
        };
        return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_14 = function(enum$, args){var self = TMP_14._s || this, $a, $b, TMP_15, $c, TMP_16;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            ($a = ($b = (value)).$each, $a._p = (TMP_15 = function(v){var self = TMP_15._s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_15._s = self, TMP_15), $a).call($b)
          }
          else {
            var array = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$try_convert(value, (($a = $scope.Array) == null ? $opal.cm('Array') : $a), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              ($a = ($c = (value)).$each, $a._p = (TMP_16 = function(v){var self = TMP_16._s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_16._s = self, TMP_16), $a).call($c);
            }
          }
        ;}, TMP_14._s = self, TMP_14), $a).call($b, self, nil);
      };

      def.$drop = function(n) {
        var $a, $b, TMP_17, $c, self = this, current_size = nil, set_size = nil, dropped = nil;

        n = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(n, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        if (n['$<'](0)) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = (($b = $scope.Integer) == null ? $opal.cm('Integer') : $b)['$==='](current_size)) !== nil && (!$a._isBoolean || $a == true))) {
          if (n['$<'](current_size)) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_17 = function(enum$, args){var self = TMP_17._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (dropped['$<'](n)) {
            return dropped = dropped['$+'](1)
            } else {
            return ($a = enum$).$yield.apply($a, [].concat(args))
          }}, TMP_17._s = self, TMP_17), $a).call($b, self, set_size);
      };

      def.$drop_while = TMP_18 = function() {
        var $a, $b, TMP_19, $c, self = this, $iter = TMP_18._p, block = $iter || nil, succeeding = nil;

        TMP_18._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_19 = function(enum$, args){var self = TMP_19._s || this, $a, $b;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (succeeding !== false && succeeding !== nil) {
            
            var value = $opal.$yieldX(block, args);

            if (value === $breaker) {
              return $breaker;
            }

            if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
              succeeding = false;

              ($a = enum$).$yield.apply($a, [].concat(args));
            }
          
            } else {
            return ($b = enum$).$yield.apply($b, [].concat(args))
          }}, TMP_19._s = self, TMP_19), $a).call($b, self, nil);
      };

      def.$enum_for = TMP_20 = function(method, args) {
        var $a, $b, self = this, $iter = TMP_20._p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        if (method == null) {
          method = "each"
        }
        TMP_20._p = null;
        return ($a = ($b = self.$class()).$for, $a._p = block.$to_proc(), $a).apply($b, [self, method].concat(args));
      };

      def.$find_all = TMP_21 = function() {
        var $a, $b, TMP_22, $c, self = this, $iter = TMP_21._p, block = $iter || nil;

        TMP_21._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to call lazy select without a block")
        };
        return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_22 = function(enum$, args){var self = TMP_22._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
        ;}, TMP_22._s = self, TMP_22), $a).call($b, self, nil);
      };

      $opal.defn(self, '$flat_map', def.$collect_concat);

      def.$grep = TMP_23 = function(pattern) {
        var $a, $b, TMP_24, $c, TMP_25, $d, self = this, $iter = TMP_23._p, block = $iter || nil;

        TMP_23._p = null;
        if (block !== false && block !== nil) {
          return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_24 = function(enum$, args){var self = TMP_24._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
          
            var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(args),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
              value = $opal.$yield1(block, param);

              if (value === $breaker) {
                return $breaker;
              }

              enum$.$yield($opal.$yield1(block, param));
            }
          ;}, TMP_24._s = self, TMP_24), $a).call($b, self, nil)
          } else {
          return ($a = ($c = (($d = $scope.Lazy) == null ? $opal.cm('Lazy') : $d)).$new, $a._p = (TMP_25 = function(enum$, args){var self = TMP_25._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
          
            var param = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$destructure(args),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
              enum$.$yield(param);
            }
          ;}, TMP_25._s = self, TMP_25), $a).call($c, self, nil)
        };
      };

      $opal.defn(self, '$map', def.$collect);

      $opal.defn(self, '$select', def.$find_all);

      def.$reject = TMP_26 = function() {
        var $a, $b, TMP_27, $c, self = this, $iter = TMP_26._p, block = $iter || nil;

        TMP_26._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to call lazy reject without a block")
        };
        return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_27 = function(enum$, args){var self = TMP_27._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
        ;}, TMP_27._s = self, TMP_27), $a).call($b, self, nil);
      };

      def.$take = function(n) {
        var $a, $b, TMP_28, $c, self = this, current_size = nil, set_size = nil, taken = nil;

        n = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(n, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        if (n['$<'](0)) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = (($b = $scope.Integer) == null ? $opal.cm('Integer') : $b)['$==='](current_size)) !== nil && (!$a._isBoolean || $a == true))) {
          if (n['$<'](current_size)) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_28 = function(enum$, args){var self = TMP_28._s || this, $a, $b;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (taken['$<'](n)) {
            ($a = enum$).$yield.apply($a, [].concat(args));
            return taken = taken['$+'](1);
            } else {
            return self.$raise((($b = $scope.StopLazyError) == null ? $opal.cm('StopLazyError') : $b))
          }}, TMP_28._s = self, TMP_28), $a).call($b, self, set_size);
      };

      def.$take_while = TMP_29 = function() {
        var $a, $b, TMP_30, $c, self = this, $iter = TMP_29._p, block = $iter || nil;

        TMP_29._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to call lazy take_while without a block")
        };
        return ($a = ($b = (($c = $scope.Lazy) == null ? $opal.cm('Lazy') : $c)).$new, $a._p = (TMP_30 = function(enum$, args){var self = TMP_30._s || this, $a, $b;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
          else {
            self.$raise((($b = $scope.StopLazyError) == null ? $opal.cm('StopLazyError') : $b));
          }
        ;}, TMP_30._s = self, TMP_30), $a).call($b, self, nil);
      };

      $opal.defn(self, '$to_enum', def.$enum_for);

      return (def.$inspect = function() {
        var self = this;

        return "#<" + (self.$class().$name()) + ": " + (self.enumerator.$inspect()) + ">";
      }, nil) && 'inspect';
    })(self, self);
  })(self, null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $gvars = $opal.gvars, $range = $opal.range;

  $opal.add_stubs(['$include', '$new', '$class', '$raise', '$===', '$to_a', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$==', '$to_str', '$clone', '$hash', '$<=>', '$inspect', '$empty?', '$enum_for', '$nil?', '$coerce_to!', '$initialize_clone', '$initialize_dup', '$replace', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$object_id', '$[]', '$to_s', '$join', '$delete_if', '$to_proc', '$each', '$reverse', '$!', '$map', '$rand', '$keep_if', '$shuffle!', '$>', '$<', '$sort', '$times', '$[]=', '$<<', '$at']);
  ;
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self._proto, $scope = self._scope, $a, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_24;

    def.length = nil;
    self.$include((($a = $scope.Enumerable) == null ? $opal.cm('Enumerable') : $a));

    def._isArray = true;

    $opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return objects;
    });

    def.$initialize = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      return ($a = self.$class()).$new.apply($a, [].concat(args));
    };

    $opal.defs(self, '$new', TMP_1 = function(size, obj) {
      var $a, $b, self = this, $iter = TMP_1._p, block = $iter || nil;

      if (size == null) {
        size = nil
      }
      if (obj == null) {
        obj = nil
      }
      TMP_1._p = null;
      if ((($a = arguments.length > 2) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "wrong number of arguments (" + (arguments.length) + " for 0..2)")};
      if ((($a = arguments.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      if ((($a = arguments.length === 1) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](size)) !== nil && (!$a._isBoolean || $a == true))) {
          return size.$to_a()
        } else if ((($a = size['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
          return size.$to_ary()}};
      size = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(size, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      if ((($a = size < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "negative array size")};
      
      var result = [];

      if (block === nil) {
        for (var i = 0; i < size; i++) {
          result.push(obj);
        }
      }
      else {
        for (var i = 0, value; i < size; i++) {
          value = block(i);

          if (value === $breaker) {
            return $breaker.$v;
          }

          result[i] = value;
        }
      }

      return result;
    
    });

    $opal.defs(self, '$try_convert', function(obj) {
      var $a, self = this;

      return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to?'](obj, (($a = $scope.Array) == null ? $opal.cm('Array') : $a), "to_ary");
    });

    def['$&'] = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.Array) == null ? $opal.cm('Array') : $a), "to_ary").$to_a()
      };
      
      var result = [],
          seen   = {};

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if (!seen[item]) {
          for (var j = 0, length2 = other.length; j < length2; j++) {
            var item2 = other[j];

            if (!seen[item2] && (item)['$=='](item2)) {
              seen[item] = true;
              result.push(item);
            }
          }
        }
      }

      return result;
    
    };

    def['$*'] = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
        return self.join(other.$to_str())};
      if ((($a = other['$respond_to?']("to_int")) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "no implicit conversion of " + (other.$class()) + " into Integer")
      };
      other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      if ((($a = other < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "negative argument")};
      
      var result = [];

      for (var i = 0; i < other; i++) {
        result = result.concat(self);
      }

      return result;
    
    };

    def['$+'] = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.Array) == null ? $opal.cm('Array') : $a), "to_ary").$to_a()
      };
      return self.concat(other);
    };

    def['$-'] = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.Array) == null ? $opal.cm('Array') : $a), "to_ary").$to_a()
      };
      if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      if ((($a = other.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$clone()};
      
      var seen   = {},
          result = [];

      for (var i = 0, length = other.length; i < length; i++) {
        seen[other[i]] = true;
      }

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if (!seen[item]) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$<<'] = function(object) {
      var self = this;

      self.push(object);
      return self;
    };

    def['$<=>'] = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
      } else if ((($a = other['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      if (self.length != other.length) {
        return (self.length > other.length) ? 1 : -1;
      }

      for (var i = 0, length = self.length; i < length; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return 0;
    ;
    };

    def['$=='] = function(other) {
      var $a, $b, self = this;

      if ((($a = self === other) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        if ((($a = other['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          return false
        };
        return other['$=='](self);
      };
      other = other.$to_a();
      if ((($a = self.length === other.length) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var a = self[i],
            b = other[i];

        if (a._isArray && b._isArray && (a === self)) {
          continue;
        }

        if (!(a)['$=='](b)) {
          return false;
        }
      }
    
      return true;
    };

    def['$[]'] = function(index, length) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Range) == null ? $opal.cm('Range') : $b)['$==='](index)) !== nil && (!$a._isBoolean || $a == true))) {
        
        var size    = self.length,
            exclude = index.exclude,
            from    = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index.begin, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int"),
            to      = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index.end, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            return nil;
          }
        }

        if (from > size) {
          return nil;
        }

        if (to < 0) {
          to += size;

          if (to < 0) {
            return [];
          }
        }

        if (!exclude) {
          to += 1;
        }

        return self.slice(from, to);
      ;
        } else {
        index = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        
        var size = self.length;

        if (index < 0) {
          index += size;

          if (index < 0) {
            return nil;
          }
        }

        if (length === undefined) {
          if (index >= size || index < 0) {
            return nil;
          }

          return self[index];
        }
        else {
          length = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(length, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

          if (length < 0 || index > size || index < 0) {
            return nil;
          }

          return self.slice(index, index + length);
        }
      
      };
    };

    def['$[]='] = function(index, value, extra) {
      var $a, $b, self = this, data = nil, length = nil;

      if ((($a = (($b = $scope.Range) == null ? $opal.cm('Range') : $b)['$==='](index)) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](value)) !== nil && (!$a._isBoolean || $a == true))) {
          data = value.$to_a()
        } else if ((($a = value['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var size    = self.length,
            exclude = index.exclude,
            from    = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index.begin, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int"),
            to      = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index.end, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise((($a = $scope.RangeError) == null ? $opal.cm('RangeError') : $a), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (var i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        if ((($a = extra === undefined) !== nil && (!$a._isBoolean || $a == true))) {
          length = 1
          } else {
          length = value;
          value = extra;
          if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](value)) !== nil && (!$a._isBoolean || $a == true))) {
            data = value.$to_a()
          } else if ((($a = value['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var size   = self.length,
            index  = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int"),
            length = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(length, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int"),
            old;

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise((($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a), "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise((($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a), "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (var i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      ;
      };
    };

    def.$assoc = function(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    };

    def.$at = function(index) {
      var $a, self = this;

      index = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    };

    def.$cycle = TMP_2 = function(n) {
      var $a, $b, self = this, $iter = TMP_2._p, block = $iter || nil;

      if (n == null) {
        n = nil
      }
      TMP_2._p = null;
      if ((($a = ((($b = self['$empty?']()) !== false && $b !== nil) ? $b : n['$=='](0))) !== nil && (!$a._isBoolean || $a == true))) {
        return nil};
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        
        while (true) {
          for (var i = 0, length = self.length; i < length; i++) {
            var value = $opal.$yield1(block, self[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }
        }
      
        } else {
        n = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](n, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (var i = 0, length = self.length; i < length; i++) {
            var value = $opal.$yield1(block, self[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }

          n--;
        }
      
      };
      return self;
    };

    def.$clear = function() {
      var self = this;

      self.splice(0, self.length);
      return self;
    };

    def.$clone = function() {
      var self = this, copy = nil;

      copy = [];
      copy.$initialize_clone(self);
      return copy;
    };

    def.$dup = function() {
      var self = this, copy = nil;

      copy = [];
      copy.$initialize_dup(self);
      return copy;
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.$replace(other);
    };

    def.$collect = TMP_3 = function() {
      var self = this, $iter = TMP_3._p, block = $iter || nil;

      TMP_3._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect")
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.$yield1(block, self[i]);

        if (value === $breaker) {
          return $breaker.$v;
        }

        result.push(value);
      }

      return result;
    
    };

    def['$collect!'] = TMP_4 = function() {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.$yield1(block, self[i]);

        if (value === $breaker) {
          return $breaker.$v;
        }

        self[i] = value;
      }
    
      return self;
    };

    def.$compact = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$compact!'] = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    };

    def.$concat = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.Array) == null ? $opal.cm('Array') : $a), "to_ary").$to_a()
      };
      
      for (var i = 0, length = other.length; i < length; i++) {
        self.push(other[i]);
      }
    
      return self;
    };

    def.$delete = function(object) {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : object;
    
    };

    def.$delete_at = function(index) {
      var $a, self = this;

      
      index = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    ;
    };

    def.$delete_if = TMP_5 = function() {
      var self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("delete_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    };

    def.$drop = function(number) {
      var $a, self = this;

      
      if (number < 0) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a))
      }

      return self.slice(number);
    ;
    };

    $opal.defn(self, '$dup', def.$clone);

    def.$each = TMP_6 = function() {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $opal.$yield1(block, self[i]);

        if (value == $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def.$each_index = TMP_7 = function() {
      var self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_index")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $opal.$yield1(block, i);

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.length === 0;
    };

    def['$eql?'] = function(other) {
      var $a, $b, self = this;

      if ((($a = self === other) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      other = other.$to_a();
      if ((($a = self.length === other.length) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var a = self[i],
            b = other[i];

        if (a._isArray && b._isArray && (a === self)) {
          continue;
        }

        if (!(a)['$eql?'](b)) {
          return false;
        }
      }
    
      return true;
    };

    def.$fetch = TMP_8 = function(index, defaults) {
      var $a, self = this, $iter = TMP_8._p, block = $iter || nil;

      TMP_8._p = null;
      
      var original = index;

      index = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise((($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a), "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise((($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a), "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    };

    def.$fill = TMP_9 = function(args) {
      var $a, $b, self = this, $iter = TMP_9._p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil;

      args = $slice.call(arguments, 0);
      TMP_9._p = null;
      if (block !== false && block !== nil) {
        if ((($a = args.length > 2) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $a = $opal.to_ary(args), one = ($a[0] == null ? nil : $a[0]), two = ($a[1] == null ? nil : $a[1]);
        } else {
        if ((($a = args.length == 0) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "wrong number of arguments (0 for 1..3)")
        } else if ((($a = args.length > 3) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $a = $opal.to_ary(args), obj = ($a[0] == null ? nil : $a[0]), one = ($a[1] == null ? nil : $a[1]), two = ($a[2] == null ? nil : $a[2]);
      };
      if ((($a = (($b = $scope.Range) == null ? $opal.cm('Range') : $b)['$==='](one)) !== nil && (!$a._isBoolean || $a == true))) {
        if (two !== false && two !== nil) {
          self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "length invalid with range")};
        left = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(one.$begin(), (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        if ((($a = left < 0) !== nil && (!$a._isBoolean || $a == true))) {
          left += self.length;};
        if ((($a = left < 0) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise((($a = $scope.RangeError) == null ? $opal.cm('RangeError') : $a), "" + (one.$inspect()) + " out of range")};
        right = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(one.$end(), (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        if ((($a = right < 0) !== nil && (!$a._isBoolean || $a == true))) {
          right += self.length;};
        if ((($a = one['$exclude_end?']()) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          right += 1;
        };
        if ((($a = right <= left) !== nil && (!$a._isBoolean || $a == true))) {
          return self};
      } else if (one !== false && one !== nil) {
        left = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(one, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        if ((($a = left < 0) !== nil && (!$a._isBoolean || $a == true))) {
          left += self.length;};
        if ((($a = left < 0) !== nil && (!$a._isBoolean || $a == true))) {
          left = 0};
        if (two !== false && two !== nil) {
          right = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(two, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
          if ((($a = right == 0) !== nil && (!$a._isBoolean || $a == true))) {
            return self};
          right += left;
          } else {
          right = self.length
        };
        } else {
        left = 0;
        right = self.length;
      };
      if ((($a = left > self.length) !== nil && (!$a._isBoolean || $a == true))) {
        
        for (var i = self.length; i < right; i++) {
          self[i] = nil;
        }
      ;};
      if ((($a = right > self.length) !== nil && (!$a._isBoolean || $a == true))) {
        self.length = right};
      if (block !== false && block !== nil) {
        
        for (var length = self.length; left < right; left++) {
          var value = block(left);

          if (value === $breaker) {
            return $breaker.$v;
          }

          self[left] = value;
        }
      ;
        } else {
        
        for (var length = self.length; left < right; left++) {
          self[left] = obj;
        }
      ;
      };
      return self;
    };

    def.$first = function(count) {
      var $a, self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(count, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

      if (count < 0) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "negative array size");
      }

      return self.slice(0, count);
    
    };

    def.$flatten = function(level) {
      var $a, self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if ((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$respond_to?'](item, "to_ary")) {
          item = (item).$to_ary();

          if (level == null) {
            result.push.apply(result, (item).$flatten().$to_a());
          }
          else if (level == 0) {
            result.push(item);
          }
          else {
            result.push.apply(result, (item).$flatten(level - 1).$to_a());
          }
        }
        else {
          result.push(item);
        }
      }

      return result;
    ;
    };

    def['$flatten!'] = function(level) {
      var self = this;

      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    };

    def.$hash = function() {
      var self = this;

      return self._id || (self._id = Opal.uid());
    };

    def['$include?'] = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    };

    def.$index = TMP_10 = function(object) {
      var self = this, $iter = TMP_10._p, block = $iter || nil;

      TMP_10._p = null;
      
      if (object != null) {
        for (var i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (var i = 0, length = self.length, value; i < length; i++) {
          if ((value = block(self[i])) === $breaker) {
            return $breaker.$v;
          }

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    };

    def.$insert = function(index, objects) {
      var $a, self = this;

      objects = $slice.call(arguments, 1);
      
      index = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(index, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise((($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    };

    def.$inspect = function() {
      var self = this;

      
      var i, inspect, el, el_insp, length, object_id;

      inspect = [];
      object_id = self.$object_id();
      length = self.length;

      for (i = 0; i < length; i++) {
        el = self['$[]'](i);

        // Check object_id to ensure it's not the same array get into an infinite loop
        el_insp = (el).$object_id() === object_id ? '[...]' : (el).$inspect();

        inspect.push(el_insp);
      }
      return '[' + inspect.join(', ') + ']';
    ;
    };

    def.$join = function(sep) {
      var $a, self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil
      }
      if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return ""};
      if ((($a = sep === nil) !== nil && (!$a._isBoolean || $a == true))) {
        sep = $gvars[","]};
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if ((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$respond_to?'](item, "to_str")) {
          var tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$respond_to?'](item, "to_ary")) {
          var tmp = (item).$to_ary();

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$respond_to?'](item, "to_s")) {
          var tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise((($a = $scope.NoMethodError) == null ? $opal.cm('NoMethodError') : $a), "" + ((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s");
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](sep, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s());
      }
    ;
    };

    def.$keep_if = TMP_11 = function() {
      var self = this, $iter = TMP_11._p, block = $iter || nil;

      TMP_11._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("keep_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    };

    def.$last = function(count) {
      var $a, self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(count, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");

      if (count < 0) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    };

    def.$length = function() {
      var self = this;

      return self.length;
    };

    $opal.defn(self, '$map', def.$collect);

    $opal.defn(self, '$map!', def['$collect!']);

    def.$pop = function(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
          return nil};
        return self.pop();};
      count = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(count, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      if ((($a = count < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "negative array size")};
      if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      if ((($a = count > self.length) !== nil && (!$a._isBoolean || $a == true))) {
        return self.splice(0, self.length);
        } else {
        return self.splice(self.length - count, self.length);
      };
    };

    def.$push = function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    
      return self;
    };

    def.$rassoc = function(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    };

    def.$reject = TMP_12 = function() {
      var self = this, $iter = TMP_12._p, block = $iter || nil;

      TMP_12._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject")
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    
    };

    def['$reject!'] = TMP_13 = function() {
      var $a, $b, self = this, $iter = TMP_13._p, block = $iter || nil, original = nil;

      TMP_13._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject!")
      };
      original = self.$length();
      ($a = ($b = self).$delete_if, $a._p = block.$to_proc(), $a).call($b);
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    };

    def.$replace = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.Array) == null ? $opal.cm('Array') : $a), "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    
      return self;
    };

    def.$reverse = function() {
      var self = this;

      return self.slice(0).reverse();
    };

    def['$reverse!'] = function() {
      var self = this;

      return self.reverse();
    };

    def.$reverse_each = TMP_14 = function() {
      var $a, $b, self = this, $iter = TMP_14._p, block = $iter || nil;

      TMP_14._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reverse_each")
      };
      ($a = ($b = self.$reverse()).$each, $a._p = block.$to_proc(), $a).call($b);
      return self;
    };

    def.$rindex = TMP_15 = function(object) {
      var self = this, $iter = TMP_15._p, block = $iter || nil;

      TMP_15._p = null;
      
      if (object != null) {
        for (var i = self.length - 1; i >= 0; i--) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (var i = self.length - 1, value; i >= 0; i--) {
          if ((value = block(self[i])) === $breaker) {
            return $breaker.$v;
          }

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    };

    def.$sample = function(n) {
      var $a, $b, TMP_16, self = this;

      if (n == null) {
        n = nil
      }
      if ((($a = ($b = n['$!'](), $b !== false && $b !== nil ?self['$empty?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return nil};
      if ((($a = (($b = n !== false && n !== nil) ? self['$empty?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      if (n !== false && n !== nil) {
        return ($a = ($b = ($range(1, n, false))).$map, $a._p = (TMP_16 = function(){var self = TMP_16._s || this;

        return self['$[]'](self.$rand(self.$length()))}, TMP_16._s = self, TMP_16), $a).call($b)
        } else {
        return self['$[]'](self.$rand(self.$length()))
      };
    };

    def.$select = TMP_17 = function() {
      var self = this, $iter = TMP_17._p, block = $iter || nil;

      TMP_17._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("select")
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        if ((value = $opal.$yield1(block, item)) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$select!'] = TMP_18 = function() {
      var $a, $b, self = this, $iter = TMP_18._p, block = $iter || nil;

      TMP_18._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("select!")
      };
      
      var original = self.length;
      ($a = ($b = self).$keep_if, $a._p = block.$to_proc(), $a).call($b);
      return self.length === original ? nil : self;
    
    };

    def.$shift = function(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
          return nil};
        return self.shift();};
      count = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(count, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      if ((($a = count < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "negative array size")};
      if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      return self.splice(0, count);
    };

    $opal.defn(self, '$size', def.$length);

    def.$shuffle = function() {
      var self = this;

      return self.$clone()['$shuffle!']();
    };

    def['$shuffle!'] = function() {
      var self = this;

      
      for (var i = self.length - 1; i > 0; i--) {
        var tmp = self[i],
            j   = Math.floor(Math.random() * (i + 1));

        self[i] = self[j];
        self[j] = tmp;
      }
    
      return self;
    };

    $opal.defn(self, '$slice', def['$[]']);

    def['$slice!'] = function(index, length) {
      var self = this;

      
      if (index < 0) {
        index += self.length;
      }

      if (length != null) {
        return self.splice(index, length);
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self.splice(index, 1)[0];
    
    };

    def.$sort = TMP_19 = function() {
      var $a, self = this, $iter = TMP_19._p, block = $iter || nil;

      TMP_19._p = null;
      if ((($a = self.length > 1) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return self
      };
      
      if (!(block !== nil)) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      try {
        return self.slice().sort(function(x, y) {
          var ret = block(x, y);

          if (ret === $breaker) {
            throw $breaker;
          }
          else if (ret === nil) {
            self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
          }

          return (ret)['$>'](0) ? 1 : ((ret)['$<'](0) ? -1 : 0);
        });
      }
      catch (e) {
        if (e === $breaker) {
          return $breaker.$v;
        }
        else {
          throw e;
        }
      }
    ;
    };

    def['$sort!'] = TMP_20 = function() {
      var $a, $b, self = this, $iter = TMP_20._p, block = $iter || nil;

      TMP_20._p = null;
      
      var result;

      if ((block !== nil)) {
        result = ($a = ($b = (self.slice())).$sort, $a._p = block.$to_proc(), $a).call($b);
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    };

    def.$take = function(count) {
      var $a, self = this;

      
      if (count < 0) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a));
      }

      return self.slice(0, count);
    ;
    };

    def.$take_while = TMP_21 = function() {
      var self = this, $iter = TMP_21._p, block = $iter || nil;

      TMP_21._p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        if ((value = block(item)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    };

    def.$to_a = function() {
      var self = this;

      return self;
    };

    $opal.defn(self, '$to_ary', def.$to_a);

    $opal.defn(self, '$to_s', def.$inspect);

    def.$transpose = function() {
      var $a, $b, TMP_22, self = this, result = nil, max = nil;

      if ((($a = self['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      result = [];
      max = nil;
      ($a = ($b = self).$each, $a._p = (TMP_22 = function(row){var self = TMP_22._s || this, $a, $b, TMP_23;
if (row == null) row = nil;
      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](row)) !== nil && (!$a._isBoolean || $a == true))) {
          row = row.$to_a()
          } else {
          row = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(row, (($a = $scope.Array) == null ? $opal.cm('Array') : $a), "to_ary").$to_a()
        };
        ((($a = max) !== false && $a !== nil) ? $a : max = row.length);
        if ((($a = (row.length)['$=='](max)['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise((($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a), "element size differs (" + (row.length) + " should be " + (max))};
        return ($a = ($b = (row.length)).$times, $a._p = (TMP_23 = function(i){var self = TMP_23._s || this, $a, $b, $c, entry = nil;
if (i == null) i = nil;
        entry = (($a = i, $b = result, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))));
          return entry['$<<'](row.$at(i));}, TMP_23._s = self, TMP_23), $a).call($b);}, TMP_22._s = self, TMP_22), $a).call($b);
      return result;
    };

    def.$uniq = function() {
      var self = this;

      
      var result = [],
          seen   = {};

      for (var i = 0, length = self.length, item, hash; i < length; i++) {
        item = self[i];
        hash = item;

        if (!seen[hash]) {
          seen[hash] = true;

          result.push(item);
        }
      }

      return result;
    
    };

    def['$uniq!'] = function() {
      var self = this;

      
      var original = self.length,
          seen     = {};

      for (var i = 0, length = original, item, hash; i < length; i++) {
        item = self[i];
        hash = item;

        if (!seen[hash]) {
          seen[hash] = true;
        }
        else {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    };

    def.$unshift = function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    
      return self;
    };

    return (def.$zip = TMP_24 = function(others) {
      var self = this, $iter = TMP_24._p, block = $iter || nil;

      others = $slice.call(arguments, 0);
      TMP_24._p = null;
      
      var result = [], size = self.length, part, o;

      for (var i = 0; i < size; i++) {
        part = [self[i]];

        for (var j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (var i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }, nil) && 'zip';
  })(self, null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$clone', '$respond_to?', '$==', '$eql?', '$inspect', '$*', '$class', '$slice', '$uniq', '$flatten']);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self._proto, $scope = self._scope;

    return ($opal.defs(self, '$inherited', function(klass) {
      var $a, $b, self = this, replace = nil;

      replace = (($a = $scope.Class) == null ? $opal.cm('Class') : $a).$new((($a = ((($b = $scope.Array) == null ? $opal.cm('Array') : $b))._scope).Wrapper == null ? $a.cm('Wrapper') : $a.Wrapper));
      
      klass._proto        = replace._proto;
      klass._proto._klass = klass;
      klass._alloc        = replace._alloc;
      klass.__parent      = (($a = ((($b = $scope.Array) == null ? $opal.cm('Array') : $b))._scope).Wrapper == null ? $a.cm('Wrapper') : $a.Wrapper);

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
      klass["$[]"]    = replace["$[]"];
    
    }), nil) && 'inherited'
  })(self, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    def.literal = nil;
    $opal.defs(self, '$allocate', TMP_1 = function(array) {
      var self = this, $iter = TMP_1._p, $yield = $iter || nil, obj = nil;

      if (array == null) {
        array = []
      }
      TMP_1._p = null;
      obj = $opal.find_super_dispatcher(self, 'allocate', TMP_1, null, $Wrapper).apply(self, []);
      obj.literal = array;
      return obj;
    });

    $opal.defs(self, '$new', TMP_2 = function(args) {
      var $a, $b, self = this, $iter = TMP_2._p, block = $iter || nil, obj = nil;

      args = $slice.call(arguments, 0);
      TMP_2._p = null;
      obj = self.$allocate();
      ($a = ($b = obj).$initialize, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
      return obj;
    });

    $opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return self.$allocate(objects);
    });

    def.$initialize = TMP_3 = function(args) {
      var $a, $b, $c, self = this, $iter = TMP_3._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3._p = null;
      return self.literal = ($a = ($b = (($c = $scope.Array) == null ? $opal.cm('Array') : $c)).$new, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
    };

    def.$method_missing = TMP_4 = function(args) {
      var $a, $b, self = this, $iter = TMP_4._p, block = $iter || nil, result = nil;

      args = $slice.call(arguments, 0);
      TMP_4._p = null;
      result = ($a = ($b = self.literal).$__send__, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
      if ((($a = result === self.literal) !== nil && (!$a._isBoolean || $a == true))) {
        return self
        } else {
        return result
      };
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    };

    def['$respond_to?'] = TMP_5 = function(name) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_5._p, $yield = $iter || nil;

      TMP_5._p = null;
      return ((($a = $opal.find_super_dispatcher(self, 'respond_to?', TMP_5, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.literal['$respond_to?'](name));
    };

    def['$=='] = function(other) {
      var self = this;

      return self.literal['$=='](other);
    };

    def['$eql?'] = function(other) {
      var self = this;

      return self.literal['$eql?'](other);
    };

    def.$to_a = function() {
      var self = this;

      return self.literal;
    };

    def.$to_ary = function() {
      var self = this;

      return self;
    };

    def.$inspect = function() {
      var self = this;

      return self.literal.$inspect();
    };

    def['$*'] = function(other) {
      var self = this;

      
      var result = self.literal['$*'](other);

      if (result._isArray) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    };

    def['$[]'] = function(index, length) {
      var self = this;

      
      var result = self.literal.$slice(index, length);

      if (result._isArray && (index._isRange || length !== undefined)) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    };

    $opal.defn(self, '$slice', def['$[]']);

    def.$uniq = function() {
      var self = this;

      return self.$class().$allocate(self.literal.$uniq());
    };

    return (def.$flatten = function(level) {
      var self = this;

      return self.$class().$allocate(self.literal.$flatten(level));
    }, nil) && 'flatten';
  })((($a = $scope.Array) == null ? $opal.cm('Array') : $a), null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$!', '$==', '$call', '$coerce_to!', '$lambda?', '$abs', '$arity', '$raise', '$enum_for', '$flatten', '$inspect', '$===', '$alias_method', '$clone']);
  ;
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self._proto, $scope = self._scope, $a, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    def.proc = def.none = nil;
    self.$include((($a = $scope.Enumerable) == null ? $opal.cm('Enumerable') : $a));

    $opal.defs(self, '$[]', function(objs) {
      var self = this;

      objs = $slice.call(arguments, 0);
      return $opal.hash.apply(null, objs);
    });

    $opal.defs(self, '$allocate', function() {
      var self = this;

      
      var hash = new self._alloc;

      hash.map  = {};
      hash.keys = [];
      hash.none = nil;
      hash.proc = nil;

      return hash;
    
    });

    def.$initialize = TMP_1 = function(defaults) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      
      self.none = (defaults === undefined ? nil : defaults);
      self.proc = block;
    
      return self;
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.map || !other.keys) {
        return false;
      }

      if (self.keys.length !== other.keys.length) {
        return false;
      }

      var map  = self.map,
          map2 = other.map;

      for (var i = 0, length = self.keys.length; i < length; i++) {
        var key = self.keys[i], obj = map[key], obj2 = map2[key];
        if (obj2 === undefined || (obj)['$=='](obj2)['$!']()) {
          return false;
        }
      }

      return true;
    
    };

    def['$[]'] = function(key) {
      var self = this;

      
      var map = self.map;

      if ($opal.hasOwnProperty.call(map, key)) {
        return map[key];
      }

      var proc = self.proc;

      if (proc !== nil) {
        return (proc).$call(self, key);
      }

      return self.none;
    
    };

    def['$[]='] = function(key, value) {
      var self = this;

      
      var map = self.map;

      if (!$opal.hasOwnProperty.call(map, key)) {
        self.keys.push(key);
      }

      map[key] = value;

      return value;
    
    };

    def.$assoc = function(object) {
      var self = this;

      
      var keys = self.keys, key;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if ((key)['$=='](object)) {
          return [key, self.map[key]];
        }
      }

      return nil;
    
    };

    def.$clear = function() {
      var self = this;

      
      self.map = {};
      self.keys = [];
      return self;
    
    };

    def.$clone = function() {
      var self = this;

      
      var map  = {},
          keys = [];

      for (var i = 0, length = self.keys.length; i < length; i++) {
        var key   = self.keys[i],
            value = self.map[key];

        keys.push(key);
        map[key] = value;
      }

      var hash = new self._klass._alloc();

      hash.map  = map;
      hash.keys = keys;
      hash.none = self.none;
      hash.proc = self.proc;

      return hash;
    
    };

    def.$default = function(val) {
      var self = this;

      
      if (val !== undefined && self.proc !== nil) {
        return self.proc.$call(self, val);
      }
      return self.none;
    ;
    };

    def['$default='] = function(object) {
      var self = this;

      
      self.proc = nil;
      return (self.none = object);
    
    };

    def.$default_proc = function() {
      var self = this;

      return self.proc;
    };

    def['$default_proc='] = function(proc) {
      var $a, self = this;

      
      if (proc !== nil) {
        proc = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](proc, (($a = $scope.Proc) == null ? $opal.cm('Proc') : $a), "to_proc");

        if (proc['$lambda?']() && proc.$arity().$abs() != 2) {
          self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "default_proc takes two arguments");
        }
      }
      self.none = nil;
      return (self.proc = proc);
    ;
    };

    def.$delete = TMP_2 = function(key) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      
      var map  = self.map, result = map[key];

      if (result != null) {
        delete map[key];
        self.keys.$delete(key);

        return result;
      }

      if (block !== nil) {
        return block.$call(key);
      }
      return nil;
    
    };

    def.$delete_if = TMP_3 = function() {
      var self = this, $iter = TMP_3._p, block = $iter || nil;

      TMP_3._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("delete_if")
      };
      
      var map = self.map, keys = self.keys, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          keys.splice(i, 1);
          delete map[key];

          length--;
          i--;
        }
      }

      return self;
    
    };

    $opal.defn(self, '$dup', def.$clone);

    def.$each = TMP_4 = function() {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      var map  = self.map,
          keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key   = keys[i],
            value = $opal.$yield1(block, [key, map[key]]);

        if (value === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    def.$each_key = TMP_5 = function() {
      var self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_key")
      };
      
      var keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];

        if (block(key) === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    $opal.defn(self, '$each_pair', def.$each);

    def.$each_value = TMP_6 = function() {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_value")
      };
      
      var map = self.map, keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        if (block(map[keys[i]]) === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    def['$empty?'] = function() {
      var self = this;

      return self.keys.length === 0;
    };

    $opal.defn(self, '$eql?', def['$==']);

    def.$fetch = TMP_7 = function(key, defaults) {
      var $a, self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      
      var value = self.map[key];

      if (value != null) {
        return value;
      }

      if (block !== nil) {
        var value;

        if ((value = block(key)) === $breaker) {
          return $breaker.$v;
        }

        return value;
      }

      if (defaults != null) {
        return defaults;
      }

      self.$raise((($a = $scope.KeyError) == null ? $opal.cm('KeyError') : $a), "key not found");
    
    };

    def.$flatten = function(level) {
      var self = this;

      
      var map = self.map, keys = self.keys, result = [];

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], value = map[key];

        result.push(key);

        if (value._isArray) {
          if (level == null || level === 1) {
            result.push(value);
          }
          else {
            result = result.concat((value).$flatten(level - 1));
          }
        }
        else {
          result.push(value);
        }
      }

      return result;
    
    };

    def['$has_key?'] = function(key) {
      var self = this;

      return $opal.hasOwnProperty.call(self.map, key);
    };

    def['$has_value?'] = function(value) {
      var self = this;

      
      for (var assoc in self.map) {
        if ((self.map[assoc])['$=='](value)) {
          return true;
        }
      }

      return false;
    ;
    };

    def.$hash = function() {
      var self = this;

      return self._id;
    };

    $opal.defn(self, '$include?', def['$has_key?']);

    def.$index = function(object) {
      var self = this;

      
      var map = self.map, keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];

        if ((map[key])['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    };

    def.$indexes = function(keys) {
      var self = this;

      keys = $slice.call(arguments, 0);
      
      var result = [], map = self.map, val;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], val = map[key];

        if (val != null) {
          result.push(val);
        }
        else {
          result.push(self.none);
        }
      }

      return result;
    
    };

    $opal.defn(self, '$indices', def.$indexes);

    def.$inspect = function() {
      var self = this;

      
      var inspect = [], keys = self.keys, map = self.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], val = map[key];

        if (val === self) {
          inspect.push((key).$inspect() + '=>' + '{...}');
        } else {
          inspect.push((key).$inspect() + '=>' + (map[key]).$inspect());
        }
      }

      return '{' + inspect.join(', ') + '}';
    ;
    };

    def.$invert = function() {
      var self = this;

      
      var result = $opal.hash(), keys = self.keys, map = self.map,
          keys2 = result.keys, map2 = result.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        keys2.push(obj);
        map2[obj] = key;
      }

      return result;
    
    };

    def.$keep_if = TMP_8 = function() {
      var self = this, $iter = TMP_8._p, block = $iter || nil;

      TMP_8._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("keep_if")
      };
      
      var map = self.map, keys = self.keys, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          keys.splice(i, 1);
          delete map[key];

          length--;
          i--;
        }
      }

      return self;
    
    };

    $opal.defn(self, '$key', def.$index);

    $opal.defn(self, '$key?', def['$has_key?']);

    def.$keys = function() {
      var self = this;

      return self.keys.slice(0);
    };

    def.$length = function() {
      var self = this;

      return self.keys.length;
    };

    $opal.defn(self, '$member?', def['$has_key?']);

    def.$merge = TMP_9 = function(other) {
      var $a, self = this, $iter = TMP_9._p, block = $iter || nil;

      TMP_9._p = null;
      
      if (! (($a = $scope.Hash) == null ? $opal.cm('Hash') : $a)['$==='](other)) {
        other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](other, (($a = $scope.Hash) == null ? $opal.cm('Hash') : $a), "to_hash");
      }

      var keys = self.keys, map = self.map,
          result = $opal.hash(), keys2 = result.keys, map2 = result.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];

        keys2.push(key);
        map2[key] = map[key];
      }

      var keys = other.keys, map = other.map;

      if (block === nil) {
        for (var i = 0, length = keys.length; i < length; i++) {
          var key = keys[i];

          if (map2[key] == null) {
            keys2.push(key);
          }

          map2[key] = map[key];
        }
      }
      else {
        for (var i = 0, length = keys.length; i < length; i++) {
          var key = keys[i];

          if (map2[key] == null) {
            keys2.push(key);
            map2[key] = map[key];
          }
          else {
            map2[key] = block(key, map2[key], map[key]);
          }
        }
      }

      return result;
    ;
    };

    def['$merge!'] = TMP_10 = function(other) {
      var $a, self = this, $iter = TMP_10._p, block = $iter || nil;

      TMP_10._p = null;
      
      if (! (($a = $scope.Hash) == null ? $opal.cm('Hash') : $a)['$==='](other)) {
        other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](other, (($a = $scope.Hash) == null ? $opal.cm('Hash') : $a), "to_hash");
      }

      var keys = self.keys, map = self.map,
          keys2 = other.keys, map2 = other.map;

      if (block === nil) {
        for (var i = 0, length = keys2.length; i < length; i++) {
          var key = keys2[i];

          if (map[key] == null) {
            keys.push(key);
          }

          map[key] = map2[key];
        }
      }
      else {
        for (var i = 0, length = keys2.length; i < length; i++) {
          var key = keys2[i];

          if (map[key] == null) {
            keys.push(key);
            map[key] = map2[key];
          }
          else {
            map[key] = block(key, map[key], map2[key]);
          }
        }
      }

      return self;
    ;
    };

    def.$rassoc = function(object) {
      var self = this;

      
      var keys = self.keys, map = self.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        if ((obj)['$=='](object)) {
          return [key, obj];
        }
      }

      return nil;
    
    };

    def.$reject = TMP_11 = function() {
      var self = this, $iter = TMP_11._p, block = $iter || nil;

      TMP_11._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("reject")
      };
      
      var keys = self.keys, map = self.map,
          result = $opal.hash(), map2 = result.map, keys2 = result.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key], value;

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          keys2.push(key);
          map2[key] = obj;
        }
      }

      return result;
    
    };

    def.$replace = function(other) {
      var self = this;

      
      var map = self.map = {}, keys = self.keys = [];

      for (var i = 0, length = other.keys.length; i < length; i++) {
        var key = other.keys[i];
        keys.push(key);
        map[key] = other.map[key];
      }

      return self;
    
    };

    def.$select = TMP_12 = function() {
      var self = this, $iter = TMP_12._p, block = $iter || nil;

      TMP_12._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("select")
      };
      
      var keys = self.keys, map = self.map,
          result = $opal.hash(), map2 = result.map, keys2 = result.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key], value;

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          keys2.push(key);
          map2[key] = obj;
        }
      }

      return result;
    
    };

    def['$select!'] = TMP_13 = function() {
      var self = this, $iter = TMP_13._p, block = $iter || nil;

      TMP_13._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("select!")
      };
      
      var map = self.map, keys = self.keys, value, result = nil;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          keys.splice(i, 1);
          delete map[key];

          length--;
          i--;
          result = self
        }
      }

      return result;
    
    };

    def.$shift = function() {
      var self = this;

      
      var keys = self.keys, map = self.map;

      if (keys.length) {
        var key = keys[0], obj = map[key];

        delete map[key];
        keys.splice(0, 1);

        return [key, obj];
      }

      return nil;
    
    };

    $opal.defn(self, '$size', def.$length);

    self.$alias_method("store", "[]=");

    def.$to_a = function() {
      var self = this;

      
      var keys = self.keys, map = self.map, result = [];

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        result.push([key, map[key]]);
      }

      return result;
    
    };

    def.$to_h = function() {
      var self = this;

      
      var hash   = new Opal.Hash._alloc,
          cloned = self.$clone();

      hash.map  = cloned.map;
      hash.keys = cloned.keys;
      hash.none = cloned.none;
      hash.proc = cloned.proc;

      return hash;
    ;
    };

    def.$to_hash = function() {
      var self = this;

      return self;
    };

    $opal.defn(self, '$to_s', def.$inspect);

    $opal.defn(self, '$update', def['$merge!']);

    $opal.defn(self, '$value?', def['$has_value?']);

    $opal.defn(self, '$values_at', def.$indexes);

    return (def.$values = function() {
      var self = this;

      
      var map    = self.map,
          result = [];

      for (var key in map) {
        result.push(map[key]);
      }

      return result;
    
    }, nil) && 'values';
  })(self, null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $gvars = $opal.gvars;

  $opal.add_stubs(['$include', '$to_str', '$===', '$format', '$coerce_to', '$to_s', '$respond_to?', '$<=>', '$raise', '$=~', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$initialize_clone', '$initialize_dup', '$enum_for', '$split', '$chomp', '$escape', '$class', '$to_i', '$name', '$!', '$each_line', '$match', '$new', '$try_convert', '$chars', '$&', '$join', '$is_a?', '$[]', '$str', '$value', '$proc', '$send']);
  ;
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self._proto, $scope = self._scope, $a, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    def.length = nil;
    self.$include((($a = $scope.Comparable) == null ? $opal.cm('Comparable') : $a));

    def._isString = true;

    $opal.defs(self, '$try_convert', function(what) {
      var self = this;

      try {
      return what.$to_str()
      } catch ($err) {if (true) {
        return nil
        }else { throw $err; }
      };
    });

    $opal.defs(self, '$new', function(str) {
      var self = this;

      if (str == null) {
        str = ""
      }
      return new String(str);
    });

    def['$%'] = function(data) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$==='](data)) !== nil && (!$a._isBoolean || $a == true))) {
        return ($a = self).$format.apply($a, [self].concat(data))
        } else {
        return self.$format(self, data)
      };
    };

    def['$*'] = function(count) {
      var self = this;

      
      if (count < 1) {
        return '';
      }

      var result  = '',
          pattern = self;

      while (count > 0) {
        if (count & 1) {
          result += pattern;
        }

        count >>= 1;
        pattern += pattern;
      }

      return result;
    
    };

    def['$+'] = function(other) {
      var $a, self = this;

      other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str");
      return self + other.$to_s();
    };

    def['$<=>'] = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      ;
      };
    };

    def['$=='] = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.String) == null ? $opal.cm('String') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return self.$to_s() == other.$to_s();
    };

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$===', def['$==']);

    def['$=~'] = function(other) {
      var $a, self = this;

      
      if (other._isString) {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "type mismatch: String given");
      }

      return other['$=~'](self);
    ;
    };

    def['$[]'] = function(index, length) {
      var self = this;

      
      var size = self.length;

      if (index._isRange) {
        var exclude = index.exclude,
            length  = index.end,
            index   = index.begin;

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        if (index > size) {
          return nil;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }

      if (index < 0) {
        index += self.length;
      }

      if (length == null) {
        if (index >= self.length || index < 0) {
          return nil;
        }

        return self.substr(index, 1);
      }

      if (index > self.length || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    };

    def.$capitalize = function() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();
    };

    def.$casecmp = function(other) {
      var $a, self = this;

      other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();
      return (self.toLowerCase())['$<=>'](other.toLowerCase());
    };

    def.$center = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(width, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      padstr = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(padstr, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      
      var ljustified = self.$ljust((width['$+'](self.length))['$/'](2).$ceil(), padstr),
          rjustified = self.$rjust((width['$+'](self.length))['$/'](2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    };

    def.$chars = TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$each_char().$to_a()
      };
      return ($a = ($b = self).$each_char, $a._p = block.$to_proc(), $a).call($b);
    };

    def.$chomp = function(separator) {
      var $a, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      if ((($a = separator === nil || self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      separator = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](separator, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    
      return self;
    };

    def.$chop = function() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    };

    def.$chr = function() {
      var self = this;

      return self.charAt(0);
    };

    def.$clone = function() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_clone(self);
      return copy;
    };

    def.$dup = function() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    };

    def.$count = function(str) {
      var self = this;

      return (self.length - self.replace(new RegExp(str, 'g'), '').length) / str.length;
    };

    $opal.defn(self, '$dup', def.$clone);

    def.$downcase = function() {
      var self = this;

      return self.toLowerCase();
    };

    def.$each_char = TMP_2 = function() {
      var $a, self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_char")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        ((($a = $opal.$yield1(block, self.charAt(i))) === $breaker) ? $breaker.$v : $a);
      }
    
      return self;
    };

    def.$each_line = TMP_3 = function(separator) {
      var $a, self = this, $iter = TMP_3._p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      TMP_3._p = null;
      if (($yield !== nil)) {
        } else {
        return self.$split(separator)
      };
      
      var chomped  = self.$chomp(),
          trailing = self.length != chomped.length,
          splitted = chomped.split(separator);

      for (var i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          ((($a = $opal.$yield1($yield, splitted[i] + separator)) === $breaker) ? $breaker.$v : $a);
        }
        else {
          ((($a = $opal.$yield1($yield, splitted[i])) === $breaker) ? $breaker.$v : $a);
        }
      }
    ;
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.length === 0;
    };

    def['$end_with?'] = function(suffixes) {
      var $a, self = this;

      suffixes = $slice.call(arguments, 0);
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(suffixes[i], (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    
      return false;
    };

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$equal?', def['$===']);

    def.$gsub = TMP_4 = function(pattern, replace) {
      var $a, $b, $c, self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if ((($a = ((($b = (($c = $scope.String) == null ? $opal.cm('String') : $c)['$==='](pattern)) !== false && $b !== nil) ? $b : pattern['$respond_to?']("to_str"))) !== nil && (!$a._isBoolean || $a == true))) {
        pattern = (new RegExp("" + (($a = $scope.Regexp) == null ? $opal.cm('Regexp') : $a).$escape(pattern.$to_str())))};
      if ((($a = (($b = $scope.Regexp) == null ? $opal.cm('Regexp') : $b)['$==='](pattern)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      
      var pattern = pattern.toString(),
          options = pattern.substr(pattern.lastIndexOf('/') + 1) + 'g',
          regexp  = pattern.substr(1, pattern.lastIndexOf('/') - 1);

      self.$sub._p = block;
      return self.$sub(new RegExp(regexp, options), replace);
    
    };

    def.$hash = function() {
      var self = this;

      return self.toString();
    };

    def.$hex = function() {
      var self = this;

      return self.$to_i(16);
    };

    def['$include?'] = function(other) {
      var $a, self = this;

      
      if (other._isString) {
        return self.indexOf(other) !== -1;
      }
    
      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "no implicit conversion of " + (other.$class().$name()) + " into String")
      };
      return self.indexOf(other.$to_str()) !== -1;
    };

    def.$index = function(what, offset) {
      var $a, $b, self = this, result = nil;

      if (offset == null) {
        offset = nil
      }
      if ((($a = (($b = $scope.String) == null ? $opal.cm('String') : $b)['$==='](what)) !== nil && (!$a._isBoolean || $a == true))) {
        what = what.$to_s()
      } else if ((($a = what['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
        what = what.$to_str().$to_s()
      } else if ((($a = (($b = $scope.Regexp) == null ? $opal.cm('Regexp') : $b)['$==='](what)['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "type mismatch: " + (what.$class()) + " given")};
      result = -1;
      if (offset !== false && offset !== nil) {
        offset = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(offset, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        
        var size = self.length;

        if (offset < 0) {
          offset = offset + size;
        }

        if (offset > size) {
          return nil;
        }
      
        if ((($a = (($b = $scope.Regexp) == null ? $opal.cm('Regexp') : $b)['$==='](what)) !== nil && (!$a._isBoolean || $a == true))) {
          result = ((($a = (what['$=~'](self.substr(offset)))) !== false && $a !== nil) ? $a : -1)
          } else {
          result = self.substr(offset).indexOf(what)
        };
        
        if (result !== -1) {
          result += offset;
        }
      
      } else if ((($a = (($b = $scope.Regexp) == null ? $opal.cm('Regexp') : $b)['$==='](what)) !== nil && (!$a._isBoolean || $a == true))) {
        result = ((($a = (what['$=~'](self))) !== false && $a !== nil) ? $a : -1)
        } else {
        result = self.indexOf(what)
      };
      if ((($a = result === -1) !== nil && (!$a._isBoolean || $a == true))) {
        return nil
        } else {
        return result
      };
    };

    def.$inspect = function() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta      = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
          };

      escapable.lastIndex = 0;

      return escapable.test(self) ? '"' + self.replace(escapable, function(a) {
        var c = meta[a];

        return typeof c === 'string' ? c :
          '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + self + '"';
    
    };

    def.$intern = function() {
      var self = this;

      return self;
    };

    def.$lines = function(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      return self.$each_line(separator).$to_a();
    };

    def.$length = function() {
      var self = this;

      return self.length;
    };

    def.$ljust = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(width, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      padstr = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(padstr, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    
    };

    def.$lstrip = function() {
      var self = this;

      return self.replace(/^\s*/, '');
    };

    def.$match = TMP_5 = function(pattern, pos) {
      var $a, $b, $c, self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if ((($a = ((($b = (($c = $scope.String) == null ? $opal.cm('String') : $c)['$==='](pattern)) !== false && $b !== nil) ? $b : pattern['$respond_to?']("to_str"))) !== nil && (!$a._isBoolean || $a == true))) {
        pattern = (new RegExp("" + (($a = $scope.Regexp) == null ? $opal.cm('Regexp') : $a).$escape(pattern.$to_str())))};
      if ((($a = (($b = $scope.Regexp) == null ? $opal.cm('Regexp') : $b)['$==='](pattern)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return ($a = ($b = pattern).$match, $a._p = block.$to_proc(), $a).call($b, self, pos);
    };

    def.$next = function() {
      var self = this;

      
      if (self.length === 0) {
        return "";
      }

      var initial = self.substr(0, self.length - 1);
      var last    = String.fromCharCode(self.charCodeAt(self.length - 1) + 1);

      return initial + last;
    
    };

    def.$ord = function() {
      var self = this;

      return self.charCodeAt(0);
    };

    def.$partition = function(str) {
      var self = this;

      
      var result = self.split(str);
      var splitter = (result[0].length === self.length ? "" : str);

      return [result[0], splitter, result.slice(1).join(str.toString())];
    
    };

    def.$reverse = function() {
      var self = this;

      return self.split('').reverse().join('');
    };

    def.$rindex = function(search, offset) {
      var $a, self = this;

      
      var search_type = (search == null ? Opal.NilClass : search.constructor);
      if (search_type != String && search_type != RegExp) {
        var msg = "type mismatch: " + search_type + " given";
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a).$new(msg));
      }

      if (self.length == 0) {
        return search.length == 0 ? 0 : nil;
      }

      var result = -1;
      if (offset != null) {
        if (offset < 0) {
          offset = self.length + offset;
        }

        if (search_type == String) {
          result = self.lastIndexOf(search, offset);
        }
        else {
          result = self.substr(0, offset + 1).$reverse().search(search);
          if (result !== -1) {
            result = offset - result;
          }
        }
      }
      else {
        if (search_type == String) {
          result = self.lastIndexOf(search);
        }
        else {
          result = self.$reverse().search(search);
          if (result !== -1) {
            result = self.length - 1 - result;
          }
        }
      }

      return result === -1 ? nil : result;
    
    };

    def.$rjust = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(width, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      padstr = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(padstr, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    
    };

    def.$rstrip = function() {
      var self = this;

      return self.replace(/\s*$/, '');
    };

    def.$scan = TMP_6 = function(pattern) {
      var $a, self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      
      if (pattern.global) {
        // should we clear it afterwards too?
        pattern.lastIndex = 0;
      }
      else {
        // rewrite regular expression to add the global flag to capture pre/post match
        pattern = new RegExp(pattern.source, 'g' + (pattern.multiline ? 'm' : '') + (pattern.ignoreCase ? 'i' : ''));
      }

      var result = [];
      var match;

      while ((match = pattern.exec(self)) != null) {
        var match_data = (($a = $scope.MatchData) == null ? $opal.cm('MatchData') : $a).$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push(match.slice(1));
        }
        else {
          match.length == 1 ? block(match[0]) : block.apply(self, match.slice(1));
        }
      }

      return (block !== nil ? self : result);
    
    };

    $opal.defn(self, '$size', def.$length);

    $opal.defn(self, '$slice', def['$[]']);

    def.$split = function(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      if (pattern == null) {
        pattern = ((($a = $gvars[";"]) !== false && $a !== nil) ? $a : " ")
      }
      
      if (pattern === nil || pattern === undefined) {
        pattern = $gvars[";"];
      }

      var result = [];
      if (limit !== undefined) {
        limit = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](limit, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      }

      if (self.length === 0) {
        return [];
      }

      if (limit === 1) {
        return [self];
      }

      if (pattern && pattern._isRegexp) {
        var pattern_str = pattern.toString();

        /* Opal and JS's repr of an empty RE. */
        var blank_pattern = (pattern_str.substr(0, 3) == '/^/') ||
                  (pattern_str.substr(0, 6) == '/(?:)/');

        /* This is our fast path */
        if (limit === undefined || limit === 0) {
          result = self.split(blank_pattern ? /(?:)/ : pattern);
        }
        else {
          /* RegExp.exec only has sane behavior with global flag */
          if (! pattern.global) {
            pattern = eval(pattern_str + 'g');
          }

          var match_data;
          var prev_index = 0;
          pattern.lastIndex = 0;

          while ((match_data = pattern.exec(self)) !== null) {
            var segment = self.slice(prev_index, match_data.index);
            result.push(segment);

            prev_index = pattern.lastIndex;

            if (match_data[0].length === 0) {
              if (blank_pattern) {
                /* explicitly split on JS's empty RE form.*/
                pattern = /(?:)/;
              }

              result = self.split(pattern);
              /* with "unlimited", ruby leaves a trail on blanks. */
              if (limit !== undefined && limit < 0 && blank_pattern) {
                result.push('');
              }

              prev_index = undefined;
              break;
            }

            if (limit !== undefined && limit > 1 && result.length + 1 == limit) {
              break;
            }
          }

          if (prev_index !== undefined) {
            result.push(self.slice(prev_index, self.length));
          }
        }
      }
      else {
        var splitted = 0, start = 0, lim = 0;

        if (pattern === nil || pattern === undefined) {
          pattern = ' '
        } else {
          pattern = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$try_convert(pattern, (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();
        }

        var string = (pattern == ' ') ? self.replace(/[\r\n\t\v]\s+/g, ' ')
                                      : self;
        var cursor = -1;
        while ((cursor = string.indexOf(pattern, start)) > -1 && cursor < string.length) {
          if (splitted + 1 === limit) {
            break;
          }

          if (pattern == ' ' && cursor == start) {
            start = cursor + 1;
            continue;
          }

          result.push(string.substr(start, pattern.length ? cursor - start : 1));
          splitted++;

          start = cursor + (pattern.length ? pattern.length : 1);
        }

        if (string.length > 0 && (limit < 0 || string.length > start)) {
          if (string.length == start) {
            result.push('');
          }
          else {
            result.push(string.substr(start, string.length));
          }
        }
      }

      if (limit === undefined || limit === 0) {
        while (result[result.length-1] === '') {
          result.length = result.length - 1;
        }
      }

      if (limit > 0) {
        var tail = result.slice(limit - 1).join('');
        result.splice(limit - 1, result.length - 1, tail);
      }

      return result;
    ;
    };

    def.$squeeze = function(sets) {
      var $a, self = this;

      sets = $slice.call(arguments, 0);
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
    
      
      var set = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(sets[0], (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$chars();

      for (var i = 1, length = sets.length; i < length; i++) {
        set = (set)['$&']((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(sets[i], (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$chars());
      }

      if (set.length === 0) {
        return self;
      }

      return self.replace(new RegExp("([" + (($a = $scope.Regexp) == null ? $opal.cm('Regexp') : $a).$escape((set).$join()) + "])\\1+", "g"), "$1");
    ;
    };

    def['$start_with?'] = function(prefixes) {
      var $a, self = this;

      prefixes = $slice.call(arguments, 0);
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(prefixes[i], (($a = $scope.String) == null ? $opal.cm('String') : $a), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    };

    def.$strip = function() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/\s*$/, '');
    };

    def.$sub = TMP_7 = function(pattern, replace) {
      var $a, self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      
      if (typeof(replace) === 'string') {
        // convert Ruby back reference to JavaScript back reference
        replace = replace.replace(/\\([1-9])/g, '$$$1')
        return self.replace(pattern, replace);
      }
      if (block !== nil) {
        return self.replace(pattern, function() {
          // FIXME: this should be a formal MatchData object with all the goodies
          var match_data = []
          for (var i = 0, len = arguments.length; i < len; i++) {
            var arg = arguments[i];
            if (arg == undefined) {
              match_data.push(nil);
            }
            else {
              match_data.push(arg);
            }
          }

          var str = match_data.pop();
          var offset = match_data.pop();
          var match_len = match_data.length;

          // $1, $2, $3 not being parsed correctly in Ruby code
          //for (var i = 1; i < match_len; i++) {
          //  __gvars[String(i)] = match_data[i];
          //}
          $gvars["&"] = match_data[0];
          $gvars["~"] = match_data;
          return block(match_data[0]);
        });
      }
      else if (replace !== undefined) {
        if (replace['$is_a?']((($a = $scope.Hash) == null ? $opal.cm('Hash') : $a))) {
          return self.replace(pattern, function(str) {
            var value = replace['$[]'](self.$str());

            return (value == null) ? nil : self.$value().$to_s();
          });
        }
        else {
          replace = (($a = $scope.String) == null ? $opal.cm('String') : $a).$try_convert(replace);

          if (replace == null) {
            self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "can't convert " + (replace.$class()) + " into String");
          }

          return self.replace(pattern, replace);
        }
      }
      else {
        // convert Ruby back reference to JavaScript back reference
        replace = replace.toString().replace(/\\([1-9])/g, '$$$1')
        return self.replace(pattern, replace);
      }
    ;
    };

    $opal.defn(self, '$succ', def.$next);

    def.$sum = function(n) {
      var self = this;

      if (n == null) {
        n = 16
      }
      
      var result = 0;

      for (var i = 0, length = self.length; i < length; i++) {
        result += (self.charCodeAt(i) % ((1 << n) - 1));
      }

      return result;
    
    };

    def.$swapcase = function() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    };

    def.$to_f = function() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    };

    def.$to_i = function(base) {
      var self = this;

      if (base == null) {
        base = 10
      }
      
      var result = parseInt(self, base);

      if (isNaN(result)) {
        return 0;
      }

      return result;
    
    };

    def.$to_proc = function() {
      var $a, $b, TMP_8, self = this;

      return ($a = ($b = self).$proc, $a._p = (TMP_8 = function(recv, args){var self = TMP_8._s || this, $a;
if (recv == null) recv = nil;args = $slice.call(arguments, 1);
      return ($a = recv).$send.apply($a, [self].concat(args))}, TMP_8._s = self, TMP_8), $a).call($b);
    };

    def.$to_s = function() {
      var self = this;

      return self.toString();
    };

    $opal.defn(self, '$to_str', def.$to_s);

    $opal.defn(self, '$to_sym', def.$intern);

    def.$tr = function(from, to) {
      var self = this;

      
      if (from.length == 0 || from === to) {
        return self;
      }

      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^') {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      var in_range = false;
      for (var i = 0; i < from_length; i++) {
        var ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          var start = last_from.charCodeAt(0) + 1;
          var end = ch.charCodeAt(0);
          for (var c = start; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          var in_range = false;
          for (var i = 0; i < to_length; i++) {
            var ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              var start = last_from.charCodeAt(0) + 1;
              var end = ch.charCodeAt(0);
              for (var c = start; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (var i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (var i = 0, length = self.length; i < length; i++) {
        var ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    
    };

    def.$tr_s = function(from, to) {
      var self = this;

      
      if (from.length == 0) {
        return self;
      }

      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^') {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      var in_range = false;
      for (var i = 0; i < from_length; i++) {
        var ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          var start = last_from.charCodeAt(0) + 1;
          var end = ch.charCodeAt(0);
          for (var c = start; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          var in_range = false;
          for (var i = 0; i < to_length; i++) {
            var ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              var start = last_from.charCodeAt(0) + 1;
              var end = ch.charCodeAt(0);
              for (var c = start; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (var i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (var i = 0, length = self.length; i < length; i++) {
        var ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    
    };

    def.$upcase = function() {
      var self = this;

      return self.toUpperCase();
    };

    def.$freeze = function() {
      var self = this;

      return self;
    };

    return (def['$frozen?'] = function() {
      var self = this;

      return true;
    }, nil) && 'frozen?';
  })(self, null);
  return $opal.cdecl($scope, 'Symbol', (($a = $scope.String) == null ? $opal.cm('String') : $a));
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$inspect']);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self._proto, $scope = self._scope;

    return ($opal.defs(self, '$inherited', function(klass) {
      var $a, $b, self = this, replace = nil;

      replace = (($a = $scope.Class) == null ? $opal.cm('Class') : $a).$new((($a = ((($b = $scope.String) == null ? $opal.cm('String') : $b))._scope).Wrapper == null ? $a.cm('Wrapper') : $a.Wrapper));
      
      klass._proto        = replace._proto;
      klass._proto._klass = klass;
      klass._alloc        = replace._alloc;
      klass.__parent      = (($a = ((($b = $scope.String) == null ? $opal.cm('String') : $b))._scope).Wrapper == null ? $a.cm('Wrapper') : $a.Wrapper);

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    
    }), nil) && 'inherited'
  })(self, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.literal = nil;
    $opal.defs(self, '$allocate', TMP_1 = function(string) {
      var self = this, $iter = TMP_1._p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = ""
      }
      TMP_1._p = null;
      obj = $opal.find_super_dispatcher(self, 'allocate', TMP_1, null, $Wrapper).apply(self, []);
      obj.literal = string;
      return obj;
    });

    $opal.defs(self, '$new', TMP_2 = function(args) {
      var $a, $b, self = this, $iter = TMP_2._p, block = $iter || nil, obj = nil;

      args = $slice.call(arguments, 0);
      TMP_2._p = null;
      obj = self.$allocate();
      ($a = ($b = obj).$initialize, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
      return obj;
    });

    $opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return self.$allocate(objects);
    });

    def.$initialize = function(string) {
      var self = this;

      if (string == null) {
        string = ""
      }
      return self.literal = string;
    };

    def.$method_missing = TMP_3 = function(args) {
      var $a, $b, self = this, $iter = TMP_3._p, block = $iter || nil, result = nil;

      args = $slice.call(arguments, 0);
      TMP_3._p = null;
      result = ($a = ($b = self.literal).$__send__, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
      if ((($a = result._isString != null) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = result == self.literal) !== nil && (!$a._isBoolean || $a == true))) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    };

    def['$respond_to?'] = TMP_4 = function(name) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_4._p, $yield = $iter || nil;

      TMP_4._p = null;
      return ((($a = $opal.find_super_dispatcher(self, 'respond_to?', TMP_4, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.literal['$respond_to?'](name));
    };

    def['$=='] = function(other) {
      var self = this;

      return self.literal['$=='](other);
    };

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$===', def['$==']);

    def.$to_s = function() {
      var self = this;

      return self.literal;
    };

    def.$to_str = function() {
      var self = this;

      return self;
    };

    return (def.$inspect = function() {
      var self = this;

      return self.literal.$inspect();
    }, nil) && 'inspect';
  })((($a = $scope.String) == null ? $opal.cm('String') : $a), null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $gvars = $opal.gvars;

  $opal.add_stubs(['$attr_reader', '$pre_match', '$post_match', '$[]', '$===', '$!', '$==', '$raise', '$inspect']);
  return (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self._proto, $scope = self._scope, TMP_1;

    def.string = def.matches = def.begin = nil;
    self.$attr_reader("post_match", "pre_match", "regexp", "string");

    $opal.defs(self, '$new', TMP_1 = function(regexp, match_groups) {
      var self = this, $iter = TMP_1._p, $yield = $iter || nil, data = nil;

      TMP_1._p = null;
      data = $opal.find_super_dispatcher(self, 'new', TMP_1, null, $MatchData).apply(self, [regexp, match_groups]);
      $gvars["`"] = data.$pre_match();
      $gvars["'"] = data.$post_match();
      $gvars["~"] = data;
      return data;
    });

    def.$initialize = function(regexp, match_groups) {
      var self = this;

      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = self.string.substr(0, regexp.lastIndex - match_groups[0].length);
      self.post_match = self.string.substr(regexp.lastIndex);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    
    };

    def['$[]'] = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      return ($a = self.matches)['$[]'].apply($a, [].concat(args));
    };

    def['$=='] = function(other) {
      var $a, $b, $c, $d, self = this;

      if ((($a = (($b = $scope.MatchData) == null ? $opal.cm('MatchData') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = ($c = ($d = self.string == other.string, $d !== false && $d !== nil ?self.regexp == other.regexp : $d), $c !== false && $c !== nil ?self.pre_match == other.pre_match : $c), $b !== false && $b !== nil ?self.post_match == other.post_match : $b), $a !== false && $a !== nil ?self.begin == other.begin : $a);
    };

    def.$begin = function(pos) {
      var $a, $b, self = this;

      if ((($a = ($b = pos['$=='](0)['$!'](), $b !== false && $b !== nil ?pos['$=='](1)['$!']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "MatchData#begin only supports 0th element")};
      return self.begin;
    };

    def.$captures = function() {
      var self = this;

      return self.matches.slice(1);
    };

    def.$inspect = function() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    ;
    };

    def.$length = function() {
      var self = this;

      return self.matches.length;
    };

    $opal.defn(self, '$size', def.$length);

    def.$to_a = function() {
      var self = this;

      return self.matches;
    };

    def.$to_s = function() {
      var self = this;

      return self.matches[0];
    };

    return (def.$values_at = function(indexes) {
      var self = this;

      indexes = $slice.call(arguments, 0);
      
      var values       = [],
          match_length = self.matches.length;

      for (var i = 0, length = indexes.length; i < length; i++) {
        var pos = indexes[i];

        if (pos >= 0) {
          values.push(self.matches[pos]);
        }
        else {
          pos += match_length;

          if (pos > 0) {
            values.push(self.matches[pos]);
          }
          else {
            values.push(nil);
          }
        }
      }

      return values;
    ;
    }, nil) && 'values_at';
  })(self, null)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$coerce', '$===', '$raise', '$class', '$__send__', '$send_coerced', '$to_int', '$coerce_to!', '$-@', '$**', '$-', '$respond_to?', '$==', '$enum_for', '$gcd', '$lcm', '$<', '$>', '$floor', '$/', '$%']);
  ;
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self._proto, $scope = self._scope, $a, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    self.$include((($a = $scope.Comparable) == null ? $opal.cm('Comparable') : $a));

    def._isNumber = true;

    def.$coerce = function(other, type) {
      var $a, self = this, $case = nil;

      if (type == null) {
        type = "operation"
      }
      try {
      
      if (other._isNumber) {
        return [self, other];
      }
      else {
        return other.$coerce(self);
      }
    
      } catch ($err) {if (true) {
        return (function() {$case = type;if ("operation"['$===']($case)) {return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "" + (other.$class()) + " can't be coerce into Numeric")}else if ("comparison"['$===']($case)) {return self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}else { return nil }})()
        }else { throw $err; }
      };
    };

    def.$send_coerced = function(method, other) {
      var $a, self = this, type = nil, $case = nil, a = nil, b = nil;

      type = (function() {$case = method;if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {return "operation"}else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {return "comparison"}else { return nil }})();
      $a = $opal.to_ary(self.$coerce(other, type)), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]);
      return a.$__send__(method, b);
    };

    def['$+'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self + other;
      }
      else {
        return self.$send_coerced("+", other);
      }
    
    };

    def['$-'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self - other;
      }
      else {
        return self.$send_coerced("-", other);
      }
    
    };

    def['$*'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self * other;
      }
      else {
        return self.$send_coerced("*", other);
      }
    
    };

    def['$/'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self / other;
      }
      else {
        return self.$send_coerced("/", other);
      }
    
    };

    def['$%'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$send_coerced("%", other);
      }
    
    };

    def['$&'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self & other;
      }
      else {
        return self.$send_coerced("&", other);
      }
    
    };

    def['$|'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self | other;
      }
      else {
        return self.$send_coerced("|", other);
      }
    
    };

    def['$^'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self ^ other;
      }
      else {
        return self.$send_coerced("^", other);
      }
    
    };

    def['$<'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self < other;
      }
      else {
        return self.$send_coerced("<", other);
      }
    
    };

    def['$<='] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self <= other;
      }
      else {
        return self.$send_coerced("<=", other);
      }
    
    };

    def['$>'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self > other;
      }
      else {
        return self.$send_coerced(">", other);
      }
    
    };

    def['$>='] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self >= other;
      }
      else {
        return self.$send_coerced(">=", other);
      }
    
    };

    def['$<=>'] = function(other) {
      var $a, self = this;

      try {
      
      if (other._isNumber) {
        return self > other ? 1 : (self < other ? -1 : 0);
      }
      else {
        return self.$send_coerced("<=>", other);
      }
    
      } catch ($err) {if ($opal.$rescue($err, [(($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a)])) {
        return nil
        }else { throw $err; }
      };
    };

    def['$<<'] = function(count) {
      var self = this;

      return self << count.$to_int();
    };

    def['$>>'] = function(count) {
      var self = this;

      return self >> count.$to_int();
    };

    def['$[]'] = function(bit) {
      var $a, self = this, min = nil, max = nil;

      bit = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a)['$coerce_to!'](bit, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      min = ((2)['$**'](30))['$-@']();
      max = ((2)['$**'](30))['$-'](1);
      return (bit < min || bit > max) ? 0 : (self >> bit) % 2;
    };

    def['$+@'] = function() {
      var self = this;

      return +self;
    };

    def['$-@'] = function() {
      var self = this;

      return -self;
    };

    def['$~'] = function() {
      var self = this;

      return ~self;
    };

    def['$**'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return Math.pow(self, other);
      }
      else {
        return self.$send_coerced("**", other);
      }
    
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self == Number(other);
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    ;
    };

    def.$abs = function() {
      var self = this;

      return Math.abs(self);
    };

    def.$ceil = function() {
      var self = this;

      return Math.ceil(self);
    };

    def.$chr = function() {
      var self = this;

      return String.fromCharCode(self);
    };

    def.$conj = function() {
      var self = this;

      return self;
    };

    $opal.defn(self, '$conjugate', def.$conj);

    def.$downto = TMP_1 = function(finish) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("downto", finish)
      };
      
      for (var i = self; i >= finish; i--) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$equal?', def['$==']);

    def['$even?'] = function() {
      var self = this;

      return self % 2 === 0;
    };

    def.$floor = function() {
      var self = this;

      return Math.floor(self);
    };

    def.$gcd = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Integer) == null ? $opal.cm('Integer') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    
    };

    def.$gcdlcm = function(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()];
    };

    def.$hash = function() {
      var self = this;

      return self.toString();
    };

    def['$integer?'] = function() {
      var self = this;

      return self % 1 === 0;
    };

    def['$is_a?'] = TMP_2 = function(klass) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, $c, self = this, $iter = TMP_2._p, $yield = $iter || nil;

      TMP_2._p = null;
      if ((($a = (($b = klass['$==']((($c = $scope.Fixnum) == null ? $opal.cm('Fixnum') : $c))) ? (($c = $scope.Integer) == null ? $opal.cm('Integer') : $c)['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']((($c = $scope.Integer) == null ? $opal.cm('Integer') : $c))) ? (($c = $scope.Integer) == null ? $opal.cm('Integer') : $c)['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']((($c = $scope.Float) == null ? $opal.cm('Float') : $c))) ? (($c = $scope.Float) == null ? $opal.cm('Float') : $c)['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      return $opal.find_super_dispatcher(self, 'is_a?', TMP_2, $iter).apply(self, $zuper);
    };

    $opal.defn(self, '$kind_of?', def['$is_a?']);

    def['$instance_of?'] = TMP_3 = function(klass) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, $c, self = this, $iter = TMP_3._p, $yield = $iter || nil;

      TMP_3._p = null;
      if ((($a = (($b = klass['$==']((($c = $scope.Fixnum) == null ? $opal.cm('Fixnum') : $c))) ? (($c = $scope.Integer) == null ? $opal.cm('Integer') : $c)['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']((($c = $scope.Integer) == null ? $opal.cm('Integer') : $c))) ? (($c = $scope.Integer) == null ? $opal.cm('Integer') : $c)['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']((($c = $scope.Float) == null ? $opal.cm('Float') : $c))) ? (($c = $scope.Float) == null ? $opal.cm('Float') : $c)['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      return $opal.find_super_dispatcher(self, 'instance_of?', TMP_3, $iter).apply(self, $zuper);
    };

    def.$lcm = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Integer) == null ? $opal.cm('Integer') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    
    };

    $opal.defn(self, '$magnitude', def.$abs);

    $opal.defn(self, '$modulo', def['$%']);

    def.$next = function() {
      var self = this;

      return self + 1;
    };

    def['$nonzero?'] = function() {
      var self = this;

      return self == 0 ? nil : self;
    };

    def['$odd?'] = function() {
      var self = this;

      return self % 2 !== 0;
    };

    def.$ord = function() {
      var self = this;

      return self;
    };

    def.$pred = function() {
      var self = this;

      return self - 1;
    };

    def.$round = function() {
      var self = this;

      return Math.round(self);
    };

    def.$step = TMP_4 = function(limit, step) {
      var $a, self = this, $iter = TMP_4._p, block = $iter || nil;

      if (step == null) {
        step = 1
      }
      TMP_4._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("step", limit, step)
      };
      if ((($a = step == 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "step cannot be 0")};
      
      var value = self;

      if (step > 0) {
        while (value <= limit) {
          block(value);
          value += step;
        }
      }
      else {
        while (value >= limit) {
          block(value);
          value += step;
        }
      }
    
      return self;
    };

    $opal.defn(self, '$succ', def.$next);

    def.$times = TMP_5 = function() {
      var self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("times")
      };
      
      for (var i = 0; i < self; i++) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def.$to_f = function() {
      var self = this;

      return self;
    };

    def.$to_i = function() {
      var self = this;

      return parseInt(self);
    };

    $opal.defn(self, '$to_int', def.$to_i);

    def.$to_s = function(base) {
      var $a, $b, self = this;

      if (base == null) {
        base = 10
      }
      if ((($a = ((($b = base['$<'](2)) !== false && $b !== nil) ? $b : base['$>'](36))) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "base must be between 2 and 36")};
      return self.toString(base);
    };

    $opal.defn(self, '$inspect', def.$to_s);

    def.$divmod = function(rhs) {
      var self = this, q = nil, r = nil;

      q = (self['$/'](rhs)).$floor();
      r = self['$%'](rhs);
      return [q, r];
    };

    def.$upto = TMP_6 = function(finish) {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("upto", finish)
      };
      
      for (var i = self; i <= finish; i++) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def['$zero?'] = function() {
      var self = this;

      return self == 0;
    };

    def.$size = function() {
      var self = this;

      return 4;
    };

    def['$nan?'] = function() {
      var self = this;

      return isNaN(self);
    };

    def['$finite?'] = function() {
      var self = this;

      return self != Infinity && self != -Infinity;
    };

    def['$infinite?'] = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    };

    def['$positive?'] = function() {
      var self = this;

      return 1 / self > 0;
    };

    return (def['$negative?'] = function() {
      var self = this;

      return 1 / self < 0;
    }, nil) && 'negative?';
  })(self, null);
  $opal.cdecl($scope, 'Fixnum', (($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a));
  (function($base, $super) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self._proto, $scope = self._scope;

    return ($opal.defs(self, '$===', function(other) {
      var self = this;

      
      if (!other._isNumber) {
        return false;
      }

      return (other % 1) === 0;
    
    }), nil) && '==='
  })(self, (($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a));
  return (function($base, $super) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self._proto, $scope = self._scope, $a;

    $opal.defs(self, '$===', function(other) {
      var self = this;

      return !!other._isNumber;
    });

    $opal.cdecl($scope, 'INFINITY', Infinity);

    $opal.cdecl($scope, 'NAN', NaN);

    if ((($a = (typeof(Number.EPSILON) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      return $opal.cdecl($scope, 'EPSILON', Number.EPSILON)
      } else {
      return $opal.cdecl($scope, 'EPSILON', 2.2204460492503130808472633361816E-16)
    };
  })(self, (($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a));
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs([]);
  return (function($base, $super) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a))
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs([]);
  return (function($base, $super) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, (($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a))
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$raise']);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2;

    def._isProc = true;

    def.is_lambda = false;

    $opal.defs(self, '$new', TMP_1 = function() {
      var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "tried to create a Proc object without a block")
      };
      return block;
    });

    def.$call = TMP_2 = function(args) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_2._p = null;
      
      if (block !== nil) {
        self._p = block;
      }

      var result;

      if (self.is_lambda) {
        result = self.apply(null, args);
      }
      else {
        result = Opal.$yieldX(self, args);
      }

      if (result === $breaker) {
        return $breaker.$v;
      }

      return result;
    
    };

    $opal.defn(self, '$[]', def.$call);

    def.$to_proc = function() {
      var self = this;

      return self;
    };

    def['$lambda?'] = function() {
      var self = this;

      return !!self.is_lambda;
    };

    return (def.$arity = function() {
      var self = this;

      return self.length;
    }, nil) && 'arity';
  })(self, null)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$class', '$arity', '$new', '$name']);
  (function($base, $super) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self._proto, $scope = self._scope, TMP_1;

    def.method = def.receiver = def.owner = def.name = def.obj = nil;
    self.$attr_reader("owner", "receiver", "name");

    def.$initialize = function(receiver, method, name) {
      var self = this;

      self.receiver = receiver;
      self.owner = receiver.$class();
      self.name = name;
      return self.method = method;
    };

    def.$arity = function() {
      var self = this;

      return self.method.$arity();
    };

    def.$call = TMP_1 = function(args) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_1._p = null;
      
      self.method._p = block;

      return self.method.apply(self.receiver, args);
    ;
    };

    $opal.defn(self, '$[]', def.$call);

    def.$unbind = function() {
      var $a, self = this;

      return (($a = $scope.UnboundMethod) == null ? $opal.cm('UnboundMethod') : $a).$new(self.owner, self.method, self.name);
    };

    def.$to_proc = function() {
      var self = this;

      return self.method;
    };

    return (def.$inspect = function() {
      var self = this;

      return "#<Method: " + (self.obj.$class().$name()) + "#" + (self.name) + "}>";
    }, nil) && 'inspect';
  })(self, null);
  return (function($base, $super) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self._proto, $scope = self._scope;

    def.method = def.name = def.owner = nil;
    self.$attr_reader("owner", "name");

    def.$initialize = function(owner, method, name) {
      var self = this;

      self.owner = owner;
      self.method = method;
      return self.name = name;
    };

    def.$arity = function() {
      var self = this;

      return self.method.$arity();
    };

    def.$bind = function(object) {
      var $a, self = this;

      return (($a = $scope.Method) == null ? $opal.cm('Method') : $a).$new(object, self.method, self.name);
    };

    return (def.$inspect = function() {
      var self = this;

      return "#<UnboundMethod: " + (self.owner.$name()) + "#" + (self.name) + ">";
    }, nil) && 'inspect';
  })(self, null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$attr_reader', '$<=', '$<', '$enum_for', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$-', '$abs', '$to_i', '$raise', '$inspect']);
  ;
  return (function($base, $super) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self._proto, $scope = self._scope, $a, TMP_1, TMP_2, TMP_3;

    def.begin = def.exclude = def.end = nil;
    self.$include((($a = $scope.Enumerable) == null ? $opal.cm('Enumerable') : $a));

    def._isRange = true;

    self.$attr_reader("begin", "end");

    def.$initialize = function(first, last, exclude) {
      var self = this;

      if (exclude == null) {
        exclude = false
      }
      self.begin = first;
      self.end = last;
      return self.exclude = exclude;
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (!other._isRange) {
        return false;
      }

      return self.exclude === other.exclude &&
             self.begin   ==  other.begin &&
             self.end     ==  other.end;
    
    };

    def['$==='] = function(value) {
      var $a, $b, self = this;

      return (($a = self.begin['$<='](value)) ? ((function() {if ((($b = self.exclude) !== nil && (!$b._isBoolean || $b == true))) {
        return value['$<'](self.end)
        } else {
        return value['$<='](self.end)
      }; return nil; })()) : $a);
    };

    $opal.defn(self, '$cover?', def['$===']);

    def.$each = TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1._p, block = $iter || nil, current = nil, last = nil;

      TMP_1._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      current = self.begin;
      last = self.end;
      while (current['$<'](last)) {
      if ($opal.$yield1(block, current) === $breaker) return $breaker.$v;
      current = current.$succ();};
      if ((($a = ($b = self.exclude['$!'](), $b !== false && $b !== nil ?current['$=='](last) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        if ($opal.$yield1(block, current) === $breaker) return $breaker.$v};
      return self;
    };

    def['$eql?'] = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Range) == null ? $opal.cm('Range') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = self.exclude['$==='](other['$exclude_end?']()), $b !== false && $b !== nil ?self.begin['$eql?'](other.$begin()) : $b), $a !== false && $a !== nil ?self.end['$eql?'](other.$end()) : $a);
    };

    def['$exclude_end?'] = function() {
      var self = this;

      return self.exclude;
    };

    $opal.defn(self, '$first', def.$begin);

    $opal.defn(self, '$include?', def['$cover?']);

    $opal.defn(self, '$last', def.$end);

    def.$max = TMP_2 = function() {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_2._p, $yield = $iter || nil;

      TMP_2._p = null;
      if (($yield !== nil)) {
        return $opal.find_super_dispatcher(self, 'max', TMP_2, $iter).apply(self, $zuper)
        } else {
        return self.exclude ? self.end - 1 : self.end;
      };
    };

    $opal.defn(self, '$member?', def['$cover?']);

    def.$min = TMP_3 = function() {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_3._p, $yield = $iter || nil;

      TMP_3._p = null;
      if (($yield !== nil)) {
        return $opal.find_super_dispatcher(self, 'min', TMP_3, $iter).apply(self, $zuper)
        } else {
        return self.begin
      };
    };

    $opal.defn(self, '$member?', def['$include?']);

    def.$size = function() {
      var $a, $b, $c, self = this, _begin = nil, _end = nil, infinity = nil;

      _begin = self.begin;
      _end = self.end;
      if ((($a = self.exclude) !== nil && (!$a._isBoolean || $a == true))) {
        _end = _end['$-'](1)};
      if ((($a = ($b = (($c = $scope.Numeric) == null ? $opal.cm('Numeric') : $c)['$==='](_begin), $b !== false && $b !== nil ?(($c = $scope.Numeric) == null ? $opal.cm('Numeric') : $c)['$==='](_end) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return nil
      };
      if (_end['$<'](_begin)) {
        return 0};
      infinity = (($a = ((($b = $scope.Float) == null ? $opal.cm('Float') : $b))._scope).INFINITY == null ? $a.cm('INFINITY') : $a.INFINITY);
      if ((($a = ((($b = infinity['$=='](_begin.$abs())) !== false && $b !== nil) ? $b : _end.$abs()['$=='](infinity))) !== nil && (!$a._isBoolean || $a == true))) {
        return infinity};
      return ((Math.abs(_end - _begin) + 1)).$to_i();
    };

    def.$step = function(n) {
      var $a, self = this;

      if (n == null) {
        n = 1
      }
      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$to_s = function() {
      var self = this;

      return self.begin.$inspect() + (self.exclude ? '...' : '..') + self.end.$inspect();
    };

    return $opal.defn(self, '$inspect', def.$to_s);
  })(self, null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$kind_of?', '$to_i', '$coerce_to', '$between?', '$raise', '$new', '$compact', '$nil?', '$===', '$<=>', '$to_f', '$strftime', '$is_a?', '$zero?', '$utc?', '$warn', '$yday', '$rjust', '$ljust', '$zone', '$sec', '$min', '$hour', '$day', '$month', '$year', '$wday', '$isdst']);
  ;
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self._proto, $scope = self._scope, $a;

    self.$include((($a = $scope.Comparable) == null ? $opal.cm('Comparable') : $a));

    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;

    $opal.defs(self, '$at', function(seconds, frac) {
      var self = this;

      if (frac == null) {
        frac = 0
      }
      return new Date(seconds * 1000 + frac);
    });

    $opal.defs(self, '$new', function(year, month, day, hour, minute, second, utc_offset) {
      var self = this;

      
      switch (arguments.length) {
        case 1:
          return new Date(year, 0);

        case 2:
          return new Date(year, month - 1);

        case 3:
          return new Date(year, month - 1, day);

        case 4:
          return new Date(year, month - 1, day, hour);

        case 5:
          return new Date(year, month - 1, day, hour, minute);

        case 6:
          return new Date(year, month - 1, day, hour, minute, second);

        case 7:
          return new Date(year, month - 1, day, hour, minute, second);

        default:
          return new Date();
      }
    
    });

    $opal.defs(self, '$local', function(year, month, day, hour, minute, second, millisecond) {
      var $a, $b, self = this;

      if (month == null) {
        month = nil
      }
      if (day == null) {
        day = nil
      }
      if (hour == null) {
        hour = nil
      }
      if (minute == null) {
        minute = nil
      }
      if (second == null) {
        second = nil
      }
      if (millisecond == null) {
        millisecond = nil
      }
      if ((($a = arguments.length === 10) !== nil && (!$a._isBoolean || $a == true))) {
        
        var args = $slice.call(arguments).reverse();

        second = args[9];
        minute = args[8];
        hour   = args[7];
        day    = args[6];
        month  = args[5];
        year   = args[4];
      };
      year = (function() {if ((($a = year['$kind_of?']((($b = $scope.String) == null ? $opal.cm('String') : $b))) !== nil && (!$a._isBoolean || $a == true))) {
        return year.$to_i()
        } else {
        return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(year, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")
      }; return nil; })();
      month = (function() {if ((($a = month['$kind_of?']((($b = $scope.String) == null ? $opal.cm('String') : $b))) !== nil && (!$a._isBoolean || $a == true))) {
        return month.$to_i()
        } else {
        return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(((($a = month) !== false && $a !== nil) ? $a : 1), (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")
      }; return nil; })();
      if ((($a = month['$between?'](1, 12)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "month out of range: " + (month))
      };
      day = (function() {if ((($a = day['$kind_of?']((($b = $scope.String) == null ? $opal.cm('String') : $b))) !== nil && (!$a._isBoolean || $a == true))) {
        return day.$to_i()
        } else {
        return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(((($a = day) !== false && $a !== nil) ? $a : 1), (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")
      }; return nil; })();
      if ((($a = day['$between?'](1, 31)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "day out of range: " + (day))
      };
      hour = (function() {if ((($a = hour['$kind_of?']((($b = $scope.String) == null ? $opal.cm('String') : $b))) !== nil && (!$a._isBoolean || $a == true))) {
        return hour.$to_i()
        } else {
        return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(((($a = hour) !== false && $a !== nil) ? $a : 0), (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")
      }; return nil; })();
      if ((($a = hour['$between?'](0, 24)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "hour out of range: " + (hour))
      };
      minute = (function() {if ((($a = minute['$kind_of?']((($b = $scope.String) == null ? $opal.cm('String') : $b))) !== nil && (!$a._isBoolean || $a == true))) {
        return minute.$to_i()
        } else {
        return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(((($a = minute) !== false && $a !== nil) ? $a : 0), (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")
      }; return nil; })();
      if ((($a = minute['$between?'](0, 59)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "minute out of range: " + (minute))
      };
      second = (function() {if ((($a = second['$kind_of?']((($b = $scope.String) == null ? $opal.cm('String') : $b))) !== nil && (!$a._isBoolean || $a == true))) {
        return second.$to_i()
        } else {
        return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(((($a = second) !== false && $a !== nil) ? $a : 0), (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int")
      }; return nil; })();
      if ((($a = second['$between?'](0, 59)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "second out of range: " + (second))
      };
      return ($a = self).$new.apply($a, [].concat([year, month, day, hour, minute, second].$compact()));
    });

    $opal.defs(self, '$gm', function(year, month, day, hour, minute, second, utc_offset) {
      var $a, self = this;

      if ((($a = year['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "missing year (got nil)")};
      
      if (month > 12 || day > 31 || hour > 24 || minute > 59 || second > 59) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a));
      }

      var date = new Date(Date.UTC(year, (month || 1) - 1, (day || 1), (hour || 0), (minute || 0), (second || 0)));
      date.tz_offset = 0
      return date;
    ;
    });

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self._proto.$mktime = self._proto.$local;
      return self._proto.$utc = self._proto.$gm;
    })(self.$singleton_class());

    $opal.defs(self, '$now', function() {
      var self = this;

      return new Date();
    });

    def['$+'] = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Time) == null ? $opal.cm('Time') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "time + time?")};
      other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
      
      var result = new Date(self.getTime() + (other * 1000));
      result.tz_offset = self.tz_offset;
      return result;
    
    };

    def['$-'] = function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Time) == null ? $opal.cm('Time') : $b)['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        return (self.getTime() - other.getTime()) / 1000;
        } else {
        other = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$coerce_to(other, (($a = $scope.Integer) == null ? $opal.cm('Integer') : $a), "to_int");
        
        var result = new Date(self.getTime() - (other * 1000));
        result.tz_offset = self.tz_offset;
        return result;
      
      };
    };

    def['$<=>'] = function(other) {
      var self = this;

      return self.$to_f()['$<=>'](other.$to_f());
    };

    def['$=='] = function(other) {
      var self = this;

      return self.$to_f() === other.$to_f();
    };

    def.$asctime = function() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y");
    };

    $opal.defn(self, '$ctime', def.$asctime);

    def.$day = function() {
      var self = this;

      return self.getDate();
    };

    def.$yday = function() {
      var self = this;

      
      // http://javascript.about.com/library/bldayyear.htm
      var onejan = new Date(self.getFullYear(), 0, 1);
      return Math.ceil((self - onejan) / 86400000);
    
    };

    def.$isdst = function() {
      var $a, self = this;

      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def['$eql?'] = function(other) {
      var $a, $b, self = this;

      return ($a = other['$is_a?']((($b = $scope.Time) == null ? $opal.cm('Time') : $b)), $a !== false && $a !== nil ?(self['$<=>'](other))['$zero?']() : $a);
    };

    def['$friday?'] = function() {
      var self = this;

      return self.getDay() === 5;
    };

    def.$hour = function() {
      var self = this;

      return self.getHours();
    };

    def.$inspect = function() {
      var $a, self = this;

      if ((($a = self['$utc?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      };
    };

    $opal.defn(self, '$mday', def.$day);

    def.$min = function() {
      var self = this;

      return self.getMinutes();
    };

    def.$mon = function() {
      var self = this;

      return self.getMonth() + 1;
    };

    def['$monday?'] = function() {
      var self = this;

      return self.getDay() === 1;
    };

    $opal.defn(self, '$month', def.$mon);

    def['$saturday?'] = function() {
      var self = this;

      return self.getDay() === 6;
    };

    def.$sec = function() {
      var self = this;

      return self.getSeconds();
    };

    def.$usec = function() {
      var self = this;

      self.$warn("Microseconds are not supported");
      return 0;
    };

    def.$zone = function() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\([^)]+\)/)[0].match(/[A-Z]/g).join('');
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    };

    def.$getgm = function() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.tz_offset = 0;
      return result;
    
    };

    def['$gmt?'] = function() {
      var self = this;

      return self.tz_offset == 0;
    };

    def.$gmt_offset = function() {
      var self = this;

      return -self.getTimezoneOffset() * 60;
    };

    def.$strftime = function(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            width  = parseInt(width),
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.getFullYear();
            break;

          case 'C':
            zero    = !blank;
            result += Match.round(self.getFullYear() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.getFullYear() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += (self.getMonth() + 1);
            break;

          case 'B':
            result += long_months[self.getMonth()];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.getMonth()];
            break;

          case 'd':
            zero    = !blank
            result += self.getDate();
            break;

          case 'e':
            blank   = !zero
            result += self.getDate();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.getHours();
            break;

          case 'k':
            blank   = !zero;
            result += self.getHours();
            break;

          case 'I':
            zero    = !blank;
            result += (self.getHours() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.getHours() % 12 || 12);
            break;

          case 'P':
            result += (self.getHours() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.getHours() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.getMinutes();
            break;

          case 'S':
            zero    = !blank;
            result += self.getSeconds();
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.getDay()];
            break;

          case 'a':
            result += short_days[self.getDay()];
            break;

          case 'u':
            result += (self.getDay() + 1);
            break;

          case 'w':
            result += self.getDay();
            break;

          // TODO: week year
          // TODO: week number

          case 's':
            result += parseInt(self.getTime() / 1000)
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    };

    def['$sunday?'] = function() {
      var self = this;

      return self.getDay() === 0;
    };

    def['$thursday?'] = function() {
      var self = this;

      return self.getDay() === 4;
    };

    def.$to_a = function() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()];
    };

    def.$to_f = function() {
      var self = this;

      return self.getTime() / 1000;
    };

    def.$to_i = function() {
      var self = this;

      return parseInt(self.getTime() / 1000);
    };

    $opal.defn(self, '$to_s', def.$inspect);

    def['$tuesday?'] = function() {
      var self = this;

      return self.getDay() === 2;
    };

    $opal.defn(self, '$utc?', def['$gmt?']);

    def.$utc_offset = function() {
      var self = this;

      return self.getTimezoneOffset() * -60;
    };

    def.$wday = function() {
      var self = this;

      return self.getDay();
    };

    def['$wednesday?'] = function() {
      var self = this;

      return self.getDay() === 3;
    };

    return (def.$year = function() {
      var self = this;

      return self.getFullYear();
    }, nil) && 'year';
  })(self, null);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$==', '$[]', '$upcase', '$const_set', '$new', '$unshift', '$each', '$define_struct_attribute', '$instance_eval', '$to_proc', '$raise', '$<<', '$members', '$define_method', '$instance_variable_get', '$instance_variable_set', '$include', '$each_with_index', '$class', '$===', '$>=', '$size', '$include?', '$to_sym', '$enum_for', '$hash', '$all?', '$length', '$map', '$+', '$name', '$join', '$inspect', '$each_pair']);
  return (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self._proto, $scope = self._scope, TMP_1, $a, TMP_8, TMP_10;

    $opal.defs(self, '$new', TMP_1 = function(name, args) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, $c, TMP_2, $d, self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1._p = null;
      if (self['$==']((($a = $scope.Struct) == null ? $opal.cm('Struct') : $a))) {
        } else {
        return $opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Struct).apply(self, $zuper)
      };
      if (name['$[]'](0)['$=='](name['$[]'](0).$upcase())) {
        return (($a = $scope.Struct) == null ? $opal.cm('Struct') : $a).$const_set(name, ($a = self).$new.apply($a, [].concat(args)))
        } else {
        args.$unshift(name);
        return ($b = ($c = (($d = $scope.Class) == null ? $opal.cm('Class') : $d)).$new, $b._p = (TMP_2 = function(){var self = TMP_2._s || this, $a, $b, TMP_3, $c;

        ($a = ($b = args).$each, $a._p = (TMP_3 = function(arg){var self = TMP_3._s || this;
if (arg == null) arg = nil;
          return self.$define_struct_attribute(arg)}, TMP_3._s = self, TMP_3), $a).call($b);
          if (block !== false && block !== nil) {
            return ($a = ($c = self).$instance_eval, $a._p = block.$to_proc(), $a).call($c)
            } else {
            return nil
          };}, TMP_2._s = self, TMP_2), $b).call($c, self);
      };
    });

    $opal.defs(self, '$define_struct_attribute', function(name) {
      var $a, $b, TMP_4, $c, TMP_5, self = this;

      if (self['$==']((($a = $scope.Struct) == null ? $opal.cm('Struct') : $a))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      ($a = ($b = self).$define_method, $a._p = (TMP_4 = function(){var self = TMP_4._s || this;

      return self.$instance_variable_get("@" + (name))}, TMP_4._s = self, TMP_4), $a).call($b, name);
      return ($a = ($c = self).$define_method, $a._p = (TMP_5 = function(value){var self = TMP_5._s || this;
if (value == null) value = nil;
      return self.$instance_variable_set("@" + (name), value)}, TMP_5._s = self, TMP_5), $a).call($c, "" + (name) + "=");
    });

    $opal.defs(self, '$members', function() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      if (self['$==']((($a = $scope.Struct) == null ? $opal.cm('Struct') : $a))) {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "the Struct class has no members")};
      return ((($a = self.members) !== false && $a !== nil) ? $a : self.members = []);
    });

    $opal.defs(self, '$inherited', function(klass) {
      var $a, $b, TMP_6, self = this, members = nil;
      if (self.members == null) self.members = nil;

      if (self['$==']((($a = $scope.Struct) == null ? $opal.cm('Struct') : $a))) {
        return nil};
      members = self.members;
      return ($a = ($b = klass).$instance_eval, $a._p = (TMP_6 = function(){var self = TMP_6._s || this;

      return self.members = members}, TMP_6._s = self, TMP_6), $a).call($b);
    });

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self._proto['$[]'] = self._proto.$new
    })(self.$singleton_class());

    self.$include((($a = $scope.Enumerable) == null ? $opal.cm('Enumerable') : $a));

    def.$initialize = function(args) {
      var $a, $b, TMP_7, self = this;

      args = $slice.call(arguments, 0);
      return ($a = ($b = self.$members()).$each_with_index, $a._p = (TMP_7 = function(name, index){var self = TMP_7._s || this;
if (name == null) name = nil;if (index == null) index = nil;
      return self.$instance_variable_set("@" + (name), args['$[]'](index))}, TMP_7._s = self, TMP_7), $a).call($b);
    };

    def.$members = function() {
      var self = this;

      return self.$class().$members();
    };

    def['$[]'] = function(name) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Integer) == null ? $opal.cm('Integer') : $b)['$==='](name)) !== nil && (!$a._isBoolean || $a == true))) {
        if (name['$>='](self.$members().$size())) {
          self.$raise((($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a), "offset " + (name) + " too large for struct(size:" + (self.$members().$size()) + ")")};
        name = self.$members()['$[]'](name);
      } else if ((($a = self.$members()['$include?'](name.$to_sym())) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.NameError) == null ? $opal.cm('NameError') : $a), "no member '" + (name) + "' in struct")
      };
      return self.$instance_variable_get("@" + (name));
    };

    def['$[]='] = function(name, value) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Integer) == null ? $opal.cm('Integer') : $b)['$==='](name)) !== nil && (!$a._isBoolean || $a == true))) {
        if (name['$>='](self.$members().$size())) {
          self.$raise((($a = $scope.IndexError) == null ? $opal.cm('IndexError') : $a), "offset " + (name) + " too large for struct(size:" + (self.$members().$size()) + ")")};
        name = self.$members()['$[]'](name);
      } else if ((($a = self.$members()['$include?'](name.$to_sym())) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise((($a = $scope.NameError) == null ? $opal.cm('NameError') : $a), "no member '" + (name) + "' in struct")
      };
      return self.$instance_variable_set("@" + (name), value);
    };

    def.$each = TMP_8 = function() {
      var $a, $b, TMP_9, self = this, $iter = TMP_8._p, $yield = $iter || nil;

      TMP_8._p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.$members()).$each, $a._p = (TMP_9 = function(name){var self = TMP_9._s || this, $a;
if (name == null) name = nil;
      return $a = $opal.$yield1($yield, self['$[]'](name)), $a === $breaker ? $a : $a}, TMP_9._s = self, TMP_9), $a).call($b);
      return self;
    };

    def.$each_pair = TMP_10 = function() {
      var $a, $b, TMP_11, self = this, $iter = TMP_10._p, $yield = $iter || nil;

      TMP_10._p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      ($a = ($b = self.$members()).$each, $a._p = (TMP_11 = function(name){var self = TMP_11._s || this, $a;
if (name == null) name = nil;
      return $a = $opal.$yieldX($yield, [name, self['$[]'](name)]), $a === $breaker ? $a : $a}, TMP_11._s = self, TMP_11), $a).call($b);
      return self;
    };

    def['$eql?'] = function(other) {
      var $a, $b, $c, TMP_12, self = this;

      return ((($a = self.$hash()['$=='](other.$hash())) !== false && $a !== nil) ? $a : ($b = ($c = other.$each_with_index())['$all?'], $b._p = (TMP_12 = function(object, index){var self = TMP_12._s || this;
if (object == null) object = nil;if (index == null) index = nil;
      return self['$[]'](self.$members()['$[]'](index))['$=='](object)}, TMP_12._s = self, TMP_12), $b).call($c));
    };

    def.$length = function() {
      var self = this;

      return self.$members().$length();
    };

    $opal.defn(self, '$size', def.$length);

    def.$to_a = function() {
      var $a, $b, TMP_13, self = this;

      return ($a = ($b = self.$members()).$map, $a._p = (TMP_13 = function(name){var self = TMP_13._s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_13._s = self, TMP_13), $a).call($b);
    };

    $opal.defn(self, '$values', def.$to_a);

    def.$inspect = function() {
      var $a, $b, TMP_14, self = this, result = nil;

      result = "#<struct ";
      if (self.$class()['$==']((($a = $scope.Struct) == null ? $opal.cm('Struct') : $a))) {
        result = result['$+']("" + (self.$class().$name()) + " ")};
      result = result['$+'](($a = ($b = self.$each_pair()).$map, $a._p = (TMP_14 = function(name, value){var self = TMP_14._s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_14._s = self, TMP_14), $a).call($b).$join(", "));
      result = result['$+'](">");
      return result;
    };

    return $opal.defn(self, '$to_s', def.$inspect);
  })(self, null)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, $b, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $module = $opal.module, $gvars = $opal.gvars;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  $opal.add_stubs(['$write', '$join', '$map', '$String', '$getbyte', '$getc', '$raise', '$new', '$to_s', '$extend']);
  (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self._proto, $scope = self._scope;

    $opal.cdecl($scope, 'SEEK_SET', 0);

    $opal.cdecl($scope, 'SEEK_CUR', 1);

    $opal.cdecl($scope, 'SEEK_END', 2);

    (function($base) {
      var self = $module($base, 'Writable');

      var def = self._proto, $scope = self._scope;

      def['$<<'] = function(string) {
        var self = this;

        self.$write(string);
        return self;
      };

      def.$print = function(args) {
        var $a, $b, TMP_1, self = this;
        if ($gvars[","] == null) $gvars[","] = nil;

        args = $slice.call(arguments, 0);
        return self.$write(($a = ($b = args).$map, $a._p = (TMP_1 = function(arg){var self = TMP_1._s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_1._s = self, TMP_1), $a).call($b).$join($gvars[","]));
      };

      def.$puts = function(args) {
        var $a, $b, TMP_2, self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        args = $slice.call(arguments, 0);
        return self.$write(($a = ($b = args).$map, $a._p = (TMP_2 = function(arg){var self = TMP_2._s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_2._s = self, TMP_2), $a).call($b).$join($gvars["/"]));
      };
            ;$opal.donate(self, ["$<<", "$print", "$puts"]);
    })(self);

    return (function($base) {
      var self = $module($base, 'Readable');

      var def = self._proto, $scope = self._scope;

      def.$readbyte = function() {
        var self = this;

        return self.$getbyte();
      };

      def.$readchar = function() {
        var self = this;

        return self.$getc();
      };

      def.$readline = function(sep) {
        var $a, self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"]
        }
        return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
      };

      def.$readpartial = function(integer, outbuf) {
        var $a, self = this;

        if (outbuf == null) {
          outbuf = nil
        }
        return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
      };
            ;$opal.donate(self, ["$readbyte", "$readchar", "$readline", "$readpartial"]);
    })(self);
  })(self, null);
  $opal.cdecl($scope, 'STDERR', $gvars.stderr = (($a = $scope.IO) == null ? $opal.cm('IO') : $a).$new());
  $opal.cdecl($scope, 'STDIN', $gvars.stdin = (($a = $scope.IO) == null ? $opal.cm('IO') : $a).$new());
  $opal.cdecl($scope, 'STDOUT', $gvars.stdout = (($a = $scope.IO) == null ? $opal.cm('IO') : $a).$new());
  $opal.defs($gvars.stdout, '$write', function(string) {
    var self = this;

    console.log(string.$to_s());;
    return nil;
  });
  $opal.defs($gvars.stderr, '$write', function(string) {
    var self = this;

    console.warn(string.$to_s());;
    return nil;
  });
  $gvars.stdout.$extend((($a = ((($b = $scope.IO) == null ? $opal.cm('IO') : $b))._scope).Writable == null ? $a.cm('Writable') : $a.Writable));
  return $gvars.stderr.$extend((($a = ((($b = $scope.IO) == null ? $opal.cm('IO') : $b))._scope).Writable == null ? $a.cm('Writable') : $a.Writable));
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs(['$include']);
  $opal.defs(self, '$to_s', function() {
    var self = this;

    return "main";
  });
  return ($opal.defs(self, '$include', function(mod) {
    var $a, self = this;

    return (($a = $scope.Object) == null ? $opal.cm('Object') : $a).$include(mod);
  }), nil) && 'include';
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $gvars = $opal.gvars, $hash2 = $opal.hash2;

  $opal.add_stubs(['$new']);
  $gvars["&"] = $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
  $gvars[":"] = [];
  $gvars["\""] = [];
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  $opal.cdecl($scope, 'ARGV', []);
  $opal.cdecl($scope, 'ARGF', (($a = $scope.Object) == null ? $opal.cm('Object') : $a).$new());
  $opal.cdecl($scope, 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  $gvars.SAFE = 0;
  $opal.cdecl($scope, 'RUBY_PLATFORM', "opal");
  $opal.cdecl($scope, 'RUBY_ENGINE', "opal");
  $opal.cdecl($scope, 'RUBY_VERSION', "2.1.1");
  $opal.cdecl($scope, 'RUBY_ENGINE_VERSION', "0.6.1");
  return $opal.cdecl($scope, 'RUBY_RELEASE_DATE', "2014-04-15");
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs([]);
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  return true;
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$attr_reader', '$to_sym', '$freeze', '$to_a', '$assign_properties', '$hash', '$class', '$eql?', '$type', '$children', '$each', '$instance_variable_set', '$to_s', '$protected', '$private', '$==', '$nil?', '$send', '$original_dup', '$equal?', '$respond_to?', '$to_ast', '$updated', '$+', '$fancy_type', '$*', '$index', '$is_a?', '$count', '$each_with_index', '$>=', '$<<', '$to_sexp', '$inspect', '$gsub']);
  return (function($base) {
    var self = $module($base, 'AST');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Node(){};
      var self = $Node = $klass($base, $super, 'Node', $Node);

      var def = self._proto, $scope = self._scope;

      def.type = def.children = nil;
      self.$attr_reader("type");

      self.$attr_reader("children");

      self.$attr_reader("hash");

      def.$initialize = function(type, children, properties) {
        var $a, self = this;

        if (children == null) {
          children = []
        }
        if (properties == null) {
          properties = $hash2([], {})
        }
        $a = [type.$to_sym(), children.$to_a().$freeze()], self.type = $a[0], self.children = $a[1];
        self.$assign_properties(properties);
        self.hash = [self.type, self.children, self.$class()].$hash();
        return self.$freeze();
      };

      def['$eql?'] = function(other) {
        var $a, $b, self = this;

        return ($a = ($b = self.$class()['$eql?'](other.$class()), $b !== false && $b !== nil ?self.type['$eql?'](other.$type()) : $b), $a !== false && $a !== nil ?self.children['$eql?'](other.$children()) : $a);
      };

      def.$assign_properties = function(properties) {
        var $a, $b, TMP_1, self = this;

        ($a = ($b = properties).$each, $a._p = (TMP_1 = function(name, value){var self = TMP_1._s || this;
if (name == null) name = nil;if (value == null) value = nil;
        return self.$instance_variable_set(("@" + name.$to_s()), value)}, TMP_1._s = self, TMP_1), $a).call($b);
        return nil;
      };

      self.$protected("assign_properties");

      $opal.defn(self, '$original_dup', def.$dup);

      self.$private("original_dup");

      def.$dup = function() {
        var self = this;

        return self;
      };

      def.$updated = function(type, children, properties) {
        var $a, $b, $c, self = this, new_type = nil, new_children = nil, new_properties = nil;

        if (type == null) {
          type = nil
        }
        if (children == null) {
          children = nil
        }
        if (properties == null) {
          properties = nil
        }
        new_type = ((($a = type) !== false && $a !== nil) ? $a : self.type);
        new_children = ((($a = children) !== false && $a !== nil) ? $a : self.children);
        new_properties = ((($a = properties) !== false && $a !== nil) ? $a : $hash2([], {}));
        if ((($a = ($b = (($c = self.type['$=='](new_type)) ? self.children['$=='](new_children) : $c), $b !== false && $b !== nil ?properties['$nil?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          return self
          } else {
          return self.$original_dup().$send("initialize", new_type, new_children, new_properties)
        };
      };

      def['$=='] = function(other) {
        var $a, self = this;

        if ((($a = self['$equal?'](other)) !== nil && (!$a._isBoolean || $a == true))) {
          return true
        } else if ((($a = other['$respond_to?']("to_ast")) !== nil && (!$a._isBoolean || $a == true))) {
          other = other.$to_ast();
          return (($a = other.$type()['$=='](self.$type())) ? other.$children()['$=='](self.$children()) : $a);
          } else {
          return false
        };
      };

      def.$concat = function(array) {
        var self = this;

        return self.$updated(nil, self.children['$+'](array.$to_a()));
      };

      $opal.defn(self, '$+', def.$concat);

      def.$append = function(element) {
        var self = this;

        return self.$updated(nil, self.children['$+']([element]));
      };

      $opal.defn(self, '$<<', def.$append);

      def.$to_s = function() {
        var self = this;

        return "(" + (self.$fancy_type()) + " ...)";
      };

      def.$to_a = function() {
        var self = this;

        return self.$children();
      };

      def.$to_sexp = function(indent) {
        var $a, $b, $c, TMP_2, TMP_3, self = this, indented = nil, sexp = nil, first_node_child = nil;

        if (indent == null) {
          indent = 0
        }
        indented = "  "['$*'](indent);
        sexp = "" + (indented) + "(" + (self.$fancy_type());
        first_node_child = ((($a = ($b = ($c = self.$children()).$index, $b._p = (TMP_2 = function(child){var self = TMP_2._s || this, $a, $b;
if (child == null) child = nil;
        return ((($a = child['$is_a?']((($b = $scope.Node) == null ? $opal.cm('Node') : $b))) !== false && $a !== nil) ? $a : child['$is_a?']((($b = $scope.Array) == null ? $opal.cm('Array') : $b)))}, TMP_2._s = self, TMP_2), $b).call($c)) !== false && $a !== nil) ? $a : self.$children().$count());
        ($a = ($b = self.$children()).$each_with_index, $a._p = (TMP_3 = function(child, idx){var self = TMP_3._s || this, $a, $b, $c;
if (child == null) child = nil;if (idx == null) idx = nil;
        if ((($a = ($b = child['$is_a?']((($c = $scope.Node) == null ? $opal.cm('Node') : $c)), $b !== false && $b !== nil ?idx['$>='](first_node_child) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
            return sexp['$<<']("\n" + (child.$to_sexp(indent['$+'](1))))
            } else {
            return sexp['$<<'](" " + (child.$inspect()))
          }}, TMP_3._s = self, TMP_3), $a).call($b);
        sexp['$<<'](")");
        return sexp;
      };

      $opal.defn(self, '$inspect', def.$to_sexp);

      def.$to_ast = function() {
        var self = this;

        return self;
      };

      self.$protected();

      return (def.$fancy_type = function() {
        var self = this;

        return self.type.$to_s().$gsub("_", "-");
      }, nil) && 'fancy_type';
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$nil?', '$to_ast', '$to_s', '$type', '$respond_to?', '$send', '$handler_missing', '$map', '$process', '$to_a']);
  return (function($base) {
    var self = $module($base, 'AST');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Processor(){};
      var self = $Processor = $klass($base, $super, 'Processor', $Processor);

      var def = self._proto, $scope = self._scope;

      def.$process = function(node) {
        var $a, self = this, on_handler = nil, new_node = nil;

        if ((($a = node['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return nil};
        node = node.$to_ast();
        on_handler = ("on_" + node.$type().$to_s());
        if ((($a = self['$respond_to?'](on_handler)) !== nil && (!$a._isBoolean || $a == true))) {
          new_node = self.$send(on_handler, node)
          } else {
          new_node = self.$handler_missing(node)
        };
        if (new_node !== false && new_node !== nil) {
          node = new_node};
        return node;
      };

      def.$process_all = function(nodes) {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = nodes.$to_a()).$map, $a._p = (TMP_1 = function(node){var self = TMP_1._s || this;
if (node == null) node = nil;
        return self.$process(node)}, TMP_1._s = self, TMP_1), $a).call($b);
      };

      return (def.$handler_missing = function(node) {
        var self = this;

        return nil;
      }, nil) && 'handler_missing';
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$new']);
  return (function($base) {
    var self = $module($base, 'AST');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Sexp');

      var def = self._proto, $scope = self._scope;

      def.$s = function(type, children) {
        var $a, self = this;

        children = $slice.call(arguments, 1);
        return (($a = $scope.Node) == null ? $opal.cm('Node') : $a).$new(type, children);
      }
            ;$opal.donate(self, ["$s"]);
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs([]);
  return (function($base) {
    var self = $module($base, 'AST');

    var def = self._proto, $scope = self._scope;

    ;

    ;

    ;
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$class', '$_racc_do_parse_rb', '$_racc_setup', '$[]', '$!', '$==', '$next_token', '$racc_read_token', '$+', '$<', '$nil?', '$puts', '$>', '$-', '$push', '$<<', '$racc_shift', '$-@', '$*', '$last', '$pop', '$__send__', '$raise', '$racc_reduce', '$>=', '$inspect', '$racc_next_state', '$racc_token2str', '$racc_print_stacks', '$empty?', '$map', '$racc_print_states', '$each_index', '$each']);
  return (function($base) {
    var self = $module($base, 'Racc');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self._proto, $scope = self._scope;

      def.yydebug = nil;
      def.$_racc_setup = function() {
        var $a, self = this;

        return (($a = (self.$class())._scope).Racc_arg == null ? $a.cm('Racc_arg') : $a.Racc_arg);
      };

      def.$do_parse = function() {
        var self = this;

        return self.$_racc_do_parse_rb(self.$_racc_setup(), false);
      };

      def.$_racc_do_parse_rb = function(arg, in_debug) {
        var $a, $b, $c, $d, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, token_table = nil, shift_n = nil, reduce_n = nil, use_result = nil, racc_state = nil, racc_tstack = nil, racc_vstack = nil, racc_t = nil, racc_tok = nil, racc_val = nil, racc_read_next = nil, racc_user_yyerror = nil, racc_error_status = nil, token = nil, act = nil, i = nil, nerr = nil, custate = nil, curstate = nil, reduce_i = nil, reduce_len = nil, reduce_to = nil, method_id = nil, tmp_t = nil, tmp_v = nil, reduce_call_result = nil, k1 = nil;

        action_table = arg['$[]'](0);
        action_check = arg['$[]'](1);
        action_default = arg['$[]'](2);
        action_pointer = arg['$[]'](3);
        goto_table = arg['$[]'](4);
        goto_check = arg['$[]'](5);
        goto_default = arg['$[]'](6);
        goto_pointer = arg['$[]'](7);
        nt_base = arg['$[]'](8);
        reduce_table = arg['$[]'](9);
        token_table = arg['$[]'](10);
        shift_n = arg['$[]'](11);
        reduce_n = arg['$[]'](12);
        use_result = arg['$[]'](13);
        racc_state = [0];
        racc_tstack = [];
        racc_vstack = [];
        racc_t = nil;
        racc_tok = nil;
        racc_val = nil;
        racc_read_next = true;
        racc_user_yyerror = false;
        racc_error_status = 0;
        token = nil;
        act = nil;
        i = nil;
        nerr = nil;
        custate = nil;
        while ((($b = true) !== nil && (!$b._isBoolean || $b == true))) {
        i = action_pointer['$[]'](racc_state['$[]'](-1));
        if (i !== false && i !== nil) {
          if (racc_read_next !== false && racc_read_next !== nil) {
            if ((($b = racc_t['$=='](0)['$!']()) !== nil && (!$b._isBoolean || $b == true))) {
              token = self.$next_token();
              racc_tok = token['$[]'](0);
              racc_val = token['$[]'](1);
              if (racc_tok['$=='](false)) {
                racc_t = 0
                } else {
                racc_t = token_table['$[]'](racc_tok);
                if (racc_t !== false && racc_t !== nil) {
                  } else {
                  racc_t = 1
                };
              };
              if ((($b = self.yydebug) !== nil && (!$b._isBoolean || $b == true))) {
                self.$racc_read_token(racc_t, racc_tok, racc_val)};
              racc_read_next = false;}};
          i = i['$+'](racc_t);
          if ((($b = ((($c = ((($d = (i['$<'](0))) !== false && $d !== nil) ? $d : ((act = action_table['$[]'](i)))['$nil?']())) !== false && $c !== nil) ? $c : (action_check['$[]'](i)['$=='](racc_state['$[]'](-1))['$!']()))) !== nil && (!$b._isBoolean || $b == true))) {
            act = action_default['$[]'](racc_state['$[]'](-1))};
          } else {
          act = action_default['$[]'](racc_state['$[]'](-1))
        };
        if ((($b = self.yydebug) !== nil && (!$b._isBoolean || $b == true))) {
          self.$puts("(act: " + (act) + ", shift_n: " + (shift_n) + ", reduce_n: " + (reduce_n) + ")")};
        if ((($b = (($c = act['$>'](0)) ? act['$<'](shift_n) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
          if (racc_error_status['$>'](0)) {
            if ((($b = racc_t['$=='](1)['$!']()) !== nil && (!$b._isBoolean || $b == true))) {
              racc_error_status = racc_error_status['$-'](1)}};
          racc_vstack.$push(racc_val);
          curstate = act;
          racc_state['$<<'](act);
          racc_read_next = true;
          if ((($b = self.yydebug) !== nil && (!$b._isBoolean || $b == true))) {
            racc_tstack.$push(racc_t);
            self.$racc_shift(racc_t, racc_tstack, racc_vstack);};
        } else if ((($b = (($c = act['$<'](0)) ? act['$>'](reduce_n['$-@']()) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
          reduce_i = act['$*'](-3);
          reduce_len = reduce_table['$[]'](reduce_i);
          reduce_to = reduce_table['$[]'](reduce_i['$+'](1));
          method_id = reduce_table['$[]'](reduce_i['$+'](2));
          tmp_t = racc_tstack.$last(reduce_len);
          tmp_v = racc_vstack.$last(reduce_len);
          racc_state.$pop(reduce_len);
          racc_vstack.$pop(reduce_len);
          racc_tstack.$pop(reduce_len);
          if (use_result !== false && use_result !== nil) {
            reduce_call_result = self.$__send__(method_id, tmp_v, nil, tmp_v['$[]'](0));
            racc_vstack.$push(reduce_call_result);
            } else {
            self.$raise("not using result??")
          };
          racc_tstack.$push(reduce_to);
          if ((($b = self.yydebug) !== nil && (!$b._isBoolean || $b == true))) {
            self.$racc_reduce(tmp_t, reduce_to, racc_tstack, racc_vstack)};
          k1 = reduce_to['$-'](nt_base);
          if ((($b = ((reduce_i = goto_pointer['$[]'](k1)))['$=='](nil)['$!']()) !== nil && (!$b._isBoolean || $b == true))) {
            reduce_i = reduce_i['$+'](racc_state['$[]'](-1));
            if ((($b = ($c = ($d = (reduce_i['$>='](0)), $d !== false && $d !== nil ?(((curstate = goto_table['$[]'](reduce_i)))['$=='](nil)['$!']()) : $d), $c !== false && $c !== nil ?(goto_check['$[]'](reduce_i)['$=='](k1)) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
              racc_state.$push(curstate)
              } else {
              racc_state.$push(goto_default['$[]'](k1))
            };
            } else {
            racc_state.$push(goto_default['$[]'](k1))
          };
        } else if (act['$=='](shift_n)) {
          return racc_vstack['$[]'](0)
        } else if (act['$=='](reduce_n['$-@']())) {
          self.$raise((($b = $scope.SyntaxError) == null ? $opal.cm('SyntaxError') : $b), "unexpected '" + (racc_tok.$inspect()) + "'")
          } else {
          self.$raise("Rac: unknown action: " + (act))
        };
        if ((($b = self.yydebug) !== nil && (!$b._isBoolean || $b == true))) {
          self.$racc_next_state(racc_state['$[]'](-1), racc_state)};};
      };

      def.$racc_read_token = function(t, tok, val) {
        var self = this;

        self.$puts("read    " + (tok) + "(" + (self.$racc_token2str(t)) + ") " + (val.$inspect()));
        return self.$puts("\n");
      };

      def.$racc_shift = function(tok, tstack, vstack) {
        var self = this;

        self.$puts("shift  " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.$puts("\n");
      };

      def.$racc_reduce = function(toks, sim, tstack, vstack) {
        var $a, $b, TMP_1, self = this;

        self.$puts("reduce " + ((function() {if ((($a = toks['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return "<none>"
          } else {
          return ($a = ($b = toks).$map, $a._p = (TMP_1 = function(t){var self = TMP_1._s || this;
if (t == null) t = nil;
          return self.$racc_token2str(t)}, TMP_1._s = self, TMP_1), $a).call($b)
        }; return nil; })()));
        self.$puts("  --> " + (self.$racc_token2str(sim)));
        return self.$racc_print_stacks(tstack, vstack);
      };

      def.$racc_next_state = function(curstate, state) {
        var self = this;

        self.$puts("goto  " + (curstate));
        self.$racc_print_states(state);
        return self.$puts("\n");
      };

      def.$racc_token2str = function(tok) {
        var $a, self = this;

        return (($a = (self.$class())._scope).Racc_token_to_s_table == null ? $a.cm('Racc_token_to_s_table') : $a.Racc_token_to_s_table)['$[]'](tok);
      };

      def.$racc_print_stacks = function(t, v) {
        var $a, $b, TMP_2, self = this;

        self.$puts("  [");
        ($a = ($b = t).$each_index, $a._p = (TMP_2 = function(i){var self = TMP_2._s || this;
if (i == null) i = nil;
        return self.$puts("    (" + (self.$racc_token2str(t['$[]'](i))) + " " + (v['$[]'](i).$inspect()) + ")")}, TMP_2._s = self, TMP_2), $a).call($b);
        return self.$puts("  ]");
      };

      return (def.$racc_print_states = function(s) {
        var $a, $b, TMP_3, self = this;

        self.$puts("  [");
        ($a = ($b = s).$each, $a._p = (TMP_3 = function(st){var self = TMP_3._s || this;
if (st == null) st = nil;
        return self.$puts("   " + (st))}, TMP_3._s = self, TMP_3), $a).call($b);
        return self.$puts("  ]");
      }, nil) && 'racc_print_states';
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $module = $opal.module;

  $opal.add_stubs(['$include', '$new', '$nil?', '$do_with_enum', '$add', '$[]', '$merge', '$equal?', '$instance_of?', '$class', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$each_key', '$to_proc', '$empty?', '$clear', '$each', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self._proto, $scope = self._scope, $a, TMP_1, TMP_4, TMP_6;

    def.hash = nil;
    self.$include((($a = $scope.Enumerable) == null ? $opal.cm('Enumerable') : $a));

    $opal.defs(self, '$[]', function(ary) {
      var self = this;

      ary = $slice.call(arguments, 0);
      return self.$new(ary);
    });

    def.$initialize = TMP_1 = function(enum$) {
      var $a, $b, TMP_2, self = this, $iter = TMP_1._p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil
      }
      TMP_1._p = null;
      self.hash = (($a = $scope.Hash) == null ? $opal.cm('Hash') : $a).$new();
      if ((($a = enum$['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return nil};
      if (block !== false && block !== nil) {
        return ($a = ($b = self).$do_with_enum, $a._p = (TMP_2 = function(o){var self = TMP_2._s || this;
if (o == null) o = nil;
        return self.$add(block['$[]'](o))}, TMP_2._s = self, TMP_2), $a).call($b, enum$)
        } else {
        return self.$merge(enum$)
      };
    };

    def['$=='] = function(other) {
      var $a, $b, $c, TMP_3, self = this;

      if ((($a = self['$equal?'](other)) !== nil && (!$a._isBoolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a._isBoolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']((($c = $scope.Set) == null ? $opal.cm('Set') : $c)), $b !== false && $b !== nil ?self.$size()['$=='](other.$size()) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a._p = (TMP_3 = function(o){var self = TMP_3._s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_3._s = self, TMP_3), $a).call($b)
        } else {
        return false
      };
    };

    def.$add = function(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    };

    $opal.defn(self, '$<<', def.$add);

    def['$add?'] = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a._isBoolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    };

    def.$each = TMP_4 = function() {
      var $a, $b, self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a._p = block.$to_proc(), $a).call($b);
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.hash['$empty?']();
    };

    def.$clear = function() {
      var self = this;

      self.hash.$clear();
      return self;
    };

    def['$include?'] = function(o) {
      var self = this;

      return self.hash['$include?'](o);
    };

    $opal.defn(self, '$member?', def['$include?']);

    def.$merge = function(enum$) {
      var $a, $b, TMP_5, self = this;

      ($a = ($b = self).$do_with_enum, $a._p = (TMP_5 = function(o){var self = TMP_5._s || this;
if (o == null) o = nil;
      return self.$add(o)}, TMP_5._s = self, TMP_5), $a).call($b, enum$);
      return self;
    };

    def.$do_with_enum = TMP_6 = function(enum$) {
      var $a, $b, self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      return ($a = ($b = enum$).$each, $a._p = block.$to_proc(), $a).call($b);
    };

    def.$size = function() {
      var self = this;

      return self.hash.$size();
    };

    $opal.defn(self, '$length', def.$size);

    return (def.$to_a = function() {
      var self = this;

      return self.hash.$keys();
    }, nil) && 'to_a';
  })(self, null);
  return (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self._proto, $scope = self._scope, TMP_7;

    def.$to_set = TMP_7 = function(klass, args) {
      var $a, $b, self = this, $iter = TMP_7._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      if (klass == null) {
        klass = (($a = $scope.Set) == null ? $opal.cm('Set') : $a)
      }
      TMP_7._p = null;
      return ($a = ($b = klass).$new, $a._p = block.$to_proc(), $a).apply($b, [self].concat(args));
    }
        ;$opal.donate(self, ["$to_set"]);
  })(self);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$is_a?', '$gsub', '$[]', '$to_sym', '$original_percent']);
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self._proto, $scope = self._scope;

    $opal.defn(self, '$original_percent', def['$%']);

    return (def['$%'] = function(arg, args) {
      var $a, $b, TMP_1, self = this;

      args = $slice.call(arguments, 1);
      if ((($a = arg['$is_a?']((($b = $scope.Hash) == null ? $opal.cm('Hash') : $b))) !== nil && (!$a._isBoolean || $a == true))) {
        return ($a = ($b = self).$gsub, $a._p = (TMP_1 = function(){var self = TMP_1._s || this;

        return arg['$[]'](nil.$to_sym())}, TMP_1._s = self, TMP_1), $a).call($b, /%\{(\w+)\}/)
        } else {
        return ($a = self).$original_percent.apply($a, [arg].concat(args))
      };
    }, nil) && '%';
  })(self, null)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, $b, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$method_defined?', '$to_enum', '$-', '$size', '$<=', '$div', '$+', '$[]', '$===', '$==', '$<', '$fail', '$class']);
  if ((($a = (($b = $scope.Array) == null ? $opal.cm('Array') : $b)['$method_defined?']("bsearch")) !== nil && (!$a._isBoolean || $a == true))) {
    return nil
    } else {
    return (function($base, $super) {
      function $Array(){};
      var self = $Array = $klass($base, $super, 'Array', $Array);

      var def = self._proto, $scope = self._scope, TMP_1;

      return (def.$bsearch = TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1._p, $yield = $iter || nil, from = nil, to = nil, satisfied = nil, midpoint = nil, result = nil, cur = nil, $case = nil;

        TMP_1._p = null;
        if (($yield !== nil)) {
          } else {
          return self.$to_enum("bsearch")
        };
        from = 0;
        to = self.$size()['$-'](1);
        satisfied = nil;
        while (from['$<='](to)) {
        midpoint = (from['$+'](to)).$div(2);
        result = ((($b = $opal.$yield1($yield, cur = self['$[]'](midpoint))) === $breaker) ? $breaker.$v : $b);
        $case = result;if ((($b = $scope.Numeric) == null ? $opal.cm('Numeric') : $b)['$===']($case)) {if (result['$=='](0)) {
          return cur};
        result = result['$<'](0);}else if (true['$===']($case)) {satisfied = cur}else if (nil['$===']($case) || false['$===']($case)) {nil}else {self.$fail((($b = $scope.TypeError) == null ? $opal.cm('TypeError') : $b), "wrong argument type " + (result.$class()) + " (must be numeric, true, false or nil)")};
        if (result !== false && result !== nil) {
          to = midpoint['$-'](1)
          } else {
          from = midpoint['$+'](1)
        };};
        return satisfied;
      }, nil) && 'bsearch'
    })(self, null)
  }
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs([]);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    $opal.cdecl($scope, 'VERSION', "2.1.9")
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $hash2 = $opal.hash2;

  $opal.add_stubs(['$freeze']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    $opal.cdecl($scope, 'MESSAGES', $hash2(["unicode_point_too_large", "invalid_escape", "incomplete_escape", "invalid_hex_escape", "invalid_unicode_escape", "unterminated_unicode", "escape_eof", "string_eof", "regexp_options", "cvar_name", "ivar_name", "trailing_in_number", "empty_numeric", "invalid_octal", "no_dot_digit_literal", "bare_backslash", "unexpected", "embedded_document", "invalid_escape_use", "ambiguous_literal", "ambiguous_prefix", "nth_ref_alias", "begin_in_method", "backref_assignment", "invalid_assignment", "module_name_const", "unexpected_token", "argument_const", "argument_ivar", "argument_gvar", "argument_cvar", "duplicate_argument", "empty_symbol", "odd_hash", "singleton_literal", "dynamic_const", "module_in_def", "class_in_def", "unexpected_percent_str", "block_and_blockarg", "masgn_as_condition", "block_given_to_yield", "useless_else", "invalid_action", "clobbered"], {"unicode_point_too_large": "invalid Unicode codepoint (too large)", "invalid_escape": "invalid escape character syntax", "incomplete_escape": "incomplete character syntax", "invalid_hex_escape": "invalid hex escape", "invalid_unicode_escape": "invalid Unicode escape", "unterminated_unicode": "unterminated Unicode escape", "escape_eof": "escape sequence meets end of file", "string_eof": "unterminated string meets end of file", "regexp_options": "unknown regexp options: %{options}", "cvar_name": "`%{name}' is not allowed as a class variable name", "ivar_name": "`%{name}' is not allowed as an instance variable name", "trailing_in_number": "trailing `%{character}' in number", "empty_numeric": "numeric literal without digits", "invalid_octal": "invalid octal digit", "no_dot_digit_literal": "no .<digit> floating literal anymore; put 0 before dot", "bare_backslash": "bare backslash only allowed before newline", "unexpected": "unexpected `%{character}'", "embedded_document": "embedded document meets end of file (and they embark on a romantic journey)", "invalid_escape_use": "invalid character syntax; use ?%{escape}", "ambiguous_literal": "ambiguous first argument; parenthesize arguments or add whitespace to the right", "ambiguous_prefix": "`%{prefix}' interpreted as argument prefix", "nth_ref_alias": "cannot define an alias for a back-reference variable", "begin_in_method": "BEGIN in method", "backref_assignment": "cannot assign to a back-reference variable", "invalid_assignment": "cannot assign to a keyword", "module_name_const": "class or module name must be a constant literal", "unexpected_token": "unexpected token %{token}", "argument_const": "formal argument cannot be a constant", "argument_ivar": "formal argument cannot be an instance variable", "argument_gvar": "formal argument cannot be a global variable", "argument_cvar": "formal argument cannot be a class variable", "duplicate_argument": "duplicate argument name", "empty_symbol": "empty symbol literal", "odd_hash": "odd number of entries for a hash", "singleton_literal": "cannot define a singleton method for a literal", "dynamic_const": "dynamic constant assignment", "module_in_def": "module definition in method body", "class_in_def": "class definition in method body", "unexpected_percent_str": "%{type}: unknown type of percent-literal", "block_and_blockarg": "both block argument and literal block are passed", "masgn_as_condition": "multiple assignment in conditional context", "block_given_to_yield": "block given to yield", "useless_else": "else without rescue is useless", "invalid_action": "cannot %{action}", "clobbered": "clobbered by: %{action}"}).$freeze())
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$[]']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'AST');

      var def = self._proto, $scope = self._scope, $a, $b;

      (function($base, $super) {
        function $Node(){};
        var self = $Node = $klass($base, $super, 'Node', $Node);

        var def = self._proto, $scope = self._scope;

        self.$attr_reader("location");

        $opal.defn(self, '$loc', def.$location);

        return (def.$assign_properties = function(properties) {
          var $a, self = this, location = nil;

          if ((($a = (location = properties['$[]']("location"))) !== nil && (!$a._isBoolean || $a == true))) {
            return self.location = location
            } else {
            return nil
          };
        }, nil) && 'assign_properties';
      })(self, (($a = ((($b = $opal.Object._scope.AST) == null ? $opal.cm('AST') : $b))._scope).Node == null ? $a.cm('Node') : $a.Node))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$updated', '$process_all', '$on_var', '$process', '$on_vasgn', '$on_argument']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'AST');

      var def = self._proto, $scope = self._scope, $a, $b;

      (function($base, $super) {
        function $Processor(){};
        var self = $Processor = $klass($base, $super, 'Processor', $Processor);

        var def = self._proto, $scope = self._scope;

        def.$process_regular_node = function(node) {
          var self = this;

          return node.$updated(nil, self.$process_all(node));
        };

        $opal.defn(self, '$on_dstr', def.$process_regular_node);

        $opal.defn(self, '$on_dsym', def.$process_regular_node);

        $opal.defn(self, '$on_regexp', def.$process_regular_node);

        $opal.defn(self, '$on_xstr', def.$process_regular_node);

        $opal.defn(self, '$on_splat', def.$process_regular_node);

        $opal.defn(self, '$on_array', def.$process_regular_node);

        $opal.defn(self, '$on_pair', def.$process_regular_node);

        $opal.defn(self, '$on_hash', def.$process_regular_node);

        $opal.defn(self, '$on_irange', def.$process_regular_node);

        $opal.defn(self, '$on_erange', def.$process_regular_node);

        def.$on_var = function(node) {
          var self = this;

          return node;
        };

        def.$process_variable_node = function(node) {
          var self = this;

          return self.$on_var(node);
        };

        $opal.defn(self, '$on_lvar', def.$process_variable_node);

        $opal.defn(self, '$on_ivar', def.$process_variable_node);

        $opal.defn(self, '$on_gvar', def.$process_variable_node);

        $opal.defn(self, '$on_cvar', def.$process_variable_node);

        $opal.defn(self, '$on_back_ref', def.$process_variable_node);

        $opal.defn(self, '$on_nth_ref', def.$process_variable_node);

        def.$on_vasgn = function(node) {
          var $a, self = this, name = nil, value_node = nil;

          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), name = ($a[0] == null ? nil : $a[0]), value_node = ($a[1] == null ? nil : $a[1]);
          return node.$updated(nil, [name, self.$process(value_node)]);
        };

        def.$process_var_asgn_node = function(node) {
          var self = this;

          return self.$on_vasgn(node);
        };

        $opal.defn(self, '$on_lvasgn', def.$process_var_asgn_node);

        $opal.defn(self, '$on_ivasgn', def.$process_var_asgn_node);

        $opal.defn(self, '$on_gvasgn', def.$process_var_asgn_node);

        $opal.defn(self, '$on_cvasgn', def.$process_var_asgn_node);

        $opal.defn(self, '$on_and_asgn', def.$process_regular_node);

        $opal.defn(self, '$on_or_asgn', def.$process_regular_node);

        def.$on_op_asgn = function(node) {
          var $a, self = this, var_node = nil, method_name = nil, value_node = nil;

          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), var_node = ($a[0] == null ? nil : $a[0]), method_name = ($a[1] == null ? nil : $a[1]), value_node = ($a[2] == null ? nil : $a[2]);
          return node.$updated(nil, [self.$process(var_node), method_name, self.$process(value_node)]);
        };

        $opal.defn(self, '$on_mlhs', def.$process_regular_node);

        $opal.defn(self, '$on_masgn', def.$process_regular_node);

        def.$on_const = function(node) {
          var $a, self = this, scope_node = nil, name = nil;

          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), scope_node = ($a[0] == null ? nil : $a[0]), name = ($a[1] == null ? nil : $a[1]);
          return node.$updated(nil, [self.$process(scope_node), name]);
        };

        def.$on_casgn = function(node) {
          var $a, self = this, scope_node = nil, name = nil, value_node = nil;

          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), scope_node = ($a[0] == null ? nil : $a[0]), name = ($a[1] == null ? nil : $a[1]), value_node = ($a[2] == null ? nil : $a[2]);
          return node.$updated(nil, [self.$process(scope_node), name, self.$process(value_node)]);
        };

        $opal.defn(self, '$on_args', def.$process_regular_node);

        def.$on_argument = function(node) {
          var $a, self = this, arg_name = nil, value_node = nil;

          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), arg_name = ($a[0] == null ? nil : $a[0]), value_node = ($a[1] == null ? nil : $a[1]);
          return node.$updated(nil, [arg_name, self.$process(value_node)]);
        };

        def.$process_argument_node = function(node) {
          var self = this;

          return self.$on_argument(node);
        };

        $opal.defn(self, '$on_arg', def.$process_argument_node);

        $opal.defn(self, '$on_optarg', def.$process_argument_node);

        $opal.defn(self, '$on_restarg', def.$process_argument_node);

        $opal.defn(self, '$on_blockarg', def.$process_argument_node);

        $opal.defn(self, '$on_shadowarg', def.$process_argument_node);

        $opal.defn(self, '$on_kwarg', def.$process_argument_node);

        $opal.defn(self, '$on_kwoptarg', def.$process_argument_node);

        $opal.defn(self, '$on_kwrestarg', def.$process_argument_node);

        $opal.defn(self, '$on_arg_expr', def.$process_regular_node);

        $opal.defn(self, '$on_restarg_expr', def.$process_regular_node);

        $opal.defn(self, '$on_blockarg_expr', def.$process_regular_node);

        $opal.defn(self, '$on_module', def.$process_regular_node);

        $opal.defn(self, '$on_class', def.$process_regular_node);

        $opal.defn(self, '$on_sclass', def.$process_regular_node);

        def.$on_def = function(node) {
          var $a, self = this, name = nil, args_node = nil, body_node = nil;

          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), name = ($a[0] == null ? nil : $a[0]), args_node = ($a[1] == null ? nil : $a[1]), body_node = ($a[2] == null ? nil : $a[2]);
          return node.$updated(nil, [name, self.$process(args_node), self.$process(body_node)]);
        };

        def.$on_defs = function(node) {
          var $a, self = this, definee_node = nil, name = nil, args_node = nil, body_node = nil;

          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), definee_node = ($a[0] == null ? nil : $a[0]), name = ($a[1] == null ? nil : $a[1]), args_node = ($a[2] == null ? nil : $a[2]), body_node = ($a[3] == null ? nil : $a[3]);
          return node.$updated(nil, [self.$process(definee_node), name, self.$process(args_node), self.$process(body_node)]);
        };

        $opal.defn(self, '$on_undef', def.$process_regular_node);

        $opal.defn(self, '$on_alias', def.$process_regular_node);

        def.$on_send = function(node) {
          var $a, self = this, receiver_node = nil, method_name = nil, arg_nodes = nil;

          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), receiver_node = ($a[0] == null ? nil : $a[0]), method_name = ($a[1] == null ? nil : $a[1]), arg_nodes = $slice.call($a, 2);
          if (receiver_node !== false && receiver_node !== nil) {
            receiver_node = self.$process(receiver_node)};
          return node.$updated(nil, [receiver_node, method_name].concat(self.$process_all(arg_nodes)));
        };

        $opal.defn(self, '$on_block', def.$process_regular_node);

        $opal.defn(self, '$on_while', def.$process_regular_node);

        $opal.defn(self, '$on_while_post', def.$process_regular_node);

        $opal.defn(self, '$on_until', def.$process_regular_node);

        $opal.defn(self, '$on_until_post', def.$process_regular_node);

        $opal.defn(self, '$on_for', def.$process_regular_node);

        $opal.defn(self, '$on_return', def.$process_regular_node);

        $opal.defn(self, '$on_break', def.$process_regular_node);

        $opal.defn(self, '$on_next', def.$process_regular_node);

        $opal.defn(self, '$on_redo', def.$process_regular_node);

        $opal.defn(self, '$on_retry', def.$process_regular_node);

        $opal.defn(self, '$on_super', def.$process_regular_node);

        $opal.defn(self, '$on_yield', def.$process_regular_node);

        $opal.defn(self, '$on_defined?', def.$process_regular_node);

        $opal.defn(self, '$on_not', def.$process_regular_node);

        $opal.defn(self, '$on_and', def.$process_regular_node);

        $opal.defn(self, '$on_or', def.$process_regular_node);

        $opal.defn(self, '$on_if', def.$process_regular_node);

        $opal.defn(self, '$on_when', def.$process_regular_node);

        $opal.defn(self, '$on_case', def.$process_regular_node);

        $opal.defn(self, '$on_iflipflop', def.$process_regular_node);

        $opal.defn(self, '$on_eflipflop', def.$process_regular_node);

        $opal.defn(self, '$on_match_current_line', def.$process_regular_node);

        $opal.defn(self, '$on_match_with_lvasgn', def.$process_regular_node);

        $opal.defn(self, '$on_resbody', def.$process_regular_node);

        $opal.defn(self, '$on_rescue', def.$process_regular_node);

        $opal.defn(self, '$on_ensure', def.$process_regular_node);

        $opal.defn(self, '$on_begin', def.$process_regular_node);

        $opal.defn(self, '$on_kwbegin', def.$process_regular_node);

        $opal.defn(self, '$on_preexe', def.$process_regular_node);

        return $opal.defn(self, '$on_postexe', def.$process_regular_node);
      })(self, (($a = ((($b = $opal.Object._scope.AST) == null ? $opal.cm('AST') : $b))._scope).Processor == null ? $a.cm('Processor') : $a.Processor))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$freeze', '$to_set', '$map', '$to_proc']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Meta');

      var def = self._proto, $scope = self._scope, $a, $b;

      $opal.cdecl($scope, 'NODE_TYPES', ($a = ($b = ["true", "false", "nil", "int", "float", "str", "dstr", "str", "sym", "dsym", "xstr", "regopt", "regexp", "array", "splat", "array", "pair", "kwsplat", "hash", "irange", "erange", "self", "lvar", "ivar", "cvar", "gvar", "const", "defined?", "lvasgn", "ivasgn", "cvasgn", "gvasgn", "casgn", "mlhs", "masgn", "op_asgn", "op_asgn", "and_asgn", "ensure", "rescue", "arg_expr", "or_asgn", "and_asgn", "or_asgn", "back_ref", "nth_ref", "match_with_lvasgn", "match_current_line", "module", "class", "sclass", "def", "defs", "undef", "alias", "args", "cbase", "arg", "optarg", "restarg", "blockarg", "block_pass", "args", "def", "kwarg", "kwoptarg", "kwrestarg", "send", "super", "zsuper", "yield", "block", "send", "and", "not", "or", "if", "when", "case", "while", "until", "while_post", "until_post", "for", "break", "next", "redo", "return", "resbody", "kwbegin", "begin", "retry", "preexe", "postexe", "iflipflop", "eflipflop", "shadowarg"]).$map, $a._p = "to_sym".$to_proc(), $a).call($b).$to_set().$freeze())
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$empty?', '$=~', '$==', '$[]', '$match', '$find', '$encoding', '$recognize_encoding', '$force_encoding', '$nil?', '$encode', '$open', '$source=', '$read', '$raise', '$frozen?', '$dup', '$reencode_string', '$class', '$raw_source=', '$freeze', '$gsub', '$line_for', '$+', '$-', '$to_a', '$lines', '$each', '$chomp!', '$<<', '$fetch', '$private', '$each_char', '$unshift', '$length', '$respond_to?', '$line_begins', '$bsearch', '$<=']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope;

      (function($base, $super) {
        function $Buffer(){};
        var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

        var def = self._proto, $scope = self._scope;

        def.name = def.source = def.first_line = def.lines = def.line_begins = nil;
        self.$attr_reader("name", "first_line");

        $opal.cdecl($scope, 'ENCODING_RE', /\#.*coding\s*[:=]\s*((utf8-mac)|([A-Za-z0-9_-]+?)(-unix|-dos|-mac)|([A-Za-z0-9_-]+))/);

        $opal.defs(self, '$recognize_encoding', function(string) {
          var $a, $b, self = this, first_line = nil, second_line = nil, encoding_line = nil, result = nil;

          if ((($a = string['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            return nil};
          string['$=~'](/\A(.*)\n?(.*\n)?/);
          $a = [nil, nil], first_line = $a[0], second_line = $a[1];
          if ((($a = first_line['$=~'](/\A\xef\xbb\xbf/)) !== nil && (!$a._isBoolean || $a == true))) {
            return (($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8)
          } else if (first_line['$[]'](0, 2)['$==']("#!")) {
            encoding_line = second_line
            } else {
            encoding_line = first_line
          };
          if ((($a = (result = (($b = $scope.ENCODING_RE) == null ? $opal.cm('ENCODING_RE') : $b).$match(encoding_line))) !== nil && (!$a._isBoolean || $a == true))) {
            return (($a = $scope.Encoding) == null ? $opal.cm('Encoding') : $a).$find(((($a = ((($b = result['$[]'](2)) !== false && $b !== nil) ? $b : result['$[]'](3))) !== false && $a !== nil) ? $a : result['$[]'](5)))
            } else {
            return nil
          };
        });

        $opal.defs(self, '$reencode_string', function(input) {
          var $a, $b, self = this, original_encoding = nil, detected_encoding = nil;

          original_encoding = input.$encoding();
          detected_encoding = self.$recognize_encoding(input.$force_encoding((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).BINARY == null ? $a.cm('BINARY') : $a.BINARY)));
          if ((($a = detected_encoding['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
            return input.$force_encoding(original_encoding)
          } else if (detected_encoding['$==']((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).BINARY == null ? $a.cm('BINARY') : $a.BINARY))) {
            return input
            } else {
            return input.$force_encoding(detected_encoding).$encode((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8))
          };
        });

        def.$initialize = function(name, first_line) {
          var self = this;

          if (first_line == null) {
            first_line = 1
          }
          self.name = name;
          self.source = nil;
          self.first_line = first_line;
          self.lines = nil;
          return self.line_begins = nil;
        };

        def.$read = function() {
          var $a, $b, TMP_1, $c, self = this;

          ($a = ($b = (($c = $scope.File) == null ? $opal.cm('File') : $c)).$open, $a._p = (TMP_1 = function(io){var self = TMP_1._s || this;
if (io == null) io = nil;
          return self['$source='](io.$read())}, TMP_1._s = self, TMP_1), $a).call($b, self.name, "rb");
          return self;
        };

        def.$source = function() {
          var $a, self = this;

          if ((($a = self.source['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
            self.$raise((($a = $scope.RuntimeError) == null ? $opal.cm('RuntimeError') : $a), "Cannot extract source from uninitialized Source::Buffer")};
          return self.source;
        };

        def['$source='] = function(input) {
          var $a, self = this;

          if ((($a = ($scope.Encoding != null)) !== nil && (!$a._isBoolean || $a == true))) {
            if ((($a = input['$frozen?']()) !== nil && (!$a._isBoolean || $a == true))) {
              input = input.$dup()};
            input = self.$class().$reencode_string(input);};
          return self['$raw_source='](input);
        };

        def['$raw_source='] = function(input) {
          var $a, self = this;

          if ((($a = self.source) !== nil && (!$a._isBoolean || $a == true))) {
            self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "Source::Buffer is immutable")};
          return self.source = input.$gsub("\r\n", "\n").$freeze();
        };

        def.$decompose_position = function(position) {
          var $a, self = this, line_no = nil, line_begin = nil;

          $a = $opal.to_ary(self.$line_for(position)), line_no = ($a[0] == null ? nil : $a[0]), line_begin = ($a[1] == null ? nil : $a[1]);
          return [self.first_line['$+'](line_no), position['$-'](line_begin)];
        };

        def.$source_line = function(lineno) {
          var $a, $b, TMP_2, self = this;

          if ((($a = self.lines) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            self.lines = self.source.$lines().$to_a();
            ($a = ($b = self.lines).$each, $a._p = (TMP_2 = function(line){var self = TMP_2._s || this;
if (line == null) line = nil;
            return line['$chomp!']("\n")}, TMP_2._s = self, TMP_2), $a).call($b);
            self.lines['$<<']("");
          };
          return self.lines.$fetch(lineno['$-'](self.first_line)).$dup();
        };

        self.$private();

        def.$line_begins = function() {
          var $a, $b, TMP_3, self = this, index = nil;

          if ((($a = self.line_begins) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            $a = [[[0, 0]], 1], self.line_begins = $a[0], index = $a[1];
            ($a = ($b = self.source).$each_char, $a._p = (TMP_3 = function(char$){var self = TMP_3._s || this;
              if (self.line_begins == null) self.line_begins = nil;
if (char$ == null) char$ = nil;
            if (char$['$==']("\n")) {
                self.line_begins.$unshift([self.line_begins.$length(), index])};
              return index = index['$+'](1);}, TMP_3._s = self, TMP_3), $a).call($b);
          };
          return self.line_begins;
        };

        return (def.$line_for = function(position) {
          var $a, $b, TMP_4, $c, TMP_5, self = this;

          if ((($a = self.$line_begins()['$respond_to?']("bsearch")) !== nil && (!$a._isBoolean || $a == true))) {
            return ($a = ($b = self.$line_begins()).$bsearch, $a._p = (TMP_4 = function(line, line_begin){var self = TMP_4._s || this;
if (line == null) line = nil;if (line_begin == null) line_begin = nil;
            return line_begin['$<='](position)}, TMP_4._s = self, TMP_4), $a).call($b)
            } else {
            return ($a = ($c = self.$line_begins()).$find, $a._p = (TMP_5 = function(line, line_begin){var self = TMP_5._s || this;
if (line == null) line = nil;if (line_begin == null) line_begin = nil;
            return line_begin['$<='](position)}, TMP_5._s = self, TMP_5), $a).call($c)
          };
        }, nil) && 'line_for';
      })(self, null)
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $range = $opal.range;

  $opal.add_stubs(['$attr_reader', '$freeze', '$new', '$-', '$decompose_position', '$!', '$==', '$line', '$begin', '$end', '$raise', '$inspect', '$column', '$source_line', '$[]', '$source', '$begin_pos', '$end_pos', '$include?', '$to_a', '$join', '$name', '$+', '$min', '$max', '$is_a?', '$source_buffer']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope;

      (function($base, $super) {
        function $Range(){};
        var self = $Range = $klass($base, $super, 'Range', $Range);

        var def = self._proto, $scope = self._scope;

        def.source_buffer = def.begin_pos = def.end_pos = nil;
        self.$attr_reader("source_buffer");

        self.$attr_reader("begin_pos", "end_pos");

        def.$initialize = function(source_buffer, begin_pos, end_pos) {
          var $a, self = this;

          self.source_buffer = source_buffer;
          $a = [begin_pos, end_pos], self.begin_pos = $a[0], self.end_pos = $a[1];
          return self.$freeze();
        };

        def.$begin = function() {
          var $a, self = this;

          return (($a = $scope.Range) == null ? $opal.cm('Range') : $a).$new(self.source_buffer, self.begin_pos, self.begin_pos);
        };

        def.$end = function() {
          var $a, self = this;

          return (($a = $scope.Range) == null ? $opal.cm('Range') : $a).$new(self.source_buffer, self.end_pos, self.end_pos);
        };

        def.$size = function() {
          var self = this;

          return self.end_pos['$-'](self.begin_pos);
        };

        $opal.defn(self, '$length', def.$size);

        def.$line = function() {
          var $a, self = this, line = nil, _ = nil;

          $a = $opal.to_ary(self.source_buffer.$decompose_position(self.begin_pos)), line = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]);
          return line;
        };

        def.$column = function() {
          var $a, self = this, _ = nil, column = nil;

          $a = $opal.to_ary(self.source_buffer.$decompose_position(self.begin_pos)), _ = ($a[0] == null ? nil : $a[0]), column = ($a[1] == null ? nil : $a[1]);
          return column;
        };

        def.$column_range = function() {
          var $a, self = this;

          if ((($a = self.$begin().$line()['$=='](self.$end().$line())['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
            self.$raise((($a = $scope.RangeError) == null ? $opal.cm('RangeError') : $a), "" + (self.$inspect()) + " spans more than one line")};
          return $range(self.$begin().$column(), self.$end().$column(), true);
        };

        def.$source_line = function() {
          var self = this;

          return self.source_buffer.$source_line(self.$line());
        };

        def.$source = function() {
          var self = this;

          return self.source_buffer.$source()['$[]']($range(self.$begin_pos(), self.$end_pos(), true));
        };

        def['$is?'] = function(what) {
          var self = this;

          what = $slice.call(arguments, 0);
          return what['$include?'](self.$source());
        };

        def.$to_a = function() {
          var self = this;

          return ($range(self.begin_pos, self.end_pos, true)).$to_a();
        };

        def.$to_s = function() {
          var $a, self = this, line = nil, column = nil;

          $a = $opal.to_ary(self.source_buffer.$decompose_position(self.begin_pos)), line = ($a[0] == null ? nil : $a[0]), column = ($a[1] == null ? nil : $a[1]);
          return [self.source_buffer.$name(), line, column['$+'](1)].$join(":");
        };

        def.$resize = function(new_size) {
          var $a, self = this;

          return (($a = $scope.Range) == null ? $opal.cm('Range') : $a).$new(self.source_buffer, self.begin_pos, self.begin_pos['$+'](new_size));
        };

        def.$join = function(other) {
          var $a, self = this;

          return (($a = $scope.Range) == null ? $opal.cm('Range') : $a).$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$min(), [self.end_pos, other.$end_pos()].$max());
        };

        def['$=='] = function(other) {
          var $a, $b, $c, $d, self = this;

          return ($a = ($b = ($c = other['$is_a?']((($d = $scope.Range) == null ? $opal.cm('Range') : $d)), $c !== false && $c !== nil ?self.source_buffer['$=='](other.$source_buffer()) : $c), $b !== false && $b !== nil ?self.begin_pos['$=='](other.$begin_pos()) : $b), $a !== false && $a !== nil ?self.end_pos['$=='](other.$end_pos()) : $a);
        };

        return (def.$inspect = function() {
          var self = this;

          return "#<Parser::Source::Range " + (self.source_buffer.$name()) + " " + (self.begin_pos) + "..." + (self.end_pos) + ">";
        }, nil) && 'inspect';
      })(self, null)
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$alias_method', '$new', '$associate', '$freeze', '$source', '$text', '$===', '$==', '$type', '$is_a?', '$location', '$to_s', '$expression', '$inspect']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope;

      (function($base, $super) {
        function $Comment(){};
        var self = $Comment = $klass($base, $super, 'Comment', $Comment);

        var def = self._proto, $scope = self._scope;

        def.location = nil;
        self.$attr_reader("text");

        self.$attr_reader("location");

        self.$alias_method("loc", "location");

        $opal.defs(self, '$associate', function(ast, comments) {
          var $a, self = this, associator = nil;

          associator = (($a = $scope.Associator) == null ? $opal.cm('Associator') : $a).$new(ast, comments);
          return associator.$associate();
        });

        def.$initialize = function(range) {
          var $a, $b, $c, self = this;

          self.location = (($a = ((($b = ((($c = $scope.Parser) == null ? $opal.cm('Parser') : $c))._scope).Source == null ? $b.cm('Source') : $b.Source))._scope).Map == null ? $a.cm('Map') : $a.Map).$new(range);
          self.text = range.$source().$freeze();
          return self.$freeze();
        };

        def.$type = function() {
          var self = this, $case = nil;

          return (function() {$case = self.$text();if (/^#/['$===']($case)) {return "inline"}else if (/^=begin/['$===']($case)) {return "document"}else { return nil }})();
        };

        def['$inline?'] = function() {
          var self = this;

          return self.$type()['$==']("inline");
        };

        def['$document?'] = function() {
          var self = this;

          return self.$type()['$==']("document");
        };

        def['$=='] = function(other) {
          var $a, $b, $c, self = this;

          return ($a = other['$is_a?']((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Comment == null ? $b.cm('Comment') : $b.Comment)), $a !== false && $a !== nil ?self.location['$=='](other.$location()) : $a);
        };

        return (def.$inspect = function() {
          var self = this;

          return "#<Parser::Source::Comment " + (self.location.$expression().$to_s()) + " " + (self.$text().$inspect()) + ">";
        }, nil) && 'inspect';
      })(self, null)
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_accessor', '$new', '$[]=', '$advance_through_directives', '$process', '$private', '$==', '$type', '$current_comment_between?', '$associate_and_advance_comment', '$each', '$is_a?', '$loc', '$expression', '$children', '$[]', '$+', '$nil?', '$current_comment', '$location', '$<=', '$end_pos', '$begin_pos', '$>=', '$<<', '$advance_comment', '$=~', '$text']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Associator(){};
        var self = $Associator = $klass($base, $super, 'Associator', $Associator);

        var def = self._proto, $scope = self._scope;

        def.skip_directives = def.ast = def.mapping = def.comments = def.comment_num = nil;
        self.$attr_accessor("skip_directives");

        def.$initialize = function(ast, comments) {
          var self = this;

          self.ast = ast;
          self.comments = comments;
          return self.skip_directives = true;
        };

        def.$associate = function() {
          var $a, $b, TMP_1, $c, self = this;

          self.mapping = ($a = ($b = (($c = $scope.Hash) == null ? $opal.cm('Hash') : $c)).$new, $a._p = (TMP_1 = function(h, k){var self = TMP_1._s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, [])}, TMP_1._s = self, TMP_1), $a).call($b);
          self.comment_num = 0;
          if ((($a = self.skip_directives) !== nil && (!$a._isBoolean || $a == true))) {
            self.$advance_through_directives()};
          self.$process(nil, self.ast);
          return self.mapping;
        };

        self.$private();

        def.$process = function(upper_node, node) {
          var $a, $b, TMP_2, self = this, prev_node = nil, next_node = nil;

          if (node.$type()['$==']("begin")) {
            $a = [nil, upper_node], prev_node = $a[0], next_node = $a[1]
            } else {
            while ((($b = self['$current_comment_between?'](prev_node, node)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$associate_and_advance_comment(node)};
            $a = [nil, upper_node], prev_node = $a[0], next_node = $a[1];
          };
          return ($a = ($b = node.$children()).$each, $a._p = (TMP_2 = function(child){var self = TMP_2._s || this, $a, $b, $c, $d, $e;
if (child == null) child = nil;
          if ((($a = ($b = ($c = child['$is_a?']((($d = ((($e = $scope.AST) == null ? $opal.cm('AST') : $e))._scope).Node == null ? $d.cm('Node') : $d.Node)), $c !== false && $c !== nil ?child.$loc() : $c), $b !== false && $b !== nil ?child.$loc().$expression() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
              $a = [next_node, child], prev_node = $a[0], next_node = $a[1];
              return self.$process(prev_node, child);
              } else {
              return nil
            }}, TMP_2._s = self, TMP_2), $a).call($b);
        };

        def.$current_comment = function() {
          var self = this;

          return self.comments['$[]'](self.comment_num);
        };

        def.$advance_comment = function() {
          var self = this;

          return self.comment_num = self.comment_num['$+'](1);
        };

        def['$current_comment_between?'] = function(prev_node, next_node) {
          var $a, self = this, comment_loc = nil, next_loc = nil, prev_loc = nil;

          if ((($a = self.$current_comment()['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
            return false};
          comment_loc = self.$current_comment().$location().$expression();
          next_loc = next_node.$location().$expression();
          if ((($a = prev_node['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
            return comment_loc.$end_pos()['$<='](next_loc.$begin_pos())
            } else {
            prev_loc = prev_node.$location().$expression();
            return (($a = comment_loc.$begin_pos()['$>='](prev_loc.$end_pos())) ? comment_loc.$end_pos()['$<='](next_loc.$begin_pos()) : $a);
          };
        };

        def.$associate_and_advance_comment = function(node) {
          var self = this;

          self.mapping['$[]'](node)['$<<'](self.$current_comment());
          return self.$advance_comment();
        };

        return (def.$advance_through_directives = function() {
          var $a, $b, $c, $d, self = this;

          if ((($a = ($b = self.$current_comment(), $b !== false && $b !== nil ?self.$current_comment().$text()['$=~'](/^#!/) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
            self.$advance_comment()};
          if ((($a = ($b = self.$current_comment(), $b !== false && $b !== nil ?self.$current_comment().$text()['$=~']((($c = ((($d = $scope.Buffer) == null ? $opal.cm('Buffer') : $d))._scope).ENCODING_RE == null ? $c.cm('ENCODING_RE') : $c.ENCODING_RE)) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
            return self.$advance_comment()
            } else {
            return nil
          };
        }, nil) && 'advance_through_directives';
      })((($a = $scope.Comment) == null ? $opal.cm('Comment') : $a), null)
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $gvars = $opal.gvars, $range = $opal.range, $hash2 = $opal.hash2;

  $opal.add_stubs(['$attr_reader', '$new', '$consumer=', '$lambda', '$puts', '$render', '$append', '$begin', '$end', '$dup', '$source', '$with_index', '$begin_pos', '$range', '$sort_by', '$each', '$+', '$length', '$[]=', '$replacement', '$-', '$private', '$clobbered?', '$process', '$raise', '$clobber', '$<<', '$**', '$size', '$|', '$!', '$==', '$&', '$find', '$to_a']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope;

      (function($base, $super) {
        function $Rewriter(){};
        var self = $Rewriter = $klass($base, $super, 'Rewriter', $Rewriter);

        var def = self._proto, $scope = self._scope;

        def.diagnostics = def.source_buffer = def.queue = def.clobber = nil;
        self.$attr_reader("source_buffer");

        self.$attr_reader("diagnostics");

        def.$initialize = function(source_buffer) {
          var $a, $b, TMP_1, self = this;

          self.diagnostics = (($a = ((($b = $scope.Diagnostic) == null ? $opal.cm('Diagnostic') : $b))._scope).Engine == null ? $a.cm('Engine') : $a.Engine).$new();
          self.diagnostics['$consumer='](($a = ($b = self).$lambda, $a._p = (TMP_1 = function(diag){var self = TMP_1._s || this;
            if ($gvars.stderr == null) $gvars.stderr = nil;
if (diag == null) diag = nil;
          return $gvars.stderr.$puts(diag.$render())}, TMP_1._s = self, TMP_1), $a).call($b));
          self.source_buffer = source_buffer;
          self.queue = [];
          return self.clobber = 0;
        };

        def.$remove = function(range) {
          var $a, $b, self = this;

          return self.$append((($a = ((($b = $scope.Rewriter) == null ? $opal.cm('Rewriter') : $b))._scope).Action == null ? $a.cm('Action') : $a.Action).$new(range, ""));
        };

        def.$insert_before = function(range, content) {
          var $a, $b, self = this;

          return self.$append((($a = ((($b = $scope.Rewriter) == null ? $opal.cm('Rewriter') : $b))._scope).Action == null ? $a.cm('Action') : $a.Action).$new(range.$begin(), content));
        };

        def.$insert_after = function(range, content) {
          var $a, $b, self = this;

          return self.$append((($a = ((($b = $scope.Rewriter) == null ? $opal.cm('Rewriter') : $b))._scope).Action == null ? $a.cm('Action') : $a.Action).$new(range.$end(), content));
        };

        def.$replace = function(range, content) {
          var $a, $b, self = this;

          return self.$append((($a = ((($b = $scope.Rewriter) == null ? $opal.cm('Rewriter') : $b))._scope).Action == null ? $a.cm('Action') : $a.Action).$new(range, content));
        };

        def.$process = function() {
          var $a, $b, TMP_2, $c, TMP_3, self = this, adjustment = nil, source = nil, sorted_queue = nil;

          adjustment = 0;
          source = self.source_buffer.$source().$dup();
          sorted_queue = ($a = ($b = self.queue.$sort_by()).$with_index, $a._p = (TMP_2 = function(action, index){var self = TMP_2._s || this;
if (action == null) action = nil;if (index == null) index = nil;
          return [action.$range().$begin_pos(), index]}, TMP_2._s = self, TMP_2), $a).call($b);
          ($a = ($c = sorted_queue).$each, $a._p = (TMP_3 = function(action){var self = TMP_3._s || this, begin_pos = nil, end_pos = nil;
if (action == null) action = nil;
          begin_pos = action.$range().$begin_pos()['$+'](adjustment);
            end_pos = begin_pos['$+'](action.$range().$length());
            source['$[]=']($range(begin_pos, end_pos, true), action.$replacement());
            return adjustment = adjustment['$+']((action.$replacement().$length()['$-'](action.$range().$length())));}, TMP_3._s = self, TMP_3), $a).call($c);
          return source;
        };

        self.$private();

        def.$append = function(action) {
          var $a, self = this, clobber_action = nil, diagnostic = nil;

          if ((($a = (clobber_action = self['$clobbered?'](action.$range()))) !== nil && (!$a._isBoolean || $a == true))) {
            diagnostic = (($a = $scope.Diagnostic) == null ? $opal.cm('Diagnostic') : $a).$new("error", "invalid_action", $hash2(["action"], {"action": action}), action.$range());
            self.diagnostics.$process(diagnostic);
            diagnostic = (($a = $scope.Diagnostic) == null ? $opal.cm('Diagnostic') : $a).$new("note", "clobbered", $hash2(["action"], {"action": clobber_action}), clobber_action.$range());
            self.diagnostics.$process(diagnostic);
            self.$raise((($a = $scope.RuntimeError) == null ? $opal.cm('RuntimeError') : $a), "Parser::Source::Rewriter detected clobbering");
            } else {
            self.$clobber(action.$range());
            self.queue['$<<'](action);
          };
          return self;
        };

        def.$clobber = function(range) {
          var self = this, value_compare = nil;

          value_compare = (2)['$**'](range.$size())['$-'](1)['$<<'](range.$begin_pos());
          return self.clobber = self.clobber['$|'](value_compare);
        };

        return (def['$clobbered?'] = function(range) {
          var $a, $b, TMP_4, self = this;

          if ((($a = self.clobber['$&']((((2)['$**'](range.$size())['$-'](1))['$<<'](range.$begin_pos())))['$=='](0)['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
            return ($a = ($b = self.queue).$find, $a._p = (TMP_4 = function(action){var self = TMP_4._s || this;
if (action == null) action = nil;
            return action.$range().$to_a()['$&'](range.$to_a())}, TMP_4._s = self, TMP_4), $a).call($b)
            } else {
            return nil
          };
        }, nil) && 'clobbered?';
      })(self, null)
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$freeze', '$==', '$length', '$empty?', '$inspect']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Action(){};
        var self = $Action = $klass($base, $super, 'Action', $Action);

        var def = self._proto, $scope = self._scope;

        def.range = def.replacement = nil;
        self.$attr_reader("range", "replacement");

        def.$initialize = function(range, replacement) {
          var $a, self = this;

          if (replacement == null) {
            replacement = ""
          }
          $a = [range, replacement], self.range = $a[0], self.replacement = $a[1];
          return self.$freeze();
        };

        return (def.$to_s = function() {
          var $a, $b, self = this;

          if ((($a = (($b = self.range.$length()['$=='](0)) ? self.replacement['$empty?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
            return "do nothing"
          } else if (self.range.$length()['$=='](0)) {
            return "insert " + (self.replacement.$inspect())
          } else if ((($a = self.replacement['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            return "remove " + (self.range.$length()) + " character(s)"
            } else {
            return "replace " + (self.range.$length()) + " character(s) with " + (self.replacement.$inspect())
          };
        }, nil) && 'to_s';
      })((($a = $scope.Rewriter) == null ? $opal.cm('Rewriter') : $a), null)
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $range = $opal.range;

  $opal.add_stubs(['$attr_reader', '$freeze', '$line', '$column', '$with', '$update_expression', '$==', '$class', '$reduce', '$map', '$instance_variable_get', '$send', '$instance_variables', '$[]', '$to_sym', '$protected', '$tap', '$to_proc', '$dup']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope;

      (function($base, $super) {
        function $Map(){};
        var self = $Map = $klass($base, $super, 'Map', $Map);

        var def = self._proto, $scope = self._scope, TMP_4;

        def.expression = nil;
        self.$attr_reader("expression");

        def.$initialize = function(expression) {
          var self = this;

          self.expression = expression;
          return self.$freeze();
        };

        def.$line = function() {
          var self = this;

          return self.expression.$line();
        };

        def.$column = function() {
          var self = this;

          return self.expression.$column();
        };

        def.$with_expression = function(expression_l) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self).$with, $a._p = (TMP_1 = function(map){var self = TMP_1._s || this;
if (map == null) map = nil;
          return map.$update_expression(expression_l)}, TMP_1._s = self, TMP_1), $a).call($b);
        };

        def['$=='] = function(other) {
          var $a, $b, $c, TMP_2, self = this;

          return (($a = other.$class()['$=='](self.$class())) ? ($b = ($c = self.$instance_variables()).$map, $b._p = (TMP_2 = function(ivar){var self = TMP_2._s || this;
if (ivar == null) ivar = nil;
          return self.$instance_variable_get(ivar)['$=='](other.$send("instance_variable_get", ivar))}, TMP_2._s = self, TMP_2), $b).call($c).$reduce("&") : $a);
        };

        def.$to_hash = function() {
          var $a, $b, TMP_3, self = this;

          return (($a = $scope.Hash) == null ? $opal.cm('Hash') : $a)['$[]'](($a = ($b = self.$instance_variables()).$map, $a._p = (TMP_3 = function(ivar){var self = TMP_3._s || this;
if (ivar == null) ivar = nil;
          return [ivar['$[]']($range(1, -1, false)).$to_sym(), self.$instance_variable_get(ivar)]}, TMP_3._s = self, TMP_3), $a).call($b));
        };

        self.$protected();

        def.$with = TMP_4 = function() {
          var $a, $b, self = this, $iter = TMP_4._p, block = $iter || nil;

          TMP_4._p = null;
          return ($a = ($b = self.$dup()).$tap, $a._p = block.$to_proc(), $a).call($b).$freeze();
        };

        return (def.$update_expression = function(expression_l) {
          var self = this;

          return self.expression = expression_l;
        }, nil) && 'update_expression';
      })(self, null)
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Operator(){};
        var self = $Operator = $klass($base, $super, 'Operator', $Operator);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("operator");

        return (def.$initialize = TMP_1 = function(operator, expression) {
          var self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          self.operator = operator;
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Collection(){};
        var self = $Collection = $klass($base, $super, 'Collection', $Collection);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("begin");

        self.$attr_reader("end");

        return (def.$initialize = TMP_1 = function(begin_l, end_l, expression_l) {
          var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          $a = [begin_l, end_l], self.begin = $a[0], self.end = $a[1];
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression_l]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Constant(){};
        var self = $Constant = $klass($base, $super, 'Constant', $Constant);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("double_colon");

        self.$attr_reader("name");

        self.$attr_reader("operator");

        def.$initialize = TMP_1 = function(double_colon, name, expression) {
          var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          $a = [double_colon, name], self.double_colon = $a[0], self.name = $a[1];
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression]);
        };

        def.$with_operator = function(operator_l) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self).$with, $a._p = (TMP_2 = function(map){var self = TMP_2._s || this;
if (map == null) map = nil;
          return map.$update_operator(operator_l)}, TMP_2._s = self, TMP_2), $a).call($b);
        };

        self.$protected();

        return (def.$update_operator = function(operator_l) {
          var self = this;

          return self.operator = operator_l;
        }, nil) && 'update_operator';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Variable(){};
        var self = $Variable = $klass($base, $super, 'Variable', $Variable);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("name");

        self.$attr_reader("operator");

        def.$initialize = TMP_1 = function(name_l, expression_l) {
          var self = this, $iter = TMP_1._p, $yield = $iter || nil;

          if (expression_l == null) {
            expression_l = name_l
          }
          TMP_1._p = null;
          self.name = name_l;
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression_l]);
        };

        def.$with_operator = function(operator_l) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self).$with, $a._p = (TMP_2 = function(map){var self = TMP_2._s || this;
if (map == null) map = nil;
          return map.$update_operator(operator_l)}, TMP_2._s = self, TMP_2), $a).call($b);
        };

        self.$protected();

        return (def.$update_operator = function(operator_l) {
          var self = this;

          return self.operator = operator_l;
        }, nil) && 'update_operator';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Keyword(){};
        var self = $Keyword = $klass($base, $super, 'Keyword', $Keyword);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("keyword");

        self.$attr_reader("begin");

        self.$attr_reader("end");

        return (def.$initialize = TMP_1 = function(keyword_l, begin_l, end_l, expression_l) {
          var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          self.keyword = keyword_l;
          $a = [begin_l, end_l], self.begin = $a[0], self.end = $a[1];
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression_l]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$join']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self._proto, $scope = self._scope, TMP_1;

        def.keyword = def.end = nil;
        self.$attr_reader("keyword");

        self.$attr_reader("operator");

        self.$attr_reader("name");

        self.$attr_reader("end");

        return (def.$initialize = TMP_1 = function(keyword_l, operator_l, name_l, end_l) {
          var self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.end = end_l;
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [self.keyword.$join(self.end)]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Send(){};
        var self = $Send = $klass($base, $super, 'Send', $Send);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("dot");

        self.$attr_reader("selector");

        self.$attr_reader("operator");

        self.$attr_reader("begin");

        self.$attr_reader("end");

        def.$initialize = TMP_1 = function(dot_l, selector_l, begin_l, end_l, expression_l) {
          var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          self.dot = dot_l;
          self.selector = selector_l;
          $a = [begin_l, end_l], self.begin = $a[0], self.end = $a[1];
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression_l]);
        };

        def.$with_operator = function(operator_l) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self).$with, $a._p = (TMP_2 = function(map){var self = TMP_2._s || this;
if (map == null) map = nil;
          return map.$update_operator(operator_l)}, TMP_2._s = self, TMP_2), $a).call($b);
        };

        self.$protected();

        return (def.$update_operator = function(operator_l) {
          var self = this;

          return self.operator = operator_l;
        }, nil) && 'update_operator';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Condition(){};
        var self = $Condition = $klass($base, $super, 'Condition', $Condition);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("keyword");

        self.$attr_reader("begin");

        self.$attr_reader("else");

        self.$attr_reader("end");

        return (def.$initialize = TMP_1 = function(keyword_l, begin_l, else_l, end_l, expression_l) {
          var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          self.keyword = keyword_l;
          $a = [begin_l, else_l, end_l], self.begin = $a[0], self["else"] = $a[1], self.end = $a[2];
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression_l]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Ternary(){};
        var self = $Ternary = $klass($base, $super, 'Ternary', $Ternary);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("question");

        self.$attr_reader("colon");

        return (def.$initialize = TMP_1 = function(question_l, colon_l, expression_l) {
          var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          $a = [question_l, colon_l], self.question = $a[0], self.colon = $a[1];
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression_l]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $For(){};
        var self = $For = $klass($base, $super, 'For', $For);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("keyword", "in");

        self.$attr_reader("begin", "end");

        return (def.$initialize = TMP_1 = function(keyword_l, in_l, begin_l, end_l, expression_l) {
          var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          $a = [keyword_l, in_l], self.keyword = $a[0], self["in"] = $a[1];
          $a = [begin_l, end_l], self.begin = $a[0], self.end = $a[1];
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression_l]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $RescueBody(){};
        var self = $RescueBody = $klass($base, $super, 'RescueBody', $RescueBody);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("keyword");

        self.$attr_reader("assoc");

        self.$attr_reader("begin");

        return (def.$initialize = TMP_1 = function(keyword_l, assoc_l, begin_l, expression_l) {
          var self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          self.keyword = keyword_l;
          self.assoc = assoc_l;
          self.begin = begin_l;
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [expression_l]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope, $a;

      (function($base, $super) {
        function $Heredoc(){};
        var self = $Heredoc = $klass($base, $super, 'Heredoc', $Heredoc);

        var def = self._proto, $scope = self._scope, TMP_1;

        self.$attr_reader("heredoc_body");

        self.$attr_reader("heredoc_end");

        return (def.$initialize = TMP_1 = function(begin_l, body_l, end_l) {
          var self = this, $iter = TMP_1._p, $yield = $iter || nil;

          TMP_1._p = null;
          self.heredoc_body = body_l;
          self.heredoc_end = end_l;
          return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [begin_l]);
        }, nil) && 'initialize';
      })((($a = $scope.Map) == null ? $opal.cm('Map') : $a), (($a = $scope.Map) == null ? $opal.cm('Map') : $a))
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$message']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a;

    (function($base, $super) {
      function $SyntaxError(){};
      var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

      var def = self._proto, $scope = self._scope, TMP_1;

      self.$attr_reader("diagnostic");

      return (def.$initialize = TMP_1 = function(diagnostic) {
        var self = this, $iter = TMP_1._p, $yield = $iter || nil;

        TMP_1._p = null;
        self.diagnostic = diagnostic;
        return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [diagnostic.$message()]);
      }, nil) && 'initialize';
    })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a))
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$freeze', '$attr_reader', '$include?', '$raise', '$join', '$dup', '$%', '$[]', '$source_line', '$*', '$length', '$each', '$column_range', '$[]=', '$size', '$to_s', '$message']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Diagnostic(){};
      var self = $Diagnostic = $klass($base, $super, 'Diagnostic', $Diagnostic);

      var def = self._proto, $scope = self._scope;

      def.reason = def["arguments"] = def.location = def.highlights = def.level = nil;
      $opal.cdecl($scope, 'LEVELS', ["note", "warning", "error", "fatal"].$freeze());

      self.$attr_reader("level", "reason", "arguments");

      self.$attr_reader("location", "highlights");

      def.$initialize = function(level, reason, arguments$, location, highlights) {
        var $a, $b, self = this;

        if (highlights == null) {
          highlights = []
        }
        if ((($a = (($b = $scope.LEVELS) == null ? $opal.cm('LEVELS') : $b)['$include?'](level)) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "Diagnostic#level must be one of " + ((($a = $scope.LEVELS) == null ? $opal.cm('LEVELS') : $a).$join(", ")) + "; ")
        };
        if (location !== false && location !== nil) {
          } else {
          self.$raise("Expected a location")
        };
        self.level = level;
        self.reason = reason;
        self["arguments"] = (((($a = arguments$) !== false && $a !== nil) ? $a : $hash2([], {}))).$dup().$freeze();
        self.location = location;
        self.highlights = highlights.$dup().$freeze();
        return self.$freeze();
      };

      def.$message = function() {
        var $a, self = this;

        return (($a = $scope.MESSAGES) == null ? $opal.cm('MESSAGES') : $a)['$[]'](self.reason)['$%'](self["arguments"]);
      };

      return (def.$render = function() {
        var $a, $b, TMP_1, self = this, source_line = nil, highlight_line = nil, range = nil;

        source_line = self.location.$source_line();
        highlight_line = " "['$*'](source_line.$length());
        ($a = ($b = self.highlights).$each, $a._p = (TMP_1 = function(hilight){var self = TMP_1._s || this, range = nil;
if (hilight == null) hilight = nil;
        range = hilight.$column_range();
          return highlight_line['$[]='](range, "~"['$*'](hilight.$size()));}, TMP_1._s = self, TMP_1), $a).call($b);
        range = self.location.$column_range();
        highlight_line['$[]='](range, "^"['$*'](self.location.$size()));
        return ["" + (self.location.$to_s()) + ": " + (self.level) + ": " + (self.$message()), source_line, highlight_line];
      }, nil) && 'render';
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_accessor', '$ignore?', '$call', '$raise?', '$raise', '$protected', '$==', '$level']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a;

    (function($base, $super) {
      function $Engine(){};
      var self = $Engine = $klass($base, $super, 'Engine', $Engine);

      var def = self._proto, $scope = self._scope;

      def.consumer = def.ignore_warnings = def.all_errors_are_fatal = nil;
      self.$attr_accessor("consumer");

      self.$attr_accessor("all_errors_are_fatal");

      self.$attr_accessor("ignore_warnings");

      def.$initialize = function(consumer) {
        var self = this;

        if (consumer == null) {
          consumer = nil
        }
        self.consumer = consumer;
        self.all_errors_are_fatal = false;
        return self.ignore_warnings = false;
      };

      def.$process = function(diagnostic) {
        var $a, $b, self = this;

        if ((($a = self['$ignore?'](diagnostic)) !== nil && (!$a._isBoolean || $a == true))) {
        } else if ((($a = self.consumer) !== nil && (!$a._isBoolean || $a == true))) {
          self.consumer.$call(diagnostic)};
        if ((($a = self['$raise?'](diagnostic)) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise((($a = ((($b = $scope.Parser) == null ? $opal.cm('Parser') : $b))._scope).SyntaxError == null ? $a.cm('SyntaxError') : $a.SyntaxError), diagnostic)};
        return self;
      };

      self.$protected();

      def['$ignore?'] = function(diagnostic) {
        var $a, self = this;

        return ($a = self.ignore_warnings, $a !== false && $a !== nil ?diagnostic.$level()['$==']("warning") : $a);
      };

      return (def['$raise?'] = function(diagnostic) {
        var $a, $b, self = this;

        return ((($a = (($b = self.all_errors_are_fatal, $b !== false && $b !== nil ?diagnostic.$level()['$==']("error") : $b))) !== false && $a !== nil) ? $a : diagnostic.$level()['$==']("fatal"));
      }, nil) && 'raise?';
    })((($a = $scope.Diagnostic) == null ? $opal.cm('Diagnostic') : $a), null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$reset', '$[]', '$push', '$dup', '$pop', '$add', '$to_sym', '$include?']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $StaticEnvironment(){};
      var self = $StaticEnvironment = $klass($base, $super, 'StaticEnvironment', $StaticEnvironment);

      var def = self._proto, $scope = self._scope;

      def.stack = def.variables = nil;
      def.$initialize = function() {
        var self = this;

        return self.$reset();
      };

      def.$reset = function() {
        var $a, self = this;

        self.variables = (($a = $scope.Set) == null ? $opal.cm('Set') : $a)['$[]']();
        return self.stack = [];
      };

      def.$extend_static = function() {
        var $a, self = this;

        self.stack.$push(self.variables);
        self.variables = (($a = $scope.Set) == null ? $opal.cm('Set') : $a)['$[]']();
        return self;
      };

      def.$extend_dynamic = function() {
        var self = this;

        self.stack.$push(self.variables);
        self.variables = self.variables.$dup();
        return self;
      };

      def.$unextend = function() {
        var self = this;

        self.variables = self.stack.$pop();
        return self;
      };

      def.$declare = function(name) {
        var self = this;

        self.variables.$add(name.$to_sym());
        return self;
      };

      return (def['$declared?'] = function(name) {
        var self = this;

        return self.variables['$include?'](name.$to_sym());
      }, nil) && 'declared?';
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2, $range = $opal.range;

  $opal.add_stubs(['$attr_accessor', '$private', '$_lex_trans_keys=', '$_lex_key_spans=', '$_lex_index_offsets=', '$_lex_indicies=', '$_lex_trans_targs=', '$_lex_trans_actions=', '$_lex_to_state_actions=', '$_lex_from_state_actions=', '$_lex_eof_trans=', '$lex_start=', '$lex_error=', '$lex_en_interp_words=', '$lex_en_interp_string=', '$lex_en_plain_words=', '$lex_en_plain_string=', '$lex_en_regexp_modifiers=', '$lex_en_expr_variable=', '$lex_en_expr_fname=', '$lex_en_expr_endfn=', '$lex_en_expr_dot=', '$lex_en_expr_arg=', '$lex_en_expr_cmdarg=', '$lex_en_expr_endarg=', '$lex_en_expr_mid=', '$lex_en_expr_beg=', '$lex_en_expr_value=', '$lex_en_expr_end=', '$lex_en_leading_dot=', '$lex_en_line_comment=', '$lex_en_line_begin=', '$attr_reader', '$reset', '$lex_en_line_begin', '$class', '$new', '$source', '$encoding', '$+', '$force_encoding', '$==', '$unpack', '$>', '$size', '$respond_to?', '$encode', '$[]', '$lex_en_expr_dot', '$lex_en_expr_fname', '$lex_en_expr_value', '$lex_en_expr_beg', '$lex_en_expr_mid', '$lex_en_expr_arg', '$lex_en_expr_cmdarg', '$lex_en_expr_end', '$lex_en_expr_endarg', '$lex_en_expr_endfn', '$lex_en_interp_string', '$lex_en_interp_words', '$lex_en_plain_string', '$fetch', '$invert', '$any?', '$shift', '$send', '$length', '$<=', '$===', '$<<', '$-', '$!', '$emit_comment', '$flush_string', '$literal', '$extend_content', '$emit', '$heredoc?', '$saved_herebody_s=', '$start_interp_brace', '$[]=', '$diagnostic', '$range', '$str_s', '$gsub', '$tok', '$version?', '$nest_and_try_closing', '$heredoc_e', '$pop_literal', '$words?', '$eof_codepoint?', '$extend_space', '$extend_string', '$chr', '$munge_escape?', '$regexp?', '$call', '$scan', '$join', '$=~', '$to_i', '$stack_pop', '$emit_table', '$arg_or_cmdarg', '$active?', '$emit_do', '$start_with?', '$push_literal', '$ord', '$nil?', '$declared?', '$push', '$lexpop', '$include?', '$inspect', '$last', '$pop', '$end_with?', '$empty?', '$index', '$to_f', '$Float', '$lambda', '$Rational', '$Complex', '$each', '$>=', '$split', '$encode_escape', '$%', '$end_interp_brace_and_try_closing', '$saved_herebody_s', '$&', '$|', '$lex_error', '$protected', '$process', '$interpolate?', '$lex_en_plain_words', '$type', '$lex_en_regexp_modifiers', '$to_s', '$upcase']);
  return (function($base, $super) {
    function $Lexer(){};
    var self = $Lexer = $klass($base, $super, 'Lexer', $Lexer);

    var def = self._proto, $scope = self._scope, $a, $b, TMP_55;

    def.source_buffer = def.source = def.encoding = def.source_pts = def.force_utf32 = def.cs = def.token_queue = def.p = def.herebody_s = def.sharp_s = def.ts = def.stack = def.top = def.te = def.escape_s = def.escape = def.act = def.cond = def.static_env = def.lambda_stack = def.paren_nest = def.cmdarg = def.num_digits_s = def.num_suffix_s = def.num_base = def.num_xfrm = def.newline_s = def.eq_begin_s = def.heredoc_e = def.version = def.tokens = def.command_state = def.comments = def.diagnostics = def.literal_stack = nil;
    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_trans_keys");
      return self.$private("_lex_trans_keys", "_lex_trans_keys=");
    })(self.$singleton_class());

    self['$_lex_trans_keys=']([0, 0, 101, 101, 103, 103, 105, 105, 110, 110, 69, 69, 78, 78, 68, 68, 95, 95, 95, 95, 0, 26, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 0, 127, 58, 58, 60, 60, 62, 62, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 115, 115, 99, 99, 117, 117, 101, 101, 108, 116, 101, 101, 115, 115, 115, 115, 105, 105, 108, 108, 105, 105, 108, 108, 58, 58, 0, 127, 10, 10, 0, 127, 58, 58, 98, 98, 101, 101, 103, 103, 105, 105, 110, 110, 0, 122, 61, 61, 0, 127, 0, 127, 61, 126, 0, 127, 0, 127, 93, 93, 0, 127, 0, 127, 10, 10, 10, 34, 10, 10, 10, 39, 0, 127, 10, 96, 0, 120, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 58, 58, 0, 127, 43, 57, 48, 57, 48, 57, 48, 57, 48, 57, 0, 127, 58, 58, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 60, 60, 10, 10, 9, 46, 0, 46, 0, 95, 9, 32, 0, 0, 10, 10, 10, 10, 98, 98, 9, 32, 10, 10, 95, 95, 0, 92, 9, 32, 36, 123, 0, 127, 48, 57, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 0, 123, 0, 26, 0, 26, 0, 26, 0, 0, 0, 102, 0, 102, 0, 102, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 26, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 36, 123, 0, 127, 48, 57, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 0, 123, 0, 26, 0, 26, 0, 26, 0, 0, 0, 102, 0, 102, 0, 102, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 26, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 9, 32, 0, 26, 0, 92, 0, 26, 65, 122, 65, 122, 36, 64, 0, 127, 48, 57, 0, 127, 0, 127, 0, 127, 0, 127, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 38, 38, 42, 42, 64, 64, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 93, 93, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 124, 124, 0, 127, 0, 127, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 93, 93, 10, 10, 124, 124, 0, 126, 0, 127, 0, 61, 9, 61, 9, 61, 0, 0, 9, 61, 9, 62, 46, 46, 46, 46, 58, 58, 9, 32, 0, 0, 0, 127, 0, 0, 9, 124, 0, 0, 10, 10, 10, 10, 0, 0, 9, 61, 58, 58, 60, 60, 62, 62, 10, 10, 0, 127, 102, 102, 101, 101, 110, 110, 104, 104, 0, 127, 0, 127, 0, 127, 0, 0, 0, 127, 10, 10, 0, 123, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 111, 111, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 61, 0, 0, 61, 126, 61, 61, 0, 0, 0, 0, 0, 0, 58, 58, 9, 32, 61, 61, 9, 32, 61, 126, 10, 10, 10, 10, 65, 122, 0, 122, 38, 61, 0, 0, 42, 61, 61, 61, 48, 61, 48, 62, 46, 46, 46, 46, 0, 26, 0, 127, 0, 127, 61, 61, 0, 0, 61, 126, 61, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 126, 0, 127, 48, 57, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 61, 61, 62, 124, 124, 60, 61, 0, 0, 62, 62, 61, 126, 61, 62, 0, 122, 0, 127, 0, 127, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 0, 123, 0, 26, 0, 26, 0, 26, 0, 0, 0, 102, 0, 102, 0, 102, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 26, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 61, 126, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 61, 61, 38, 61, 0, 0, 0, 0, 42, 61, 61, 62, 46, 57, 46, 46, 48, 101, 48, 95, 46, 120, 48, 114, 43, 57, 48, 105, 0, 0, 105, 105, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 105, 114, 0, 0, 105, 105, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 46, 114, 48, 114, 46, 114, 48, 114, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 9, 92, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 0, 9, 46, 9, 46, 0, 46, 10, 61, 10, 10, 10, 101, 10, 110, 10, 100, 10, 10, 0]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_key_spans");
      return self.$private("_lex_key_spans", "_lex_key_spans=");
    })(self.$singleton_class());

    self['$_lex_key_spans=']([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 128, 128, 128, 128, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 128, 128, 1, 128, 1, 1, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 128, 1, 128, 1, 1, 1, 1, 1, 1, 123, 1, 128, 128, 66, 128, 128, 1, 128, 128, 1, 25, 1, 30, 128, 87, 121, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 128, 128, 1, 1, 128, 15, 10, 10, 10, 10, 128, 1, 84, 84, 84, 84, 84, 84, 1, 1, 38, 47, 96, 24, 0, 1, 1, 1, 24, 1, 1, 93, 24, 88, 128, 10, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 124, 27, 27, 27, 0, 103, 103, 103, 0, 126, 126, 126, 126, 126, 0, 126, 126, 0, 126, 27, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 0, 126, 0, 0, 55, 0, 93, 88, 128, 10, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 124, 27, 27, 27, 0, 103, 103, 103, 0, 126, 126, 126, 126, 126, 0, 126, 126, 0, 126, 27, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 0, 126, 0, 0, 55, 0, 93, 24, 27, 93, 27, 58, 58, 29, 128, 10, 128, 128, 128, 128, 24, 0, 66, 1, 1, 128, 128, 10, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 128, 128, 128, 128, 128, 128, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 128, 128, 24, 1, 1, 1, 0, 128, 128, 1, 0, 0, 24, 0, 66, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 1, 1, 1, 127, 128, 62, 53, 53, 0, 53, 54, 1, 1, 1, 24, 0, 128, 0, 116, 0, 1, 1, 0, 53, 1, 1, 1, 1, 128, 1, 1, 1, 1, 128, 128, 128, 0, 128, 1, 124, 24, 1, 1, 1, 0, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 4, 0, 66, 1, 0, 0, 0, 1, 24, 1, 24, 66, 1, 1, 58, 123, 24, 0, 20, 1, 14, 15, 1, 1, 27, 128, 128, 1, 0, 66, 2, 0, 0, 0, 0, 0, 66, 128, 10, 1, 1, 1, 2, 1, 1, 2, 1, 2, 0, 1, 66, 2, 123, 128, 128, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 124, 27, 27, 27, 0, 103, 103, 103, 0, 126, 126, 126, 126, 126, 0, 126, 126, 0, 126, 27, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 0, 126, 0, 0, 55, 0, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 1, 0, 0, 24, 0, 66, 1, 1, 128, 128, 10, 1, 24, 0, 0, 20, 2, 12, 1, 54, 48, 75, 67, 15, 58, 0, 1, 0, 67, 67, 67, 67, 10, 0, 1, 0, 67, 67, 67, 67, 67, 67, 67, 67, 69, 67, 69, 67, 1, 2, 1, 66, 1, 2, 128, 128, 0, 128, 128, 128, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 84, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 0, 38, 38, 47, 52, 1, 92, 101, 91, 1]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_index_offsets");
      return self.$private("_lex_index_offsets", "_lex_index_offsets=");
    })(self.$singleton_class());

    self['$_lex_index_offsets=']([0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 46, 175, 304, 433, 562, 609, 688, 767, 861, 889, 917, 964, 1065, 1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 2895, 3024, 3153, 3282, 3411, 3540, 3542, 3671, 3673, 3675, 3677, 3679, 3808, 3937, 4066, 4195, 4324, 4453, 4582, 4711, 4840, 4969, 5098, 5227, 5356, 5485, 5614, 5743, 5872, 6001, 6003, 6005, 6007, 6009, 6019, 6021, 6023, 6025, 6027, 6029, 6031, 6033, 6035, 6164, 6166, 6295, 6297, 6299, 6301, 6303, 6305, 6307, 6431, 6433, 6562, 6691, 6758, 6887, 7016, 7018, 7147, 7276, 7278, 7304, 7306, 7337, 7466, 7554, 7676, 7723, 7802, 7881, 7975, 8003, 8031, 8078, 8179, 8207, 8241, 8243, 8337, 8416, 8520, 8649, 8778, 8907, 9036, 9165, 9294, 9296, 9298, 9427, 9443, 9454, 9465, 9476, 9487, 9616, 9618, 9703, 9788, 9873, 9958, 10043, 10128, 10130, 10132, 10171, 10219, 10316, 10341, 10342, 10344, 10346, 10348, 10373, 10375, 10377, 10471, 10496, 10585, 10714, 10725, 10847, 10848, 10849, 10858, 10867, 10868, 10869, 10963, 10964, 10965, 10966, 11060, 11062, 11063, 11064, 11065, 11159, 11206, 11300, 11394, 11395, 11396, 11490, 11537, 11539, 11633, 11758, 11786, 11814, 11842, 11843, 11947, 12051, 12155, 12156, 12283, 12410, 12537, 12664, 12791, 12792, 12919, 13046, 13047, 13174, 13202, 13329, 13456, 13583, 13710, 13837, 13964, 14091, 14218, 14345, 14472, 14473, 14600, 14601, 14602, 14658, 14659, 14753, 14842, 14971, 14982, 15104, 15105, 15106, 15115, 15124, 15125, 15126, 15220, 15221, 15222, 15223, 15317, 15319, 15320, 15321, 15322, 15416, 15463, 15557, 15651, 15652, 15653, 15747, 15794, 15796, 15890, 16015, 16043, 16071, 16099, 16100, 16204, 16308, 16412, 16413, 16540, 16667, 16794, 16921, 17048, 17049, 17176, 17303, 17304, 17431, 17459, 17586, 17713, 17840, 17967, 18094, 18221, 18348, 18475, 18602, 18729, 18730, 18857, 18858, 18859, 18915, 18916, 19010, 19035, 19063, 19157, 19185, 19244, 19303, 19333, 19462, 19473, 19602, 19731, 19860, 19989, 20014, 20015, 20082, 20084, 20086, 20215, 20344, 20355, 20357, 20359, 20361, 20363, 20366, 20368, 20435, 20437, 20440, 20569, 20698, 20827, 20956, 21085, 21214, 21343, 21345, 21347, 21476, 21605, 21734, 21863, 21992, 22121, 22250, 22379, 22508, 22637, 22766, 22895, 23024, 23153, 23282, 23411, 23540, 23669, 23798, 23927, 24056, 24185, 24314, 24443, 24572, 24701, 24830, 24959, 25088, 25217, 25346, 25475, 25604, 25733, 25862, 25991, 26120, 26249, 26378, 26507, 26636, 26765, 26894, 27023, 27152, 27281, 27410, 27539, 27668, 27797, 27926, 28055, 28184, 28313, 28442, 28571, 28700, 28829, 28958, 29087, 29216, 29345, 29474, 29603, 29732, 29861, 29990, 30119, 30248, 30377, 30506, 30635, 30764, 30893, 31022, 31151, 31280, 31409, 31538, 31667, 31796, 31925, 32054, 32056, 32185, 32314, 32339, 32341, 32343, 32345, 32346, 32475, 32604, 32606, 32607, 32608, 32633, 32634, 32701, 32703, 32705, 32707, 32709, 32711, 32714, 32716, 32783, 32785, 32788, 32917, 32919, 32921, 32923, 33051, 33180, 33243, 33297, 33351, 33352, 33406, 33461, 33463, 33465, 33467, 33492, 33493, 33622, 33623, 33740, 33741, 33743, 33745, 33746, 33800, 33802, 33804, 33806, 33808, 33937, 33939, 33941, 33943, 33945, 34074, 34203, 34332, 34333, 34462, 34464, 34589, 34614, 34616, 34618, 34620, 34621, 34623, 34624, 34753, 34882, 34907, 34908, 34910, 34912, 34914, 34915, 35044, 35173, 35302, 35431, 35560, 35689, 35818, 35947, 36076, 36205, 36334, 36463, 36592, 36721, 36850, 36979, 37108, 37237, 37242, 37243, 37310, 37312, 37313, 37314, 37315, 37317, 37342, 37344, 37369, 37436, 37438, 37440, 37499, 37623, 37648, 37649, 37670, 37672, 37687, 37703, 37705, 37707, 37735, 37864, 37993, 37995, 37996, 38063, 38066, 38067, 38068, 38069, 38070, 38071, 38138, 38267, 38278, 38280, 38282, 38284, 38287, 38289, 38291, 38294, 38296, 38299, 38300, 38302, 38369, 38372, 38496, 38625, 38754, 38755, 38756, 38765, 38774, 38775, 38776, 38870, 38871, 38872, 38873, 38967, 38969, 38970, 38971, 38972, 39066, 39113, 39207, 39301, 39302, 39303, 39397, 39444, 39446, 39540, 39665, 39693, 39721, 39749, 39750, 39854, 39958, 40062, 40063, 40190, 40317, 40444, 40571, 40698, 40699, 40826, 40953, 40954, 41081, 41109, 41236, 41363, 41490, 41617, 41744, 41871, 41998, 42125, 42252, 42379, 42380, 42507, 42508, 42509, 42565, 42566, 42695, 42824, 42953, 42954, 42956, 42957, 43086, 43215, 43344, 43473, 43602, 43731, 43860, 43989, 44118, 44247, 44376, 44505, 44634, 44763, 44892, 45021, 45150, 45279, 45408, 45537, 45666, 45795, 45924, 46053, 46182, 46311, 46440, 46569, 46698, 46827, 46956, 47085, 47214, 47343, 47472, 47601, 47730, 47859, 47988, 48117, 48246, 48375, 48504, 48633, 48762, 48891, 49020, 49149, 49278, 49407, 49536, 49665, 49794, 49923, 50052, 50181, 50310, 50439, 50568, 50697, 50764, 50893, 51022, 51151, 51280, 51409, 51538, 51667, 51796, 51925, 52054, 52183, 52312, 52441, 52570, 52699, 52828, 52957, 53086, 53215, 53344, 53473, 53602, 53731, 53860, 53989, 53990, 54055, 54184, 54313, 54338, 54339, 54341, 54343, 54345, 54346, 54475, 54604, 54606, 54607, 54608, 54633, 54634, 54701, 54703, 54705, 54834, 54963, 54974, 54976, 55001, 55002, 55003, 55024, 55027, 55040, 55042, 55097, 55146, 55222, 55290, 55306, 55365, 55366, 55368, 55369, 55437, 55505, 55573, 55641, 55652, 55653, 55655, 55656, 55724, 55792, 55860, 55928, 55996, 56064, 56132, 56200, 56270, 56338, 56408, 56476, 56478, 56481, 56483, 56550, 56552, 56555, 56684, 56813, 56814, 56943, 57072, 57201, 57330, 57459, 57588, 57589, 57591, 57592, 57721, 57850, 57979, 58108, 58237, 58366, 58495, 58624, 58753, 58882, 59011, 59140, 59269, 59398, 59527, 59656, 59785, 59914, 60043, 60172, 60301, 60430, 60559, 60688, 60817, 60946, 61075, 61204, 61333, 61462, 61591, 61720, 61849, 61978, 62107, 62236, 62365, 62450, 62579, 62708, 62837, 62966, 63095, 63224, 63353, 63482, 63611, 63740, 63869, 63998, 64127, 64256, 64385, 64514, 64643, 64772, 64901, 65030, 65159, 65288, 65417, 65546, 65675, 65804, 65933, 66062, 66191, 66320, 66449, 66578, 66707, 66836, 66965, 67094, 67223, 67352, 67481, 67610, 67739, 67868, 67997, 68126, 68255, 68384, 68513, 68642, 68771, 68900, 69029, 69158, 69287, 69416, 69545, 69674, 69803, 69932, 70061, 70190, 70319, 70448, 70577, 70706, 70835, 70836, 70901, 70902, 70941, 70980, 71028, 71081, 71083, 71176, 71278, 71370]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_indicies");
      return self.$private("_lex_indicies", "_lex_indicies=");
    })(self.$singleton_class());

    self['$_lex_indicies=']([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 12, 14, 12, 14, 14, 12, 12, 14, 14, 14, 15, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 14, 12, 12, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 14, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 14, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 17, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 18, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 18, 21, 21, 21, 18, 21, 21, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 23, 21, 18, 21, 21, 21, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 24, 21, 18, 25, 25, 25, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 25, 18, 28, 28, 28, 18, 28, 28, 28, 28, 28, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 18, 28, 18, 28, 28, 28, 18, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 18, 28, 18, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 30, 19, 18, 31, 31, 31, 18, 31, 31, 31, 31, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 18, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 35, 31, 18, 31, 31, 31, 18, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 18, 31, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 37, 18, 37, 18, 18, 38, 38, 38, 18, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 18, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 40, 38, 18, 21, 21, 21, 18, 21, 21, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 24, 21, 18, 41, 41, 41, 18, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 18, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 41, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 45, 43, 45, 43, 45, 45, 43, 43, 45, 45, 45, 46, 45, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 45, 43, 43, 44, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 45, 43, 44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43, 43, 43, 43, 43, 43, 43, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43, 43, 43, 43, 45, 43, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43, 43, 43, 43, 43, 45, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 48, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 44, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 44, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 44, 49, 50, 50, 50, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 50, 49, 52, 52, 52, 49, 52, 52, 52, 52, 52, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 49, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 52, 49, 52, 52, 52, 49, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 49, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 55, 52, 49, 56, 56, 56, 49, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 49, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 58, 56, 49, 59, 59, 59, 49, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 49, 59, 49, 59, 59, 59, 49, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 49, 59, 49, 50, 50, 50, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 61, 50, 49, 62, 62, 62, 49, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 49, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 64, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 65, 62, 62, 62, 62, 62, 62, 66, 62, 49, 62, 62, 62, 49, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 49, 62, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 68, 49, 68, 49, 49, 69, 69, 69, 49, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 49, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 71, 69, 49, 52, 52, 52, 49, 52, 52, 52, 52, 52, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 49, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 55, 52, 49, 72, 72, 72, 49, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 49, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 72, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 75, 75, 76, 75, 76, 75, 75, 76, 76, 75, 75, 75, 77, 75, 75, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 76, 75, 76, 76, 74, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 76, 76, 76, 75, 76, 74, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 75, 76, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 76, 76, 76, 76, 76, 76, 80, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 76, 76, 76, 76, 79, 76, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 76, 76, 76, 76, 76, 79, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 76, 76, 76, 76, 76, 76, 76, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 76, 76, 76, 76, 81, 76, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 76, 76, 76, 76, 76, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 83, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 86, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 87, 84, 84, 84, 84, 86, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 84, 84, 84, 84, 85, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 84, 84, 84, 84, 84, 85, 87, 84, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 90, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 88, 88, 88, 88, 90, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 88, 88, 88, 88, 89, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 88, 88, 88, 88, 88, 89, 91, 88, 93, 92, 94, 92, 95, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 97, 92, 97, 97, 97, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 97, 92, 92, 92, 92, 98, 99, 92, 100, 92, 101, 102, 103, 104, 105, 98, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 106, 92, 107, 103, 108, 109, 92, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 110, 111, 103, 112, 96, 92, 96, 96, 96, 96, 96, 96, 96, 96, 113, 96, 96, 96, 96, 96, 96, 96, 96, 114, 96, 96, 115, 96, 116, 96, 96, 96, 117, 118, 92, 112, 92, 96, 92, 92, 92, 92, 92, 92, 92, 92, 92, 119, 92, 119, 119, 119, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 119, 92, 92, 92, 92, 120, 121, 92, 122, 92, 123, 124, 125, 126, 127, 120, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 128, 92, 129, 125, 130, 131, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 132, 133, 125, 94, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 134, 89, 89, 89, 89, 89, 89, 89, 89, 135, 89, 89, 136, 89, 137, 89, 89, 89, 138, 139, 92, 94, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 140, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 141, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 142, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 143, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 144, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 140, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 145, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 146, 89, 89, 89, 89, 89, 89, 89, 147, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 148, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 149, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 140, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 150, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 140, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 151, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 152, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 92, 92, 92, 92, 90, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 89, 92, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 144, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 92, 92, 92, 92, 92, 89, 154, 153, 155, 153, 156, 153, 125, 153, 157, 153, 153, 153, 153, 153, 153, 153, 158, 153, 159, 153, 160, 153, 125, 153, 161, 153, 125, 153, 162, 153, 156, 153, 164, 163, 165, 165, 165, 165, 165, 165, 165, 165, 165, 167, 165, 167, 167, 167, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 167, 165, 165, 165, 165, 165, 165, 165, 168, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 165, 169, 165, 165, 166, 165, 166, 166, 166, 170, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 165, 165, 165, 165, 165, 166, 171, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 173, 165, 173, 173, 173, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 173, 165, 165, 165, 165, 165, 165, 165, 174, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 165, 175, 165, 165, 172, 165, 172, 172, 172, 176, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 165, 165, 165, 165, 165, 172, 177, 178, 180, 179, 181, 179, 182, 179, 183, 179, 184, 179, 185, 186, 186, 186, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 186, 188, 177, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 191, 191, 189, 191, 189, 191, 191, 189, 189, 191, 191, 191, 192, 191, 191, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 191, 191, 191, 191, 191, 191, 191, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 189, 191, 189, 189, 190, 191, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 189, 189, 189, 191, 189, 190, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 189, 189, 189, 189, 189, 189, 189, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 189, 189, 189, 189, 191, 189, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 189, 189, 189, 189, 189, 191, 194, 191, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 191, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 195, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 189, 189, 189, 189, 190, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 189, 189, 189, 189, 189, 190, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 189, 189, 189, 189, 190, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 189, 189, 189, 189, 189, 190, 194, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 197, 189, 189, 189, 189, 198, 189, 189, 189, 189, 189, 199, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 188, 189, 189, 189, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 189, 189, 189, 189, 196, 200, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 189, 189, 189, 189, 189, 196, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 202, 202, 202, 202, 202, 202, 202, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 202, 202, 202, 202, 201, 202, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 202, 202, 202, 202, 202, 201, 205, 204, 189, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 206, 197, 203, 202, 189, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 206, 198, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 197, 189, 189, 189, 189, 198, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 189, 189, 189, 189, 196, 200, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 189, 189, 189, 189, 189, 196, 189, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 206, 200, 209, 208, 208, 208, 209, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 210, 210, 210, 210, 210, 210, 210, 210, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 211, 208, 208, 208, 208, 208, 208, 208, 208, 208, 212, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 213, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 214, 208, 208, 215, 208, 207, 216, 216, 216, 207, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 207, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 217, 216, 218, 219, 219, 219, 218, 219, 219, 219, 219, 219, 220, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 218, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 221, 219, 218, 219, 219, 219, 218, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 218, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 222, 219, 218, 223, 223, 223, 218, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 218, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 224, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 225, 223, 218, 226, 226, 226, 218, 226, 226, 226, 226, 226, 227, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 218, 226, 218, 226, 226, 226, 218, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 218, 226, 207, 216, 216, 216, 207, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 207, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 228, 216, 218, 229, 229, 229, 218, 229, 229, 229, 229, 229, 230, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 218, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 231, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 232, 229, 229, 229, 229, 229, 229, 233, 229, 218, 229, 229, 229, 218, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 218, 229, 234, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 235, 218, 235, 218, 207, 236, 236, 236, 207, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 207, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 237, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 238, 236, 207, 219, 219, 219, 207, 219, 219, 219, 219, 219, 220, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 207, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 222, 219, 207, 239, 239, 239, 207, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 207, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 239, 239, 239, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 239, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 242, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 243, 177, 177, 244, 177, 245, 177, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 177, 177, 177, 177, 241, 177, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 177, 177, 177, 177, 177, 241, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 242, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 243, 189, 189, 244, 189, 245, 189, 241, 241, 241, 241, 241, 241, 246, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 189, 189, 189, 189, 241, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 189, 189, 189, 189, 189, 241, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 242, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 243, 189, 189, 244, 189, 245, 189, 241, 241, 241, 241, 241, 241, 241, 241, 247, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 189, 189, 189, 189, 241, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 189, 189, 189, 189, 189, 241, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 242, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 243, 189, 189, 244, 189, 245, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 248, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 189, 189, 189, 189, 241, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 189, 189, 189, 189, 189, 241, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 242, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 243, 189, 189, 244, 189, 245, 189, 241, 241, 241, 248, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 189, 189, 189, 189, 241, 189, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 189, 189, 189, 189, 189, 241, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 251, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 252, 249, 249, 249, 249, 251, 249, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 249, 249, 249, 249, 250, 249, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 249, 249, 249, 249, 249, 250, 252, 249, 249, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 255, 257, 256, 257, 256, 256, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 256, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 256, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 256, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 260, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 260, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 254, 254, 254, 254, 254, 254, 254, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 254, 254, 254, 254, 263, 254, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 254, 254, 254, 254, 254, 263, 264, 260, 265, 266, 265, 265, 265, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 265, 260, 260, 267, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 268, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 269, 260, 270, 271, 270, 270, 270, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 270, 260, 260, 272, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 273, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 274, 260, 276, 277, 276, 276, 276, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 276, 275, 275, 278, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 279, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 280, 275, 282, 283, 282, 282, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 284, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 285, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 286, 281, 282, 283, 282, 282, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 284, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 287, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 286, 281, 282, 288, 282, 282, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 284, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 285, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 286, 281, 289, 260, 266, 260, 291, 290, 291, 291, 291, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 292, 290, 290, 293, 293, 293, 290, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 290, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 290, 293, 295, 294, 294, 294, 295, 294, 294, 294, 294, 296, 297, 296, 296, 296, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 295, 294, 294, 294, 294, 294, 296, 294, 294, 298, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 299, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 300, 294, 294, 301, 294, 296, 302, 296, 296, 296, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 296, 302, 303, 304, 305, 306, 307, 309, 308, 311, 312, 311, 311, 311, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 311, 310, 297, 308, 313, 308, 315, 314, 314, 314, 315, 314, 314, 314, 314, 316, 317, 316, 316, 316, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 315, 314, 314, 314, 314, 314, 316, 314, 314, 318, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 319, 314, 316, 320, 316, 316, 316, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 316, 320, 322, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 323, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 324, 321, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 325, 325, 325, 325, 325, 325, 325, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 325, 325, 325, 325, 13, 325, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 325, 325, 325, 325, 325, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 325, 328, 327, 327, 327, 328, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 328, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 329, 329, 329, 329, 329, 329, 329, 329, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 330, 327, 327, 327, 327, 327, 327, 327, 327, 327, 331, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 332, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 333, 327, 327, 334, 327, 335, 336, 338, 338, 338, 338, 338, 338, 338, 338, 337, 339, 339, 339, 339, 339, 339, 339, 339, 337, 337, 340, 340, 38, 38, 38, 340, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 340, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 341, 38, 342, 343, 344, 344, 38, 38, 38, 344, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 344, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 345, 38, 37, 344, 346, 347, 348, 348, 25, 25, 25, 348, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 348, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 349, 25, 344, 19, 19, 19, 344, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 344, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 350, 19, 340, 25, 25, 25, 340, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 340, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 25, 340, 351, 351, 351, 340, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 340, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 352, 351, 353, 354, 354, 351, 351, 351, 354, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 354, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 355, 351, 354, 19, 19, 19, 354, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 354, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 350, 19, 356, 354, 354, 25, 25, 25, 354, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 354, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 25, 357, 358, 358, 358, 357, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 357, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 358, 358, 358, 358, 358, 358, 358, 359, 359, 359, 359, 359, 359, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 359, 359, 359, 359, 359, 359, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 360, 358, 357, 361, 361, 361, 357, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 357, 361, 357, 362, 362, 362, 357, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 357, 362, 357, 363, 363, 363, 357, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 357, 363, 357, 357, 361, 361, 361, 357, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 357, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 361, 361, 361, 361, 361, 361, 361, 364, 364, 364, 364, 364, 364, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 364, 364, 364, 364, 364, 364, 361, 357, 362, 362, 362, 357, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 357, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 362, 362, 362, 362, 362, 362, 362, 365, 365, 365, 365, 365, 365, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 365, 365, 365, 365, 365, 365, 362, 357, 363, 363, 363, 357, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 357, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 363, 363, 363, 363, 363, 363, 363, 366, 366, 366, 366, 366, 366, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 366, 366, 366, 366, 366, 366, 363, 367, 370, 369, 369, 369, 370, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 370, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 369, 369, 369, 369, 369, 369, 369, 371, 371, 371, 371, 371, 371, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 371, 371, 371, 371, 371, 371, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 361, 369, 370, 372, 372, 372, 370, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 370, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 372, 372, 372, 372, 372, 372, 372, 373, 373, 373, 373, 373, 373, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 373, 373, 373, 373, 373, 373, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 374, 372, 370, 375, 375, 375, 370, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 370, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 375, 375, 375, 375, 375, 375, 375, 376, 376, 376, 376, 376, 376, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 376, 376, 376, 376, 376, 376, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 377, 375, 370, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 378, 378, 378, 378, 378, 378, 378, 379, 379, 379, 379, 379, 379, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 379, 379, 379, 379, 379, 379, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 378, 378, 378, 378, 378, 378, 378, 379, 379, 379, 379, 379, 379, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 379, 379, 379, 379, 379, 379, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 380, 370, 379, 379, 379, 370, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 370, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 380, 379, 370, 379, 379, 379, 370, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 370, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 368, 379, 368, 370, 376, 376, 376, 370, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 370, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 363, 376, 368, 363, 363, 363, 368, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 368, 363, 370, 372, 372, 372, 370, 372, 372, 372, 372, 381, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 370, 372, 372, 372, 372, 372, 381, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 372, 372, 372, 372, 372, 372, 372, 382, 382, 382, 382, 382, 382, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 382, 382, 382, 382, 382, 382, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 372, 383, 372, 370, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 378, 378, 378, 378, 378, 378, 378, 384, 384, 384, 384, 384, 384, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 384, 384, 384, 384, 384, 384, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 378, 378, 378, 378, 378, 378, 378, 386, 386, 386, 386, 386, 386, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 386, 386, 386, 386, 386, 386, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 387, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 378, 378, 378, 378, 378, 378, 378, 384, 384, 384, 384, 384, 384, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 384, 384, 384, 384, 384, 384, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 378, 378, 378, 378, 378, 378, 378, 388, 388, 388, 388, 388, 388, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 388, 388, 388, 388, 388, 388, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 387, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 378, 378, 378, 378, 378, 378, 378, 389, 389, 389, 389, 389, 389, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 389, 389, 389, 389, 389, 389, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 387, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 378, 378, 378, 378, 378, 378, 378, 390, 390, 390, 390, 390, 390, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 390, 390, 390, 390, 390, 390, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 387, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 378, 378, 378, 378, 378, 378, 378, 391, 391, 391, 391, 391, 391, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 391, 391, 391, 391, 391, 391, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 387, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 385, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 378, 378, 378, 378, 378, 378, 378, 392, 392, 392, 392, 392, 392, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 392, 392, 392, 392, 392, 392, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 387, 378, 370, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 370, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 378, 378, 378, 378, 378, 378, 378, 392, 392, 392, 392, 392, 392, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 392, 392, 392, 392, 392, 392, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 380, 378, 393, 370, 375, 375, 375, 370, 375, 375, 375, 375, 385, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 370, 375, 375, 375, 375, 375, 385, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 375, 375, 375, 375, 375, 375, 375, 388, 388, 388, 388, 388, 388, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 388, 388, 388, 388, 388, 388, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 387, 375, 394, 395, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 396, 396, 396, 396, 396, 396, 396, 397, 397, 397, 397, 397, 397, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 397, 397, 397, 397, 397, 397, 396, 396, 399, 398, 398, 398, 399, 398, 398, 398, 398, 398, 400, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 399, 398, 398, 398, 398, 398, 398, 398, 398, 401, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 402, 398, 404, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 405, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 406, 403, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 407, 407, 407, 407, 407, 407, 407, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 407, 407, 407, 407, 44, 407, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 407, 407, 407, 407, 407, 44, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 407, 410, 409, 409, 409, 410, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 410, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 411, 411, 411, 411, 411, 411, 411, 411, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 412, 409, 409, 409, 409, 409, 409, 409, 409, 409, 413, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 414, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 415, 409, 409, 416, 409, 417, 418, 420, 420, 420, 420, 420, 420, 420, 420, 419, 421, 421, 421, 421, 421, 421, 421, 421, 419, 419, 422, 422, 69, 69, 69, 422, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 422, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 423, 69, 424, 425, 426, 426, 69, 69, 69, 426, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 426, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 427, 69, 68, 426, 428, 429, 430, 430, 56, 56, 56, 430, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 430, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 431, 56, 426, 50, 50, 50, 426, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 426, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 432, 50, 422, 56, 56, 56, 422, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 422, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 58, 56, 422, 433, 433, 433, 422, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 422, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 434, 433, 435, 436, 436, 433, 433, 433, 436, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 436, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 437, 433, 436, 50, 50, 50, 436, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 436, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 432, 50, 438, 436, 436, 56, 56, 56, 436, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 436, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 58, 56, 439, 440, 440, 440, 439, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 439, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 441, 441, 441, 441, 441, 441, 441, 441, 441, 441, 440, 440, 440, 440, 440, 440, 440, 441, 441, 441, 441, 441, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 441, 441, 441, 441, 441, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 442, 440, 439, 443, 443, 443, 439, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 439, 443, 439, 444, 444, 444, 439, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 439, 444, 439, 445, 445, 445, 439, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 439, 445, 439, 439, 443, 443, 443, 439, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 439, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 443, 443, 443, 443, 443, 443, 443, 446, 446, 446, 446, 446, 446, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 446, 446, 446, 446, 446, 446, 443, 439, 444, 444, 444, 439, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 439, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 444, 444, 444, 444, 444, 444, 444, 447, 447, 447, 447, 447, 447, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 447, 447, 447, 447, 447, 447, 444, 439, 445, 445, 445, 439, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 439, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 445, 445, 445, 445, 445, 445, 445, 448, 448, 448, 448, 448, 448, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 448, 448, 448, 448, 448, 448, 445, 449, 452, 451, 451, 451, 452, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 452, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 451, 451, 451, 451, 451, 451, 451, 453, 453, 453, 453, 453, 453, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 453, 453, 453, 453, 453, 453, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 443, 451, 452, 454, 454, 454, 452, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 452, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 454, 454, 454, 454, 454, 454, 454, 455, 455, 455, 455, 455, 455, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 455, 455, 455, 455, 455, 455, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 456, 454, 452, 457, 457, 457, 452, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 452, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 457, 457, 457, 457, 457, 457, 457, 458, 458, 458, 458, 458, 458, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 458, 458, 458, 458, 458, 458, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 459, 457, 452, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 460, 460, 460, 460, 460, 460, 460, 461, 461, 461, 461, 461, 461, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 461, 461, 461, 461, 461, 461, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 460, 460, 460, 460, 460, 460, 460, 461, 461, 461, 461, 461, 461, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 461, 461, 461, 461, 461, 461, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 462, 452, 461, 461, 461, 452, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 452, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 462, 461, 452, 461, 461, 461, 452, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 452, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 450, 461, 450, 452, 458, 458, 458, 452, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 452, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 445, 458, 450, 445, 445, 445, 450, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 450, 445, 452, 454, 454, 454, 452, 454, 454, 454, 454, 463, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 452, 454, 454, 454, 454, 454, 463, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 454, 454, 454, 454, 454, 454, 454, 464, 464, 464, 464, 464, 464, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 464, 464, 464, 464, 464, 464, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 465, 454, 452, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 460, 460, 460, 460, 460, 460, 460, 466, 466, 466, 466, 466, 466, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 466, 466, 466, 466, 466, 466, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 460, 460, 460, 460, 460, 460, 460, 468, 468, 468, 468, 468, 468, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 468, 468, 468, 468, 468, 468, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 469, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 460, 460, 460, 460, 460, 460, 460, 466, 466, 466, 466, 466, 466, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 466, 466, 466, 466, 466, 466, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 460, 460, 460, 460, 460, 460, 460, 470, 470, 470, 470, 470, 470, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 470, 470, 470, 470, 470, 470, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 469, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 460, 460, 460, 460, 460, 460, 460, 471, 471, 471, 471, 471, 471, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 471, 471, 471, 471, 471, 471, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 469, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 460, 460, 460, 460, 460, 460, 460, 472, 472, 472, 472, 472, 472, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 472, 472, 472, 472, 472, 472, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 469, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 460, 460, 460, 460, 460, 460, 460, 473, 473, 473, 473, 473, 473, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 473, 473, 473, 473, 473, 473, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 469, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 467, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 460, 460, 460, 460, 460, 460, 460, 474, 474, 474, 474, 474, 474, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 474, 474, 474, 474, 474, 474, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 469, 460, 452, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 452, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 460, 460, 460, 460, 460, 460, 460, 474, 474, 474, 474, 474, 474, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 474, 474, 474, 474, 474, 474, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 462, 460, 475, 452, 457, 457, 457, 452, 457, 457, 457, 457, 467, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 452, 457, 457, 457, 457, 457, 467, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 457, 457, 457, 457, 457, 457, 457, 470, 470, 470, 470, 470, 470, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 470, 470, 470, 470, 470, 470, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 469, 457, 476, 477, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 478, 478, 478, 478, 478, 478, 478, 479, 479, 479, 479, 479, 479, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 479, 479, 479, 479, 479, 479, 478, 478, 481, 480, 480, 480, 481, 480, 480, 480, 480, 482, 483, 482, 482, 482, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 481, 480, 480, 480, 480, 480, 482, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 484, 480, 482, 485, 482, 482, 482, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 482, 485, 486, 487, 487, 487, 486, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 486, 487, 489, 488, 488, 488, 489, 488, 488, 488, 488, 488, 490, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 489, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 491, 488, 492, 493, 493, 493, 492, 493, 493, 493, 493, 493, 494, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 492, 493, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 495, 495, 495, 495, 495, 495, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 495, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 497, 497, 497, 497, 497, 497, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 497, 498, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 499, 76, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 500, 500, 500, 500, 500, 500, 500, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 500, 500, 500, 500, 74, 500, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 500, 500, 500, 500, 500, 74, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 500, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 501, 501, 501, 501, 501, 501, 501, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 501, 501, 501, 501, 79, 501, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 501, 501, 501, 501, 501, 79, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 502, 502, 502, 502, 502, 502, 502, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 502, 502, 502, 502, 81, 502, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 502, 502, 502, 502, 502, 81, 504, 505, 505, 505, 504, 505, 505, 505, 505, 506, 507, 506, 506, 506, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 504, 505, 505, 505, 505, 505, 506, 508, 505, 509, 510, 511, 512, 505, 505, 505, 513, 514, 505, 514, 505, 511, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 515, 505, 516, 517, 518, 505, 505, 519, 520, 519, 519, 521, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 522, 523, 505, 511, 524, 511, 525, 526, 527, 528, 529, 530, 503, 503, 531, 503, 503, 503, 532, 533, 534, 503, 503, 535, 536, 537, 538, 503, 539, 503, 540, 503, 505, 541, 505, 514, 505, 503, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 543, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 542, 542, 542, 543, 542, 543, 542, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 542, 542, 542, 542, 503, 542, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 542, 542, 542, 542, 542, 503, 506, 544, 506, 506, 506, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 506, 544, 545, 511, 546, 546, 511, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 511, 546, 547, 548, 549, 550, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 83, 83, 551, 83, 551, 83, 83, 551, 551, 83, 83, 83, 553, 83, 83, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 83, 83, 83, 83, 83, 83, 83, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 551, 83, 551, 551, 552, 83, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 551, 551, 551, 83, 551, 552, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 555, 555, 555, 555, 555, 555, 555, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 555, 555, 555, 555, 552, 555, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 555, 555, 555, 555, 555, 552, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 555, 511, 546, 511, 546, 511, 546, 557, 556, 511, 558, 546, 511, 546, 559, 511, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 511, 551, 511, 546, 511, 511, 546, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 543, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 542, 542, 542, 543, 542, 543, 542, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 542, 542, 542, 542, 519, 542, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 542, 542, 542, 542, 542, 519, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 543, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 543, 560, 543, 560, 519, 519, 519, 519, 561, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 519, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 560, 519, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 543, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 543, 560, 543, 560, 519, 519, 519, 519, 519, 519, 562, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 519, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 560, 519, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 543, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 543, 560, 543, 560, 519, 519, 519, 519, 519, 519, 519, 519, 563, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 519, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 560, 519, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 543, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 543, 560, 543, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 564, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 519, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 560, 519, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 543, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 543, 560, 543, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 565, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 519, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 560, 519, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 543, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 543, 560, 543, 560, 519, 519, 519, 564, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 519, 560, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 560, 560, 560, 560, 560, 519, 559, 551, 507, 551, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 567, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 568, 569, 503, 503, 503, 503, 503, 570, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 571, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 572, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 573, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 574, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 575, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 576, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 577, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 578, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 579, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 580, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 581, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 577, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 582, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 581, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 583, 503, 584, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 585, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 586, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 587, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 588, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 589, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 590, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 591, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 592, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 593, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 594, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 595, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 596, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 586, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 597, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 598, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 543, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 599, 599, 599, 543, 599, 543, 599, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 599, 599, 599, 599, 503, 599, 503, 503, 503, 503, 503, 503, 503, 503, 600, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 599, 599, 599, 599, 599, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 601, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 602, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 603, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 604, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 605, 503, 606, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 607, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 579, 503, 503, 503, 608, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 609, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 610, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 595, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 611, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 534, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 593, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 612, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 613, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 614, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 595, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 615, 503, 503, 503, 616, 503, 503, 503, 503, 503, 617, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 617, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 618, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 619, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 620, 621, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 622, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 595, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 623, 503, 503, 624, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 579, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 590, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 625, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 626, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 608, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 627, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 534, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 628, 503, 503, 503, 503, 503, 503, 503, 503, 503, 622, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 590, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 629, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 630, 503, 503, 503, 503, 503, 503, 503, 631, 503, 503, 503, 503, 503, 503, 503, 632, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 608, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 596, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 616, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 633, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 590, 503, 503, 503, 614, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 634, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 635, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 543, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 543, 566, 543, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 503, 566, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 584, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 566, 566, 566, 566, 566, 503, 511, 546, 637, 638, 638, 638, 637, 638, 638, 638, 638, 639, 638, 639, 639, 639, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 637, 638, 638, 638, 638, 638, 639, 638, 638, 640, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 638, 641, 638, 638, 636, 638, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 638, 638, 638, 638, 638, 636, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 86, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 87, 642, 642, 642, 642, 86, 642, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 642, 642, 642, 642, 85, 642, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 642, 642, 642, 642, 642, 85, 639, 643, 639, 639, 639, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 643, 639, 643, 644, 645, 646, 647, 648, 642, 649, 651, 652, 652, 652, 651, 652, 652, 652, 652, 653, 654, 653, 653, 653, 652, 652, 652, 652, 652, 652, 652, 652, 652, 652, 652, 652, 651, 652, 652, 652, 652, 652, 653, 655, 652, 656, 652, 657, 658, 652, 652, 652, 659, 660, 652, 660, 652, 657, 652, 652, 652, 652, 652, 652, 652, 652, 652, 652, 652, 652, 661, 662, 663, 652, 652, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 665, 666, 652, 657, 650, 657, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 652, 667, 652, 660, 652, 650, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 669, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 668, 668, 668, 668, 668, 670, 668, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 668, 668, 668, 668, 650, 668, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 668, 668, 668, 668, 668, 650, 672, 671, 673, 671, 653, 674, 653, 653, 653, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 653, 674, 675, 657, 676, 676, 657, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 657, 676, 677, 678, 679, 680, 657, 676, 657, 676, 657, 676, 657, 681, 676, 657, 676, 683, 657, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 657, 682, 657, 676, 657, 657, 676, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 669, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 684, 684, 684, 684, 684, 670, 684, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 684, 684, 684, 684, 664, 684, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 684, 684, 684, 684, 684, 664, 683, 682, 654, 682, 657, 676, 686, 685, 685, 685, 686, 685, 685, 685, 685, 687, 688, 687, 687, 687, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 686, 685, 685, 685, 685, 685, 687, 685, 685, 689, 685, 94, 690, 685, 691, 685, 692, 94, 125, 693, 127, 94, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 694, 685, 695, 125, 696, 697, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 125, 698, 125, 94, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 699, 685, 685, 685, 685, 685, 685, 685, 685, 700, 685, 685, 701, 685, 702, 685, 685, 685, 138, 139, 685, 94, 685, 703, 703, 703, 703, 703, 703, 703, 703, 703, 687, 703, 687, 687, 687, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 687, 703, 703, 703, 703, 120, 121, 703, 122, 703, 123, 124, 125, 126, 127, 120, 703, 703, 703, 703, 703, 703, 703, 703, 703, 703, 128, 703, 129, 125, 130, 131, 703, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 132, 133, 125, 94, 89, 703, 89, 89, 89, 89, 89, 89, 89, 89, 134, 89, 89, 89, 89, 89, 89, 89, 89, 135, 89, 89, 136, 89, 137, 89, 89, 89, 138, 139, 703, 94, 703, 89, 704, 705, 705, 705, 704, 705, 705, 705, 705, 125, 706, 125, 125, 125, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 704, 705, 705, 705, 705, 705, 125, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 125, 705, 125, 706, 125, 125, 125, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 125, 88, 88, 88, 88, 88, 94, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 125, 88, 125, 706, 125, 125, 125, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 125, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 125, 88, 707, 125, 706, 125, 125, 125, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 125, 708, 708, 708, 708, 708, 708, 708, 708, 708, 709, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 125, 708, 125, 706, 125, 125, 125, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 125, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 125, 125, 88, 710, 704, 125, 704, 712, 711, 714, 715, 714, 714, 714, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 713, 714, 713, 716, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 90, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 704, 704, 704, 704, 90, 704, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 704, 704, 704, 704, 89, 704, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 704, 704, 704, 704, 704, 89, 717, 125, 706, 125, 125, 125, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 125, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 125, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 94, 704, 718, 719, 720, 721, 722, 723, 125, 706, 125, 125, 125, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 125, 704, 704, 704, 704, 704, 704, 704, 704, 704, 94, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 125, 704, 125, 711, 94, 724, 94, 724, 725, 724, 726, 726, 726, 726, 726, 726, 726, 726, 726, 97, 726, 97, 97, 97, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 97, 726, 726, 726, 726, 98, 99, 726, 100, 726, 101, 102, 103, 104, 105, 98, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 106, 726, 107, 103, 108, 109, 726, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 110, 111, 103, 112, 96, 726, 96, 96, 96, 96, 96, 96, 96, 96, 113, 96, 96, 96, 96, 96, 96, 96, 96, 114, 96, 96, 115, 96, 116, 96, 96, 96, 117, 118, 726, 112, 726, 96, 125, 724, 727, 724, 728, 724, 729, 724, 730, 164, 164, 164, 730, 164, 164, 164, 164, 731, 164, 731, 731, 731, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 730, 164, 164, 164, 164, 164, 731, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 164, 732, 164, 164, 166, 164, 166, 166, 166, 170, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 164, 164, 164, 164, 164, 166, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 733, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 164, 163, 163, 163, 163, 733, 163, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 163, 163, 163, 163, 166, 163, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 163, 163, 163, 163, 163, 166, 734, 734, 734, 734, 734, 734, 734, 734, 734, 167, 734, 167, 167, 167, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 167, 734, 734, 734, 734, 734, 734, 734, 168, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 734, 169, 734, 734, 166, 734, 166, 166, 166, 170, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 734, 734, 734, 734, 734, 166, 735, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 733, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 164, 734, 734, 734, 734, 733, 734, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 734, 734, 734, 734, 166, 734, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 736, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 734, 734, 734, 734, 734, 166, 171, 734, 738, 737, 737, 737, 738, 737, 737, 737, 737, 739, 737, 739, 739, 739, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 738, 737, 737, 737, 737, 737, 739, 737, 737, 740, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 741, 737, 737, 737, 737, 737, 737, 737, 742, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 743, 737, 739, 744, 739, 739, 739, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 739, 744, 745, 746, 747, 748, 750, 749, 751, 752, 749, 753, 755, 756, 756, 756, 755, 756, 756, 756, 756, 757, 758, 757, 757, 757, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 755, 756, 756, 756, 756, 756, 757, 756, 756, 759, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 756, 760, 756, 756, 754, 756, 754, 754, 754, 754, 754, 754, 754, 754, 761, 754, 754, 754, 754, 754, 754, 754, 754, 762, 754, 754, 763, 754, 764, 754, 754, 754, 756, 756, 756, 756, 756, 754, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 765, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 765, 765, 765, 765, 765, 765, 765, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 765, 765, 765, 765, 754, 765, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 765, 765, 765, 765, 765, 754, 757, 766, 757, 757, 757, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 757, 766, 767, 768, 769, 770, 771, 773, 772, 774, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 776, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 777, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 778, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 779, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 780, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 776, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 781, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 782, 754, 754, 754, 754, 754, 754, 754, 783, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 784, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 785, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 776, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 786, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 776, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 787, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 788, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 775, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 754, 775, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 780, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 775, 775, 775, 775, 775, 754, 790, 188, 188, 188, 790, 188, 188, 188, 188, 791, 792, 791, 791, 791, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 790, 188, 188, 188, 188, 188, 791, 793, 188, 794, 188, 795, 796, 188, 797, 188, 798, 799, 188, 800, 801, 802, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 803, 188, 804, 805, 806, 807, 188, 808, 809, 808, 808, 810, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 811, 812, 188, 813, 814, 188, 815, 816, 817, 818, 819, 820, 789, 789, 821, 789, 789, 789, 822, 823, 824, 789, 789, 825, 826, 827, 828, 789, 829, 789, 830, 789, 831, 832, 188, 813, 188, 789, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 242, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 177, 177, 244, 177, 245, 177, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 177, 177, 177, 177, 789, 177, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 177, 177, 177, 177, 177, 789, 834, 833, 833, 835, 833, 836, 838, 839, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 840, 837, 842, 841, 843, 844, 845, 834, 833, 791, 846, 791, 791, 791, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 791, 846, 848, 847, 850, 851, 850, 850, 850, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 849, 850, 849, 188, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 188, 852, 853, 854, 855, 856, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 858, 858, 858, 858, 858, 858, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 859, 858, 860, 186, 186, 186, 860, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 860, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 186, 862, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 188, 861, 863, 865, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 188, 864, 188, 177, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 861, 861, 861, 188, 861, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 861, 861, 861, 188, 188, 861, 867, 852, 188, 852, 852, 868, 868, 868, 852, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 852, 868, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 870, 871, 852, 872, 191, 873, 871, 852, 852, 874, 875, 852, 875, 852, 191, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 876, 852, 877, 878, 879, 852, 880, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 881, 852, 852, 191, 869, 191, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 852, 882, 852, 875, 852, 869, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 884, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 883, 883, 883, 885, 883, 886, 883, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 883, 883, 883, 883, 869, 883, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 883, 883, 883, 883, 883, 869, 888, 887, 889, 891, 892, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 893, 890, 895, 896, 894, 897, 898, 899, 900, 887, 191, 883, 883, 191, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 191, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 883, 883, 883, 883, 883, 883, 883, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 883, 883, 883, 883, 190, 883, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 883, 883, 883, 883, 883, 190, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 883, 191, 883, 191, 883, 191, 883, 191, 901, 883, 191, 883, 191, 883, 191, 191, 883, 191, 883, 902, 903, 852, 904, 188, 852, 813, 188, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 188, 852, 188, 862, 852, 907, 906, 906, 906, 907, 906, 906, 906, 906, 908, 909, 908, 908, 908, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 907, 906, 906, 906, 906, 906, 908, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 906, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 906, 911, 906, 906, 910, 906, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 906, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 912, 912, 912, 912, 913, 912, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 912, 912, 912, 912, 912, 913, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 914, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 914, 914, 914, 914, 914, 914, 914, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 914, 914, 914, 914, 913, 914, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 914, 914, 914, 914, 914, 913, 915, 916, 918, 918, 918, 918, 918, 918, 918, 918, 917, 919, 919, 919, 919, 919, 919, 919, 919, 917, 917, 920, 920, 236, 236, 236, 920, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 920, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 237, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 921, 236, 922, 923, 924, 924, 236, 236, 236, 924, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 924, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 237, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 925, 236, 235, 924, 926, 927, 928, 928, 223, 223, 223, 928, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 928, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 224, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 929, 223, 924, 216, 216, 216, 924, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 924, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 930, 216, 920, 223, 223, 223, 920, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 920, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 224, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 225, 223, 920, 931, 931, 931, 920, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 920, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 932, 931, 933, 934, 934, 931, 931, 931, 934, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 934, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 935, 931, 934, 216, 216, 216, 934, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 934, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 930, 216, 936, 934, 934, 223, 223, 223, 934, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 934, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 224, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 225, 223, 937, 938, 938, 938, 937, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 937, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 939, 939, 939, 939, 939, 939, 939, 939, 939, 939, 938, 938, 938, 938, 938, 938, 938, 939, 939, 939, 939, 939, 939, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 939, 939, 939, 939, 939, 939, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 938, 940, 938, 937, 941, 941, 941, 937, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 937, 941, 937, 942, 942, 942, 937, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 937, 942, 937, 943, 943, 943, 937, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 937, 943, 937, 937, 941, 941, 941, 937, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 937, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 944, 944, 944, 944, 944, 944, 944, 944, 944, 944, 941, 941, 941, 941, 941, 941, 941, 944, 944, 944, 944, 944, 944, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 944, 944, 944, 944, 944, 944, 941, 937, 942, 942, 942, 937, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 937, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 942, 942, 942, 942, 942, 942, 942, 945, 945, 945, 945, 945, 945, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 945, 945, 945, 945, 945, 945, 942, 937, 943, 943, 943, 937, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 937, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 943, 943, 943, 943, 943, 943, 943, 946, 946, 946, 946, 946, 946, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 946, 946, 946, 946, 946, 946, 943, 947, 950, 949, 949, 949, 950, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 950, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 951, 951, 951, 951, 951, 951, 951, 951, 951, 951, 949, 949, 949, 949, 949, 949, 949, 951, 951, 951, 951, 951, 951, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 951, 951, 951, 951, 951, 951, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 949, 941, 949, 950, 952, 952, 952, 950, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 950, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 952, 952, 952, 952, 952, 952, 952, 953, 953, 953, 953, 953, 953, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 953, 953, 953, 953, 953, 953, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 954, 952, 950, 955, 955, 955, 950, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 950, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 955, 955, 955, 955, 955, 955, 955, 956, 956, 956, 956, 956, 956, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 956, 956, 956, 956, 956, 956, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 957, 955, 950, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 958, 958, 958, 958, 958, 958, 958, 959, 959, 959, 959, 959, 959, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 959, 959, 959, 959, 959, 959, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 958, 958, 958, 958, 958, 958, 958, 959, 959, 959, 959, 959, 959, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 959, 959, 959, 959, 959, 959, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 960, 950, 959, 959, 959, 950, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 950, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 960, 959, 950, 959, 959, 959, 950, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 950, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 948, 959, 948, 950, 956, 956, 956, 950, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 950, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 943, 956, 948, 943, 943, 943, 948, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 948, 943, 950, 952, 952, 952, 950, 952, 952, 952, 952, 961, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 950, 952, 952, 952, 952, 952, 961, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 952, 952, 952, 952, 952, 952, 952, 962, 962, 962, 962, 962, 962, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 962, 962, 962, 962, 962, 962, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 963, 952, 950, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 958, 958, 958, 958, 958, 958, 958, 964, 964, 964, 964, 964, 964, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 964, 964, 964, 964, 964, 964, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 958, 958, 958, 958, 958, 958, 958, 966, 966, 966, 966, 966, 966, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 966, 966, 966, 966, 966, 966, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 967, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 958, 958, 958, 958, 958, 958, 958, 964, 964, 964, 964, 964, 964, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 964, 964, 964, 964, 964, 964, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 958, 958, 958, 958, 958, 958, 958, 968, 968, 968, 968, 968, 968, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 968, 968, 968, 968, 968, 968, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 967, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 958, 958, 958, 958, 958, 958, 958, 969, 969, 969, 969, 969, 969, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 969, 969, 969, 969, 969, 969, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 967, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 958, 958, 958, 958, 958, 958, 958, 970, 970, 970, 970, 970, 970, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 970, 970, 970, 970, 970, 970, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 967, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 958, 958, 958, 958, 958, 958, 958, 971, 971, 971, 971, 971, 971, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 971, 971, 971, 971, 971, 971, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 967, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 965, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 958, 958, 958, 958, 958, 958, 958, 972, 972, 972, 972, 972, 972, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 972, 972, 972, 972, 972, 972, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 967, 958, 950, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 950, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 958, 958, 958, 958, 958, 958, 958, 972, 972, 972, 972, 972, 972, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 972, 972, 972, 972, 972, 972, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 960, 958, 973, 950, 955, 955, 955, 950, 955, 955, 955, 955, 965, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 950, 955, 955, 955, 955, 955, 965, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 955, 955, 955, 955, 955, 955, 955, 968, 968, 968, 968, 968, 968, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 968, 968, 968, 968, 968, 968, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 955, 967, 955, 974, 975, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 976, 976, 976, 976, 976, 976, 976, 977, 977, 977, 977, 977, 977, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 977, 977, 977, 977, 977, 977, 976, 976, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 242, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 243, 177, 177, 244, 177, 245, 177, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 177, 177, 177, 177, 241, 177, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 177, 177, 177, 177, 177, 241, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 242, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 243, 852, 852, 244, 852, 245, 852, 241, 241, 241, 241, 978, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 852, 852, 852, 852, 241, 852, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 852, 852, 852, 852, 852, 241, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 242, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 243, 852, 852, 244, 852, 245, 852, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 979, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 852, 852, 852, 852, 241, 852, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 852, 852, 852, 852, 852, 241, 980, 981, 852, 847, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 983, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 984, 985, 789, 789, 789, 789, 789, 986, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 987, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 988, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 989, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 990, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 991, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 992, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 993, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 994, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 995, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 996, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 997, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 993, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 998, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 997, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 999, 789, 1000, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 1001, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 1002, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1003, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1004, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 1005, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 1006, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1007, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 1008, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 1009, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1010, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1011, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 1012, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1002, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1013, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1014, 789, 1015, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1016, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 995, 789, 789, 789, 1013, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1017, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1018, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1011, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 1019, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 824, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1009, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 1020, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1021, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 1022, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1023, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1011, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1024, 789, 789, 789, 1025, 789, 789, 789, 789, 789, 1026, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1026, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1027, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 1028, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1029, 1030, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 1031, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1032, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1033, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1036, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1037, 1034, 1034, 1038, 1034, 1039, 1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1034, 1034, 1034, 1034, 1035, 1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1034, 1034, 1034, 1034, 1034, 1035, 838, 1040, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 837, 840, 837, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1041, 789, 789, 1042, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 995, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1006, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1043, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1044, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1013, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1045, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 824, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 1046, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1047, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1006, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1011, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1048, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 1049, 789, 789, 789, 789, 789, 789, 789, 1050, 789, 789, 789, 789, 789, 789, 789, 1051, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1013, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1052, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1053, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1020, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 1054, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1020, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 1055, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1006, 789, 789, 789, 1056, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1057, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1020, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 1058, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 1059, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 242, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 243, 982, 982, 244, 982, 245, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 789, 982, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 1000, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 982, 982, 982, 982, 982, 789, 1060, 188, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 862, 852, 1062, 1063, 1063, 1063, 1062, 1063, 1063, 1063, 1063, 1064, 1065, 1064, 1064, 1064, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1062, 1063, 1063, 1063, 1063, 1063, 1064, 1063, 1063, 1066, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1063, 1067, 1063, 1063, 1061, 1063, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1063, 1063, 1063, 1063, 1063, 1061, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 251, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 252, 1068, 1068, 1068, 1068, 251, 1068, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 1068, 1068, 1068, 1068, 250, 1068, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 1068, 1068, 1068, 1068, 1068, 250, 1064, 1069, 1064, 1064, 1064, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1064, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1068, 1076, 1078, 1079, 1079, 1079, 1078, 1079, 1079, 1079, 1079, 1080, 1081, 1080, 1080, 1080, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1078, 1079, 1079, 1079, 1079, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1083, 1088, 1089, 1090, 1086, 1091, 1092, 1093, 1086, 1094, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1103, 1103, 1105, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1106, 1107, 1108, 1086, 1109, 1083, 1110, 1111, 1112, 1113, 1114, 1115, 1077, 1077, 1116, 1077, 1077, 1077, 1117, 1118, 1119, 1077, 1077, 1120, 1121, 1122, 1123, 1077, 1124, 1077, 1125, 1077, 1126, 1127, 1128, 1086, 1079, 1077, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 1129, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 260, 260, 260, 260, 260, 1130, 260, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 260, 260, 260, 260, 1077, 260, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 260, 260, 260, 260, 260, 1077, 1132, 1131, 1133, 1134, 1080, 1135, 1080, 1080, 1080, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1080, 1135, 1136, 1138, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1138, 1137, 1139, 1140, 1141, 1142, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 255, 255, 1143, 255, 1143, 255, 255, 1143, 1143, 255, 255, 255, 1144, 255, 255, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 255, 255, 255, 255, 255, 255, 255, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 1143, 255, 1143, 1143, 263, 255, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 1143, 1143, 1143, 255, 1143, 263, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 1146, 1146, 1146, 1146, 263, 1146, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 1146, 1146, 1146, 1146, 1146, 263, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1146, 1147, 1137, 1086, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1147, 1137, 1148, 1149, 1086, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1147, 1137, 1147, 1150, 1137, 1152, 1151, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 1151, 1091, 1153, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1156, 1154, 1154, 1154, 1154, 1154, 1155, 1154, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 257, 1154, 1158, 1157, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1160, 1157, 1161, 1162, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1163, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1164, 1157, 1157, 1157, 1157, 1157, 1157, 1165, 1157, 1157, 1160, 1157, 1161, 1162, 1157, 1157, 1157, 1166, 1157, 1157, 1157, 1157, 1157, 1163, 1157, 1157, 1167, 1157, 1157, 1157, 1157, 1157, 1164, 1157, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1170, 1168, 1168, 1168, 1168, 1168, 1169, 1168, 1168, 1168, 1171, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1172, 1168, 1173, 260, 1173, 260, 260, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 260, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1173, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1174, 1176, 1178, 1177, 1179, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1165, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1166, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1167, 1157, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1181, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1166, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1167, 1157, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1184, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1187, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1188, 1190, 1189, 1191, 1193, 1193, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1194, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1195, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1196, 1192, 1197, 1197, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1198, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1197, 1197, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1187, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1201, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1202, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1203, 1199, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1206, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1207, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1208, 1204, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210, 1210, 1210, 1210, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1211, 1209, 1210, 1210, 1210, 1210, 1210, 1210, 1209, 1209, 1212, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1213, 1209, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1214, 1214, 1214, 1214, 1214, 1214, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1215, 1182, 1214, 1214, 1214, 1214, 1214, 1214, 1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1214, 1214, 1214, 1214, 1214, 1214, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1187, 1182, 1214, 1214, 1214, 1214, 1214, 1214, 1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1217, 1216, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1219, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1220, 1216, 1216, 1216, 1216, 1216, 1219, 1216, 1216, 1216, 1221, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1222, 1216, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1224, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1221, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1222, 1216, 1225, 1182, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1227, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1228, 1182, 1182, 1182, 1182, 1182, 1227, 1182, 1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1187, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1185, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1182, 1229, 1153, 1086, 1230, 1137, 1138, 1137, 1231, 1138, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1138, 1153, 1138, 1137, 1138, 1086, 1137, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 1143, 1143, 1143, 1143, 1143, 1143, 1232, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 1143, 1143, 1143, 1143, 263, 1143, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 1143, 1143, 1143, 1143, 1143, 263, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 1129, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1233, 260, 260, 260, 260, 1130, 260, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 260, 260, 260, 260, 1103, 260, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 260, 260, 260, 260, 260, 1103, 1234, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1129, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1233, 1235, 1235, 1235, 1235, 1130, 1235, 1103, 1103, 1103, 1103, 1236, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1103, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1235, 1103, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1129, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1233, 1235, 1235, 1235, 1235, 1130, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1237, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1103, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1235, 1103, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1129, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1233, 1235, 1235, 1235, 1235, 1130, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1238, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1103, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1235, 1103, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1129, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1233, 1235, 1235, 1235, 1235, 1130, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1239, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1103, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1235, 1103, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1129, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1233, 1235, 1235, 1235, 1235, 1130, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1240, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1103, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1235, 1103, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1129, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1233, 1235, 1235, 1235, 1235, 1130, 1235, 1103, 1103, 1103, 1239, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1103, 1235, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1235, 1235, 1235, 1235, 1235, 1103, 1241, 1243, 1242, 1244, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1246, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1247, 1248, 1077, 1077, 1077, 1077, 1077, 1249, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1250, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1251, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1252, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1253, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1254, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1255, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1256, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1257, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1258, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1259, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1260, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1261, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1262, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1263, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1264, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1260, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1265, 1077, 1266, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1267, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1268, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1269, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1270, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1271, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1272, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1273, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1274, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1270, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1275, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1276, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1277, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1278, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1279, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1280, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1270, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1281, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1282, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1283, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 265, 266, 265, 265, 265, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 265, 1129, 1284, 267, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1284, 1284, 268, 1284, 1284, 1130, 1284, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1284, 269, 1284, 1284, 1077, 1284, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1284, 1284, 1284, 1284, 1284, 1077, 282, 283, 282, 282, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 284, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 287, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 286, 281, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1286, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1287, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1288, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1129, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1289, 1289, 1289, 1289, 1289, 1130, 1289, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1289, 1289, 1289, 1289, 1077, 1289, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1290, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1289, 1289, 1289, 1289, 1289, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1291, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1292, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1293, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1294, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1295, 1077, 1296, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1297, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1270, 1077, 1077, 1077, 1298, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1270, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1263, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1299, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1300, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1280, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1301, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1119, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1302, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1303, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1263, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1270, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1304, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1270, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1305, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1306, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1307, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1280, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1308, 1077, 1077, 1077, 1309, 1077, 1077, 1077, 1077, 1077, 1310, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1311, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1277, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1263, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1312, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1313, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1314, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1315, 1316, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1263, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1317, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1318, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1304, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1319, 1077, 1077, 1320, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1263, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1321, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1277, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1322, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1323, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1324, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1263, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1325, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1326, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1312, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1327, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1328, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1274, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1303, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1329, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1330, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1331, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1332, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1333, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1269, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1334, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1335, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1304, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1336, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1304, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1337, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1274, 1077, 1077, 1077, 1338, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1339, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1304, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1340, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1341, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1342, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1129, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1130, 1245, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1077, 1245, 1077, 1077, 1077, 1312, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1245, 1245, 1245, 1245, 1245, 1077, 1343, 1147, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1086, 1137, 1344, 1346, 1345, 1346, 1346, 1346, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1347, 1345, 291, 1348, 291, 291, 291, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 291, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 292, 1348, 1348, 293, 293, 293, 1348, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 1348, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 1348, 293, 1350, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1351, 1349, 1350, 1349, 1350, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1353, 1349, 1350, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1354, 1349, 1350, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1355, 1349, 1357, 1355, 0]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_trans_targs");
      return self.$private("_lex_trans_targs", "_lex_trans_targs=");
    })(self.$singleton_class());

    self['$_lex_trans_targs=']([156, 2, 3, 4, 162, 6, 7, 8, 9, 10, 156, 156, 165, 168, 165, 12, 169, 14, 165, 176, 177, 180, 181, 187, 182, 183, 184, 19, 185, 186, 189, 191, 192, 193, 194, 195, 25, 18, 178, 179, 27, 229, 230, 232, 234, 232, 30, 235, 32, 232, 242, 243, 246, 247, 253, 248, 249, 250, 37, 251, 252, 255, 257, 258, 259, 260, 261, 43, 36, 244, 245, 45, 295, 296, 306, 305, 0, 48, 307, 308, 50, 309, 310, 310, 422, 52, 53, 422, 451, 54, 55, 451, 451, 455, 455, 59, 54, 60, 453, 454, 456, 457, 455, 451, 458, 459, 461, 56, 57, 462, 463, 58, 455, 61, 62, 67, 74, 465, 466, 60, 453, 454, 456, 457, 455, 451, 458, 459, 461, 56, 57, 462, 463, 58, 61, 62, 67, 74, 465, 466, 464, 63, 64, 65, 66, 68, 69, 72, 70, 71, 73, 75, 76, 451, 78, 79, 80, 82, 85, 83, 84, 86, 88, 481, 481, 481, 482, 90, 484, 91, 485, 92, 482, 90, 484, 91, 485, 519, 519, 519, 95, 96, 97, 98, 531, 519, 519, 536, 519, 519, 558, 519, 102, 559, 565, 105, 108, 110, 112, 113, 114, 108, 109, 569, 109, 569, 111, 519, 576, 577, 578, 116, 122, 127, 601, 129, 581, 582, 519, 585, 586, 592, 587, 588, 589, 120, 590, 591, 594, 596, 597, 598, 599, 600, 126, 119, 583, 584, 128, 634, 635, 130, 521, 93, 523, 528, 132, 133, 637, 731, 135, 136, 137, 731, 739, 739, 739, 140, 761, 760, 739, 763, 765, 750, 797, 146, 147, 148, 152, 153, 146, 147, 148, 152, 153, 149, 149, 147, 148, 150, 151, 149, 149, 147, 148, 150, 151, 844, 147, 739, 913, 154, 155, 913, 156, 156, 157, 158, 159, 161, 163, 164, 156, 156, 156, 160, 156, 160, 156, 1, 156, 156, 156, 5, 165, 165, 166, 165, 167, 170, 165, 165, 11, 13, 165, 165, 165, 171, 172, 173, 15, 21, 26, 196, 28, 165, 165, 165, 174, 175, 165, 16, 165, 165, 165, 17, 165, 165, 165, 20, 188, 190, 22, 165, 165, 23, 24, 165, 197, 201, 205, 198, 199, 200, 202, 203, 204, 165, 165, 206, 210, 216, 207, 214, 215, 208, 212, 213, 209, 211, 165, 217, 227, 228, 218, 219, 220, 226, 221, 222, 223, 224, 225, 165, 165, 165, 165, 231, 232, 232, 232, 233, 236, 232, 29, 31, 232, 232, 232, 237, 238, 239, 33, 39, 44, 262, 46, 232, 232, 232, 240, 241, 232, 34, 232, 232, 232, 35, 232, 232, 232, 38, 254, 256, 40, 232, 232, 41, 42, 232, 263, 267, 271, 264, 265, 266, 268, 269, 270, 232, 232, 272, 276, 282, 273, 280, 281, 274, 278, 279, 275, 277, 232, 283, 293, 294, 284, 285, 286, 292, 287, 288, 289, 290, 291, 232, 232, 232, 232, 297, 298, 298, 299, 298, 300, 298, 298, 298, 301, 301, 301, 302, 301, 301, 301, 303, 304, 303, 47, 49, 305, 305, 305, 311, 310, 310, 312, 313, 314, 315, 317, 310, 320, 321, 322, 323, 324, 326, 328, 329, 330, 334, 336, 337, 338, 354, 359, 366, 371, 378, 385, 388, 389, 393, 387, 397, 405, 409, 411, 416, 418, 421, 310, 310, 310, 310, 310, 310, 316, 310, 316, 310, 318, 51, 319, 310, 310, 310, 325, 327, 310, 331, 332, 333, 329, 335, 310, 339, 340, 349, 352, 341, 342, 343, 344, 345, 346, 347, 348, 311, 350, 351, 353, 355, 358, 356, 357, 360, 363, 361, 362, 364, 365, 367, 369, 368, 370, 372, 373, 310, 374, 375, 376, 377, 310, 379, 382, 380, 381, 383, 384, 386, 390, 391, 392, 394, 396, 395, 398, 399, 400, 402, 401, 403, 404, 406, 407, 408, 410, 412, 413, 414, 415, 417, 419, 420, 423, 422, 422, 424, 425, 427, 422, 422, 422, 426, 422, 426, 428, 422, 430, 429, 429, 434, 435, 436, 437, 429, 439, 440, 441, 442, 444, 446, 447, 448, 449, 450, 429, 431, 433, 429, 432, 429, 429, 429, 429, 429, 438, 429, 438, 443, 429, 445, 429, 451, 451, 452, 467, 468, 454, 470, 471, 458, 472, 473, 474, 451, 475, 477, 478, 479, 480, 451, 451, 451, 451, 451, 451, 455, 460, 451, 451, 451, 451, 451, 451, 451, 451, 451, 469, 451, 469, 451, 451, 476, 451, 77, 81, 87, 481, 483, 486, 89, 481, 481, 482, 487, 487, 488, 489, 491, 493, 494, 487, 487, 490, 487, 490, 487, 492, 487, 487, 487, 496, 495, 495, 497, 498, 499, 501, 503, 504, 509, 516, 495, 495, 495, 495, 500, 495, 500, 495, 502, 495, 495, 496, 505, 506, 507, 508, 510, 511, 514, 512, 513, 515, 517, 518, 520, 519, 529, 530, 532, 533, 535, 537, 538, 539, 541, 542, 543, 545, 546, 568, 571, 572, 573, 637, 638, 639, 640, 641, 540, 643, 659, 664, 671, 676, 678, 684, 687, 688, 692, 686, 696, 707, 711, 714, 722, 726, 729, 730, 519, 93, 522, 519, 519, 524, 526, 527, 519, 525, 519, 519, 519, 519, 519, 94, 519, 519, 519, 519, 519, 534, 519, 534, 519, 519, 99, 519, 519, 100, 519, 519, 540, 519, 544, 519, 547, 557, 519, 101, 560, 561, 562, 519, 563, 103, 566, 104, 106, 567, 519, 548, 550, 556, 519, 549, 519, 519, 551, 554, 555, 519, 552, 553, 519, 519, 519, 519, 564, 107, 570, 519, 519, 519, 519, 519, 519, 574, 115, 519, 575, 519, 519, 519, 519, 579, 580, 519, 117, 519, 519, 519, 118, 519, 519, 519, 121, 593, 595, 123, 519, 519, 124, 125, 519, 602, 606, 610, 603, 604, 605, 607, 608, 609, 519, 519, 611, 615, 621, 612, 619, 620, 613, 617, 618, 614, 616, 519, 622, 632, 633, 623, 624, 625, 631, 626, 627, 628, 629, 630, 519, 519, 519, 519, 636, 131, 134, 519, 642, 519, 644, 645, 654, 657, 646, 647, 648, 649, 650, 651, 652, 653, 520, 655, 656, 658, 660, 663, 661, 662, 665, 668, 666, 667, 669, 670, 672, 674, 673, 675, 677, 679, 681, 680, 682, 683, 685, 520, 689, 690, 691, 693, 695, 694, 697, 698, 699, 704, 700, 701, 702, 519, 520, 521, 93, 703, 528, 526, 705, 706, 708, 709, 710, 712, 713, 715, 716, 717, 720, 718, 719, 721, 723, 724, 725, 727, 728, 519, 732, 731, 731, 733, 734, 735, 737, 731, 731, 731, 731, 736, 731, 736, 738, 731, 740, 739, 739, 744, 745, 746, 739, 747, 749, 752, 753, 754, 755, 756, 739, 757, 758, 762, 785, 789, 739, 790, 792, 794, 739, 795, 796, 798, 802, 804, 805, 739, 807, 825, 830, 837, 845, 852, 859, 864, 865, 869, 863, 874, 884, 890, 893, 902, 906, 910, 911, 912, 741, 743, 739, 742, 739, 739, 739, 739, 739, 739, 739, 748, 739, 748, 739, 138, 751, 739, 739, 739, 739, 739, 739, 759, 739, 739, 139, 141, 739, 142, 769, 777, 780, 764, 781, 782, 770, 774, 775, 739, 764, 142, 766, 767, 143, 739, 766, 739, 739, 768, 739, 771, 773, 739, 771, 772, 774, 775, 773, 739, 739, 776, 739, 739, 778, 773, 774, 775, 778, 779, 739, 771, 773, 774, 775, 739, 771, 773, 774, 775, 739, 783, 773, 774, 775, 783, 784, 739, 142, 785, 764, 786, 774, 775, 787, 773, 142, 787, 764, 788, 739, 791, 793, 144, 145, 739, 739, 799, 800, 801, 796, 803, 739, 739, 806, 739, 739, 808, 809, 818, 823, 810, 811, 812, 813, 814, 815, 816, 817, 740, 819, 820, 821, 822, 740, 824, 826, 829, 827, 828, 740, 740, 831, 834, 832, 833, 835, 836, 740, 838, 840, 839, 841, 842, 843, 739, 739, 846, 740, 847, 739, 848, 849, 850, 851, 743, 853, 856, 854, 855, 857, 858, 860, 861, 862, 740, 866, 867, 868, 870, 872, 873, 871, 740, 875, 876, 877, 880, 878, 879, 881, 882, 883, 885, 887, 886, 888, 889, 891, 892, 894, 895, 897, 900, 896, 898, 899, 901, 903, 904, 905, 907, 908, 909, 739, 739, 913, 914, 915, 913, 917, 916, 918, 916, 919, 920, 921, 916, 916]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_trans_actions");
      return self.$private("_lex_trans_actions", "_lex_trans_actions=");
    })(self.$singleton_class());

    self['$_lex_trans_actions=']([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 9, 0, 10, 0, 0, 0, 11, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 13, 14, 15, 0, 0, 16, 17, 0, 0, 18, 19, 20, 21, 22, 23, 23, 24, 25, 23, 26, 25, 27, 25, 23, 23, 24, 23, 28, 23, 23, 29, 23, 23, 23, 23, 23, 23, 0, 30, 31, 0, 32, 31, 33, 31, 0, 0, 30, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 0, 0, 0, 39, 22, 40, 23, 23, 23, 40, 41, 42, 43, 0, 0, 0, 0, 0, 44, 45, 0, 46, 47, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 49, 50, 0, 22, 0, 51, 52, 52, 52, 52, 52, 52, 52, 52, 0, 7, 53, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 54, 0, 0, 54, 55, 0, 0, 0, 56, 57, 58, 59, 0, 7, 7, 60, 61, 61, 0, 0, 0, 22, 0, 0, 0, 23, 62, 23, 23, 23, 63, 64, 65, 64, 64, 64, 0, 66, 67, 66, 66, 66, 68, 69, 70, 71, 0, 0, 72, 75, 76, 0, 22, 0, 7, 0, 7, 77, 78, 79, 63, 80, 0, 81, 0, 82, 83, 84, 0, 85, 86, 0, 87, 7, 7, 88, 89, 0, 0, 90, 91, 92, 52, 52, 52, 52, 52, 52, 52, 52, 93, 94, 95, 0, 0, 96, 0, 97, 98, 99, 0, 100, 101, 102, 0, 7, 0, 0, 103, 104, 0, 22, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 111, 112, 0, 113, 114, 115, 7, 7, 116, 0, 0, 117, 118, 119, 52, 52, 52, 52, 52, 52, 52, 52, 120, 121, 122, 0, 0, 123, 0, 124, 125, 126, 0, 127, 128, 129, 0, 7, 0, 0, 130, 131, 0, 22, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 137, 138, 139, 0, 140, 141, 0, 142, 0, 143, 144, 145, 146, 147, 148, 0, 149, 150, 151, 152, 0, 153, 0, 0, 154, 155, 156, 157, 158, 159, 0, 22, 0, 0, 7, 160, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 163, 164, 165, 166, 167, 63, 168, 0, 169, 0, 0, 0, 170, 171, 172, 0, 0, 173, 0, 0, 0, 174, 0, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 178, 179, 0, 0, 0, 180, 181, 182, 63, 183, 0, 22, 184, 0, 185, 186, 0, 22, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 189, 0, 190, 191, 192, 193, 194, 63, 195, 0, 0, 196, 0, 197, 198, 199, 200, 22, 0, 21, 0, 0, 21, 0, 0, 0, 201, 0, 0, 7, 7, 7, 202, 203, 204, 205, 206, 207, 208, 0, 209, 210, 211, 212, 213, 214, 215, 216, 217, 63, 218, 0, 219, 220, 221, 222, 0, 0, 0, 223, 7, 7, 0, 224, 225, 226, 227, 228, 0, 0, 0, 0, 0, 229, 230, 63, 231, 0, 232, 22, 233, 234, 235, 236, 237, 238, 0, 22, 0, 0, 0, 0, 0, 0, 239, 240, 241, 242, 63, 243, 0, 244, 22, 245, 246, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 249, 0, 8, 0, 0, 7, 250, 0, 0, 0, 0, 0, 0, 7, 7, 0, 251, 7, 251, 251, 251, 0, 0, 251, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 0, 251, 252, 253, 0, 254, 255, 0, 54, 0, 256, 0, 257, 258, 259, 260, 261, 23, 262, 263, 264, 265, 266, 63, 267, 0, 268, 269, 0, 270, 271, 0, 272, 273, 250, 274, 0, 275, 0, 0, 276, 0, 0, 0, 0, 277, 0, 0, 0, 0, 0, 0, 278, 0, 0, 0, 279, 0, 280, 281, 0, 0, 0, 282, 0, 0, 283, 284, 285, 286, 0, 0, 0, 287, 288, 289, 290, 291, 292, 0, 0, 293, 0, 294, 295, 296, 297, 0, 0, 298, 0, 299, 300, 301, 0, 302, 303, 304, 0, 7, 0, 0, 305, 306, 0, 22, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 312, 313, 314, 0, 0, 0, 315, 22, 316, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 54, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 317, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 318, 319, 320, 321, 322, 322, 321, 318, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 323, 7, 324, 325, 0, 22, 0, 0, 326, 327, 328, 329, 63, 330, 0, 22, 331, 332, 333, 334, 0, 22, 0, 335, 0, 7, 0, 0, 0, 0, 0, 336, 0, 0, 337, 337, 0, 338, 0, 0, 0, 339, 7, 340, 340, 340, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 343, 0, 344, 345, 346, 347, 348, 349, 350, 63, 351, 0, 352, 0, 0, 353, 354, 355, 356, 357, 358, 0, 359, 360, 0, 0, 361, 362, 363, 0, 0, 364, 0, 0, 363, 365, 365, 366, 367, 0, 368, 368, 0, 369, 370, 371, 372, 0, 373, 363, 363, 374, 0, 0, 375, 375, 0, 376, 377, 0, 378, 379, 380, 380, 381, 381, 0, 0, 382, 383, 383, 384, 384, 385, 386, 386, 387, 387, 388, 389, 389, 390, 390, 0, 0, 391, 392, 393, 394, 395, 396, 396, 393, 395, 397, 337, 398, 0, 399, 0, 0, 0, 0, 400, 401, 340, 340, 340, 402, 340, 403, 404, 22, 405, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 408, 409, 0, 0, 0, 0, 0, 0, 410, 0, 0, 0, 0, 0, 409, 411, 412, 0, 413, 0, 414, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 416, 0, 0, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417, 418, 419, 7, 0, 420, 0, 421, 0, 422, 0, 0, 0, 423, 424]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_to_state_actions");
      return self.$private("_lex_to_state_actions", "_lex_to_state_actions=");
    })(self.$singleton_class());

    self['$_lex_to_state_actions=']([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 73, 0, 73, 0, 73, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 73, 0, 0, 0, 0, 0]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_from_state_actions");
      return self.$private("_lex_from_state_actions", "_lex_from_state_actions=");
    })(self.$singleton_class());

    self['$_lex_from_state_actions=']([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 74, 0, 74, 0, 74, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 74, 0, 0, 0, 0, 0]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self.$attr_accessor("_lex_eof_trans");
      return self.$private("_lex_eof_trans", "_lex_eof_trans=");
    })(self.$singleton_class());

    self['$_lex_eof_trans=']([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 13, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 0, 0, 0, 0, 83, 85, 85, 89, 89, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 164, 166, 166, 166, 178, 180, 180, 180, 180, 180, 186, 178, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 208, 208, 219, 219, 219, 219, 219, 208, 219, 219, 219, 219, 208, 208, 208, 178, 190, 190, 190, 190, 250, 250, 250, 255, 257, 257, 257, 261, 261, 255, 261, 261, 261, 261, 261, 261, 261, 261, 261, 291, 291, 0, 303, 304, 305, 307, 309, 311, 309, 309, 0, 321, 322, 326, 326, 327, 336, 337, 338, 338, 338, 341, 341, 343, 344, 345, 345, 345, 347, 348, 349, 349, 345, 341, 341, 354, 355, 355, 355, 355, 355, 358, 358, 358, 358, 358, 358, 358, 358, 368, 369, 369, 369, 369, 381, 381, 381, 369, 369, 369, 369, 381, 369, 381, 381, 381, 381, 381, 381, 381, 381, 394, 381, 395, 396, 397, 397, 0, 404, 408, 408, 409, 418, 419, 420, 420, 420, 423, 423, 425, 426, 427, 427, 427, 429, 430, 431, 431, 427, 423, 423, 436, 437, 437, 437, 437, 437, 440, 440, 440, 440, 440, 440, 440, 440, 450, 451, 451, 451, 451, 463, 463, 463, 451, 451, 451, 451, 463, 451, 463, 463, 463, 463, 463, 463, 463, 463, 476, 463, 477, 478, 479, 479, 0, 486, 487, 0, 493, 0, 498, 0, 501, 501, 502, 503, 0, 543, 545, 546, 547, 548, 550, 552, 556, 556, 547, 547, 547, 557, 547, 547, 552, 547, 547, 543, 561, 561, 561, 561, 561, 561, 552, 552, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 600, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 547, 0, 643, 644, 645, 647, 643, 650, 0, 669, 672, 674, 672, 675, 676, 677, 678, 680, 677, 677, 677, 677, 677, 683, 677, 677, 685, 683, 683, 677, 0, 704, 705, 89, 89, 708, 709, 89, 705, 705, 712, 714, 717, 705, 718, 705, 719, 720, 722, 724, 705, 712, 725, 725, 725, 727, 725, 725, 725, 725, 0, 164, 735, 736, 735, 735, 0, 745, 746, 748, 750, 752, 750, 754, 0, 766, 767, 768, 769, 771, 773, 775, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 0, 178, 834, 837, 838, 842, 844, 845, 846, 834, 847, 848, 850, 853, 854, 856, 858, 861, 862, 864, 865, 178, 862, 862, 853, 853, 853, 853, 884, 888, 890, 891, 895, 898, 899, 900, 901, 888, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 853, 905, 853, 853, 853, 906, 913, 915, 916, 917, 918, 918, 918, 921, 921, 923, 924, 925, 925, 925, 927, 928, 929, 929, 925, 921, 921, 934, 935, 935, 935, 935, 935, 938, 938, 938, 938, 938, 938, 938, 938, 948, 949, 949, 949, 949, 961, 961, 961, 949, 949, 949, 949, 961, 949, 961, 961, 961, 961, 961, 961, 961, 961, 974, 961, 975, 976, 977, 977, 178, 853, 853, 981, 853, 848, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 1035, 838, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 1061, 853, 0, 1069, 1070, 1071, 1072, 1074, 1069, 1077, 0, 261, 1132, 1134, 1135, 1136, 1137, 1138, 1140, 1142, 1144, 1147, 1147, 1138, 1138, 1149, 1150, 1138, 1138, 1152, 1154, 1155, 1155, 1158, 1169, 261, 1175, 1177, 1178, 1180, 1158, 1158, 1183, 1183, 1183, 1189, 1190, 1192, 1193, 1183, 1183, 1200, 1205, 1210, 1183, 1183, 1217, 1217, 1183, 1183, 1154, 1138, 1138, 1154, 1138, 1138, 1144, 261, 1235, 1236, 1236, 1236, 1236, 1236, 1236, 1242, 1144, 1245, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1285, 1286, 1246, 1246, 1290, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1344, 1138, 1345, 0, 1349, 1349, 0, 1353, 1353, 1353, 1353, 1357]);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_start")
    })(self.$singleton_class());

    self['$lex_start='](156);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_error")
    })(self.$singleton_class());

    self['$lex_error='](0);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_interp_words")
    })(self.$singleton_class());

    self['$lex_en_interp_words='](165);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_interp_string")
    })(self.$singleton_class());

    self['$lex_en_interp_string='](232);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_plain_words")
    })(self.$singleton_class());

    self['$lex_en_plain_words='](298);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_plain_string")
    })(self.$singleton_class());

    self['$lex_en_plain_string='](301);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_regexp_modifiers")
    })(self.$singleton_class());

    self['$lex_en_regexp_modifiers='](303);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_variable")
    })(self.$singleton_class());

    self['$lex_en_expr_variable='](305);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_fname")
    })(self.$singleton_class());

    self['$lex_en_expr_fname='](310);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_endfn")
    })(self.$singleton_class());

    self['$lex_en_expr_endfn='](422);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_dot")
    })(self.$singleton_class());

    self['$lex_en_expr_dot='](429);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_arg")
    })(self.$singleton_class());

    self['$lex_en_expr_arg='](451);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_cmdarg")
    })(self.$singleton_class());

    self['$lex_en_expr_cmdarg='](481);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_endarg")
    })(self.$singleton_class());

    self['$lex_en_expr_endarg='](487);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_mid")
    })(self.$singleton_class());

    self['$lex_en_expr_mid='](495);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_beg")
    })(self.$singleton_class());

    self['$lex_en_expr_beg='](519);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_value")
    })(self.$singleton_class());

    self['$lex_en_expr_value='](731);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_expr_end")
    })(self.$singleton_class());

    self['$lex_en_expr_end='](739);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_leading_dot")
    })(self.$singleton_class());

    self['$lex_en_leading_dot='](913);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_line_comment")
    })(self.$singleton_class());

    self['$lex_en_line_comment='](916);

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$attr_accessor("lex_en_line_begin")
    })(self.$singleton_class());

    self['$lex_en_line_begin='](156);

    $opal.cdecl($scope, 'ESCAPES', $hash2(["a", "b", "e", "f", "n", "r", "s", "t", "v", "\\"], {"a": "\a", "b": "b", "e": "\e", "f": "\f", "n": "\n", "r": "\r", "s": " ", "t": "\t", "v": "\v", "\\": "\\"}));

    self.$attr_reader("source_buffer");

    self.$attr_reader("encoding");

    self.$attr_accessor("diagnostics");

    self.$attr_accessor("static_env");

    self.$attr_accessor("force_utf32");

    self.$attr_accessor("cond", "cmdarg");

    self.$attr_accessor("tokens", "comments");

    def.$initialize = function(version) {
      var self = this;

      self.version = version;
      self.static_env = nil;
      self.tokens = nil;
      self.comments = nil;
      return self.$reset();
    };

    def.$reset = function(reset_state) {
      var $a, self = this;

      if (reset_state == null) {
        reset_state = true
      }
      if (reset_state !== false && reset_state !== nil) {
        self.cs = self.$class().$lex_en_line_begin();
        self.cond = (($a = $scope.StackState) == null ? $opal.cm('StackState') : $a).$new("cond");
        self.cmdarg = (($a = $scope.StackState) == null ? $opal.cm('StackState') : $a).$new("cmdarg");};
      self.source = nil;
      self.source_pts = nil;
      self.encoding = nil;
      self.p = 0;
      self.ts = nil;
      self.te = nil;
      self.act = 0;
      self.stack = [];
      self.top = 0;
      self.token_queue = [];
      self.literal_stack = [];
      self.eq_begin_s = nil;
      self.sharp_s = nil;
      self.newline_s = nil;
      self.num_base = nil;
      self.num_digits_s = nil;
      self.num_suffix_s = nil;
      self.num_xfrm = nil;
      self.escape_s = nil;
      self.escape = nil;
      self.heredoc_e = nil;
      self.herebody_s = nil;
      self.paren_nest = 0;
      self.lambda_stack = [];
      return self.command_state = false;
    };

    def['$source_buffer='] = function(source_buffer) {
      var $a, $b, $c, $d, self = this;

      self.source_buffer = source_buffer;
      if ((($a = self.source_buffer) !== nil && (!$a._isBoolean || $a == true))) {
        self.source = self.source_buffer.$source();
        if ((($a = ($scope.Encoding != null)) !== nil && (!$a._isBoolean || $a == true))) {
          self.encoding = self.source.$encoding();
          self.source = self.source['$+']("\x00".$force_encoding(self.encoding));
          } else {
          self.source = self.source['$+']("\x00")
        };
        if ((($a = ($b = ($scope.Encoding != null), $b !== false && $b !== nil ?self.source.$encoding()['$==']((($c = ((($d = $scope.Encoding) == null ? $opal.cm('Encoding') : $d))._scope).UTF_8 == null ? $c.cm('UTF_8') : $c.UTF_8)) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          self.source_pts = self.source.$unpack("U*")
          } else {
          self.source_pts = self.source.$unpack("C*")
        };
        if ((($a = ((($b = ((($c = self.source_pts.$size()['$>'](1000000)) ? self.source['$respond_to?']("encode") : $c))) !== false && $b !== nil) ? $b : self.force_utf32)) !== nil && (!$a._isBoolean || $a == true))) {
          self.source = self.source.$encode((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).UTF_32LE == null ? $a.cm('UTF_32LE') : $a.UTF_32LE))};
        if (self.source_pts['$[]'](0)['$=='](65279)) {
          return self.p = 1
          } else {
          return nil
        };
        } else {
        self.source = nil;
        return self.source_pts = nil;
      };
    };

    $opal.cdecl($scope, 'LEX_STATES', $hash2(["line_begin", "expr_dot", "expr_fname", "expr_value", "expr_beg", "expr_mid", "expr_arg", "expr_cmdarg", "expr_end", "expr_endarg", "expr_endfn", "interp_string", "interp_words", "plain_string", "plain_words"], {"line_begin": self.$lex_en_line_begin(), "expr_dot": self.$lex_en_expr_dot(), "expr_fname": self.$lex_en_expr_fname(), "expr_value": self.$lex_en_expr_value(), "expr_beg": self.$lex_en_expr_beg(), "expr_mid": self.$lex_en_expr_mid(), "expr_arg": self.$lex_en_expr_arg(), "expr_cmdarg": self.$lex_en_expr_cmdarg(), "expr_end": self.$lex_en_expr_end(), "expr_endarg": self.$lex_en_expr_endarg(), "expr_endfn": self.$lex_en_expr_endfn(), "interp_string": self.$lex_en_interp_string(), "interp_words": self.$lex_en_interp_words(), "plain_string": self.$lex_en_plain_string(), "plain_words": self.$lex_en_plain_string()}));

    def.$state = function() {
      var $a, self = this;

      return (($a = $scope.LEX_STATES) == null ? $opal.cm('LEX_STATES') : $a).$invert().$fetch(self.cs, self.cs);
    };

    def['$state='] = function(state) {
      var $a, self = this;

      return self.cs = (($a = $scope.LEX_STATES) == null ? $opal.cm('LEX_STATES') : $a).$fetch(state);
    };

    def.$advance = function() {
      var $a, $b, $c, $d, $e, TMP_1, TMP_2, $f, TMP_3, $g, TMP_4, TMP_5, $h, TMP_6, $i, TMP_7, $j, TMP_9, $k, TMP_11, $l, TMP_13, $m, TMP_14, $n, TMP_15, $o, TMP_16, $p, TMP_17, $q, TMP_18, $r, TMP_19, $s, TMP_20, $t, TMP_21, $u, TMP_22, $v, TMP_23, $w, TMP_24, $x, $y, TMP_25, TMP_26, $z, TMP_27, $aa, TMP_29, $ab, TMP_30, $ac, TMP_32, $ad, TMP_33, $ae, TMP_35, $af, TMP_36, $ag, TMP_37, $ah, TMP_38, $ai, TMP_39, $aj, TMP_40, $ak, TMP_41, $al, TMP_42, $am, TMP_43, $an, $ao, TMP_44, TMP_45, $ap, TMP_46, $aq, $ar, TMP_47, $as, TMP_48, $at, TMP_49, $au, TMP_50, $av, TMP_51, $aw, TMP_52, TMP_53, $ax, TMP_54, self = this, _lex_trans_keys = nil, _lex_key_spans = nil, _lex_index_offsets = nil, _lex_indicies = nil, _lex_trans_targs = nil, _lex_trans_actions = nil, _lex_to_state_actions = nil, _lex_from_state_actions = nil, _lex_eof_trans = nil, p = nil, pe = nil, eof = nil, testEof = nil, _slen = nil, _trans = nil, _keys = nil, _inds = nil, _acts = nil, _nacts = nil, _goto_level = nil, _resume = nil, _eof_trans = nil, _again = nil, _test_eof = nil, _out = nil, $case = nil, tm = nil, line = nil, string = nil, escaped_char = nil, unknown_options = nil, type = nil, delimiter = nil, value = nil, escape = nil, ident = nil, digits = nil, invalid_idx = nil, invalid_s = nil, codepoints = nil, codepoint_s = nil, char$ = nil, new_herebody_s = nil, indent = nil;

      if ((($a = self.token_queue['$any?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return self.token_queue.$shift()};
      _lex_trans_keys = self.$class().$send("_lex_trans_keys");
      _lex_key_spans = self.$class().$send("_lex_key_spans");
      _lex_index_offsets = self.$class().$send("_lex_index_offsets");
      _lex_indicies = self.$class().$send("_lex_indicies");
      _lex_trans_targs = self.$class().$send("_lex_trans_targs");
      _lex_trans_actions = self.$class().$send("_lex_trans_actions");
      _lex_to_state_actions = self.$class().$send("_lex_to_state_actions");
      _lex_from_state_actions = self.$class().$send("_lex_from_state_actions");
      _lex_eof_trans = self.$class().$send("_lex_eof_trans");
      $a = [self.p, self.source.$length()['$+'](1), self.source.$length()['$+'](1)], p = $a[0], pe = $a[1], eof = $a[2];
      self.command_state = (((($a = self.cs['$=='](self.$class().$lex_en_expr_value())) !== false && $a !== nil) ? $a : self.cs['$=='](self.$class().$lex_en_line_begin())));
      testEof = false;
      $a = $opal.to_ary(nil), _slen = ($a[0] == null ? nil : $a[0]), _trans = ($a[1] == null ? nil : $a[1]), _keys = ($a[2] == null ? nil : $a[2]), _inds = ($a[3] == null ? nil : $a[3]), _acts = ($a[4] == null ? nil : $a[4]), _nacts = ($a[5] == null ? nil : $a[5]);
      _goto_level = 0;
      _resume = 10;
      _eof_trans = 15;
      _again = 20;
      _test_eof = 30;
      _out = 40;
      while ((($b = true) !== nil && (!$b._isBoolean || $b == true))) {
      if (_goto_level['$<='](0)) {
        if (p['$=='](pe)) {
          _goto_level = _test_eof;
          continue;;};
        if (self.cs['$=='](0)) {
          _goto_level = _out;
          continue;;};};
      if (_goto_level['$<='](_resume)) {
        $case = _lex_from_state_actions['$[]'](self.cs);if ((74)['$===']($case)) {self.ts = p};
        _keys = self.cs['$<<'](1);
        _inds = _lex_index_offsets['$[]'](self.cs);
        _slen = _lex_key_spans['$[]'](self.cs);
        _trans = (function() {if ((($b = (($c = (($d = _slen['$>'](0)) ? _lex_trans_keys['$[]'](_keys)['$<='](((((($e = self.source_pts['$[]'](p)) !== false && $e !== nil) ? $e : 0)))) : $d), $c !== false && $c !== nil ?((((($d = self.source_pts['$[]'](p)) !== false && $d !== nil) ? $d : 0)))['$<='](_lex_trans_keys['$[]'](_keys['$+'](1))) : $c))) !== nil && (!$b._isBoolean || $b == true))) {
          return _lex_indicies['$[]'](_inds['$+'](((((($b = self.source_pts['$[]'](p)) !== false && $b !== nil) ? $b : 0))))['$-'](_lex_trans_keys['$[]'](_keys)))
          } else {
          return _lex_indicies['$[]'](_inds['$+'](_slen))
        }; return nil; })();};
      if (_goto_level['$<='](_eof_trans)) {
        self.cs = _lex_trans_targs['$[]'](_trans);
        if ((($b = _lex_trans_actions['$[]'](_trans)['$=='](0)['$!']()) !== nil && (!$b._isBoolean || $b == true))) {
          $case = _lex_trans_actions['$[]'](_trans);if ((22)['$===']($case)) {self.newline_s = p}else if ((52)['$===']($case)) {self.escape_s = p;
          self.escape = nil;}else if ((23)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;}}else if ((63)['$===']($case)) {self.sharp_s = p['$-'](1)}else if ((66)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })())}else if ((253)['$===']($case)) {tm = p}else if ((30)['$===']($case)) {tm = p}else if ((32)['$===']($case)) {tm = p}else if ((34)['$===']($case)) {tm = p}else if ((49)['$===']($case)) {self.heredoc_e = p}else if ((322)['$===']($case)) {tm = p}else if ((389)['$===']($case)) {self.num_base = 16;
          self.num_digits_s = p;}else if ((383)['$===']($case)) {self.num_base = 10;
          self.num_digits_s = p;}else if ((386)['$===']($case)) {self.num_base = 8;
          self.num_digits_s = p;}else if ((380)['$===']($case)) {self.num_base = 2;
          self.num_digits_s = p;}else if ((395)['$===']($case)) {self.num_base = 10;
          self.num_digits_s = self.ts;}else if ((363)['$===']($case)) {self.num_base = 8;
          self.num_digits_s = self.ts;}else if ((375)['$===']($case)) {self.num_suffix_s = p}else if ((370)['$===']($case)) {self.num_suffix_s = p}else if ((368)['$===']($case)) {self.num_suffix_s = p}else if ((7)['$===']($case)) {self.te = p['$+'](1)}else if ((90)['$===']($case)) {self.te = p['$+'](1);
          self.$literal().$flush_string();
          self.$literal().$extend_content();
          self.$emit("tSTRING_DBEG", "\#{");
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal()['$saved_herebody_s='](self.herebody_s);
            self.herebody_s = nil;};
          self.$literal().$start_interp_brace();
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 731;
          _goto_level = _again;
          continue;;;;}else if ((5)['$===']($case)) {self.te = p['$+'](1);
          self.$literal().$flush_string();
          self.$literal().$extend_content();
          self.$emit("tSTRING_DVAR", nil, self.ts, self.ts['$+'](1));
          p = self.ts;
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 305;
          _goto_level = _again;
          continue;;;;}else if ((86)['$===']($case)) {self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($c = self.$literal()['$words?'](), $c !== false && $c !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;}else if ((85)['$===']($case)) {self.te = p['$+'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((91)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$literal().$flush_string();
          self.$literal().$extend_content();
          self.$emit("tSTRING_DVAR", nil, self.ts, self.ts['$+'](1));
          p = self.ts;
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 305;
          _goto_level = _again;
          continue;;;;}else if ((88)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$literal().$extend_space(self.ts, self.te);}else if ((89)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((6)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($c = self.$literal()['$regexp?'](), $c !== false && $c !== nil ?escaped_char['$==']("\\") : $c)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };}else if ((4)['$===']($case)) {p = ((self.te))['$-'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((117)['$===']($case)) {self.te = p['$+'](1);
          self.$literal().$flush_string();
          self.$literal().$extend_content();
          self.$emit("tSTRING_DBEG", "\#{");
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal()['$saved_herebody_s='](self.herebody_s);
            self.herebody_s = nil;};
          self.$literal().$start_interp_brace();
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 731;
          _goto_level = _again;
          continue;;;;}else if ((10)['$===']($case)) {self.te = p['$+'](1);
          self.$literal().$flush_string();
          self.$literal().$extend_content();
          self.$emit("tSTRING_DVAR", nil, self.ts, self.ts['$+'](1));
          p = self.ts;
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 305;
          _goto_level = _again;
          continue;;;;}else if ((114)['$===']($case)) {self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($c = self.$literal()['$words?'](), $c !== false && $c !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;}else if ((113)['$===']($case)) {self.te = p['$+'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((118)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$literal().$flush_string();
          self.$literal().$extend_content();
          self.$emit("tSTRING_DVAR", nil, self.ts, self.ts['$+'](1));
          p = self.ts;
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 305;
          _goto_level = _again;
          continue;;;;}else if ((116)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((11)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($c = self.$literal()['$regexp?'](), $c !== false && $c !== nil ?escaped_char['$==']("\\") : $c)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };}else if ((9)['$===']($case)) {p = ((self.te))['$-'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((141)['$===']($case)) {self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($c = self.$literal()['$words?'](), $c !== false && $c !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;}else if ((140)['$===']($case)) {self.te = p['$+'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((143)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$literal().$extend_space(self.ts, self.te);}else if ((144)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((147)['$===']($case)) {self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($c = self.$literal()['$words?'](), $c !== false && $c !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;}else if ((146)['$===']($case)) {self.te = p['$+'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((149)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          string = self.source['$[]']($range(self.ts, self.te, true));
          if ((($b = string['$respond_to?']("encode")) !== nil && (!$b._isBoolean || $b == true))) {
            string = string.$encode(self.encoding)};
          if ((($b = ($c = self.$literal()['$heredoc?']()['$!'](), $c !== false && $c !== nil ?self.$literal().$nest_and_try_closing(string, self.ts, self.te) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$literal().$extend_string(string, self.ts, self.te)
          };;}else if ((152)['$===']($case)) {self.te = p['$+'](1);
          self.$emit("tREGEXP_OPT", self.$tok(self.ts, self.te['$-'](1)), self.ts, self.te['$-'](1));
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((153)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          unknown_options = self.$tok().$scan(/[^imxouesn]/);
          if ((($b = unknown_options['$any?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "regexp_options", $hash2(["options"], {"options": unknown_options.$join()}))};
          self.$emit("tREGEXP_OPT");
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((12)['$===']($case)) {self.te = p['$+'](1);
          if ((($b = self.$tok()['$=~'](/^\$([1-9][0-9]*)$/)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tNTH_REF", self.$tok(self.ts['$+'](1)).$to_i())
          } else if ((($b = self.$tok()['$=~'](/^\$([&`'+])$/)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tBACK_REF")
            } else {
            self.$emit("tGVAR")
          };
          self.cs = (self.$stack_pop());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((154)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          if ((($b = self.$tok()['$=~'](/^\$([1-9][0-9]*)$/)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tNTH_REF", self.$tok(self.ts['$+'](1)).$to_i())
          } else if ((($b = self.$tok()['$=~'](/^\$([&`'+])$/)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tBACK_REF")
            } else {
            self.$emit("tGVAR")
          };
          self.cs = (self.$stack_pop());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((156)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          if ((($b = self.$tok()['$=~'](/^@@[0-9]/)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "cvar_name", $hash2(["name"], {"name": self.$tok()}))};
          self.$emit("tCVAR");
          self.cs = (self.$stack_pop());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((155)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          if ((($b = self.$tok()['$=~'](/^@[0-9]/)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "ivar_name", $hash2(["name"], {"name": self.$tok()}))};
          self.$emit("tIVAR");
          self.cs = (self.$stack_pop());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((177)['$===']($case)) {self.te = p['$+'](1);
          self.$emit((($b = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $b)['$[]'](self.$tok()));
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((163)['$===']($case)) {self.te = p['$+'](1);
          self.$emit("tIDENTIFIER");
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((14)['$===']($case)) {self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 305;
          _goto_level = _again;
          continue;;;;}else if ((160)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((172)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((159)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((158)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((176)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit((($b = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $b)['$[]'](self.$tok()));
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((173)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tCONSTANT");
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((175)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tIDENTIFIER");
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((170)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 305;
          _goto_level = _again;
          continue;;;;}else if ((166)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((171)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((164)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((169)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((13)['$===']($case)) {p = ((self.te))['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((162)['$===']($case)) {$case = self.act;if ((25)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit((($b = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $b)['$[]'](self.$tok()));
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((26)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tCONSTANT");
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((27)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tIDENTIFIER");
          self.cs = 422;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}}else if ((16)['$===']($case)) {self.te = p['$+'](1);
          self.$emit("tLABEL", self.$tok(self.ts, self.te['$-'](1)));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((179)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((178)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((181)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((180)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((15)['$===']($case)) {p = ((self.te))['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((187)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 451;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((186)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((185)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((197)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tCONSTANT");
          self.cs = (self.$arg_or_cmdarg());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((188)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tIDENTIFIER");
          self.cs = (self.$arg_or_cmdarg());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((193)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 451;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((191)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((196)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((201)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((204)['$===']($case)) {self.te = p['$+'](1);
          if (self.$tok(tm, tm['$+'](1))['$==']("/")) {
            self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, tm['$+'](1)))};
          p = tm['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((210)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((18)['$===']($case)) {self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((212)['$===']($case)) {self.te = p['$+'](1);
          p = tm['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((33)['$===']($case)) {self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((198)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((199)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((211)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((207)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
          p = tm['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((209)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((203)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((202)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((220)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((19)['$===']($case)) {p = ((self.te))['$-'](1)}else if ((35)['$===']($case)) {p = ((self.te))['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((17)['$===']($case)) {$case = self.act;if ((51)['$===']($case)) {p = ((self.te))['$-'](1);
          if (self.$tok(tm, tm['$+'](1))['$==']("/")) {
            self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, tm['$+'](1)))};
          p = tm['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;}else if ((52)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
          p = tm['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;}else if ((57)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;}else {p = ((self.te))['$-'](1)}}else if ((37)['$===']($case)) {self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 451;
          _goto_level = _again;
          continue;;;;}else if ((223)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((224)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 451;
          _goto_level = _again;
          continue;;;;}else if ((38)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 451;
          _goto_level = _again;
          continue;;;;}else if ((36)['$===']($case)) {$case = self.act;if ((64)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self.cond['$active?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("kDO_COND", "do", self.te['$-'](2), self.te)
            } else {
            self.$emit("kDO", "do", self.te['$-'](2), self.te)
          };
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((65)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 451;
          _goto_level = _again;
          continue;;;}}else if ((234)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_do(true);
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((227)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((228)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((229)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((232)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((238)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((237)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((246)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((240)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((244)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((239)['$===']($case)) {$case = self.act;if ((72)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((73)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;}}else if ((274)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          if ((($b = self.$tok()['$start_with?']("-")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tUMINUS_NUM", "-", self.ts, self.ts['$+'](1));
            self.cs = 739;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;};;}else if ((275)['$===']($case)) {self.te = p['$+'](1);
          type = delimiter = self.$tok()['$[]'](0).$chr();
          p = p['$-'](1);
          self.cs = (self.$push_literal(type, delimiter, self.ts));
          _goto_level = _again;
          continue;;;;}else if ((269)['$===']($case)) {self.te = p['$+'](1);
          $b = [self.$tok()['$[]'](0).$chr(), self.$tok()['$[]'](-1).$chr()], type = $b[0], delimiter = $b[1];
          self.cs = (self.$push_literal(type, delimiter, self.ts));
          _goto_level = _again;
          continue;;;;}else if ((45)['$===']($case)) {self.te = p['$+'](1);
          $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], type = $b[0], delimiter = $b[1];
          self.cs = (self.$push_literal(type, delimiter, self.ts));
          _goto_level = _again;
          continue;;;;}else if ((276)['$===']($case)) {self.te = p['$+'](1);
          $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], type = $b[0], delimiter = $b[1];
          self.cs = (self.$push_literal(type, delimiter, self.ts));
          _goto_level = _again;
          continue;;;;}else if ((48)['$===']($case)) {self.te = p['$+'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1)), self.ts);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((289)['$===']($case)) {self.te = p['$+'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((291)['$===']($case)) {self.te = p['$+'](1);
          escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.$tok()['$[]'](1));
          self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((290)['$===']($case)) {self.te = p['$+'](1);
          self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, self.ts['$+'](1)));}else if ((277)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION_BEGIN) == null ? $opal.cm('PUNCTUATION_BEGIN') : $b));
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((42)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            ident = self.$tok(self.ts, self.te['$-'](2));
            self.$emit((function() {if ((($b = (self.$tok()['$[]'](0)['$=~'](/[A-Z]/))) !== nil && (!$b._isBoolean || $b == true))) {
              return "tCONSTANT"
              } else {
              return "tIDENTIFIER"
            }; return nil; })(), ident, self.ts, self.te['$-'](2));
            p = p['$-'](1);
            if ((($b = ($c = self.static_env['$nil?']()['$!'](), $c !== false && $c !== nil ?self.static_env['$declared?'](ident) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = 739
              } else {
              self.cs = (self.$arg_or_cmdarg())
            };
            } else {
            self.$emit("tLABEL", self.$tok(self.ts, self.te['$-'](2)), self.ts, self.te['$-'](1))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((263)['$===']($case)) {self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 156;
          _goto_level = _again;
          continue;;;;}else if ((46)['$===']($case)) {self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((249)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((273)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tSTAR");
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((270)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], type = $b[0], delimiter = $b[1];
          self.cs = (self.$push_literal(type, delimiter, self.ts));
          _goto_level = _again;
          continue;;;;}else if ((268)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, self.ts['$+'](1)));}else if ((278)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1)), self.ts);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((293)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((288)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, self.ts['$+'](1)));}else if ((294)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((271)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION_BEGIN) == null ? $opal.cm('PUNCTUATION_BEGIN') : $b));
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((316)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tIDENTIFIER");
          if ((($b = ($c = self.static_env['$nil?']()['$!'](), $c !== false && $c !== nil ?self.static_env['$declared?'](self.$tok()) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 739;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = (self.$arg_or_cmdarg());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };;}else if ((260)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((262)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 156;
          _goto_level = _again;
          continue;;;;}else if ((265)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((44)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, self.ts['$+'](1)));}else if ((53)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((51)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, self.ts['$+'](1)));}else if ((43)['$===']($case)) {p = ((self.te))['$-'](1)}else if ((47)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((41)['$===']($case)) {$case = self.act;if ((94)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION_BEGIN) == null ? $opal.cm('PUNCTUATION_BEGIN') : $b));
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((95)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $b), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 495;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((96)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $b));
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((98)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;}else if ((99)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tIDENTIFIER");
          if ((($b = ($c = self.static_env['$nil?']()['$!'](), $c !== false && $c !== nil ?self.static_env['$declared?'](self.$tok()) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 739;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = (self.$arg_or_cmdarg());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((102)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;}}else if ((56)['$===']($case)) {self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((325)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((324)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((327)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((326)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((55)['$===']($case)) {p = ((self.te))['$-'](1);
          p = p['$-'](1);
          self.cs = 519;
          _goto_level = _again;
          continue;;;;}else if ((357)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b), self.ts, self.ts['$+'](2));
          self.lambda_stack.$push(self.paren_nest);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((70)['$===']($case)) {self.te = p['$+'](1);
          self.$emit("kCLASS", "class", self.ts, self.ts['$+'](5));
          self.$emit("tLSHFT", "<<", self.te['$-'](2), self.te);
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((335)['$===']($case)) {self.te = p['$+'](1);
          $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], type = $b[0], delimiter = $b[1];
          self.cs = (self.$push_literal(type, delimiter, self.ts));
          _goto_level = _again;
          continue;;;;}else if ((58)['$===']($case)) {self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 305;
          _goto_level = _again;
          continue;;;;}else if ((399)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 429;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((349)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((341)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cond.$lexpop();
          self.cmdarg.$lexpop();
          if ((($b = ["}", "]"]['$include?'](self.$tok())) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 487};
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((354)['$===']($case)) {self.te = p['$+'](1);
          self.$emit("tOP_ASGN", self.$tok(self.ts, self.te['$-'](1)));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((339)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((336)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((338)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((404)['$===']($case)) {self.te = p['$+'](1);
          self.$diagnostic("error", "bare_backslash", nil, self.$range(self.ts, self.ts['$+'](1)));
          p = p['$-'](1);;}else if ((334)['$===']($case)) {self.te = p['$+'](1);
          self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));}else if ((333)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((414)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 310;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((412)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("kCLASS", "class", self.ts, self.ts['$+'](5));
          self.$emit("tLSHFT", "<<", self.te['$-'](2), self.te);
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((411)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((360)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$diagnostic("error", "no_dot_digit_literal");}else if ((401)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tCONSTANT");
          self.cs = (self.$arg_or_cmdarg());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((353)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.stack['$[]='](self.top, self.cs);
          self.top = self.top['$+'](1);
          self.cs = 305;
          _goto_level = _again;
          continue;;;;}else if ((358)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 429;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((406)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tIDENTIFIER");
          if ((($b = ($c = self.static_env['$nil?']()['$!'](), $c !== false && $c !== nil ?self.static_env['$declared?'](self.$tok()) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 739;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = (self.$arg_or_cmdarg());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };;}else if ((348)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((359)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((346)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((352)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));}else if ((59)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$diagnostic("error", "no_dot_digit_literal");}else if ((57)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));}else if ((60)['$===']($case)) {$case = self.act;if ((110)['$===']($case)) {p = ((self.te))['$-'](1);
          if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
            self.lambda_stack.$pop();
            if (self.$tok()['$==']("{")) {
              self.$emit("tLAMBEG")
              } else {
              self.$emit("kDO_LAMBDA")
            };
          } else if (self.$tok()['$==']("{")) {
            self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b))
            } else {
            self.$emit_do()
          };
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((111)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 310;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((112)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("kCLASS", "class", self.ts, self.ts['$+'](5));
          self.$emit("tLSHFT", "<<", self.te['$-'](2), self.te);
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((113)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((114)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((115)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 495;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((116)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          if ((($b = ($c = self['$version?'](18), $c !== false && $c !== nil ?self.$tok()['$==']("not") : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 519;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = 451;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((117)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tIDENTIFIER");
            if ((($b = ($c = self.static_env['$nil?']()['$!'](), $c !== false && $c !== nil ?self.static_env['$declared?'](self.$tok()) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = 739
              } else {
              self.cs = (self.$arg_or_cmdarg())
            };
            } else {
            self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((118)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((119)['$===']($case)) {p = ((self.te))['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($c = ($d = digits['$empty?'](), $d !== false && $d !== nil ?self.num_base['$=='](8) : $d), $c !== false && $c !== nil ?self['$version?'](18) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($c = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((121)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok(self.te['$-'](1), self.te)}), self.$range(self.te['$-'](1), self.te))
            } else {
            self.$emit("tINTEGER", self.$tok(self.ts, self.te['$-'](1)).$to_i());
            p = p['$-'](1);
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((122)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok(self.te['$-'](1), self.te)}), self.$range(self.te['$-'](1), self.te))
            } else {
            self.$emit("tFLOAT", self.$tok(self.ts, self.te['$-'](1)).$to_f());
            p = p['$-'](1);
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((123)['$===']($case)) {p = ((self.te))['$-'](1);
          digits = self.$tok(self.ts, self.num_suffix_s);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tFLOAT", self.$Float(digits));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits)
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((125)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tCONSTANT");
          self.cs = (self.$arg_or_cmdarg());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((129)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tIDENTIFIER");
          if ((($b = ($c = self.static_env['$nil?']()['$!'](), $c !== false && $c !== nil ?self.static_env['$declared?'](self.$tok()) : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 739;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = (self.$arg_or_cmdarg());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((130)['$===']($case)) {p = ((self.te))['$-'](1);
          if (tm['$=='](self.te)) {
            self.$emit("tFID")
            } else {
            self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
            p = tm['$-'](1);
          };
          self.cs = 451;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}}else if ((72)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((419)['$===']($case)) {self.te = p['$+'](1);
          self.$emit("tNL", nil, self.newline_s, self.newline_s['$+'](1));
          p = p['$-'](1);
          self.cs = 156;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((420)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit("tNL", nil, self.newline_s, self.newline_s['$+'](1));
          p = p['$-'](1);
          self.cs = 156;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((71)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tNL", nil, self.newline_s, self.newline_s['$+'](1));
          p = p['$-'](1);
          self.cs = 156;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((423)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$emit_comment(self.eq_begin_s, self.te);
          self.cs = 156;
          _goto_level = _again;
          continue;;;;}else if ((422)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.$diagnostic("fatal", "embedded_document", nil, self.$range(self.eq_begin_s, self.eq_begin_s['$+']("=begin".$length())));}else if ((83)['$===']($case)) {self.te = p['$+'](1);
          self.eq_begin_s = self.ts;
          self.cs = 916;
          _goto_level = _again;
          continue;;;;}else if ((2)['$===']($case)) {self.te = p['$+'](1);
          p = pe['$-'](3);}else if ((75)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          self.cs = 731;
          _goto_level = _again;
          continue;;;;}else if ((76)['$===']($case)) {self.te = p['$+'](1);
          p = p['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;}else if ((77)['$===']($case)) {self.te = p;
          p = p['$-'](1);}else if ((82)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          self.eq_begin_s = self.ts;
          self.cs = 916;
          _goto_level = _again;
          continue;;;;}else if ((81)['$===']($case)) {self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 731;
          _goto_level = _again;
          continue;;;;}else if ((1)['$===']($case)) {p = ((self.te))['$-'](1);
          p = p['$-'](1);
          self.cs = 731;
          _goto_level = _again;
          continue;;;;}else if ((69)['$===']($case)) {self.newline_s = p;
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());}else if ((87)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($c = self.$literal()['$words?'](), $c !== false && $c !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;;}else if ((115)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($c = self.$literal()['$words?'](), $c !== false && $c !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;;}else if ((142)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($c = self.$literal()['$words?'](), $c !== false && $c !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;;}else if ((148)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($c = self.$literal()['$words?'](), $c !== false && $c !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $c)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;;}else if ((213)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          p = tm['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((205)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((292)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.$tok()['$[]'](1));
          self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((264)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 156;
          _goto_level = _again;
          continue;;;;;}else if ((424)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          self.$emit_comment(self.eq_begin_s, self.te);
          self.cs = 156;
          _goto_level = _again;
          continue;;;;;}else if ((421)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);}else if ((84)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          self.eq_begin_s = self.ts;
          self.cs = 916;
          _goto_level = _again;
          continue;;;;;}else if ((3)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          p = pe['$-'](3);;}else if ((377)['$===']($case)) {self.num_xfrm = ($b = ($c = self).$lambda, $b._p = (TMP_1 = function(chars){var self = TMP_1._s || this;
if (chars == null) chars = nil;
          return self.$emit("tRATIONAL", self.$Rational(chars))}, TMP_1._s = self, TMP_1), $b).call($c);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($d = ($e = digits['$empty?'](), $e !== false && $e !== nil ?self.num_base['$=='](8) : $e), $d !== false && $d !== nil ?self['$version?'](18) : $d)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($d = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $d)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((376)['$===']($case)) {self.num_xfrm = ($b = ($d = self).$lambda, $b._p = (TMP_2 = function(chars){var self = TMP_2._s || this;
if (chars == null) chars = nil;
          return self.$emit("tIMAGINARY", self.$Complex(0, chars))}, TMP_2._s = self, TMP_2), $b).call($d);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($e = ($f = digits['$empty?'](), $f !== false && $f !== nil ?self.num_base['$=='](8) : $f), $e !== false && $e !== nil ?self['$version?'](18) : $e)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($e = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $e)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((378)['$===']($case)) {self.num_xfrm = ($b = ($e = self).$lambda, $b._p = (TMP_3 = function(chars){var self = TMP_3._s || this;
if (chars == null) chars = nil;
          return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)))}, TMP_3._s = self, TMP_3), $b).call($e);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($f = ($g = digits['$empty?'](), $g !== false && $g !== nil ?self.num_base['$=='](8) : $g), $f !== false && $f !== nil ?self['$version?'](18) : $f)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($f = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $f)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((371)['$===']($case)) {self.num_xfrm = ($b = ($f = self).$lambda, $b._p = (TMP_4 = function(chars){var self = TMP_4._s || this;
if (chars == null) chars = nil;
          return self.$emit("tIMAGINARY", self.$Complex(0, self.$Float(chars)))}, TMP_4._s = self, TMP_4), $b).call($f);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.ts, self.num_suffix_s);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tFLOAT", self.$Float(digits));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits)
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((372)['$===']($case)) {self.num_xfrm = ($b = ($g = self).$lambda, $b._p = (TMP_5 = function(chars){var self = TMP_5._s || this;
if (chars == null) chars = nil;
          return self.$emit("tRATIONAL", self.$Rational(chars))}, TMP_5._s = self, TMP_5), $b).call($g);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.ts, self.num_suffix_s);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tFLOAT", self.$Float(digits));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits)
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((373)['$===']($case)) {self.num_xfrm = ($b = ($h = self).$lambda, $b._p = (TMP_6 = function(chars){var self = TMP_6._s || this;
if (chars == null) chars = nil;
          return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)))}, TMP_6._s = self, TMP_6), $b).call($h);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.ts, self.num_suffix_s);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tFLOAT", self.$Float(digits));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits)
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((109)['$===']($case)) {self.escape = "";
          codepoints = self.$tok(self.escape_s['$+'](2), p['$-'](1));
          codepoint_s = self.escape_s['$+'](2);
          ($b = ($i = codepoints.$split(/[ \t]/)).$each, $b._p = (TMP_7 = function(codepoint_str){var self = TMP_7._s || this, $a, $b, TMP_8, $c, codepoint = nil;
            if (self.escape == null) self.escape = nil;
if (codepoint_str == null) codepoint_str = nil;
          codepoint = codepoint_str.$to_i(16);
            if (codepoint['$>='](1114112)) {
              self.escape = ($a = ($b = self).$lambda, $a._p = (TMP_8 = function(){var self = TMP_8._s || this;

              return self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, codepoint_s['$+'](codepoint_str.$length())))}, TMP_8._s = self, TMP_8), $a).call($b);
              return ($breaker.$v = nil, $breaker);};
            self.escape = self.escape['$+'](codepoint.$chr((($a = ((($c = $scope.Encoding) == null ? $opal.cm('Encoding') : $c))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8)));
            return codepoint_s = codepoint_s['$+'](codepoint_str.$length()['$+'](1));}, TMP_7._s = self, TMP_7), $b).call($i);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($j = self.$literal()['$regexp?'](), $j !== false && $j !== nil ?escaped_char['$==']("\\") : $j)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((136)['$===']($case)) {self.escape = "";
          codepoints = self.$tok(self.escape_s['$+'](2), p['$-'](1));
          codepoint_s = self.escape_s['$+'](2);
          ($b = ($j = codepoints.$split(/[ \t]/)).$each, $b._p = (TMP_9 = function(codepoint_str){var self = TMP_9._s || this, $a, $b, TMP_10, $c, codepoint = nil;
            if (self.escape == null) self.escape = nil;
if (codepoint_str == null) codepoint_str = nil;
          codepoint = codepoint_str.$to_i(16);
            if (codepoint['$>='](1114112)) {
              self.escape = ($a = ($b = self).$lambda, $a._p = (TMP_10 = function(){var self = TMP_10._s || this;

              return self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, codepoint_s['$+'](codepoint_str.$length())))}, TMP_10._s = self, TMP_10), $a).call($b);
              return ($breaker.$v = nil, $breaker);};
            self.escape = self.escape['$+'](codepoint.$chr((($a = ((($c = $scope.Encoding) == null ? $opal.cm('Encoding') : $c))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8)));
            return codepoint_s = codepoint_s['$+'](codepoint_str.$length()['$+'](1));}, TMP_9._s = self, TMP_9), $b).call($j);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($k = self.$literal()['$regexp?'](), $k !== false && $k !== nil ?escaped_char['$==']("\\") : $k)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((311)['$===']($case)) {self.escape = "";
          codepoints = self.$tok(self.escape_s['$+'](2), p['$-'](1));
          codepoint_s = self.escape_s['$+'](2);
          ($b = ($k = codepoints.$split(/[ \t]/)).$each, $b._p = (TMP_11 = function(codepoint_str){var self = TMP_11._s || this, $a, $b, TMP_12, $c, codepoint = nil;
            if (self.escape == null) self.escape = nil;
if (codepoint_str == null) codepoint_str = nil;
          codepoint = codepoint_str.$to_i(16);
            if (codepoint['$>='](1114112)) {
              self.escape = ($a = ($b = self).$lambda, $a._p = (TMP_12 = function(){var self = TMP_12._s || this;

              return self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, codepoint_s['$+'](codepoint_str.$length())))}, TMP_12._s = self, TMP_12), $a).call($b);
              return ($breaker.$v = nil, $breaker);};
            self.escape = self.escape['$+'](codepoint.$chr((($a = ((($c = $scope.Encoding) == null ? $opal.cm('Encoding') : $c))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8)));
            return codepoint_s = codepoint_s['$+'](codepoint_str.$length()['$+'](1));}, TMP_11._s = self, TMP_11), $b).call($k);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((93)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($l = self.$literal()['$regexp?'](), $l !== false && $l !== nil ?escaped_char['$==']("\\") : $l)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((120)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($l = self.$literal()['$regexp?'](), $l !== false && $l !== nil ?escaped_char['$==']("\\") : $l)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((295)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((96)['$===']($case)) {self.escape = ($b = ($l = self).$lambda, $b._p = (TMP_13 = function(){var self = TMP_13._s || this;

          return self.$diagnostic("fatal", "invalid_escape")}, TMP_13._s = self, TMP_13), $b).call($l);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($m = self.$literal()['$regexp?'](), $m !== false && $m !== nil ?escaped_char['$==']("\\") : $m)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((123)['$===']($case)) {self.escape = ($b = ($m = self).$lambda, $b._p = (TMP_14 = function(){var self = TMP_14._s || this;

          return self.$diagnostic("fatal", "invalid_escape")}, TMP_14._s = self, TMP_14), $b).call($m);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($n = self.$literal()['$regexp?'](), $n !== false && $n !== nil ?escaped_char['$==']("\\") : $n)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((298)['$===']($case)) {self.escape = ($b = ($n = self).$lambda, $b._p = (TMP_15 = function(){var self = TMP_15._s || this;

          return self.$diagnostic("fatal", "invalid_escape")}, TMP_15._s = self, TMP_15), $b).call($n);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((98)['$===']($case)) {self.escape = "\x7F";
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($o = self.$literal()['$regexp?'](), $o !== false && $o !== nil ?escaped_char['$==']("\\") : $o)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((125)['$===']($case)) {self.escape = "\x7F";
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($o = self.$literal()['$regexp?'](), $o !== false && $o !== nil ?escaped_char['$==']("\\") : $o)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((300)['$===']($case)) {self.escape = "\x7F";
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((95)['$===']($case)) {self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($o = self.$literal()['$regexp?'](), $o !== false && $o !== nil ?escaped_char['$==']("\\") : $o)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((122)['$===']($case)) {self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($o = self.$literal()['$regexp?'](), $o !== false && $o !== nil ?escaped_char['$==']("\\") : $o)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((297)['$===']($case)) {self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((112)['$===']($case)) {self.escape = self.$encode_escape(self.$tok(self.escape_s['$+'](1), p).$to_i(16));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($o = self.$literal()['$regexp?'](), $o !== false && $o !== nil ?escaped_char['$==']("\\") : $o)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((139)['$===']($case)) {self.escape = self.$encode_escape(self.$tok(self.escape_s['$+'](1), p).$to_i(16));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($o = self.$literal()['$regexp?'](), $o !== false && $o !== nil ?escaped_char['$==']("\\") : $o)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((314)['$===']($case)) {self.escape = self.$encode_escape(self.$tok(self.escape_s['$+'](1), p).$to_i(16));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((106)['$===']($case)) {self.escape = self.$tok(self.escape_s['$+'](1), p).$to_i(16).$chr((($b = ((($o = $scope.Encoding) == null ? $opal.cm('Encoding') : $o))._scope).UTF_8 == null ? $b.cm('UTF_8') : $b.UTF_8));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($o = self.$literal()['$regexp?'](), $o !== false && $o !== nil ?escaped_char['$==']("\\") : $o)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((133)['$===']($case)) {self.escape = self.$tok(self.escape_s['$+'](1), p).$to_i(16).$chr((($b = ((($o = $scope.Encoding) == null ? $opal.cm('Encoding') : $o))._scope).UTF_8 == null ? $b.cm('UTF_8') : $b.UTF_8));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($o = self.$literal()['$regexp?'](), $o !== false && $o !== nil ?escaped_char['$==']("\\") : $o)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((308)['$===']($case)) {self.escape = self.$tok(self.escape_s['$+'](1), p).$to_i(16).$chr((($b = ((($o = $scope.Encoding) == null ? $opal.cm('Encoding') : $o))._scope).UTF_8 == null ? $b.cm('UTF_8') : $b.UTF_8));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((111)['$===']($case)) {self.escape = ($b = ($o = self).$lambda, $b._p = (TMP_16 = function(){var self = TMP_16._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range(self.escape_s['$-'](1), p['$+'](2)))}, TMP_16._s = self, TMP_16), $b).call($o);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($p = self.$literal()['$regexp?'](), $p !== false && $p !== nil ?escaped_char['$==']("\\") : $p)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((138)['$===']($case)) {self.escape = ($b = ($p = self).$lambda, $b._p = (TMP_17 = function(){var self = TMP_17._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range(self.escape_s['$-'](1), p['$+'](2)))}, TMP_17._s = self, TMP_17), $b).call($p);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($q = self.$literal()['$regexp?'](), $q !== false && $q !== nil ?escaped_char['$==']("\\") : $q)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((313)['$===']($case)) {self.escape = ($b = ($q = self).$lambda, $b._p = (TMP_18 = function(){var self = TMP_18._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range(self.escape_s['$-'](1), p['$+'](2)))}, TMP_18._s = self, TMP_18), $b).call($q);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((105)['$===']($case)) {self.escape = ($b = ($r = self).$lambda, $b._p = (TMP_19 = function(){var self = TMP_19._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_19._s = self, TMP_19), $b).call($r);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($s = self.$literal()['$regexp?'](), $s !== false && $s !== nil ?escaped_char['$==']("\\") : $s)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((132)['$===']($case)) {self.escape = ($b = ($s = self).$lambda, $b._p = (TMP_20 = function(){var self = TMP_20._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_20._s = self, TMP_20), $b).call($s);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($t = self.$literal()['$regexp?'](), $t !== false && $t !== nil ?escaped_char['$==']("\\") : $t)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((307)['$===']($case)) {self.escape = ($b = ($t = self).$lambda, $b._p = (TMP_21 = function(){var self = TMP_21._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_21._s = self, TMP_21), $b).call($t);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((108)['$===']($case)) {self.escape = ($b = ($u = self).$lambda, $b._p = (TMP_22 = function(){var self = TMP_22._s || this;

          return self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range(p['$-'](1), p))}, TMP_22._s = self, TMP_22), $b).call($u);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($v = self.$literal()['$regexp?'](), $v !== false && $v !== nil ?escaped_char['$==']("\\") : $v)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((135)['$===']($case)) {self.escape = ($b = ($v = self).$lambda, $b._p = (TMP_23 = function(){var self = TMP_23._s || this;

          return self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range(p['$-'](1), p))}, TMP_23._s = self, TMP_23), $b).call($v);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($w = self.$literal()['$regexp?'](), $w !== false && $w !== nil ?escaped_char['$==']("\\") : $w)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((310)['$===']($case)) {self.escape = ($b = ($w = self).$lambda, $b._p = (TMP_24 = function(){var self = TMP_24._s || this;

          return self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range(p['$-'](1), p))}, TMP_24._s = self, TMP_24), $b).call($w);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((94)['$===']($case)) {self.$diagnostic("fatal", "escape_eof", nil, self.$range(p['$-'](1), p));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($x = self.$literal()['$regexp?'](), $x !== false && $x !== nil ?escaped_char['$==']("\\") : $x)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((121)['$===']($case)) {self.$diagnostic("fatal", "escape_eof", nil, self.$range(p['$-'](1), p));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($x = self.$literal()['$regexp?'](), $x !== false && $x !== nil ?escaped_char['$==']("\\") : $x)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((296)['$===']($case)) {self.$diagnostic("fatal", "escape_eof", nil, self.$range(p['$-'](1), p));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((145)['$===']($case)) {self.escape_s = p;
          self.escape = nil;;
          self.te = p['$+'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($x = self.$literal()['$regexp?'](), $x !== false && $x !== nil ?escaped_char['$==']("\\") : $x)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((150)['$===']($case)) {self.escape_s = p;
          self.escape = nil;;
          self.te = p['$+'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($x = self.$literal()['$regexp?'](), $x !== false && $x !== nil ?escaped_char['$==']("\\") : $x)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((62)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.newline_s = p;}else if ((24)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          tm = p;}else if ((26)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          tm = p;}else if ((28)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          tm = p;}else if ((165)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((184)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((192)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((27)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p['$+'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((222)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((216)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((233)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((245)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((241)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((261)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((331)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((328)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);
          self.cs = 156;
          _goto_level = _again;
          continue;;;;}else if ((405)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((347)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);
          self.cs = 913;
          _goto_level = _again;
          continue;;;;}else if ((78)['$===']($case)) {if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.te = p;
          p = p['$-'](1);;}else if ((215)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          if ((($b = self.$literal()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$start_interp_brace()};;
          self.te = p;
          p = p['$-'](1);
          if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
            p = self.ts['$-'](1);
            self.cs = 739;
            _goto_level = _again;
            continue;;;
            } else {
            self.$emit("tLCURLY", "{", self.te['$-'](1), self.te);
            self.cs = 731;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };;}else if ((235)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          if ((($b = self.$literal()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$start_interp_brace()};;
          self.te = p;
          p = p['$-'](1);
          self.$emit("tLBRACE_ARG");
          self.cs = 731;;;}else if ((323)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          if ((($b = self.$literal()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$start_interp_brace()};;
          self.te = p;
          p = p['$-'](1);
          if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
            self.lambda_stack.$pop();
            self.$emit("tLAMBEG");
            } else {
            self.$emit_table((($b = $scope.PUNCTUATION_BEGIN) == null ? $opal.cm('PUNCTUATION_BEGIN') : $b))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((417)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          if ((($b = self.$literal()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$start_interp_brace()};;
          self.te = p;
          p = p['$-'](1);
          if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
            self.lambda_stack.$pop();
            if (self.$tok()['$==']("{")) {
              self.$emit("tLAMBEG")
              } else {
              self.$emit("kDO_LAMBDA")
            };
          } else if (self.$tok()['$==']("{")) {
            self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b))
            } else {
            self.$emit_do()
          };
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((418)['$===']($case)) {if ((($b = self.$literal()) !== nil && (!$b._isBoolean || $b == true))) {
            if ((($b = self.$literal().$end_interp_brace_and_try_closing()) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = self['$version?'](18, 19)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$emit("tRCURLY", "}", p['$-'](1), p)
                } else {
                self.$emit("tSTRING_DEND", "}", p['$-'](1), p)
              };
              if ((($b = self.$literal().$saved_herebody_s()) !== nil && (!$b._isBoolean || $b == true))) {
                self.herebody_s = self.$literal().$saved_herebody_s()};
              p = p['$-'](1);
              self.cs = (self.$stack_pop());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;}};
          self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cond.$lexpop();
          self.cmdarg.$lexpop();
          if ((($b = ["}", "]"]['$include?'](self.$tok())) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 487};
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((64)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());}else if ((67)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.newline_s = p;}else if ((168)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((183)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((195)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((218)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((231)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((243)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((267)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((330)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((351)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((80)['$===']($case)) {self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((189)['$===']($case)) {tm = p;
          self.te = p;
          p = p['$-'](1);
          self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
          self.cs = (self.$arg_or_cmdarg());
          p = tm['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((279)['$===']($case)) {tm = p;
          self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1), tm), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((252)['$===']($case)) {tm = p;
          self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((343)['$===']($case)) {tm = p;
          self.te = p;
          p = p['$-'](1);
          if (tm['$=='](self.te)) {
            self.$emit("tFID")
            } else {
            self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
            p = tm['$-'](1);
          };
          self.cs = 451;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((345)['$===']($case)) {tm = p;
          $case = self.act;if ((110)['$===']($case)) {p = ((self.te))['$-'](1);
          if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
            self.lambda_stack.$pop();
            if (self.$tok()['$==']("{")) {
              self.$emit("tLAMBEG")
              } else {
              self.$emit("kDO_LAMBDA")
            };
          } else if (self.$tok()['$==']("{")) {
            self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b))
            } else {
            self.$emit_do()
          };
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((111)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 310;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((112)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("kCLASS", "class", self.ts, self.ts['$+'](5));
          self.$emit("tLSHFT", "<<", self.te['$-'](2), self.te);
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((113)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((114)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((115)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          self.cs = 495;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((116)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          if ((($b = ($x = self['$version?'](18), $x !== false && $x !== nil ?self.$tok()['$==']("not") : $x)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 519;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = 451;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((117)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tIDENTIFIER");
            if ((($b = ($x = self.static_env['$nil?']()['$!'](), $x !== false && $x !== nil ?self.static_env['$declared?'](self.$tok()) : $x)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = 739
              } else {
              self.cs = (self.$arg_or_cmdarg())
            };
            } else {
            self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((118)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $b));
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((119)['$===']($case)) {p = ((self.te))['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($x = ($y = digits['$empty?'](), $y !== false && $y !== nil ?self.num_base['$=='](8) : $y), $x !== false && $x !== nil ?self['$version?'](18) : $x)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($x = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $x)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((121)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok(self.te['$-'](1), self.te)}), self.$range(self.te['$-'](1), self.te))
            } else {
            self.$emit("tINTEGER", self.$tok(self.ts, self.te['$-'](1)).$to_i());
            p = p['$-'](1);
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((122)['$===']($case)) {p = ((self.te))['$-'](1);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok(self.te['$-'](1), self.te)}), self.$range(self.te['$-'](1), self.te))
            } else {
            self.$emit("tFLOAT", self.$tok(self.ts, self.te['$-'](1)).$to_f());
            p = p['$-'](1);
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((123)['$===']($case)) {p = ((self.te))['$-'](1);
          digits = self.$tok(self.ts, self.num_suffix_s);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tFLOAT", self.$Float(digits));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits)
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((125)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tCONSTANT");
          self.cs = (self.$arg_or_cmdarg());
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((129)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tIDENTIFIER");
          if ((($b = ($x = self.static_env['$nil?']()['$!'](), $x !== false && $x !== nil ?self.static_env['$declared?'](self.$tok()) : $x)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 739;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = (self.$arg_or_cmdarg());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((130)['$===']($case)) {p = ((self.te))['$-'](1);
          if (tm['$=='](self.te)) {
            self.$emit("tFID")
            } else {
            self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
            p = tm['$-'](1);
          };
          self.cs = 451;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;};}else if ((190)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
          self.cs = (self.$arg_or_cmdarg());
          p = tm['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((280)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1), tm), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((254)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((344)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          if (tm['$=='](self.te)) {
            self.$emit("tFID")
            } else {
            self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
            p = tm['$-'](1);
          };
          self.cs = 451;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((281)['$===']($case)) {tm = p;
          self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1), tm), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((255)['$===']($case)) {tm = p;
          self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((282)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1), tm), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((256)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((286)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1), tm), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((259)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((285)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1), tm), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((258)['$===']($case)) {tm = p['$-'](2);
          $case = self.act;if ((94)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION_BEGIN) == null ? $opal.cm('PUNCTUATION_BEGIN') : $b));
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((95)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $b), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 495;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((96)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $b));
          self.cs = 731;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;}else if ((98)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;}else if ((99)['$===']($case)) {p = ((self.te))['$-'](1);
          self.$emit("tIDENTIFIER");
          if ((($b = ($x = self.static_env['$nil?']()['$!'](), $x !== false && $x !== nil ?self.static_env['$declared?'](self.$tok()) : $x)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 739;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = (self.$arg_or_cmdarg());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };}else if ((102)['$===']($case)) {p = ((self.te))['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;};}else if ((283)['$===']($case)) {tm = p['$-'](3);
          self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1), tm), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((257)['$===']($case)) {tm = p['$-'](3);
          self.te = p;
          p = p['$-'](1);
          p = self.ts['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;;}else if ((284)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          self.$emit("tSYMBOL", self.$tok(self.ts['$+'](1), tm), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((400)['$===']($case)) {tm = p['$-'](2);
          self.te = p;
          p = p['$-'](1);
          self.$emit("tCONSTANT", self.$tok(self.ts, tm), self.ts, tm);
          p = tm['$-'](1);
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((214)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);;
          self.te = p;
          p = p['$-'](1);
          self.$emit("tLBRACK", "[", self.te['$-'](1), self.te);
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((315)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);;
          self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION_BEGIN) == null ? $opal.cm('PUNCTUATION_BEGIN') : $b));
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((403)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);;
          self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((206)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          self.paren_nest = self.paren_nest['$+'](1);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tLPAREN2", "(", self.te['$-'](1), self.te);
            self.cs = 731;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.$emit("tLPAREN_ARG", "(", self.te['$-'](1), self.te);
            self.cs = 519;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };;}else if ((219)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          self.paren_nest = self.paren_nest['$+'](1);;
          self.te = p;
          p = p['$-'](1);
          self.$emit("tLPAREN2");
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((225)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          self.paren_nest = self.paren_nest['$+'](1);;
          self.te = p;
          p = p['$-'](1);
          self.$emit("tLPAREN_ARG", "(", self.te['$-'](1), self.te);
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 731;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            self.cs = 519;
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
          };;;}else if ((272)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          self.paren_nest = self.paren_nest['$+'](1);;
          self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION_BEGIN) == null ? $opal.cm('PUNCTUATION_BEGIN') : $b));
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((355)['$===']($case)) {self.cond.$push(false);
          self.cmdarg.$push(false);
          self.paren_nest = self.paren_nest['$+'](1);;
          self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cs = 519;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((356)['$===']($case)) {self.paren_nest = self.paren_nest['$-'](1);
          self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.PUNCTUATION) == null ? $opal.cm('PUNCTUATION') : $b));
          self.cond.$lexpop();
          self.cmdarg.$lexpop();
          if ((($b = ["}", "]"]['$include?'](self.$tok())) !== nil && (!$b._isBoolean || $b == true))) {
            self.cs = 487};
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((50)['$===']($case)) {self.heredoc_e = p;
          self.newline_s = p;}else if ((287)['$===']($case)) {new_herebody_s = p;
          self.te = p;
          p = p['$-'](1);
          self.$tok(self.ts, self.heredoc_e)['$=~'](/^<<(-?)(["'`]?)(.*)\2$/);
          indent = nil['$empty?']()['$!']();
          type = "<<"['$+'](((function() {if ((($b = nil['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            return "\""
            } else {
            return nil
          }; return nil; })()));
          delimiter = nil;
          self.cs = (self.$push_literal(type, delimiter, self.ts, self.heredoc_e, indent));
          if ((($b = self.herebody_s['$nil?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.herebody_s = new_herebody_s};
          p = self.herebody_s['$-'](1);;;}else if ((319)['$===']($case)) {tm = p;
          self.te = p;
          p = p['$-'](1);
          self.$emit_table((($b = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $b), self.ts, tm);
          p = tm['$-'](1);
          self.cs = 495;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((390)['$===']($case)) {self.num_base = 16;
          self.num_digits_s = p;;
          self.num_suffix_s = p;}else if ((384)['$===']($case)) {self.num_base = 10;
          self.num_digits_s = p;;
          self.num_suffix_s = p;}else if ((387)['$===']($case)) {self.num_base = 8;
          self.num_digits_s = p;;
          self.num_suffix_s = p;}else if ((381)['$===']($case)) {self.num_base = 2;
          self.num_digits_s = p;;
          self.num_suffix_s = p;}else if ((396)['$===']($case)) {self.num_base = 10;
          self.num_digits_s = self.ts;;
          self.num_suffix_s = p;}else if ((365)['$===']($case)) {self.num_base = 8;
          self.num_digits_s = self.ts;;
          self.num_suffix_s = p;}else if ((397)['$===']($case)) {self.num_suffix_s = p;
          self.num_xfrm = ($b = ($x = self).$lambda, $b._p = (TMP_25 = function(chars){var self = TMP_25._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_25._s = self, TMP_25), $b).call($x);}else if ((8)['$===']($case)) {self.te = p['$+'](1);
          self.newline_s = p;}else if ((174)['$===']($case)) {self.te = p['$+'](1);
          self.act = 25;}else if ((161)['$===']($case)) {self.te = p['$+'](1);
          self.act = 26;}else if ((157)['$===']($case)) {self.te = p['$+'](1);
          self.act = 27;}else if ((20)['$===']($case)) {self.te = p['$+'](1);
          self.act = 51;}else if ((208)['$===']($case)) {self.te = p['$+'](1);
          self.act = 52;}else if ((21)['$===']($case)) {self.te = p['$+'](1);
          self.act = 57;}else if ((200)['$===']($case)) {self.te = p['$+'](1);
          self.act = 58;}else if ((226)['$===']($case)) {self.te = p['$+'](1);
          self.act = 64;}else if ((39)['$===']($case)) {self.te = p['$+'](1);
          self.act = 65;}else if ((247)['$===']($case)) {self.te = p['$+'](1);
          self.act = 72;}else if ((236)['$===']($case)) {self.te = p['$+'](1);
          self.act = 73;}else if ((250)['$===']($case)) {self.te = p['$+'](1);
          self.act = 94;}else if ((318)['$===']($case)) {self.te = p['$+'](1);
          self.act = 95;}else if ((317)['$===']($case)) {self.te = p['$+'](1);
          self.act = 96;}else if ((54)['$===']($case)) {self.te = p['$+'](1);
          self.act = 98;}else if ((248)['$===']($case)) {self.te = p['$+'](1);
          self.act = 99;}else if ((251)['$===']($case)) {self.te = p['$+'](1);
          self.act = 102;}else if ((413)['$===']($case)) {self.te = p['$+'](1);
          self.act = 110;}else if ((408)['$===']($case)) {self.te = p['$+'](1);
          self.act = 111;}else if ((416)['$===']($case)) {self.te = p['$+'](1);
          self.act = 113;}else if ((409)['$===']($case)) {self.te = p['$+'](1);
          self.act = 114;}else if ((410)['$===']($case)) {self.te = p['$+'](1);
          self.act = 115;}else if ((415)['$===']($case)) {self.te = p['$+'](1);
          self.act = 116;}else if ((407)['$===']($case)) {self.te = p['$+'](1);
          self.act = 117;}else if ((402)['$===']($case)) {self.te = p['$+'](1);
          self.act = 118;}else if ((337)['$===']($case)) {self.te = p['$+'](1);
          self.act = 119;}else if ((367)['$===']($case)) {self.te = p['$+'](1);
          self.act = 122;}else if ((61)['$===']($case)) {self.te = p['$+'](1);
          self.act = 123;}else if ((340)['$===']($case)) {self.te = p['$+'](1);
          self.act = 125;}else if ((332)['$===']($case)) {self.te = p['$+'](1);
          self.act = 129;}else if ((342)['$===']($case)) {self.te = p['$+'](1);
          self.act = 130;}else if ((151)['$===']($case)) {self.newline_s = p;
          self.te = p['$+'](1);
          if (self.te['$=='](pe)) {
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.$literal().$str_s(), self.$literal().$str_s()['$+'](1)))};
          if ((($b = self.$literal()['$heredoc?']()) !== nil && (!$b._isBoolean || $b == true))) {
            line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "");
            if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
              line = line.$gsub(/\r.*$/, "")};
            if ((($b = self.$literal().$nest_and_try_closing(line, self.herebody_s, self.ts)) !== nil && (!$b._isBoolean || $b == true))) {
              self.herebody_s = self.te;
              p = self.$literal().$heredoc_e()['$-'](1);
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;
              } else {
              self.herebody_s = self.te
            };
            } else {
            if ((($b = self.$literal().$nest_and_try_closing(self.$tok(), self.ts, self.te)) !== nil && (!$b._isBoolean || $b == true))) {
              self.cs = (self.$pop_literal());
              p = p['$+'](1);
              _goto_level = _out;
              continue;;;};
            if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
              p = self.herebody_s['$-'](1);
              self.herebody_s = nil;};
          };
          if ((($b = ($y = self.$literal()['$words?'](), $y !== false && $y !== nil ?self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $y)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$literal().$extend_space(self.ts, self.te)
            } else {
            self.$literal().$extend_string(self.$tok(), self.ts, self.te);
            self.$literal().$flush_string();
          };;;
          self.escape_s = p;
          self.escape = nil;;}else if ((99)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((126)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((301)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((104)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((131)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((306)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((103)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((130)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((305)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((101)['$===']($case)) {self.escape = "\x7F";
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((128)['$===']($case)) {self.escape = "\x7F";
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((303)['$===']($case)) {self.escape = "\x7F";
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((97)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((124)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($y = self.$literal()['$regexp?'](), $y !== false && $y !== nil ?escaped_char['$==']("\\") : $y)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((299)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((110)['$===']($case)) {self.escape = ($b = ($y = self).$lambda, $b._p = (TMP_26 = function(){var self = TMP_26._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_26._s = self, TMP_26), $b).call($y);
          self.escape = "";
          codepoints = self.$tok(self.escape_s['$+'](2), p['$-'](1));
          codepoint_s = self.escape_s['$+'](2);
          ($b = ($z = codepoints.$split(/[ \t]/)).$each, $b._p = (TMP_27 = function(codepoint_str){var self = TMP_27._s || this, $a, $b, TMP_28, $c, codepoint = nil;
            if (self.escape == null) self.escape = nil;
if (codepoint_str == null) codepoint_str = nil;
          codepoint = codepoint_str.$to_i(16);
            if (codepoint['$>='](1114112)) {
              self.escape = ($a = ($b = self).$lambda, $a._p = (TMP_28 = function(){var self = TMP_28._s || this;

              return self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, codepoint_s['$+'](codepoint_str.$length())))}, TMP_28._s = self, TMP_28), $a).call($b);
              return ($breaker.$v = nil, $breaker);};
            self.escape = self.escape['$+'](codepoint.$chr((($a = ((($c = $scope.Encoding) == null ? $opal.cm('Encoding') : $c))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8)));
            return codepoint_s = codepoint_s['$+'](codepoint_str.$length()['$+'](1));}, TMP_27._s = self, TMP_27), $b).call($z);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($aa = self.$literal()['$regexp?'](), $aa !== false && $aa !== nil ?escaped_char['$==']("\\") : $aa)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((137)['$===']($case)) {self.escape = ($b = ($aa = self).$lambda, $b._p = (TMP_29 = function(){var self = TMP_29._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_29._s = self, TMP_29), $b).call($aa);
          self.escape = "";
          codepoints = self.$tok(self.escape_s['$+'](2), p['$-'](1));
          codepoint_s = self.escape_s['$+'](2);
          ($b = ($ab = codepoints.$split(/[ \t]/)).$each, $b._p = (TMP_30 = function(codepoint_str){var self = TMP_30._s || this, $a, $b, TMP_31, $c, codepoint = nil;
            if (self.escape == null) self.escape = nil;
if (codepoint_str == null) codepoint_str = nil;
          codepoint = codepoint_str.$to_i(16);
            if (codepoint['$>='](1114112)) {
              self.escape = ($a = ($b = self).$lambda, $a._p = (TMP_31 = function(){var self = TMP_31._s || this;

              return self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, codepoint_s['$+'](codepoint_str.$length())))}, TMP_31._s = self, TMP_31), $a).call($b);
              return ($breaker.$v = nil, $breaker);};
            self.escape = self.escape['$+'](codepoint.$chr((($a = ((($c = $scope.Encoding) == null ? $opal.cm('Encoding') : $c))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8)));
            return codepoint_s = codepoint_s['$+'](codepoint_str.$length()['$+'](1));}, TMP_30._s = self, TMP_30), $b).call($ab);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ac = self.$literal()['$regexp?'](), $ac !== false && $ac !== nil ?escaped_char['$==']("\\") : $ac)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((312)['$===']($case)) {self.escape = ($b = ($ac = self).$lambda, $b._p = (TMP_32 = function(){var self = TMP_32._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_32._s = self, TMP_32), $b).call($ac);
          self.escape = "";
          codepoints = self.$tok(self.escape_s['$+'](2), p['$-'](1));
          codepoint_s = self.escape_s['$+'](2);
          ($b = ($ad = codepoints.$split(/[ \t]/)).$each, $b._p = (TMP_33 = function(codepoint_str){var self = TMP_33._s || this, $a, $b, TMP_34, $c, codepoint = nil;
            if (self.escape == null) self.escape = nil;
if (codepoint_str == null) codepoint_str = nil;
          codepoint = codepoint_str.$to_i(16);
            if (codepoint['$>='](1114112)) {
              self.escape = ($a = ($b = self).$lambda, $a._p = (TMP_34 = function(){var self = TMP_34._s || this;

              return self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, codepoint_s['$+'](codepoint_str.$length())))}, TMP_34._s = self, TMP_34), $a).call($b);
              return ($breaker.$v = nil, $breaker);};
            self.escape = self.escape['$+'](codepoint.$chr((($a = ((($c = $scope.Encoding) == null ? $opal.cm('Encoding') : $c))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8)));
            return codepoint_s = codepoint_s['$+'](codepoint_str.$length()['$+'](1));}, TMP_33._s = self, TMP_33), $b).call($ad);;
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((107)['$===']($case)) {self.escape = ($b = ($ae = self).$lambda, $b._p = (TMP_35 = function(){var self = TMP_35._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_35._s = self, TMP_35), $b).call($ae);
          self.escape = ($b = ($af = self).$lambda, $b._p = (TMP_36 = function(){var self = TMP_36._s || this;

          return self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range(p['$-'](1), p))}, TMP_36._s = self, TMP_36), $b).call($af);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ag = self.$literal()['$regexp?'](), $ag !== false && $ag !== nil ?escaped_char['$==']("\\") : $ag)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((134)['$===']($case)) {self.escape = ($b = ($ag = self).$lambda, $b._p = (TMP_37 = function(){var self = TMP_37._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_37._s = self, TMP_37), $b).call($ag);
          self.escape = ($b = ($ah = self).$lambda, $b._p = (TMP_38 = function(){var self = TMP_38._s || this;

          return self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range(p['$-'](1), p))}, TMP_38._s = self, TMP_38), $b).call($ah);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ai = self.$literal()['$regexp?'](), $ai !== false && $ai !== nil ?escaped_char['$==']("\\") : $ai)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((309)['$===']($case)) {self.escape = ($b = ($ai = self).$lambda, $b._p = (TMP_39 = function(){var self = TMP_39._s || this;
            if (self.escape_s == null) self.escape_s = nil;

          return self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range(self.escape_s['$-'](1), p))}, TMP_39._s = self, TMP_39), $b).call($ai);
          self.escape = ($b = ($aj = self).$lambda, $b._p = (TMP_40 = function(){var self = TMP_40._s || this;

          return self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range(p['$-'](1), p))}, TMP_40._s = self, TMP_40), $b).call($aj);
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((92)['$===']($case)) {self.escape_s = p;
          self.escape = nil;;
          self.$diagnostic("fatal", "escape_eof", nil, self.$range(p['$-'](1), p));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ak = self.$literal()['$regexp?'](), $ak !== false && $ak !== nil ?escaped_char['$==']("\\") : $ak)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((119)['$===']($case)) {self.escape_s = p;
          self.escape = nil;;
          self.$diagnostic("fatal", "escape_eof", nil, self.$range(p['$-'](1), p));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ak = self.$literal()['$regexp?'](), $ak !== false && $ak !== nil ?escaped_char['$==']("\\") : $ak)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((65)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.newline_s = p;}else if ((167)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((182)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((194)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((217)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);
          self.cs = 739;
          _goto_level = _again;
          continue;;;;}else if ((230)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((242)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((266)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((329)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((350)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((79)['$===']($case)) {self.sharp_s = p['$-'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.te = p;
          p = p['$-'](1);;}else if ((392)['$===']($case)) {self.num_base = 10;
          self.num_digits_s = self.ts;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($ak = self).$lambda, $b._p = (TMP_41 = function(chars){var self = TMP_41._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_41._s = self, TMP_41), $b).call($ak);}else if ((362)['$===']($case)) {self.num_base = 8;
          self.num_digits_s = self.ts;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($al = self).$lambda, $b._p = (TMP_42 = function(chars){var self = TMP_42._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_42._s = self, TMP_42), $b).call($al);}else if ((374)['$===']($case)) {self.num_suffix_s = p;
          self.num_xfrm = ($b = ($am = self).$lambda, $b._p = (TMP_43 = function(chars){var self = TMP_43._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_43._s = self, TMP_43), $b).call($am);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($an = ($ao = digits['$empty?'](), $ao !== false && $ao !== nil ?self.num_base['$=='](8) : $ao), $an !== false && $an !== nil ?self['$version?'](18) : $an)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($an = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $an)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((369)['$===']($case)) {self.num_suffix_s = p;
          self.num_xfrm = ($b = ($an = self).$lambda, $b._p = (TMP_44 = function(chars){var self = TMP_44._s || this;
if (chars == null) chars = nil;
          return self.$emit("tFLOAT", self.$Float(chars))}, TMP_44._s = self, TMP_44), $b).call($an);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.ts, self.num_suffix_s);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tFLOAT", self.$Float(digits));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits)
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((366)['$===']($case)) {self.num_suffix_s = p;
          self.num_xfrm = ($b = ($ao = self).$lambda, $b._p = (TMP_45 = function(chars){var self = TMP_45._s || this;
if (chars == null) chars = nil;
          return self.$emit("tFLOAT", self.$Float(chars))}, TMP_45._s = self, TMP_45), $b).call($ao);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.ts, self.num_suffix_s);
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tFLOAT", self.$Float(digits));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits)
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((221)['$===']($case)) {self.te = p['$+'](1);
          self.newline_s = p;
          self.act = 58;}else if ((29)['$===']($case)) {self.te = p['$+'](1);
          if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.act = 57;}else if ((40)['$===']($case)) {self.te = p['$+'](1);
          if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          self.act = 65;}else if ((68)['$===']($case)) {self.te = p['$+'](1);
          self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
            return p['$-'](2)
            } else {
            return p
          }; return nil; })());
          self.act = 112;}else if ((31)['$===']($case)) {self.te = p['$+'](1);
          tm = p;
          self.act = 52;}else if ((321)['$===']($case)) {self.te = p['$+'](1);
          tm = p;
          self.act = 98;}else if ((320)['$===']($case)) {self.te = p['$+'](1);
          tm = p;
          self.act = 99;}else if ((393)['$===']($case)) {self.te = p['$+'](1);
          self.num_base = 10;
          self.num_digits_s = self.ts;;
          self.act = 119;}else if ((102)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ap = self.$literal()['$regexp?'](), $ap !== false && $ap !== nil ?escaped_char['$==']("\\") : $ap)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((129)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ap = self.$literal()['$regexp?'](), $ap !== false && $ap !== nil ?escaped_char['$==']("\\") : $ap)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((304)['$===']($case)) {char$ = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = (($b = $scope.ESCAPES) == null ? $opal.cm('ESCAPES') : $b).$fetch(char$, char$);;
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((100)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ap = self.$literal()['$regexp?'](), $ap !== false && $ap !== nil ?escaped_char['$==']("\\") : $ap)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((127)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.$literal().$nest_and_try_closing("\\", self.ts, self.ts['$+'](1))) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.escape_s['$-'](1);
            self.cs = (self.$pop_literal());
            p = p['$+'](1);
            _goto_level = _out;
            continue;;;
            } else {
            escaped_char = self.source['$[]'](self.escape_s).$chr();
            if ((($b = self.$literal()['$munge_escape?'](escaped_char)) !== nil && (!$b._isBoolean || $b == true))) {
              if ((($b = ($ap = self.$literal()['$regexp?'](), $ap !== false && $ap !== nil ?escaped_char['$==']("\\") : $ap)) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok(), self.ts, self.te)
                } else {
                self.$literal().$extend_string(escaped_char, self.ts, self.te)
              }
              } else {
              if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
                self.escape.$call()};
              if ((($b = self.$literal()['$regexp?']()) !== nil && (!$b._isBoolean || $b == true))) {
                self.$literal().$extend_string(self.$tok().$gsub("\\\n", ""), self.ts, self.te)
                } else {
                self.$literal().$extend_string(((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok()), self.ts, self.te)
              };
            };
          };;}else if ((302)['$===']($case)) {self.escape = self.source['$[]'](p['$-'](1)).$chr();
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));
          self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));
          self.te = p;
          p = p['$-'](1);
          if ((($b = self.escape['$respond_to?']("call")) !== nil && (!$b._isBoolean || $b == true))) {
            self.escape.$call()};
          value = ((($b = self.escape) !== false && $b !== nil) ? $b : self.$tok(self.ts['$+'](1)));
          if ((($b = self['$version?'](18)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", value['$[]'](0).$ord())
            } else {
            self.$emit("tCHARACTER", value)
          };
          self.cs = 739;
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((388)['$===']($case)) {self.num_base = 16;
          self.num_digits_s = p;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($ap = self).$lambda, $b._p = (TMP_46 = function(chars){var self = TMP_46._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_46._s = self, TMP_46), $b).call($ap);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($aq = ($ar = digits['$empty?'](), $ar !== false && $ar !== nil ?self.num_base['$=='](8) : $ar), $aq !== false && $aq !== nil ?self['$version?'](18) : $aq)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($aq = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $aq)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((382)['$===']($case)) {self.num_base = 10;
          self.num_digits_s = p;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($aq = self).$lambda, $b._p = (TMP_47 = function(chars){var self = TMP_47._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_47._s = self, TMP_47), $b).call($aq);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($ar = ($as = digits['$empty?'](), $as !== false && $as !== nil ?self.num_base['$=='](8) : $as), $ar !== false && $ar !== nil ?self['$version?'](18) : $ar)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($ar = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $ar)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((385)['$===']($case)) {self.num_base = 8;
          self.num_digits_s = p;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($ar = self).$lambda, $b._p = (TMP_48 = function(chars){var self = TMP_48._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_48._s = self, TMP_48), $b).call($ar);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($as = ($at = digits['$empty?'](), $at !== false && $at !== nil ?self.num_base['$=='](8) : $at), $as !== false && $as !== nil ?self['$version?'](18) : $as)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($as = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $as)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((379)['$===']($case)) {self.num_base = 2;
          self.num_digits_s = p;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($as = self).$lambda, $b._p = (TMP_49 = function(chars){var self = TMP_49._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_49._s = self, TMP_49), $b).call($as);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($at = ($au = digits['$empty?'](), $au !== false && $au !== nil ?self.num_base['$=='](8) : $au), $at !== false && $at !== nil ?self['$version?'](18) : $at)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($at = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $at)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((391)['$===']($case)) {self.num_base = 10;
          self.num_digits_s = self.ts;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($at = self).$lambda, $b._p = (TMP_50 = function(chars){var self = TMP_50._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_50._s = self, TMP_50), $b).call($at);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($au = ($av = digits['$empty?'](), $av !== false && $av !== nil ?self.num_base['$=='](8) : $av), $au !== false && $au !== nil ?self['$version?'](18) : $au)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($au = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $au)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((361)['$===']($case)) {self.num_base = 8;
          self.num_digits_s = self.ts;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($au = self).$lambda, $b._p = (TMP_51 = function(chars){var self = TMP_51._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_51._s = self, TMP_51), $b).call($au);
          self.te = p;
          p = p['$-'](1);
          digits = self.$tok(self.num_digits_s, self.num_suffix_s);
          if ((($b = digits['$end_with?']("_")) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_"}), self.$range(self.te['$-'](1), self.te))
          } else if ((($b = ($av = ($aw = digits['$empty?'](), $aw !== false && $aw !== nil ?self.num_base['$=='](8) : $aw), $av !== false && $av !== nil ?self['$version?'](18) : $av)) !== nil && (!$b._isBoolean || $b == true))) {
            digits = "0"
          } else if ((($b = digits['$empty?']()) !== nil && (!$b._isBoolean || $b == true))) {
            self.$diagnostic("error", "empty_numeric")
          } else if ((($b = (($av = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : $av)) !== nil && (!$b._isBoolean || $b == true))) {
            invalid_s = self.num_digits_s['$+'](invalid_idx);
            self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, invalid_s['$+'](1)));};
          if ((($b = self['$version?'](18, 19, 20)) !== nil && (!$b._isBoolean || $b == true))) {
            self.$emit("tINTEGER", digits.$to_i(self.num_base));
            p = self.num_suffix_s['$-'](1);
            } else {
            self.num_xfrm.$call(digits.$to_i(self.num_base))
          };
          p = p['$+'](1);
          _goto_level = _out;
          continue;;;;;}else if ((25)['$===']($case)) {self.te = p['$+'](1);
          if ((($b = self.herebody_s) !== nil && (!$b._isBoolean || $b == true))) {
            p = self.herebody_s;
            self.herebody_s = nil;};
          tm = p;
          self.act = 52;}else if ((398)['$===']($case)) {self.te = p['$+'](1);
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($av = self).$lambda, $b._p = (TMP_52 = function(chars){var self = TMP_52._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_52._s = self, TMP_52), $b).call($av);
          self.act = 121;}else if ((394)['$===']($case)) {self.te = p['$+'](1);
          self.num_base = 10;
          self.num_digits_s = self.ts;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($aw = self).$lambda, $b._p = (TMP_53 = function(chars){var self = TMP_53._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_53._s = self, TMP_53), $b).call($aw);
          self.act = 121;}else if ((364)['$===']($case)) {self.te = p['$+'](1);
          self.num_base = 8;
          self.num_digits_s = self.ts;;
          self.num_suffix_s = p;
          self.num_xfrm = ($b = ($ax = self).$lambda, $b._p = (TMP_54 = function(chars){var self = TMP_54._s || this;
if (chars == null) chars = nil;
          return self.$emit("tINTEGER", chars)}, TMP_54._s = self, TMP_54), $b).call($ax);
          self.act = 121;}};};
      if (_goto_level['$<='](_again)) {
        $case = _lex_to_state_actions['$[]'](self.cs);if ((73)['$===']($case)) {self.ts = nil};
        if (self.cs['$=='](0)) {
          _goto_level = _out;
          continue;;};
        p = p['$+'](1);
        if ((($b = p['$=='](pe)['$!']()) !== nil && (!$b._isBoolean || $b == true))) {
          _goto_level = _resume;
          continue;;};};
      if (_goto_level['$<='](_test_eof)) {
        if (p['$=='](eof)) {
          if (_lex_eof_trans['$[]'](self.cs)['$>'](0)) {
            _trans = _lex_eof_trans['$[]'](self.cs)['$-'](1);
            _goto_level = _eof_trans;
            continue;;}}};
      if (_goto_level['$<='](_out)) {
        break;};};;
      self.p = p;
      if ((($a = self.token_queue['$any?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return self.token_queue.$shift()
      } else if (self.cs['$=='](self.$class().$lex_error())) {
        return [false, ["$error", self.$range(p['$-'](1), p)]]
        } else {
        return [false, ["$eof", self.$range(p, p)]]
      };
    };

    self.$protected();

    def['$eof_codepoint?'] = function(point) {
      var self = this;

      return [4, 26, 0]['$include?'](point);
    };

    def['$version?'] = function(versions) {
      var self = this;

      versions = $slice.call(arguments, 0);
      return versions['$include?'](self.version);
    };

    def.$stack_pop = function() {
      var self = this;

      self.top = self.top['$-'](1);
      return self.stack['$[]'](self.top);
    };

    if ((($a = ""['$respond_to?']("encode")) !== nil && (!$a._isBoolean || $a == true))) {
      def.$encode_escape = function(ord) {
        var self = this;

        return ord.$chr().$force_encoding(self.encoding);
      };

      def.$tok = function(s, e) {
        var self = this;

        if (s == null) {
          s = self.ts
        }
        if (e == null) {
          e = self.te
        }
        return self.source['$[]']($range(s, e, true)).$encode(self.encoding);
      };
      } else {
      def.$encode_escape = function(ord) {
        var self = this;

        return ord.$chr();
      };

      def.$tok = function(s, e) {
        var self = this;

        if (s == null) {
          s = self.ts
        }
        if (e == null) {
          e = self.te
        }
        return self.source['$[]']($range(s, e, true));
      };
    };

    def.$range = function(s, e) {
      var $a, $b, $c, self = this;

      if (s == null) {
        s = self.ts
      }
      if (e == null) {
        e = self.te
      }
      return (($a = ((($b = ((($c = $scope.Parser) == null ? $opal.cm('Parser') : $c))._scope).Source == null ? $b.cm('Source') : $b.Source))._scope).Range == null ? $a.cm('Range') : $a.Range).$new(self.source_buffer, s, e);
    };

    def.$emit = function(type, value, s, e) {
      var $a, self = this, token = nil;

      if (value == null) {
        value = self.$tok()
      }
      if (s == null) {
        s = self.ts
      }
      if (e == null) {
        e = self.te
      }
      token = [type, [value, self.$range(s, e)]];
      self.token_queue.$push(token);
      if ((($a = self.tokens) !== nil && (!$a._isBoolean || $a == true))) {
        self.tokens.$push(token)};
      return token;
    };

    def.$emit_table = function(table, s, e) {
      var self = this, value = nil;

      if (s == null) {
        s = self.ts
      }
      if (e == null) {
        e = self.te
      }
      value = self.$tok(s, e);
      return self.$emit(table['$[]'](value), value, s, e);
    };

    def.$emit_do = function(do_block) {
      var $a, $b, self = this;

      if (do_block == null) {
        do_block = false
      }
      if ((($a = self.cond['$active?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$emit("kDO_COND")
      } else if ((($a = ((($b = self.cmdarg['$active?']()) !== false && $b !== nil) ? $b : do_block)) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$emit("kDO_BLOCK")
        } else {
        return self.$emit("kDO")
      };
    };

    def.$arg_or_cmdarg = function() {
      var $a, self = this;

      if ((($a = self.command_state) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$class().$lex_en_expr_cmdarg()
        } else {
        return self.$class().$lex_en_expr_arg()
      };
    };

    def.$emit_comment = function(s, e) {
      var $a, $b, $c, self = this;

      if (s == null) {
        s = self.ts
      }
      if (e == null) {
        e = self.te
      }
      if ((($a = self.comments) !== nil && (!$a._isBoolean || $a == true))) {
        self.comments.$push((($a = ((($b = ((($c = $scope.Parser) == null ? $opal.cm('Parser') : $c))._scope).Source == null ? $b.cm('Source') : $b.Source))._scope).Comment == null ? $a.cm('Comment') : $a.Comment).$new(self.$range(s, e)))};
      if ((($a = self.tokens) !== nil && (!$a._isBoolean || $a == true))) {
        self.tokens.$push(["tCOMMENT", [self.$tok(s, e), self.$range(s, e)]])};
      return nil;
    };

    def.$diagnostic = function(type, reason, arguments$, location, highlights) {
      var $a, $b, self = this;

      if (arguments$ == null) {
        arguments$ = nil
      }
      if (location == null) {
        location = self.$range()
      }
      if (highlights == null) {
        highlights = []
      }
      return self.diagnostics.$process((($a = ((($b = $scope.Parser) == null ? $opal.cm('Parser') : $b))._scope).Diagnostic == null ? $a.cm('Diagnostic') : $a.Diagnostic).$new(type, reason, arguments$, location, highlights));
    };

    def.$push_literal = function(args) {
      var $a, $b, self = this, new_literal = nil;

      args = $slice.call(arguments, 0);
      new_literal = ($a = (($b = $scope.Literal) == null ? $opal.cm('Literal') : $b)).$new.apply($a, [self].concat(args));
      self.literal_stack.$push(new_literal);
      if ((($b = new_literal['$words?']()) !== nil && (!$b._isBoolean || $b == true))) {
        if ((($b = new_literal['$interpolate?']()) !== nil && (!$b._isBoolean || $b == true))) {
          return self.$class().$lex_en_interp_words()
          } else {
          return self.$class().$lex_en_plain_words()
        }
      } else if ((($b = new_literal['$interpolate?']()) !== nil && (!$b._isBoolean || $b == true))) {
        return self.$class().$lex_en_interp_string()
        } else {
        return self.$class().$lex_en_plain_string()
      };
    };

    def.$literal = function() {
      var self = this;

      return self.literal_stack.$last();
    };

    def.$pop_literal = function() {
      var self = this, old_literal = nil;

      old_literal = self.literal_stack.$pop();
      if (old_literal.$type()['$==']("tREGEXP_BEG")) {
        return self.$class().$lex_en_regexp_modifiers()
        } else {
        return self.$class().$lex_en_expr_end()
      };
    };

    $opal.cdecl($scope, 'PUNCTUATION', $hash2(["=", "&", "|", "!", "^", "+", "-", "*", "/", "%", "~", ",", ";", ".", "..", "...", "[", "]", "(", ")", "?", ":", "&&", "||", "-@", "+@", "~@", "**", "->", "=~", "!~", "==", "!=", ">", ">>", ">=", "<", "<<", "<=", "=>", "::", "===", "<=>", "[]", "[]=", "{", "}", "`", "!@"], {"=": "tEQL", "&": "tAMPER2", "|": "tPIPE", "!": "tBANG", "^": "tCARET", "+": "tPLUS", "-": "tMINUS", "*": "tSTAR2", "/": "tDIVIDE", "%": "tPERCENT", "~": "tTILDE", ",": "tCOMMA", ";": "tSEMI", ".": "tDOT", "..": "tDOT2", "...": "tDOT3", "[": "tLBRACK2", "]": "tRBRACK", "(": "tLPAREN2", ")": "tRPAREN", "?": "tEH", ":": "tCOLON", "&&": "tANDOP", "||": "tOROP", "-@": "tUMINUS", "+@": "tUPLUS", "~@": "tTILDE", "**": "tPOW", "->": "tLAMBDA", "=~": "tMATCH", "!~": "tNMATCH", "==": "tEQ", "!=": "tNEQ", ">": "tGT", ">>": "tRSHFT", ">=": "tGEQ", "<": "tLT", "<<": "tLSHFT", "<=": "tLEQ", "=>": "tASSOC", "::": "tCOLON2", "===": "tEQQ", "<=>": "tCMP", "[]": "tAREF", "[]=": "tASET", "{": "tLCURLY", "}": "tRCURLY", "`": "tBACK_REF2", "!@": "tBANG"}));

    $opal.cdecl($scope, 'PUNCTUATION_BEGIN', $hash2(["&", "*", "**", "+", "-", "::", "(", "{", "["], {"&": "tAMPER", "*": "tSTAR", "**": "tDSTAR", "+": "tUPLUS", "-": "tUMINUS", "::": "tCOLON3", "(": "tLPAREN", "{": "tLBRACE", "[": "tLBRACK"}));

    $opal.cdecl($scope, 'KEYWORDS', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF_MOD", "unless": "kUNLESS_MOD", "while": "kWHILE_MOD", "until": "kUNTIL_MOD", "rescue": "kRESCUE_MOD", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));

    $opal.cdecl($scope, 'KEYWORDS_BEGIN', $hash2(["if", "unless", "while", "until", "rescue", "defined?"], {"if": "kIF", "unless": "kUNLESS", "while": "kWHILE", "until": "kUNTIL", "rescue": "kRESCUE", "defined?": "kDEFINED"}));

    return ($a = ($b = ["class", "module", "def", "undef", "begin", "end", "then", "elsif", "else", "ensure", "case", "when", "for", "break", "next", "redo", "retry", "in", "do", "return", "yield", "super", "self", "nil", "true", "false", "and", "or", "not", "alias", "__FILE__", "__LINE__", "__ENCODING__"]).$each, $a._p = (TMP_55 = function(keyword){var self = TMP_55._s || this, $a;
if (keyword == null) keyword = nil;
    return (($a = $scope.KEYWORDS_BEGIN) == null ? $opal.cm('KEYWORDS_BEGIN') : $a)['$[]='](keyword, (($a = $scope.KEYWORDS) == null ? $opal.cm('KEYWORDS') : $a)['$[]='](keyword, ("k" + keyword.$upcase().$to_s())))}, TMP_55._s = self, TMP_55), $a).call($b);
  })((($a = $scope.Parser) == null ? $opal.cm('Parser') : $a), null)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$attr_reader', '$attr_accessor', '$coerce_encoding', '$include?', '$send', '$+', '$[]', '$fetch', '$==', '$!', '$heredoc?', '$end_with?', '$<<', '$clear_buffer', '$emit_start_tok', '$type', '$words?', '$=~', '$delimiter?', '$-', '$extend_space', '$emit', '$flush_string', '$nil?', '$empty?', '$extend_content', '$protected', '$lstrip', '$force_encoding', '$dup', '$encoding', '$length']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a;

    (function($base, $super) {
      function $Literal(){};
      var self = $Literal = $klass($base, $super, 'Literal', $Literal);

      var def = self._proto, $scope = self._scope;

      def.lexer = def.start_tok = def.heredoc_e = def.str_type = def.monolithic = def.interpolate = def.start_delim = def.end_delim = def.nesting = def.buffer = def.str_s = def.interp_braces = def.buffer_s = def.buffer_e = def.space_emitted = def.indent = nil;
      $opal.cdecl($scope, 'DELIMITERS', $hash2(["(", "[", "{", "<"], {"(": ")", "[": "]", "{": "}", "<": ">"}));

      $opal.cdecl($scope, 'MONOLITHIC', $hash2(["tSTRING_BEG"], {"tSTRING_BEG": "tSTRING"}));

      $opal.cdecl($scope, 'TYPES', $hash2(["'", "<<'", "%q", "\"", "<<\"", "%", "%Q", "%w", "%W", "%i", "%I", ":'", "%s", ":\"", "/", "%r", "%x", "`", "<<`"], {"'": ["tSTRING_BEG", false], "<<'": ["tSTRING_BEG", false], "%q": ["tSTRING_BEG", false], "\"": ["tSTRING_BEG", true], "<<\"": ["tSTRING_BEG", true], "%": ["tSTRING_BEG", true], "%Q": ["tSTRING_BEG", true], "%w": ["tQWORDS_BEG", false], "%W": ["tWORDS_BEG", true], "%i": ["tQSYMBOLS_BEG", false], "%I": ["tSYMBOLS_BEG", true], ":'": ["tSYMBEG", false], "%s": ["tSYMBEG", false], ":\"": ["tSYMBEG", true], "/": ["tREGEXP_BEG", true], "%r": ["tREGEXP_BEG", true], "%x": ["tXSTRING_BEG", true], "`": ["tXSTRING_BEG", true], "<<`": ["tXSTRING_BEG", true]}));

      self.$attr_reader("heredoc_e", "str_s");

      self.$attr_accessor("saved_herebody_s");

      def.$initialize = function(lexer, str_type, delimiter, str_s, heredoc_e, indent) {
        var $a, $b, self = this;

        if (heredoc_e == null) {
          heredoc_e = nil
        }
        if (indent == null) {
          indent = false
        }
        self.lexer = lexer;
        self.nesting = 1;
        str_type = self.$coerce_encoding(str_type);
        delimiter = self.$coerce_encoding(delimiter);
        if ((($a = (($b = $scope.TYPES) == null ? $opal.cm('TYPES') : $b)['$include?'](str_type)) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          lexer.$send("diagnostic", "error", "unexpected_percent_str", $hash2(["type"], {"type": str_type}), self.lexer.$send("range", str_s, str_s['$+'](2)))
        };
        self.str_type = str_type;
        self.str_s = str_s;
        $a = $opal.to_ary((($b = $scope.TYPES) == null ? $opal.cm('TYPES') : $b)['$[]'](str_type)), self.start_tok = ($a[0] == null ? nil : $a[0]), self.interpolate = ($a[1] == null ? nil : $a[1]);
        self.start_delim = (function() {if ((($a = (($b = $scope.DELIMITERS) == null ? $opal.cm('DELIMITERS') : $b)['$include?'](delimiter)) !== nil && (!$a._isBoolean || $a == true))) {
          return delimiter
          } else {
          return nil
        }; return nil; })();
        self.end_delim = (($a = $scope.DELIMITERS) == null ? $opal.cm('DELIMITERS') : $a).$fetch(delimiter, delimiter);
        self.heredoc_e = heredoc_e;
        self.indent = indent;
        self.interp_braces = 0;
        self.space_emitted = true;
        self.monolithic = (($a = (($b = self.start_tok['$==']("tSTRING_BEG")) ? ["'", "\""]['$include?'](str_type) : $b), $a !== false && $a !== nil ?self['$heredoc?']()['$!']() : $a));
        if ((($a = ((($b = self.heredoc_e) !== false && $b !== nil) ? $b : self.str_type['$end_with?'](delimiter))) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          self.str_type['$<<'](delimiter)
        };
        self.$clear_buffer();
        if ((($a = self.monolithic) !== nil && (!$a._isBoolean || $a == true))) {
          return nil
          } else {
          return self.$emit_start_tok()
        };
      };

      def['$interpolate?'] = function() {
        var self = this;

        return self.interpolate;
      };

      def['$words?'] = function() {
        var $a, $b, $c, self = this;

        return ((($a = ((($b = ((($c = self.$type()['$==']("tWORDS_BEG")) !== false && $c !== nil) ? $c : self.$type()['$==']("tQWORDS_BEG"))) !== false && $b !== nil) ? $b : self.$type()['$==']("tSYMBOLS_BEG"))) !== false && $a !== nil) ? $a : self.$type()['$==']("tQSYMBOLS_BEG"));
      };

      def['$regexp?'] = function() {
        var self = this;

        return self.$type()['$==']("tREGEXP_BEG");
      };

      def['$heredoc?'] = function() {
        var self = this;

        return self.heredoc_e['$!']()['$!']();
      };

      def.$type = function() {
        var self = this;

        return self.start_tok;
      };

      def['$munge_escape?'] = function(character) {
        var $a, $b, self = this;

        character = self.$coerce_encoding(character);
        if ((($a = ($b = self['$words?'](), $b !== false && $b !== nil ?character['$=~'](/[ \t\v\r\f\n]/) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          return true
          } else {
          return ["\\", self.start_delim, self.end_delim]['$include?'](character)
        };
      };

      def.$nest_and_try_closing = function(delimiter, ts, te) {
        var $a, $b, self = this;

        delimiter = self.$coerce_encoding(delimiter);
        if ((($a = ($b = self.start_delim, $b !== false && $b !== nil ?self.start_delim['$=='](delimiter) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          self.nesting = self.nesting['$+'](1)
        } else if ((($a = self['$delimiter?'](delimiter)) !== nil && (!$a._isBoolean || $a == true))) {
          self.nesting = self.nesting['$-'](1)};
        if (self.nesting['$=='](0)) {
          if ((($a = self['$words?']()) !== nil && (!$a._isBoolean || $a == true))) {
            self.$extend_space(ts, ts)};
          if ((($a = self.monolithic) !== nil && (!$a._isBoolean || $a == true))) {
            return self.$emit((($a = $scope.MONOLITHIC) == null ? $opal.cm('MONOLITHIC') : $a)['$[]'](self.start_tok), self.buffer, self.str_s, te)
            } else {
            if ((($a = self['$heredoc?']()) !== nil && (!$a._isBoolean || $a == true))) {
              } else {
              self.$flush_string()
            };
            return self.$emit("tSTRING_END", self.end_delim, ts, te);
          };
          } else {
          return nil
        };
      };

      def.$start_interp_brace = function() {
        var self = this;

        return self.interp_braces = self.interp_braces['$+'](1);
      };

      def.$end_interp_brace_and_try_closing = function() {
        var self = this;

        self.interp_braces = self.interp_braces['$-'](1);
        return (self.interp_braces['$=='](0));
      };

      def.$extend_string = function(string, ts, te) {
        var $a, self = this;

        if ((($a = self.buffer_s['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.buffer_s = ts};
        self.buffer_e = te;
        return self.buffer['$<<'](string);
      };

      def.$flush_string = function() {
        var $a, self = this;

        if ((($a = self.monolithic) !== nil && (!$a._isBoolean || $a == true))) {
          self.$emit_start_tok();
          self.monolithic = false;};
        if ((($a = self.buffer['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return nil
          } else {
          self.$emit("tSTRING_CONTENT", self.buffer, self.buffer_s, self.buffer_e);
          self.$clear_buffer();
          return self.$extend_content();
        };
      };

      def.$extend_content = function() {
        var self = this;

        return self.space_emitted = false;
      };

      def.$extend_space = function(ts, te) {
        var $a, self = this;

        self.$flush_string();
        if ((($a = self.space_emitted) !== nil && (!$a._isBoolean || $a == true))) {
          return nil
          } else {
          self.$emit("tSPACE", nil, ts, te);
          return self.space_emitted = true;
        };
      };

      self.$protected();

      def['$delimiter?'] = function(delimiter) {
        var $a, self = this;

        if ((($a = self.indent) !== nil && (!$a._isBoolean || $a == true))) {
          return self.end_delim['$=='](delimiter.$lstrip())
          } else {
          return self.end_delim['$=='](delimiter)
        };
      };

      def.$coerce_encoding = function(string) {
        var $a, $b, self = this;

        if ((($a = ($scope.Encoding != null)) !== nil && (!$a._isBoolean || $a == true))) {
          return string.$dup().$force_encoding((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).BINARY == null ? $a.cm('BINARY') : $a.BINARY))
          } else {
          return string
        };
      };

      def.$clear_buffer = function() {
        var $a, self = this;

        self.buffer = "";
        if ((($a = ($scope.Encoding != null)) !== nil && (!$a._isBoolean || $a == true))) {
          self.buffer.$force_encoding(self.lexer.$encoding())};
        self.buffer_s = nil;
        return self.buffer_e = nil;
      };

      def.$emit_start_tok = function() {
        var $a, self = this, str_e = nil;

        str_e = ((($a = self.heredoc_e) !== false && $a !== nil) ? $a : self.str_s['$+'](self.str_type.$length()));
        return self.$emit(self.start_tok, self.str_type, self.str_s, str_e);
      };

      return (def.$emit = function(token, type, s, e) {
        var self = this;

        return self.lexer.$send("emit", token, type, s, e);
      }, nil) && 'emit';
    })((($a = $scope.Lexer) == null ? $opal.cm('Lexer') : $a), null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$freeze', '$clear', '$|', '$<<', '$&', '$>>', '$==', '$push', '$pop', '$[]', '$to_s']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a;

    (function($base, $super) {
      function $StackState(){};
      var self = $StackState = $klass($base, $super, 'StackState', $StackState);

      var def = self._proto, $scope = self._scope;

      def.stack = def.name = nil;
      def.$initialize = function(name) {
        var self = this;

        self.name = name.$freeze();
        return self.$clear();
      };

      def.$clear = function() {
        var self = this;

        return self.stack = 0;
      };

      def.$push = function(bit) {
        var self = this, bit_value = nil;

        bit_value = (function() {if (bit !== false && bit !== nil) {
          return 1
          } else {
          return 0
        }; return nil; })();
        self.stack = (self.stack['$<<'](1))['$|'](bit_value);
        return bit;
      };

      def.$pop = function() {
        var self = this, bit_value = nil;

        bit_value = self.stack['$&'](1);
        self.stack = self.stack['$>>'](1);
        return bit_value['$=='](1);
      };

      def.$lexpop = function() {
        var $a, self = this;

        return self.$push(((($a = self.$pop()) !== false && $a !== nil) ? $a : self.$pop()));
      };

      def['$active?'] = function() {
        var self = this;

        return self.stack['$[]'](0)['$=='](1);
      };

      def.$to_s = function() {
        var self = this;

        return "[" + (self.stack.$to_s(2)) + " <= " + (self.name) + "]";
      };

      return $opal.defn(self, '$inspect', def.$to_s);
    })((($a = $scope.Lexer) == null ? $opal.cm('Lexer') : $a), null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2, $range = $opal.range;

  $opal.add_stubs(['$attr_accessor', '$n0', '$token_map', '$numeric', '$n', '$value', '$new', '$loc', '$private', '$updated', '$-@', '$join', '$expression', '$delimited_string_map', '$unquoted_map', '$collapse_string_parts?', '$nil?', '$first', '$children', '$string_map', '$prefix_string_map', '$to_sym', '$collection_map', '$==', '$version', '$empty?', '$diagnostic', '$map', '$to_proc', '$uniq', '$sort', '$each_char', '$<<', '$regexp_map', '$unary_op_map', '$type', '$===', '$binary_op_map', '$!', '$%', '$size', '$last', '$each_slice', '$pair_keyword_map', '$variable_map', '$name', '$source_buffer', '$line', '$declared?', '$static_env', '$var_send_map', '$constant_map', '$in_def?', '$declare', '$with_expression', '$with_operator', '$join_exprs', '$[]', '$module_definition_map', '$definition_map', '$keyword_map', '$check_duplicate_args', '$arg_prefix_map', '$kwarg_map', '$send_map', '$keyword', '$include?', '$block_map', '$+', '$send_index_map', '$send_binary_op_map', '$expr_map', '$count', '$encode', '$each', '$names', '$send_unary_op_map', '$check_condition', '$condition_map', '$keyword_mod_map', '$ternary_map', '$to_s', '$for_map', '$>', '$rescue_body_map', '$any?', '$eh_keyword_map', '$none?', '$one?', '$begin', '$end', '$[]=', '$arg_name_collides?', '$begin_pos', '$-', '$end_pos', '$start_with?', '$process', '$diagnostics', '$send']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a;

    (function($base, $super) {
      function $Default(){};
      var self = $Default = $klass($base, $super, 'Default', $Default);

      var def = self._proto, $scope = self._scope;

      def.parser = def.emit_file_line_as_literals = nil;
      self.$attr_accessor("parser");

      self.$attr_accessor("emit_file_line_as_literals");

      def.$initialize = function() {
        var self = this;

        return self.emit_file_line_as_literals = true;
      };

      def.$nil = function(nil_t) {
        var self = this;

        return self.$n0("nil", self.$token_map(nil_t));
      };

      def.$true = function(true_t) {
        var self = this;

        return self.$n0("true", self.$token_map(true_t));
      };

      def.$false = function(false_t) {
        var self = this;

        return self.$n0("false", self.$token_map(false_t));
      };

      def.$integer = function(integer_t) {
        var self = this;

        return self.$numeric("int", integer_t);
      };

      def.$float = function(float_t) {
        var self = this;

        return self.$numeric("float", float_t);
      };

      def.$rational = function(rational_t) {
        var self = this;

        return self.$numeric("rational", rational_t);
      };

      def.$complex = function(complex_t) {
        var self = this;

        return self.$numeric("complex", complex_t);
      };

      def.$numeric = function(kind, token) {
        var $a, $b, $c, self = this;

        return self.$n(kind, [self.$value(token)], (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Operator == null ? $a.cm('Operator') : $a.Operator).$new(nil, self.$loc(token)));
      };

      self.$private("numeric");

      def.$negate = function(uminus_t, numeric) {
        var $a, $b, $c, self = this, value = nil, operator_loc = nil;

        ($a = numeric)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), value = ($a[0] == null ? nil : $a[0]);
        operator_loc = self.$loc(uminus_t);
        return numeric.$updated(nil, [value['$-@']()], $hash2(["location"], {"location": (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Operator == null ? $a.cm('Operator') : $a.Operator).$new(operator_loc, operator_loc.$join(numeric.$loc().$expression()))}));
      };

      def.$__LINE__ = function(__LINE__t) {
        var self = this;

        return self.$n0("__LINE__", self.$token_map(__LINE__t));
      };

      def.$string = function(string_t) {
        var self = this;

        return self.$n("str", [self.$value(string_t)], self.$delimited_string_map(string_t));
      };

      def.$string_internal = function(string_t) {
        var self = this;

        return self.$n("str", [self.$value(string_t)], self.$unquoted_map(string_t));
      };

      def.$string_compose = function(begin_t, parts, end_t) {
        var $a, $b, self = this;

        if ((($a = self['$collapse_string_parts?'](parts)) !== nil && (!$a._isBoolean || $a == true))) {
          if ((($a = ($b = begin_t['$nil?'](), $b !== false && $b !== nil ?end_t['$nil?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
            return parts.$first()
            } else {
            return self.$n("str", parts.$first().$children(), self.$string_map(begin_t, parts, end_t))
          }
          } else {
          return self.$n("dstr", [].concat(parts), self.$string_map(begin_t, parts, end_t))
        };
      };

      def.$character = function(char_t) {
        var self = this;

        return self.$n("str", [self.$value(char_t)], self.$prefix_string_map(char_t));
      };

      def.$__FILE__ = function(__FILE__t) {
        var self = this;

        return self.$n0("__FILE__", self.$token_map(__FILE__t));
      };

      def.$symbol = function(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$value(symbol_t).$to_sym()], self.$prefix_string_map(symbol_t));
      };

      def.$symbol_internal = function(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$value(symbol_t).$to_sym()], self.$unquoted_map(symbol_t));
      };

      def.$symbol_compose = function(begin_t, parts, end_t) {
        var $a, $b, self = this, str = nil;

        if ((($a = self['$collapse_string_parts?'](parts)) !== nil && (!$a._isBoolean || $a == true))) {
          str = parts.$first();
          return self.$n("sym", [str.$children().$first().$to_sym()], self.$collection_map(begin_t, str.$loc().$expression(), end_t));
        } else if ((($a = (($b = self.parser.$version()['$=='](18)) ? parts['$empty?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$diagnostic("error", "empty_symbol", nil, self.$loc(begin_t).$join(self.$loc(end_t)))
          } else {
          return self.$n("dsym", [].concat(parts), self.$collection_map(begin_t, parts, end_t))
        };
      };

      def.$xstring_compose = function(begin_t, parts, end_t) {
        var self = this;

        return self.$n("xstr", [].concat(parts), self.$string_map(begin_t, parts, end_t));
      };

      def.$regexp_options = function(regopt_t) {
        var $a, $b, self = this, options = nil;

        options = ($a = ($b = self.$value(regopt_t).$each_char().$sort().$uniq()).$map, $a._p = "to_sym".$to_proc(), $a).call($b);
        return self.$n("regopt", options, self.$token_map(regopt_t));
      };

      def.$regexp_compose = function(begin_t, parts, end_t, options) {
        var self = this;

        return self.$n("regexp", (parts['$<<'](options)), self.$regexp_map(begin_t, end_t, options));
      };

      def.$array = function(begin_t, elements, end_t) {
        var self = this;

        return self.$n("array", elements, self.$collection_map(begin_t, elements, end_t));
      };

      def.$splat = function(star_t, arg) {
        var $a, self = this;

        if (arg == null) {
          arg = nil
        }
        if ((($a = arg['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n0("splat", self.$unary_op_map(star_t))
          } else {
          return self.$n("splat", [arg], self.$unary_op_map(star_t, arg))
        };
      };

      def.$word = function(parts) {
        var $a, self = this;

        if ((($a = self['$collapse_string_parts?'](parts)) !== nil && (!$a._isBoolean || $a == true))) {
          return parts.$first()
          } else {
          return self.$n("dstr", [].concat(parts), self.$collection_map(nil, parts, nil))
        };
      };

      def.$words_compose = function(begin_t, parts, end_t) {
        var self = this;

        return self.$n("array", [].concat(parts), self.$collection_map(begin_t, parts, end_t));
      };

      def.$symbols_compose = function(begin_t, parts, end_t) {
        var $a, $b, TMP_1, self = this;

        parts = ($a = ($b = parts).$map, $a._p = (TMP_1 = function(part){var self = TMP_1._s || this, $a, $case = nil, value = nil;
if (part == null) part = nil;
        return (function() {$case = part.$type();if ("str"['$===']($case)) {($a = part)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), value = ($a[0] == null ? nil : $a[0]);
          return part.$updated("sym", [value.$to_sym()]);}else if ("dstr"['$===']($case)) {return part.$updated("dsym")}else {return part}})()}, TMP_1._s = self, TMP_1), $a).call($b);
        return self.$n("array", [].concat(parts), self.$collection_map(begin_t, parts, end_t));
      };

      def.$pair = function(key, assoc_t, value) {
        var self = this;

        return self.$n("pair", [key, value], self.$binary_op_map(key, assoc_t, value));
      };

      def.$pair_list_18 = function(list) {
        var $a, $b, TMP_2, self = this;

        if ((($a = list.$size()['$%'](2)['$=='](0)['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$diagnostic("error", "odd_hash", nil, list.$last().$loc().$expression())
          } else {
          return ($a = ($b = list.$each_slice(2)).$map, $a._p = (TMP_2 = function(key, value){var self = TMP_2._s || this;
if (key == null) key = nil;if (value == null) value = nil;
          return self.$n("pair", [key, value], self.$binary_op_map(key, nil, value))}, TMP_2._s = self, TMP_2), $a).call($b)
        };
      };

      def.$pair_keyword = function(key_t, value) {
        var $a, self = this, key_map = nil, pair_map = nil, key = nil;

        $a = $opal.to_ary(self.$pair_keyword_map(key_t, value)), key_map = ($a[0] == null ? nil : $a[0]), pair_map = ($a[1] == null ? nil : $a[1]);
        key = self.$n("sym", [self.$value(key_t).$to_sym()], key_map);
        return self.$n("pair", [key, value], pair_map);
      };

      def.$kwsplat = function(dstar_t, arg) {
        var self = this;

        return self.$n("kwsplat", [arg], self.$unary_op_map(dstar_t, arg));
      };

      def.$associate = function(begin_t, pairs, end_t) {
        var self = this;

        return self.$n("hash", [].concat(pairs), self.$collection_map(begin_t, pairs, end_t));
      };

      def.$range_inclusive = function(lhs, dot2_t, rhs) {
        var self = this;

        return self.$n("irange", [lhs, rhs], self.$binary_op_map(lhs, dot2_t, rhs));
      };

      def.$range_exclusive = function(lhs, dot3_t, rhs) {
        var self = this;

        return self.$n("erange", [lhs, rhs], self.$binary_op_map(lhs, dot3_t, rhs));
      };

      def.$self = function(token) {
        var self = this;

        return self.$n0("self", self.$token_map(token));
      };

      def.$ident = function(token) {
        var self = this;

        return self.$n("ident", [self.$value(token).$to_sym()], self.$variable_map(token));
      };

      def.$ivar = function(token) {
        var self = this;

        return self.$n("ivar", [self.$value(token).$to_sym()], self.$variable_map(token));
      };

      def.$gvar = function(token) {
        var self = this;

        return self.$n("gvar", [self.$value(token).$to_sym()], self.$variable_map(token));
      };

      def.$cvar = function(token) {
        var self = this;

        return self.$n("cvar", [self.$value(token).$to_sym()], self.$variable_map(token));
      };

      def.$back_ref = function(token) {
        var self = this;

        return self.$n("back_ref", [self.$value(token).$to_sym()], self.$token_map(token));
      };

      def.$nth_ref = function(token) {
        var self = this;

        return self.$n("nth_ref", [self.$value(token)], self.$token_map(token));
      };

      def.$accessible = function(node) {
        var $a, self = this, $case = nil, name = nil;

        return (function() {$case = node.$type();if ("__FILE__"['$===']($case)) {if ((($a = self.emit_file_line_as_literals) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n("str", [node.$loc().$expression().$source_buffer().$name()], node.$loc())
          } else {
          return node
        }}else if ("__LINE__"['$===']($case)) {if ((($a = self.emit_file_line_as_literals) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n("int", [node.$loc().$expression().$line()], node.$loc())
          } else {
          return node
        }}else if ("__ENCODING__"['$===']($case)) {return self.$n("const", [self.$n("const", [nil, "Encoding"], nil), "UTF_8"], node.$loc())}else if ("ident"['$===']($case)) {($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), name = ($a[0] == null ? nil : $a[0]);
        if ((($a = self.parser.$static_env()['$declared?'](name)) !== nil && (!$a._isBoolean || $a == true))) {
          return node.$updated("lvar")
          } else {
          ($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), name = ($a[0] == null ? nil : $a[0]);
          return self.$n("send", [nil, name], self.$var_send_map(node));
        };}else {return node}})();
      };

      def.$const = function(name_t) {
        var self = this;

        return self.$n("const", [nil, self.$value(name_t).$to_sym()], self.$constant_map(nil, nil, name_t));
      };

      def.$const_global = function(t_colon3, name_t) {
        var self = this, cbase = nil;

        cbase = self.$n0("cbase", self.$token_map(t_colon3));
        return self.$n("const", [cbase, self.$value(name_t).$to_sym()], self.$constant_map(cbase, t_colon3, name_t));
      };

      def.$const_fetch = function(scope, t_colon2, name_t) {
        var self = this;

        return self.$n("const", [scope, self.$value(name_t).$to_sym()], self.$constant_map(scope, t_colon2, name_t));
      };

      def.$__ENCODING__ = function(__ENCODING__t) {
        var self = this;

        return self.$n0("__ENCODING__", self.$token_map(__ENCODING__t));
      };

      def.$assignable = function(node) {
        var $a, self = this, $case = nil, name = nil;

        return (function() {$case = node.$type();if ("cvar"['$===']($case)) {return node.$updated("cvasgn")}else if ("ivar"['$===']($case)) {return node.$updated("ivasgn")}else if ("gvar"['$===']($case)) {return node.$updated("gvasgn")}else if ("const"['$===']($case)) {if ((($a = self.parser['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "dynamic_const", nil, node.$loc().$expression())};
        return node.$updated("casgn");}else if ("ident"['$===']($case)) {($a = node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), name = ($a[0] == null ? nil : $a[0]);
        self.parser.$static_env().$declare(name);
        return node.$updated("lvasgn");}else if ("nil"['$===']($case) || "self"['$===']($case) || "true"['$===']($case) || "false"['$===']($case) || "__FILE__"['$===']($case) || "__LINE__"['$===']($case) || "__ENCODING__"['$===']($case)) {return self.$diagnostic("error", "invalid_assignment", nil, node.$loc().$expression())}else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, node.$loc().$expression())}else { return nil }})();
      };

      def.$const_op_assignable = function(node) {
        var self = this;

        return node.$updated("casgn");
      };

      def.$assign = function(lhs, eql_t, rhs) {
        var self = this;

        return (lhs['$<<'](rhs)).$updated(nil, nil, $hash2(["location"], {"location": lhs.$loc().$with_operator(self.$loc(eql_t)).$with_expression(self.$join_exprs(lhs, rhs))}));
      };

      def.$op_assign = function(lhs, op_t, rhs) {
        var self = this, $case = nil, operator = nil, source_map = nil;

        return (function() {$case = lhs.$type();if ("gvasgn"['$===']($case) || "ivasgn"['$===']($case) || "lvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "send"['$===']($case)) {operator = self.$value(op_t)['$[]']($range(0, -1, false)).$to_sym();
        source_map = lhs.$loc().$with_operator(self.$loc(op_t)).$with_expression(self.$join_exprs(lhs, rhs));
        return (function() {$case = operator;if ("&&"['$===']($case)) {return self.$n("and_asgn", [lhs, rhs], source_map)}else if ("||"['$===']($case)) {return self.$n("or_asgn", [lhs, rhs], source_map)}else {return self.$n("op_asgn", [lhs, operator, rhs], source_map)}})();}else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, lhs.$loc().$expression())}else { return nil }})();
      };

      def.$multi_lhs = function(begin_t, items, end_t) {
        var self = this;

        return self.$n("mlhs", [].concat(items), self.$collection_map(begin_t, items, end_t));
      };

      def.$multi_assign = function(lhs, eql_t, rhs) {
        var self = this;

        return self.$n("masgn", [lhs, rhs], self.$binary_op_map(lhs, eql_t, rhs));
      };

      def.$def_class = function(class_t, name, lt_t, superclass, body, end_t) {
        var self = this;

        return self.$n("class", [name, superclass, body], self.$module_definition_map(class_t, name, lt_t, end_t));
      };

      def.$def_sclass = function(class_t, lshft_t, expr, body, end_t) {
        var self = this;

        return self.$n("sclass", [expr, body], self.$module_definition_map(class_t, nil, lshft_t, end_t));
      };

      def.$def_module = function(module_t, name, body, end_t) {
        var self = this;

        return self.$n("module", [name, body], self.$module_definition_map(module_t, name, nil, end_t));
      };

      def.$def_method = function(def_t, name_t, args, body, end_t) {
        var self = this;

        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, nil, name_t, end_t));
      };

      def.$def_singleton = function(def_t, definee, dot_t, name_t, args, body, end_t) {
        var self = this, $case = nil;

        return (function() {$case = definee.$type();if ("int"['$===']($case) || "str"['$===']($case) || "dstr"['$===']($case) || "sym"['$===']($case) || "dsym"['$===']($case) || "regexp"['$===']($case) || "array"['$===']($case) || "hash"['$===']($case)) {return self.$diagnostic("error", "singleton_literal", nil, definee.$loc().$expression())}else {return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, dot_t, name_t, end_t))}})();
      };

      def.$undef_method = function(undef_t, names) {
        var self = this;

        return self.$n("undef", [].concat(names), self.$keyword_map(undef_t, nil, names, nil));
      };

      def.$alias = function(alias_t, to, from) {
        var self = this;

        return self.$n("alias", [to, from], self.$keyword_map(alias_t, nil, [to, from], nil));
      };

      def.$args = function(begin_t, args, end_t, check_args) {
        var self = this;

        if (check_args == null) {
          check_args = true
        }
        if (check_args !== false && check_args !== nil) {
          args = self.$check_duplicate_args(args)};
        return self.$n("args", args, self.$collection_map(begin_t, args, end_t));
      };

      def.$arg = function(name_t) {
        var self = this;

        return self.$n("arg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t));
      };

      def.$optarg = function(name_t, eql_t, value) {
        var self = this;

        return self.$n("optarg", [self.$value(name_t).$to_sym(), value], self.$variable_map(name_t).$with_operator(self.$loc(eql_t)).$with_expression(self.$loc(name_t).$join(value.$loc().$expression())));
      };

      def.$restarg = function(star_t, name_t) {
        var self = this;

        if (name_t == null) {
          name_t = nil
        }
        if (name_t !== false && name_t !== nil) {
          return self.$n("restarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(star_t, name_t))
          } else {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        };
      };

      def.$kwarg = function(name_t) {
        var self = this;

        return self.$n("kwarg", [self.$value(name_t).$to_sym()], self.$kwarg_map(name_t));
      };

      def.$kwoptarg = function(name_t, value) {
        var self = this;

        return self.$n("kwoptarg", [self.$value(name_t).$to_sym(), value], self.$kwarg_map(name_t, value));
      };

      def.$kwrestarg = function(dstar_t, name_t) {
        var self = this;

        if (name_t == null) {
          name_t = nil
        }
        if (name_t !== false && name_t !== nil) {
          return self.$n("kwrestarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(dstar_t, name_t))
          } else {
          return self.$n0("kwrestarg", self.$arg_prefix_map(dstar_t))
        };
      };

      def.$shadowarg = function(name_t) {
        var self = this;

        return self.$n("shadowarg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t));
      };

      def.$blockarg = function(amper_t, name_t) {
        var self = this;

        return self.$n("blockarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(amper_t, name_t));
      };

      def.$arg_expr = function(expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("arg")
          } else {
          return self.$n("arg_expr", [expr], expr.$loc())
        };
      };

      def.$restarg_expr = function(star_t, expr) {
        var $a, self = this;

        if (expr == null) {
          expr = nil
        }
        if ((($a = expr['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n0("restarg", self.$token_map(star_t))
        } else if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("restarg")
          } else {
          return self.$n("restarg_expr", [expr], expr.$loc())
        };
      };

      def.$blockarg_expr = function(amper_t, expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("blockarg")
          } else {
          return self.$n("blockarg_expr", [expr], expr.$loc())
        };
      };

      def.$call_method = function(receiver, dot_t, selector_t, lparen_t, args, rparen_t) {
        var $a, self = this;

        if (lparen_t == null) {
          lparen_t = nil
        }
        if (args == null) {
          args = []
        }
        if (rparen_t == null) {
          rparen_t = nil
        }
        if ((($a = selector_t['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n("send", [receiver, "call"].concat(args), self.$send_map(receiver, dot_t, nil, lparen_t, args, rparen_t))
          } else {
          return self.$n("send", [receiver, self.$value(selector_t).$to_sym()].concat(args), self.$send_map(receiver, dot_t, selector_t, lparen_t, args, rparen_t))
        };
      };

      def.$call_lambda = function(lambda_t) {
        var self = this;

        return self.$n("send", [nil, "lambda"], self.$send_map(nil, nil, lambda_t));
      };

      def.$block = function(method_call, begin_t, args, body, end_t) {
        var $a, $b, self = this, _receiver = nil, _selector = nil, call_args = nil, last_arg = nil, actual_send = nil, block = nil;

        ($a = method_call)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), _receiver = ($a[0] == null ? nil : $a[0]), _selector = ($a[1] == null ? nil : $a[1]), call_args = $slice.call($a, 2);
        if (method_call.$type()['$==']("yield")) {
          self.$diagnostic("error", "block_given_to_yield", nil, method_call.$loc().$keyword(), [self.$loc(begin_t)])};
        last_arg = call_args.$last();
        if ((($a = (($b = last_arg !== false && last_arg !== nil) ? last_arg.$type()['$==']("block_pass") : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "block_and_blockarg", nil, last_arg.$loc().$expression(), [self.$loc(begin_t)])};
        if ((($a = ["send", "super", "zsuper"]['$include?'](method_call.$type())) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n("block", [method_call, args, body], self.$block_map(method_call.$loc().$expression(), begin_t, end_t))
          } else {
          ($a = method_call)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), actual_send = ($a[0] == null ? nil : $a[0]);
          block = self.$n("block", [actual_send, args, body], self.$block_map(actual_send.$loc().$expression(), begin_t, end_t));
          return self.$n(method_call.$type(), [block], method_call.$loc().$with_expression(self.$join_exprs(method_call, block)));
        };
      };

      def.$block_pass = function(amper_t, arg) {
        var self = this;

        return self.$n("block_pass", [arg], self.$unary_op_map(amper_t, arg));
      };

      def.$attr_asgn = function(receiver, dot_t, selector_t) {
        var self = this, method_name = nil;

        method_name = (self.$value(selector_t)['$+']("=")).$to_sym();
        return self.$n("send", [receiver, method_name], self.$send_map(receiver, dot_t, selector_t));
      };

      def.$index = function(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        return self.$n("send", [receiver, "[]"].concat(indexes), self.$send_index_map(receiver, lbrack_t, rbrack_t));
      };

      def.$index_asgn = function(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        return self.$n("send", [receiver, "[]="].concat(indexes), self.$send_index_map(receiver, lbrack_t, rbrack_t));
      };

      def.$binary_op = function(receiver, operator_t, arg) {
        var $a, self = this, source_map = nil, operator = nil, method_call = nil;

        source_map = self.$send_binary_op_map(receiver, operator_t, arg);
        if (self.parser.$version()['$=='](18)) {
          operator = self.$value(operator_t);
          if (operator['$==']("!=")) {
            method_call = self.$n("send", [receiver, "==", arg], source_map)
          } else if (operator['$==']("!~")) {
            method_call = self.$n("send", [receiver, "=~", arg], source_map)};
          if ((($a = ["!=", "!~"]['$include?'](operator)) !== nil && (!$a._isBoolean || $a == true))) {
            return self.$n("not", [method_call], self.$expr_map(source_map.$expression()))};};
        return self.$n("send", [receiver, self.$value(operator_t).$to_sym(), arg], source_map);
      };

      def.$match_op = function(receiver, match_t, arg) {
        var $a, $b, $c, TMP_3, self = this, source_map = nil, str_node = nil, opt_node = nil, regexp_body = nil, regexp_opt = nil;

        source_map = self.$send_binary_op_map(receiver, match_t, arg);
        if ((($a = ($b = (($c = receiver.$type()['$==']("regexp")) ? receiver.$children().$count()['$=='](2) : $c), $b !== false && $b !== nil ?receiver.$children().$first().$type()['$==']("str") : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          ($a = receiver)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), str_node = ($a[0] == null ? nil : $a[0]), opt_node = ($a[1] == null ? nil : $a[1]);
          ($a = str_node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), regexp_body = ($a[0] == null ? nil : $a[0]);
          ($a = opt_node)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), regexp_opt = $slice.call($a, 0);
          if ((($a = ($scope.Encoding != null)) !== nil && (!$a._isBoolean || $a == true))) {
            regexp_body = (function() {if ((($a = regexp_opt['$include?']("u")) !== nil && (!$a._isBoolean || $a == true))) {return regexp_body.$encode((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8))}else if ((($a = regexp_opt['$include?']("e")) !== nil && (!$a._isBoolean || $a == true))) {return regexp_body.$encode((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).EUC_JP == null ? $a.cm('EUC_JP') : $a.EUC_JP))}else if ((($a = regexp_opt['$include?']("s")) !== nil && (!$a._isBoolean || $a == true))) {return regexp_body.$encode((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).WINDOWS_31J == null ? $a.cm('WINDOWS_31J') : $a.WINDOWS_31J))}else if ((($a = regexp_opt['$include?']("n")) !== nil && (!$a._isBoolean || $a == true))) {return regexp_body.$encode((($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).BINARY == null ? $a.cm('BINARY') : $a.BINARY))}else {return regexp_body}})()};
          ($a = ($b = (($c = $scope.Regexp) == null ? $opal.cm('Regexp') : $c).$new(regexp_body).$names()).$each, $a._p = (TMP_3 = function(name){var self = TMP_3._s || this;
            if (self.parser == null) self.parser = nil;
if (name == null) name = nil;
          return self.parser.$static_env().$declare(name)}, TMP_3._s = self, TMP_3), $a).call($b);
          return self.$n("match_with_lvasgn", [receiver, arg], source_map);
          } else {
          return self.$n("send", [receiver, "=~", arg], source_map)
        };
      };

      def.$unary_op = function(op_t, receiver) {
        var self = this, $case = nil, method = nil;

        $case = self.$value(op_t);if ("+"['$===']($case) || "-"['$===']($case)) {method = self.$value(op_t)['$+']("@")}else {method = self.$value(op_t)};
        return self.$n("send", [receiver, method.$to_sym()], self.$send_unary_op_map(op_t, receiver));
      };

      def.$not_op = function(not_t, begin_t, receiver, end_t) {
        var $a, self = this, nil_node = nil;

        if (begin_t == null) {
          begin_t = nil
        }
        if (receiver == null) {
          receiver = nil
        }
        if (end_t == null) {
          end_t = nil
        }
        if (self.parser.$version()['$=='](18)) {
          return self.$n("not", [receiver], self.$unary_op_map(not_t, receiver))
        } else if ((($a = receiver['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          nil_node = self.$n0("begin", self.$collection_map(begin_t, nil, end_t));
          return self.$n("send", [nil_node, "!"], self.$send_unary_op_map(not_t, nil_node));
          } else {
          return self.$n("send", [receiver, "!"], self.$send_unary_op_map(not_t, receiver))
        };
      };

      def.$logical_op = function(type, lhs, op_t, rhs) {
        var self = this;

        return self.$n(type, [lhs, rhs], self.$binary_op_map(lhs, op_t, rhs));
      };

      def.$condition = function(cond_t, cond, then_t, if_true, else_t, if_false, end_t) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$condition_map(cond_t, cond, then_t, if_true, else_t, if_false, end_t));
      };

      def.$condition_mod = function(if_true, if_false, cond_t, cond) {
        var $a, self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$keyword_mod_map(((($a = if_true) !== false && $a !== nil) ? $a : if_false), cond_t, cond));
      };

      def.$ternary = function(cond, question_t, if_true, colon_t, if_false) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$ternary_map(cond, question_t, if_true, colon_t, if_false));
      };

      def.$when = function(when_t, patterns, then_t, body) {
        var self = this, children = nil;

        children = patterns['$<<'](body);
        return self.$n("when", children, self.$keyword_map(when_t, then_t, children, nil));
      };

      def.$case = function(case_t, expr, when_bodies, else_t, else_body, end_t) {
        var self = this;

        return self.$n("case", [expr].concat((when_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t));
      };

      def.$loop = function(type, keyword_t, cond, do_t, body, end_t) {
        var self = this;

        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_map(keyword_t, do_t, nil, end_t));
      };

      def.$loop_mod = function(type, body, keyword_t, cond) {
        var self = this;

        if (body.$type()['$==']("kwbegin")) {
          type = ("" + type.$to_s() + "_post")};
        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_mod_map(body, keyword_t, cond));
      };

      def.$for = function(for_t, iterator, in_t, iteratee, do_t, body, end_t) {
        var self = this;

        return self.$n("for", [iterator, iteratee, body], self.$for_map(for_t, in_t, do_t, end_t));
      };

      def.$keyword_cmd = function(type, keyword_t, lparen_t, args, rparen_t) {
        var $a, $b, self = this, last_arg = nil;

        if (lparen_t == null) {
          lparen_t = nil
        }
        if (args == null) {
          args = []
        }
        if (rparen_t == null) {
          rparen_t = nil
        }
        if ((($a = (($b = type['$==']("yield")) ? args.$count()['$>'](0) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          last_arg = args.$last();
          if (last_arg.$type()['$==']("block_pass")) {
            self.$diagnostic("error", "block_given_to_yield", nil, self.$loc(keyword_t), [last_arg.$loc().$expression()])};};
        return self.$n(type, args, self.$keyword_map(keyword_t, lparen_t, args, rparen_t));
      };

      def.$preexe = function(preexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("preexe", [compstmt], self.$keyword_map(preexe_t, lbrace_t, [], rbrace_t));
      };

      def.$postexe = function(postexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("postexe", [compstmt], self.$keyword_map(postexe_t, lbrace_t, [], rbrace_t));
      };

      def.$rescue_body = function(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt) {
        var self = this;

        return self.$n("resbody", [exc_list, exc_var, compound_stmt], self.$rescue_body_map(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt));
      };

      def.$begin_body = function(compound_stmt, rescue_bodies, else_t, else_, ensure_t, ensure_) {
        var $a, self = this;

        if (rescue_bodies == null) {
          rescue_bodies = []
        }
        if (else_t == null) {
          else_t = nil
        }
        if (else_ == null) {
          else_ = nil
        }
        if (ensure_t == null) {
          ensure_t = nil
        }
        if (ensure_ == null) {
          ensure_ = nil
        }
        if ((($a = rescue_bodies['$any?']()) !== nil && (!$a._isBoolean || $a == true))) {
          if (else_t !== false && else_t !== nil) {
            compound_stmt = self.$n("rescue", [compound_stmt].concat((rescue_bodies['$+']([else_]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, else_t, else_))
            } else {
            compound_stmt = self.$n("rescue", [compound_stmt].concat((rescue_bodies['$+']([nil]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, nil, nil))
          }};
        if (ensure_t !== false && ensure_t !== nil) {
          compound_stmt = self.$n("ensure", [compound_stmt, ensure_], self.$eh_keyword_map(compound_stmt, ensure_t, [ensure_], nil, nil))};
        return compound_stmt;
      };

      def.$compstmt = function(statements) {
        var $a, self = this;

        return (function() {if ((($a = statements['$none?']()) !== nil && (!$a._isBoolean || $a == true))) {return nil}else if ((($a = statements['$one?']()) !== nil && (!$a._isBoolean || $a == true))) {return statements.$first()}else {return self.$n("begin", statements, self.$collection_map(nil, statements, nil))}})();
      };

      def.$begin = function(begin_t, body, end_t) {
        var $a, $b, $c, $d, self = this;

        if ((($a = body['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n0("begin", self.$collection_map(begin_t, nil, end_t))
        } else if ((($a = ((($b = body.$type()['$==']("mlhs")) !== false && $b !== nil) ? $b : (($c = (($d = body.$type()['$==']("begin")) ? body.$loc().$begin()['$nil?']() : $d), $c !== false && $c !== nil ?body.$loc().$end()['$nil?']() : $c)))) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n(body.$type(), body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
          } else {
          return self.$n("begin", [body], self.$collection_map(begin_t, [body], end_t))
        };
      };

      def.$begin_keyword = function(begin_t, body, end_t) {
        var $a, $b, $c, self = this;

        if ((($a = body['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n0("kwbegin", self.$collection_map(begin_t, nil, end_t))
        } else if ((($a = (($b = (($c = body.$type()['$==']("begin")) ? body.$loc().$begin()['$nil?']() : $c), $b !== false && $b !== nil ?body.$loc().$end()['$nil?']() : $b))) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$n("kwbegin", body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
          } else {
          return self.$n("kwbegin", [body], self.$collection_map(begin_t, [body], end_t))
        };
      };

      self.$private();

      def.$check_condition = function(cond) {
        var $a, $b, self = this, $case = nil, lhs = nil, rhs = nil, type = nil;

        return (function() {$case = cond.$type();if ("masgn"['$===']($case)) {return self.$diagnostic("error", "masgn_as_condition", nil, cond.$loc().$expression())}else if ("begin"['$===']($case)) {if (cond.$children().$count()['$=='](1)) {
          return cond.$updated(nil, [self.$check_condition(cond.$children().$last())])
          } else {
          return cond
        }}else if ("and"['$===']($case) || "or"['$===']($case) || "irange"['$===']($case) || "erange"['$===']($case)) {($a = cond)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), lhs = ($a[0] == null ? nil : $a[0]), rhs = ($a[1] == null ? nil : $a[1]);
        type = (function() {$case = cond.$type();if ("irange"['$===']($case)) {return "iflipflop"}else if ("erange"['$===']($case)) {return "eflipflop"}else { return nil }})();
        if ((($a = ($b = ["and", "or"]['$include?'](cond.$type()), $b !== false && $b !== nil ?self.parser.$version()['$=='](18) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          return cond
          } else {
          return cond.$updated(type, [self.$check_condition(lhs), self.$check_condition(rhs)])
        };}else if ("regexp"['$===']($case)) {return self.$n("match_current_line", [cond], self.$expr_map(cond.$loc().$expression()))}else {return cond}})();
      };

      def.$check_duplicate_args = function(args, map) {
        var $a, $b, TMP_4, self = this;

        if (map == null) {
          map = $hash2([], {})
        }
        return ($a = ($b = args).$each, $a._p = (TMP_4 = function(this_arg){var self = TMP_4._s || this, $a, $case = nil, this_name = nil, that_arg = nil, that_name = nil;
if (this_arg == null) this_arg = nil;
        return (function() {$case = this_arg.$type();if ("arg"['$===']($case) || "optarg"['$===']($case) || "restarg"['$===']($case) || "blockarg"['$===']($case) || "kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case) || "shadowarg"['$===']($case)) {($a = this_arg)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), this_name = ($a[0] == null ? nil : $a[0]);
          that_arg = map['$[]'](this_name);
          ($a = that_arg)['$to_a'] ? ($a = $a['$to_a']()) : ($a)._isArray ? $a : ($a = [$a]), that_name = ($a[0] == null ? nil : $a[0]);
          if ((($a = that_arg['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
            return map['$[]='](this_name, this_arg)
          } else if ((($a = self['$arg_name_collides?'](this_name, that_name)) !== nil && (!$a._isBoolean || $a == true))) {
            return self.$diagnostic("error", "duplicate_argument", nil, this_arg.$loc().$name(), [that_arg.$loc().$name()])
            } else {
            return nil
          };}else if ("mlhs"['$===']($case)) {return self.$check_duplicate_args(this_arg.$children(), map)}else { return nil }})()}, TMP_4._s = self, TMP_4), $a).call($b);
      };

      def['$arg_name_collides?'] = function(this_name, that_name) {
        var $a, self = this, $case = nil;

        return (function() {$case = self.parser.$version();if ((18)['$===']($case)) {return this_name['$=='](that_name)}else if ((19)['$===']($case)) {return ($a = this_name['$==']("_")['$!'](), $a !== false && $a !== nil ?this_name['$=='](that_name) : $a)}else {return ($a = this_name['$[]'](0)['$==']("_")['$!'](), $a !== false && $a !== nil ?this_name['$=='](that_name) : $a)}})();
      };

      def.$n = function(type, children, source_map) {
        var $a, $b, self = this;

        return (($a = ((($b = $scope.AST) == null ? $opal.cm('AST') : $b))._scope).Node == null ? $a.cm('Node') : $a.Node).$new(type, children, $hash2(["location"], {"location": source_map}));
      };

      def.$n0 = function(type, source_map) {
        var self = this;

        return self.$n(type, [], source_map);
      };

      def.$join_exprs = function(left_expr, right_expr) {
        var self = this;

        return left_expr.$loc().$expression().$join(right_expr.$loc().$expression());
      };

      def.$token_map = function(token) {
        var $a, $b, self = this;

        return (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Map == null ? $a.cm('Map') : $a.Map).$new(self.$loc(token));
      };

      def.$delimited_string_map = function(string_t) {
        var $a, $b, $c, self = this, str_range = nil, begin_l = nil, end_l = nil;

        str_range = self.$loc(string_t);
        begin_l = (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Range == null ? $a.cm('Range') : $a.Range).$new(str_range.$source_buffer(), str_range.$begin_pos(), str_range.$begin_pos()['$+'](1));
        end_l = (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Range == null ? $a.cm('Range') : $a.Range).$new(str_range.$source_buffer(), str_range.$end_pos()['$-'](1), str_range.$end_pos());
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Collection == null ? $a.cm('Collection') : $a.Collection).$new(begin_l, end_l, self.$loc(string_t));
      };

      def.$prefix_string_map = function(symbol) {
        var $a, $b, $c, self = this, str_range = nil, begin_l = nil;

        str_range = self.$loc(symbol);
        begin_l = (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Range == null ? $a.cm('Range') : $a.Range).$new(str_range.$source_buffer(), str_range.$begin_pos(), str_range.$begin_pos()['$+'](1));
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Collection == null ? $a.cm('Collection') : $a.Collection).$new(begin_l, nil, self.$loc(symbol));
      };

      def.$unquoted_map = function(token) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Collection == null ? $a.cm('Collection') : $a.Collection).$new(nil, nil, self.$loc(token));
      };

      def.$pair_keyword_map = function(key_t, value_e) {
        var $a, $b, $c, self = this, key_range = nil, key_l = nil, colon_l = nil;

        key_range = self.$loc(key_t);
        key_l = (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Range == null ? $a.cm('Range') : $a.Range).$new(key_range.$source_buffer(), key_range.$begin_pos(), key_range.$end_pos()['$-'](1));
        colon_l = (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Range == null ? $a.cm('Range') : $a.Range).$new(key_range.$source_buffer(), key_range.$end_pos()['$-'](1), key_range.$end_pos());
        return [(($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Collection == null ? $a.cm('Collection') : $a.Collection).$new(nil, nil, key_l), (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Operator == null ? $a.cm('Operator') : $a.Operator).$new(colon_l, key_range.$join(value_e.$loc().$expression()))];
      };

      def.$expr_map = function(loc) {
        var $a, $b, self = this;

        return (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Map == null ? $a.cm('Map') : $a.Map).$new(loc);
      };

      def.$collection_map = function(begin_t, parts, end_t) {
        var $a, $b, $c, self = this, expr_l = nil;

        if ((($a = ((($b = begin_t['$nil?']()) !== false && $b !== nil) ? $b : end_t['$nil?']())) !== nil && (!$a._isBoolean || $a == true))) {
          if ((($a = parts['$any?']()) !== nil && (!$a._isBoolean || $a == true))) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())}
          } else {
          expr_l = self.$loc(begin_t).$join(self.$loc(end_t))
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Collection == null ? $a.cm('Collection') : $a.Collection).$new(self.$loc(begin_t), self.$loc(end_t), expr_l);
      };

      def.$string_map = function(begin_t, parts, end_t) {
        var $a, $b, $c, self = this, expr_l = nil;

        if ((($a = (($b = begin_t !== false && begin_t !== nil) ? self.$value(begin_t)['$start_with?']("<<") : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          if ((($a = parts['$any?']()) !== nil && (!$a._isBoolean || $a == true))) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
            } else {
            expr_l = self.$loc(end_t).$begin()
          };
          return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Heredoc == null ? $a.cm('Heredoc') : $a.Heredoc).$new(self.$loc(begin_t), expr_l, self.$loc(end_t));
          } else {
          return self.$collection_map(begin_t, parts, end_t)
        };
      };

      def.$regexp_map = function(begin_t, end_t, options_e) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Collection == null ? $a.cm('Collection') : $a.Collection).$new(self.$loc(begin_t), self.$loc(end_t), self.$loc(begin_t).$join(options_e.$loc().$expression()));
      };

      def.$constant_map = function(scope, colon2_t, name_t) {
        var $a, $b, $c, self = this, expr_l = nil;

        if ((($a = scope['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          expr_l = self.$loc(name_t)
          } else {
          expr_l = scope.$loc().$expression().$join(self.$loc(name_t))
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Constant == null ? $a.cm('Constant') : $a.Constant).$new(self.$loc(colon2_t), self.$loc(name_t), expr_l);
      };

      def.$variable_map = function(name_t) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Variable == null ? $a.cm('Variable') : $a.Variable).$new(self.$loc(name_t));
      };

      def.$binary_op_map = function(left_e, op_t, right_e) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Operator == null ? $a.cm('Operator') : $a.Operator).$new(self.$loc(op_t), self.$join_exprs(left_e, right_e));
      };

      def.$unary_op_map = function(op_t, arg_e) {
        var $a, $b, $c, self = this, expr_l = nil;

        if (arg_e == null) {
          arg_e = nil
        }
        if ((($a = arg_e['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          expr_l = self.$loc(op_t)
          } else {
          expr_l = self.$loc(op_t).$join(arg_e.$loc().$expression())
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Operator == null ? $a.cm('Operator') : $a.Operator).$new(self.$loc(op_t), expr_l);
      };

      def.$arg_prefix_map = function(op_t, name_t) {
        var $a, $b, $c, self = this, expr_l = nil;

        if (name_t == null) {
          name_t = nil
        }
        if ((($a = name_t['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          expr_l = self.$loc(op_t)
          } else {
          expr_l = self.$loc(op_t).$join(self.$loc(name_t))
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Variable == null ? $a.cm('Variable') : $a.Variable).$new(self.$loc(name_t), expr_l);
      };

      def.$kwarg_map = function(name_t, value_e) {
        var $a, $b, $c, self = this, label_range = nil, name_range = nil, expr_l = nil;

        if (value_e == null) {
          value_e = nil
        }
        label_range = self.$loc(name_t);
        name_range = (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Range == null ? $a.cm('Range') : $a.Range).$new(label_range.$source_buffer(), label_range.$begin_pos(), label_range.$end_pos()['$-'](1));
        if (value_e !== false && value_e !== nil) {
          expr_l = self.$loc(name_t).$join(value_e.$loc().$expression())
          } else {
          expr_l = self.$loc(name_t)
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Variable == null ? $a.cm('Variable') : $a.Variable).$new(name_range, expr_l);
      };

      def.$module_definition_map = function(keyword_t, name_e, operator_t, end_t) {
        var $a, $b, $c, self = this, name_l = nil;

        if (name_e !== false && name_e !== nil) {
          name_l = name_e.$loc().$expression()};
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Definition == null ? $a.cm('Definition') : $a.Definition).$new(self.$loc(keyword_t), self.$loc(operator_t), name_l, self.$loc(end_t));
      };

      def.$definition_map = function(keyword_t, operator_t, name_t, end_t) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Definition == null ? $a.cm('Definition') : $a.Definition).$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), self.$loc(end_t));
      };

      def.$send_map = function(receiver_e, dot_t, selector_t, begin_t, args, end_t) {
        var $a, $b, $c, self = this, begin_l = nil, end_l = nil;

        if (begin_t == null) {
          begin_t = nil
        }
        if (args == null) {
          args = []
        }
        if (end_t == null) {
          end_t = nil
        }
        if (receiver_e !== false && receiver_e !== nil) {
          begin_l = receiver_e.$loc().$expression()
        } else if (selector_t !== false && selector_t !== nil) {
          begin_l = self.$loc(selector_t)};
        if (end_t !== false && end_t !== nil) {
          end_l = self.$loc(end_t)
        } else if ((($a = args['$any?']()) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = args.$last().$loc().$expression()
        } else if (selector_t !== false && selector_t !== nil) {
          end_l = self.$loc(selector_t)};
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Send == null ? $a.cm('Send') : $a.Send).$new(self.$loc(dot_t), self.$loc(selector_t), self.$loc(begin_t), self.$loc(end_t), begin_l.$join(end_l));
      };

      def.$var_send_map = function(variable_e) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Send == null ? $a.cm('Send') : $a.Send).$new(nil, variable_e.$loc().$expression(), nil, nil, variable_e.$loc().$expression());
      };

      def.$send_binary_op_map = function(lhs_e, selector_t, rhs_e) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Send == null ? $a.cm('Send') : $a.Send).$new(nil, self.$loc(selector_t), nil, nil, self.$join_exprs(lhs_e, rhs_e));
      };

      def.$send_unary_op_map = function(selector_t, arg_e) {
        var $a, $b, $c, self = this, expr_l = nil;

        if ((($a = arg_e['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          expr_l = self.$loc(selector_t)
          } else {
          expr_l = self.$loc(selector_t).$join(arg_e.$loc().$expression())
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Send == null ? $a.cm('Send') : $a.Send).$new(nil, self.$loc(selector_t), nil, nil, expr_l);
      };

      def.$send_index_map = function(receiver_e, lbrack_t, rbrack_t) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Send == null ? $a.cm('Send') : $a.Send).$new(nil, self.$loc(lbrack_t).$join(self.$loc(rbrack_t)), nil, nil, receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)));
      };

      def.$block_map = function(receiver_l, begin_t, end_t) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Collection == null ? $a.cm('Collection') : $a.Collection).$new(self.$loc(begin_t), self.$loc(end_t), receiver_l.$join(self.$loc(end_t)));
      };

      def.$keyword_map = function(keyword_t, begin_t, args, end_t) {
        var $a, $b, $c, self = this, end_l = nil;

        ((($a = args) !== false && $a !== nil) ? $a : args = []);
        if (end_t !== false && end_t !== nil) {
          end_l = self.$loc(end_t)
        } else if ((($a = ($b = args['$any?'](), $b !== false && $b !== nil ?args.$last()['$nil?']()['$!']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = args.$last().$loc().$expression()
        } else if ((($a = ($b = args['$any?'](), $b !== false && $b !== nil ?args.$count()['$>'](1) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = args['$[]'](-2).$loc().$expression()
          } else {
          end_l = self.$loc(keyword_t)
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Keyword == null ? $a.cm('Keyword') : $a.Keyword).$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      };

      def.$keyword_mod_map = function(pre_e, keyword_t, post_e) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Keyword == null ? $a.cm('Keyword') : $a.Keyword).$new(self.$loc(keyword_t), nil, nil, self.$join_exprs(pre_e, post_e));
      };

      def.$condition_map = function(keyword_t, cond_e, begin_t, body_e, else_t, else_e, end_t) {
        var $a, $b, $c, self = this, end_l = nil;

        if (end_t !== false && end_t !== nil) {
          end_l = self.$loc(end_t)
        } else if ((($a = (($b = else_e !== false && else_e !== nil) ? else_e.$loc().$expression() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = else_e.$loc().$expression()
        } else if ((($a = self.$loc(else_t)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = self.$loc(else_t)
        } else if ((($a = (($b = body_e !== false && body_e !== nil) ? body_e.$loc().$expression() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = body_e.$loc().$expression()
        } else if ((($a = self.$loc(begin_t)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = self.$loc(begin_t)
          } else {
          end_l = cond_e.$loc().$expression()
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Condition == null ? $a.cm('Condition') : $a.Condition).$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(else_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      };

      def.$ternary_map = function(begin_e, question_t, mid_e, colon_t, end_e) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Ternary == null ? $a.cm('Ternary') : $a.Ternary).$new(self.$loc(question_t), self.$loc(colon_t), self.$join_exprs(begin_e, end_e));
      };

      def.$for_map = function(keyword_t, in_t, begin_t, end_t) {
        var $a, $b, $c, self = this;

        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).For == null ? $a.cm('For') : $a.For).$new(self.$loc(keyword_t), self.$loc(in_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(self.$loc(end_t)));
      };

      def.$rescue_body_map = function(keyword_t, exc_list_e, assoc_t, exc_var_e, then_t, compstmt_e) {
        var $a, $b, $c, self = this, end_l = nil;

        if (compstmt_e !== false && compstmt_e !== nil) {
          end_l = compstmt_e.$loc().$expression()};
        if ((($a = ($b = end_l['$nil?'](), $b !== false && $b !== nil ?then_t : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = self.$loc(then_t)};
        if ((($a = ($b = end_l['$nil?'](), $b !== false && $b !== nil ?exc_var_e : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = exc_var_e.$loc().$expression()};
        if ((($a = ($b = end_l['$nil?'](), $b !== false && $b !== nil ?exc_list_e : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = exc_list_e.$loc().$expression()};
        if ((($a = end_l['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = self.$loc(keyword_t)};
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).RescueBody == null ? $a.cm('RescueBody') : $a.RescueBody).$new(self.$loc(keyword_t), self.$loc(assoc_t), self.$loc(then_t), self.$loc(keyword_t).$join(end_l));
      };

      def.$eh_keyword_map = function(compstmt_e, keyword_t, body_es, else_t, else_e) {
        var $a, $b, $c, self = this, begin_l = nil, end_l = nil;

        if ((($a = compstmt_e['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          if ((($a = keyword_t['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
            begin_l = body_es.$first().$loc().$expression()
            } else {
            begin_l = self.$loc(keyword_t)
          }
          } else {
          begin_l = compstmt_e.$loc().$expression()
        };
        if (else_t !== false && else_t !== nil) {
          if ((($a = else_e['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
            end_l = self.$loc(else_t)
            } else {
            end_l = else_e.$loc().$expression()
          }
        } else if ((($a = body_es.$last()['$nil?']()['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
          end_l = body_es.$last().$loc().$expression()
          } else {
          end_l = self.$loc(keyword_t)
        };
        return (($a = ((($b = ((($c = $scope.Source) == null ? $opal.cm('Source') : $c))._scope).Map == null ? $b.cm('Map') : $b.Map))._scope).Condition == null ? $a.cm('Condition') : $a.Condition).$new(self.$loc(keyword_t), nil, self.$loc(else_t), nil, begin_l.$join(end_l));
      };

      def['$collapse_string_parts?'] = function(parts) {
        var $a, self = this;

        return ($a = parts['$one?'](), $a !== false && $a !== nil ?["str", "dstr"]['$include?'](parts.$first().$type()) : $a);
      };

      def.$value = function(token) {
        var self = this;

        return token['$[]'](0);
      };

      def.$loc = function(token) {
        var $a, $b, self = this;

        if ((($a = (($b = token !== false && token !== nil) ? token['$[]'](0) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          return token['$[]'](1)
          } else {
          return nil
        };
      };

      return (def.$diagnostic = function(type, reason, arguments$, location, highlights) {
        var $a, self = this;

        if (highlights == null) {
          highlights = []
        }
        self.parser.$diagnostics().$process((($a = $scope.Diagnostic) == null ? $opal.cm('Diagnostic') : $a).$new(type, reason, arguments$, location, highlights));
        if (type['$==']("error")) {
          return self.parser.$send("yyerror")
          } else {
          return nil
        };
      }, nil) && 'diagnostic';
    })((($a = $scope.Builders) == null ? $opal.cm('Builders') : $a), null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $gvars = $opal.gvars, $hash2 = $opal.hash2;

  $opal.add_stubs(['$default_parser', '$setup_source_buffer', '$default_encoding', '$parse', '$parse_with_comments', '$read', '$new', '$all_errors_are_fatal=', '$diagnostics', '$ignore_warnings=', '$consumer=', '$lambda', '$puts', '$render', '$respond_to?', '$force_encoding', '$dup', '$==', '$name', '$raw_source=', '$source=', '$private_class_method', '$attr_reader', '$!', '$version', '$diagnostics=', '$static_env=', '$parser=', '$class', '$[]', '$reset', '$source_buffer=', '$do_parse', '$comments=', '$comments', '$tokens=', '$tokens', '$>', '$private', '$advance', '$===', '$diagnostic', '$map', '$process', '$yyerror', '$token_to_str']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a, $b;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self._proto, $scope = self._scope;

      def.diagnostics = def.lexer = def.static_env = def.builder = def.def_level = nil;
      $opal.defs(self, '$parse', function(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        if (file == null) {
          file = "(string)"
        }
        if (line == null) {
          line = 1
        }
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse(source_buffer);
      });

      $opal.defs(self, '$parse_with_comments', function(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        if (file == null) {
          file = "(string)"
        }
        if (line == null) {
          line = 1
        }
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse_with_comments(source_buffer);
      });

      $opal.defs(self, '$parse_file', function(filename) {
        var $a, self = this;

        return self.$parse((($a = $scope.File) == null ? $opal.cm('File') : $a).$read(filename), filename);
      });

      $opal.defs(self, '$parse_file_with_comments', function(filename) {
        var $a, self = this;

        return self.$parse_with_comments((($a = $scope.File) == null ? $opal.cm('File') : $a).$read(filename), filename);
      });

      $opal.defs(self, '$default_parser', function() {
        var $a, $b, TMP_1, self = this, parser = nil;

        parser = self.$new();
        parser.$diagnostics()['$all_errors_are_fatal='](true);
        parser.$diagnostics()['$ignore_warnings='](true);
        parser.$diagnostics()['$consumer='](($a = ($b = self).$lambda, $a._p = (TMP_1 = function(diagnostic){var self = TMP_1._s || this;
          if ($gvars.stderr == null) $gvars.stderr = nil;
if (diagnostic == null) diagnostic = nil;
        return $gvars.stderr.$puts(diagnostic.$render())}, TMP_1._s = self, TMP_1), $a).call($b));
        return parser;
      });

      $opal.defs(self, '$setup_source_buffer', function(file, line, string, encoding) {
        var $a, $b, self = this, source_buffer = nil;

        if ((($a = string['$respond_to?']("force_encoding")) !== nil && (!$a._isBoolean || $a == true))) {
          string = string.$dup().$force_encoding(encoding)};
        source_buffer = (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Buffer == null ? $a.cm('Buffer') : $a.Buffer).$new(file, line);
        if (self.$name()['$==']("Parser::Ruby18")) {
          source_buffer['$raw_source='](string)
          } else {
          source_buffer['$source='](string)
        };
        return source_buffer;
      });

      self.$private_class_method("setup_source_buffer");

      self.$attr_reader("diagnostics");

      self.$attr_reader("builder");

      self.$attr_reader("static_env");

      self.$attr_reader("source_buffer");

      def.$initialize = function(builder) {
        var $a, $b, $c, self = this;

        if (builder == null) {
          builder = (($a = ((($b = ((($c = $scope.Parser) == null ? $opal.cm('Parser') : $c))._scope).Builders == null ? $b.cm('Builders') : $b.Builders))._scope).Default == null ? $a.cm('Default') : $a.Default).$new()
        }
        self.diagnostics = (($a = ((($b = $scope.Diagnostic) == null ? $opal.cm('Diagnostic') : $b))._scope).Engine == null ? $a.cm('Engine') : $a.Engine).$new();
        if ((($a = (($b = $scope.RUBY_PLATFORM) == null ? $opal.cm('RUBY_PLATFORM') : $b)['$==']("ruby")['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.diagnostics['$all_errors_are_fatal='](true)};
        self.static_env = (($a = $scope.StaticEnvironment) == null ? $opal.cm('StaticEnvironment') : $a).$new();
        self.lexer = (($a = $scope.Lexer) == null ? $opal.cm('Lexer') : $a).$new(self.$version());
        self.lexer['$diagnostics='](self.diagnostics);
        self.lexer['$static_env='](self.static_env);
        self.builder = builder;
        self.builder['$parser='](self);
        if ((($a = ($b = (($c = (self.$class())._scope).Racc_debug_parser == null ? $c.cm('Racc_debug_parser') : $c.Racc_debug_parser), $b !== false && $b !== nil ?(($c = $scope.ENV) == null ? $opal.cm('ENV') : $c)['$[]']("RACC_DEBUG") : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          self.yydebug = true};
        return self.$reset();
      };

      def.$reset = function() {
        var self = this;

        self.source_buffer = nil;
        self.def_level = 0;
        self.lexer.$reset();
        self.static_env.$reset();
        return self;
      };

      def.$parse = function(source_buffer) {
        var self = this;

        try {
        self.lexer['$source_buffer='](source_buffer);
        self.source_buffer = source_buffer;
        return self.$do_parse();
        } finally {
        self.source_buffer = nil;
        self.lexer['$source_buffer='](nil);
        };
      };

      def.$parse_with_comments = function(source_buffer) {
        var self = this;

        try {
        self.lexer['$comments=']([]);
        return [self.$parse(source_buffer), self.lexer.$comments()];
        } finally {
        self.lexer['$comments='](nil)
        };
      };

      def.$tokenize = function(source_buffer) {
        var $a, self = this, ast = nil, comments = nil;

        try {
        self.lexer['$tokens=']([]);
        $a = $opal.to_ary(self.$parse_with_comments(source_buffer)), ast = ($a[0] == null ? nil : $a[0]), comments = ($a[1] == null ? nil : $a[1]);
        return [ast, comments, self.lexer.$tokens()];
        } finally {
        self.lexer['$tokens='](nil)
        };
      };

      def['$in_def?'] = function() {
        var self = this;

        return self.def_level['$>'](0);
      };

      self.$private();

      def.$next_token = function() {
        var self = this;

        return self.lexer.$advance();
      };

      def.$check_kwarg_name = function(name_t) {
        var self = this, $case = nil;

        return (function() {$case = name_t['$[]'](0);if (/^[a-z_]/['$===']($case)) {return nil}else if (/^[A-Z]/['$===']($case)) {return self.$diagnostic("error", "argument_const", nil, name_t)}else { return nil }})();
      };

      def.$diagnostic = function(level, reason, arguments$, location_t, highlights_ts) {
        var $a, $b, TMP_2, self = this, _ = nil, location = nil, highlights = nil;

        if (highlights_ts == null) {
          highlights_ts = []
        }
        $a = $opal.to_ary(location_t), _ = ($a[0] == null ? nil : $a[0]), location = ($a[1] == null ? nil : $a[1]);
        highlights = ($a = ($b = highlights_ts).$map, $a._p = (TMP_2 = function(token){var self = TMP_2._s || this, $a, range = nil;
if (token == null) token = nil;
        $a = $opal.to_ary(token), _ = ($a[0] == null ? nil : $a[0]), range = ($a[1] == null ? nil : $a[1]);
          return range;}, TMP_2._s = self, TMP_2), $a).call($b);
        self.diagnostics.$process((($a = $scope.Diagnostic) == null ? $opal.cm('Diagnostic') : $a).$new(level, reason, arguments$, location, highlights));
        if (level['$==']("error")) {
          return self.$yyerror()
          } else {
          return nil
        };
      };

      return (def.$on_error = function(error_token_id, error_value, value_stack) {
        var $a, self = this, token_name = nil, _ = nil, location = nil;

        token_name = self.$token_to_str(error_token_id);
        $a = $opal.to_ary(error_value), _ = ($a[0] == null ? nil : $a[0]), location = ($a[1] == null ? nil : $a[1]);
        return self.diagnostics.$process((($a = $scope.Diagnostic) == null ? $opal.cm('Diagnostic') : $a).$new("error", "unexpected_token", $hash2(["token"], {"token": token_name}), location));
      }, nil) && 'on_error';
    })(self, (($a = ((($b = $scope.Racc) == null ? $opal.cm('Racc') : $b))._scope).Parser == null ? $a.cm('Parser') : $a.Parser))
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$insert_before', '$insert_after', '$replace']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a, $b, $c;

    (function($base, $super) {
      function $Rewriter(){};
      var self = $Rewriter = $klass($base, $super, 'Rewriter', $Rewriter);

      var def = self._proto, $scope = self._scope;

      def.source_rewriter = nil;
      def.$rewrite = function(source_buffer, ast) {
        var $a, $b, self = this;

        self.source_rewriter = (($a = ((($b = $scope.Source) == null ? $opal.cm('Source') : $b))._scope).Rewriter == null ? $a.cm('Rewriter') : $a.Rewriter).$new(source_buffer);
        self.$process(ast);
        return self.source_rewriter.$process();
      };

      def['$assignment?'] = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type());
      };

      def.$remove = function(range) {
        var self = this;

        return self.source_rewriter.$remove(range);
      };

      def.$insert_before = function(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content);
      };

      def.$insert_after = function(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content);
      };

      return (def.$replace = function(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content);
      }, nil) && 'replace';
    })(self, (($a = ((($b = ((($c = $scope.Parser) == null ? $opal.cm('Parser') : $c))._scope).AST == null ? $b.cm('AST') : $b.AST))._scope).Processor == null ? $a.cm('Processor') : $a.Processor))
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$<', '$raise']);
  ;
  ;
  ;
  if ((($a = $scope.RUBY_VERSION) == null ? $opal.cm('RUBY_VERSION') : $a)['$<']("1.9")) {
    };
  if ((($a = $scope.RUBY_VERSION) == null ? $opal.cm('RUBY_VERSION') : $a)['$<']("2.0")) {
    };
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope;

    ;

    ;

    (function($base) {
      var self = $module($base, 'AST');

      var def = self._proto, $scope = self._scope;

      ;

      ;

      ;
      
    })(self);

    (function($base) {
      var self = $module($base, 'Source');

      var def = self._proto, $scope = self._scope;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;

      ;
      
    })(self);

    ;

    ;

    ;

    ;

    ;

    ;

    ;

    (function($base) {
      var self = $module($base, 'Builders');

      var def = self._proto, $scope = self._scope;

      
      
    })(self);

    ;

    ;

    $opal.defs(self, '$check_for_encoding_support', function() {
      var $a, self = this;

      if ((($a = ($scope.Encoding != null)) !== nil && (!$a._isBoolean || $a == true))) {
        return nil
        } else {
        return self.$raise((($a = $scope.RuntimeError) == null ? $opal.cm('RuntimeError') : $a), "Parsing 1.9 and later versions of Ruby is not supported on 1.8 due to the lack of Encoding support")
      };
    });
    
  })(self);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash = $opal.hash, $range = $opal.range;

  $opal.add_stubs(['$new', '$each', '$empty?', '$[]=', '$to_i', '$+', '$split', '$[]', '$!', '$nil?', '$diagnostic', '$begin_body', '$compstmt', '$<<', '$state=', '$alias', '$gvar', '$back_ref', '$undef_method', '$condition_mod', '$loop_mod', '$rescue_body', '$in_def?', '$preexe', '$postexe', '$assign', '$multi_assign', '$op_assign', '$index', '$call_method', '$array', '$logical_op', '$not_op', '$keyword_cmd', '$extend_dynamic', '$unextend', '$block', '$multi_lhs', '$begin', '$splat', '$assignable', '$index_asgn', '$attr_asgn', '$const_fetch', '$const_global', '$const', '$symbol', '$range_inclusive', '$range_exclusive', '$binary_op', '$unary_op', '$integer', '$float', '$ternary', '$associate', '$concat', '$push', '$dup', '$cmdarg', '$cmdarg=', '$block_pass', '$begin_keyword', '$condition', '$cond', '$pop', '$loop', '$case', '$for', '$extend_static', '$def_class', '$def_sclass', '$def_module', '$def_method', '$-', '$def_singleton', '$arg_expr', '$blockarg_expr', '$restarg_expr', '$args', '$when', '$string_compose', '$string', '$xstring_compose', '$regexp_options', '$regexp_compose', '$words_compose', '$word', '$string_internal', '$lexpop', '$ivar', '$cvar', '$symbol_compose', '$negate', '$ident', '$nil', '$self', '$true', '$false', '$__FILE__', '$__LINE__', '$accessible', '$nth_ref', '$yyerrok', '$declare', '$arg', '$optarg', '$restarg', '$blockarg', '$pair_list_18', '$pair']);
  ;
  ;
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a, $b;

    (function($base, $super) {
      function $Ruby18(){};
      var self = $Ruby18 = $klass($base, $super, 'Ruby18', $Ruby18);

      var def = self._proto, $scope = self._scope, $a, $b, TMP_1, $c, TMP_3, $d, TMP_5, $e, TMP_7, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      def.builder = def.lexer = def.static_env = def.def_level = nil;
      def.$version = function() {
        var self = this;

        return 18;
      };

      def.$default_encoding = function() {
        var $a, $b, self = this;

        if ((($a = ($scope.Encoding != null)) !== nil && (!$a._isBoolean || $a == true))) {
          return (($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).BINARY == null ? $a.cm('BINARY') : $a.BINARY)
          } else {
          return nil
        };
      };

      clist = ["-480,195,196,195,196,489,814,-480,-480,-480,511,578,578,-480,-480,-87", "-480,768,579,579,489,72,531,-83,558,-480,758,489,-82,73,195,196,-84", "395,-69,-480,-480,-81,-480,-480,-480,-480,-480,489,489,477,591,-86,479", "-80,-61,-429,659,658,662,661,590,99,557,558,291,291,98,-81,-480,-480", "-480,-480,-480,-480,-480,-480,-480,-480,-480,-480,-480,-480,234,-87", "-480,-480,-480,722,546,530,-476,-76,-480,-69,99,-480,291,557,621,98", "-480,-80,-480,-85,-480,-480,-480,-480,-480,-480,-480,-277,-480,-480", "-480,580,259,510,-277,-277,-277,99,-79,488,-277,-277,98,-277,-480,-480", "-75,-75,431,-480,-83,-74,99,99,488,-76,-74,98,98,99,-73,488,-277,-277", "98,-277,-277,-277,-277,-277,-78,-76,-72,690,259,99,99,488,488,621,98", "98,-477,621,502,195,196,259,503,-76,713,-277,-277,-277,-277,-277,-277", "-277,-277,-277,-277,-277,-277,-277,-277,521,558,-277,-277,-277,-76,549", "99,-76,620,-277,258,98,-277,-82,-74,558,-77,-277,745,-277,521,-277,-277", "-277,-277,-277,-277,-277,-226,-277,254,-277,-74,691,557,-226,-226,-226", "-480,463,-226,-226,-226,254,-226,-277,-277,194,-77,557,-277,-85,258", "-74,-226,477,-74,606,476,496,523,522,526,-226,-226,258,-226,-226,-226", "-226,-226,99,521,620,291,99,98,620,814,-84,98,523,522,477,99,-86,482", "251,-480,98,-79,673,469,-87,252,-480,541,521,749,-480,-476,521,-421", "-226,-480,-272,99,-429,575,-421,-226,98,-272,-272,-272,254,-226,-272", "-272,-272,568,-272,-480,516,659,658,662,661,743,-424,517,-272,-272,523", "522,524,-424,753,-226,-74,-272,-272,-82,-272,-272,-272,-272,-272,-417", "-480,-72,755,-226,-80,-226,-417,-480,-226,523,522,527,-476,523,522,532", "-480,495,758,496,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272", "-272,-272,-272,-480,-423,-272,-272,-272,-277,477,-272,-423,479,-272", "521,-277,-272,-272,680,-272,-477,-272,759,-272,-277,-272,-272,-272,-272", "-272,-272,-272,-226,-272,-477,-272,542,-480,99,-226,-226,-226,463,98", "-226,-226,-226,-476,-226,-272,-272,-272,-272,760,-272,-422,-427,761", "-226,215,-474,-73,-422,-427,-81,763,-473,-226,-226,215,-226,-226,-226", "-226,-226,523,522,519,215,-76,195,196,-84,-426,-477,-78,-428,-480,-86", "215,-426,-477,-260,-428,-480,215,-477,-476,215,-476,-477,212,-428,-480", "-476,214,213,-226,466,-476,-421,284,285,-476,-226,467,-417,-421,-477", "254,-226,-480,-474,-417,393,254,-421,540,-473,-259,212,-476,-417,391", "214,213,210,211,461,462,392,538,-226,655,-474,653,652,651,654,393,-473", "-476,-476,-476,536,-476,-226,99,-226,-476,-476,-226,98,535,-476,606", "-476,-476,-476,-476,-476,-476,-476,734,606,662,661,-476,-476,-476,-476", "-476,-476,-476,215,195,196,-425,291,659,658,662,661,-476,-425,740,-476", "-476,-476,-476,-476,-476,-476,-476,-476,-476,739,-476,-476,769,-476", "-476,-476,215,734,606,212,738,-278,606,214,213,210,211,-278,-278,777", "778,568,229,230,-278,-476,692,-278,-476,-476,616,-476,-476,-278,568", "-476,730,-476,212,-476,218,-476,214,213,210,211,498,358,216,-476,217", "360,359,499,-476,-476,-476,-476,-476,-476,254,254,497,-476,-476,-477", "-477,-477,215,-477,728,234,-83,-477,-477,-259,496,568,-477,790,-477", "-477,-477,-477,-477,-477,-477,791,792,501,500,-477,-477,-477,-477,-477", "-477,-477,667,668,212,669,93,94,214,213,351,-477,724,624,-477,-477,-477", "-477,-477,-477,-477,-477,-477,-477,797,-477,-477,215,-477,-477,-477", "215,219,224,225,226,221,223,231,232,227,228,-319,-497,-497,-279,799", "229,230,-319,-477,549,-279,-477,-477,215,-477,-477,-319,484,-477,-279", "-477,212,-477,218,-477,214,213,210,211,222,220,216,-477,217,254,481", "708,-477,-477,-477,-477,-477,-477,672,507,805,-477,-477,62,63,64,505", "51,291,807,-85,56,57,291,254,506,60,472,58,59,61,23,24,65,66,675,471", "818,215,22,28,27,88,87,89,90,465,464,17,436,254,825,291,537,826,41,827", "263,92,91,82,50,84,83,86,85,93,94,829,80,81,830,38,39,37,215,219,224", "225,226,221,223,231,232,227,228,823,208,209,-278,832,229,230,824,200", "459,-278,204,835,453,52,53,822,452,54,-278,451,212,839,218,40,214,213", "210,211,222,220,216,18,217,840,-60,721,79,72,74,75,76,77,846,847,848", "73,78,592,99,233,758,-215,-277,98,62,63,64,7,51,-277,759,436,56,57,-477", "431,428,60,-277,58,59,61,23,24,65,66,426,397,396,394,22,28,27,88,87", "89,90,861,361,17,101,102,103,104,105,6,41,8,9,92,91,82,50,84,83,86,85", "93,94,436,80,81,693,38,39,37,215,219,224,225,226,221,223,231,232,227", "228,192,-497,-497,-271,568,229,230,193,36,349,-271,30,568,471,52,53", "191,704,54,-271,32,212,291,218,40,214,213,210,211,222,220,216,18,217", "717,283,874,79,72,74,75,76,77,875,-271,876,73,78,62,63,64,-271,51,282", "351,457,56,57,431,234,-271,60,458,58,59,61,246,247,65,66,715,456,190", "189,245,275,279,88,87,89,90,101,102,103,104,105,880,188,431,883,276", "758,885,92,91,82,50,84,83,86,85,93,94,886,80,81,215,187,655,280,653", "652,651,654,-279,186,568,-428,243,568,707,-279,229,230,-428,95,568,", ",772,-279,,204,-428,,52,53,,212,54,218,,214,213,210,211,645,,216,,217", ",,,659,658,662,661,79,72,74,75,76,77,,,,73,78,,62,63,64,775,51,,,,56", "57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,101,102", "103,104,105,,,537,,276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,,280", "215,219,224,225,226,221,223,231,232,227,228,-277,208,209,,,229,230,-277", "772,,,204,-477,,52,53,-277,,54,,,212,,218,,214,213,210,211,222,220,216", ",217,,,,79,72,74,75,76,77,,,,73,78,,,233,,855,5,62,63,64,7,51,,,,56", "57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6", "41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,", ",,,,,36,,,30,,,52,53,,,54,,32,,,,40,655,,653,652,651,654,,18,,,,,79", "72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23", "24,65,66,659,658,662,661,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,", "30,,,52,53,,,54,,32,,,,40,655,,653,652,651,654,,18,,,,,79,72,74,75,76", "77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,645,58,59,61,23,24,65,66", "659,658,662,661,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50", "84,83,86,85,93,94,,80,81,,38,39,37,215,,,,,,,,,,,,,,,,229,230,,36,,", "30,,,52,53,,,54,,32,212,,218,40,214,213,210,211,,,216,18,217,,,,79,72", "74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24", "65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,215,,,,,,,,,,,,,,,,229,230,,36,,,30,,,52", "53,,,54,,32,212,,218,40,214,213,210,211,,,216,18,217,,,,79,72,74,75", "76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66", ",,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85", "93,94,,80,81,,38,39,37,215,-497,-497,-497,-497,221,223,,,-497,-497,", ",,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40,214,213,210,211,222", "220,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57", ",,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41", "8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,215,-497,-497,-497", "-497,221,223,,,-497,-497,,,,,,229,230,,36,,,30,,,52,53,,,54,,32,212", ",218,40,214,213,210,211,222,220,216,18,217,,,,79,72,74,75,76,77,,,,73", "78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27", "88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81", ",38,39,37,215,-497,-497,-497,-497,221,223,,,-497,-497,,,,,,229,230,", "36,,,30,,,52,53,,,54,,32,212,,218,40,214,213,210,211,222,220,216,18", "217,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58", "59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91", "82,50,84,83,86,85,93,94,,80,81,,38,39,37,215,-497,-497,-497,-497,221", "223,,,-497,-497,,,,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40,214", "213,210,211,222,220,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63", "64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90", ",,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,215", "-497,-497,-497,-497,221,223,,,-497,-497,,,,,,229,230,,36,,,30,,,52,53", ",,54,,32,212,,218,40,214,213,210,211,222,220,216,18,217,,,,79,72,74", "75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65", "66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86", "85,93,94,,80,81,,38,39,37,215,219,224,225,226,221,223,,,227,228,,,,", ",229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40,214,213,210,211,222,220", "216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,", ",60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8", "9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,215,219,224,225,226", "221,223,231,,227,228,,,,,,229,230,,36,,,265,,,52,53,,,54,,32,212,,218", "40,214,213,210,211,222,220,216,18,217,,,,79,72,74,75,76,77,,,,73,78", "5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88", "87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38", "39,37,215,-497,-497,-497,-497,221,223,,,-497,-497,,,,,,229,230,,36,", ",30,,,52,53,,,54,,32,212,,218,40,214,213,210,211,222,220,216,18,217", ",,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59", "61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82", "50,84,83,86,85,93,94,,80,81,,38,39,37,215,,,,,,,,,,,,,,,,229,230,,36", ",,265,,,52,53,,,54,,32,212,,218,40,214,213,210,211,,,,18,,,,,79,72,74", "75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65", "66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86", "85,93,94,,80,81,,38,39,37,215,,,,,,,,,,,,,,,,229,230,,36,,,30,,,52,53", ",,54,,32,212,,,40,214,213,210,211,,,,18,,,,,79,72,74,75,76,77,,,,73", "78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27", "88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81", ",38,39,37,215,,,,,,,,,,,,,,,,229,230,,36,,,265,,,52,53,,,54,,32,212", ",218,40,214,213,210,211,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63", "64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90", ",,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,", ",,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72", "74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24", "65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54", ",32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,", ",,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,", ",,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,", ",,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76", "77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,", ",22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93", "94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40", ",,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,", ",60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8", "9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,", "36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73", "78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27", "88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81", ",38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18", ",,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59", "61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82", "50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52", "53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64", "7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,", ",17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,", ",,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74", "75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65", "66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86", "85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32", ",,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56", "57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6", "41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,", ",,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77", ",,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22", "28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,", "80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,", ",,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60", ",58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,", "30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5", "62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87", "89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79", "72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23", "24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84", "83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,", ",54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51", ",,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75", "76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,", ",,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93", "94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40", ",,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,,,280,,,,,,,,,,,,,,,,,,,,273,,,270", ",,52,53,,,54,,821,,820,,,,,,,,,,,,,,,79,72,74,75,76,77,,,,73,78,62,63", "64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90", ",,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,", ",,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74", "75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66", ",,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93", "94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40", ",,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91", "82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204", ",,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63", "64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87", "89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,,280,,215", "219,224,225,226,221,223,231,232,227,228,,208,209,,,229,230,315,,,30", ",,52,53,,,54,,32,,212,,218,,214,213,210,211,222,220,216,,217,,,79,72", "74,75,76,77,,,,73,78,62,63,64,233,51,568,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,320,50,84", "83,321,85,93,94,,80,81,,,,280,,215,219,224,225,226,221,223,231,232,227", "228,,208,209,,327,229,230,322,,,204,,,52,53,,,54,,,,212,,218,,214,213", "210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51", ",,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,", ",,,,,,,,276,,,92,91,320,50,84,83,321,85,93,94,,80,81,,,,280,,215,219", "224,225,226,221,223,231,232,227,228,,208,209,,,229,230,322,,,204,,,52", "53,,,54,,,,212,,218,,214,213,210,211,222,220,216,,217,,,79,72,74,75", "76,77,,,,73,78,62,63,64,233,51,,,,56,57,,,,60,,58,59,61,246,247,65,66", ",,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93", "94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,560,", "243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56", "57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,", ",,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,", ",,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77", ",,,73,78,-473,-473,-473,,-473,,,,-473,-473,,,,-473,,-473,-473,-473,-473", "-473,-473,-473,,-473,,,-473,-473,-473,-473,-473,-473,-473,,,,,,,,,,-473", ",,-473,-473,-473,-473,-473,-473,-473,-473,-473,-473,,-473,-473,,-473", "-473,-473,,,,,,,,,,,,,,,,,,,,-473,,,-473,-473,,-473,-473,,,-473,,-473", ",-473,,-473,,,,,,,,-473,,-473,,,-473,-473,-473,-473,-473,-473,,,,-473", "-473,-474,-474,-474,,-474,,,,-474,-474,,,,-474,,-474,-474,-474,-474", "-474,-474,-474,,-474,,,-474,-474,-474,-474,-474,-474,-474,,,,,,,,,,-474", ",,-474,-474,-474,-474,-474,-474,-474,-474,-474,-474,,-474,-474,,-474", "-474,-474,,,,,,,,,,,,,,,,,,,,-474,,,-474,-474,,-474,-474,,,-474,,-474", ",-474,,-474,,,,,,,,-474,,-474,,,-474,-474,-474,-474,-474,-474,,,,-474", "-474,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275", "279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,", "38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,867,,243,,40,,,", ",,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,", "58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87", "89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37", ",,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72", "74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65", "66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85", "93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,", ",,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57", ",,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,", ",92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200", ",,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87", "89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37", ",,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72", "74,75,76,77,,,,73,78,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65", "66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86", "85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32", ",,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57", ",,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41", ",,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,", "200,,,204,,,52,53,,,54,,864,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77", ",,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245", "275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80", "81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,", ",,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58", "59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91", "82,50,84,83,86,85,93,94,,80,81,,,,280,,215,219,224,225,226,221,223,231", "232,227,228,,208,209,,,229,230,772,,,204,,,52,53,,,54,,,,212,,218,,214", "213,210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233", "51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90", ",,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,", ",,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75", "76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,", ",,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93", "94,,80,81,,,,280,,,,,,,,,,,,,,,,,,,,273,,,270,,,52,53,,,54,,697,,698", ",,,,,,,,699,,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,", ",60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,369,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73", "78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88", "87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37", ",,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,369,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23", "24,65,66,,,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86", "85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54", ",,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56", "57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,", "41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,", ",,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77", ",,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245", "275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80", "81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,", ",,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58", "59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91", "82,50,84,83,86,85,93,94,,80,81,,,,280,,215,219,224,225,226,221,223,231", "232,227,228,,208,209,,,229,230,273,,,204,,,52,53,,,54,,,,212,,218,,214", "213,210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233", "51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22", "28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80", "81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,", ",,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58", "59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82", "50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,", ",52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64", ",51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89", "90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,", ",,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74", "75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66", ",,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,564,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,", "73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23", "24,65,66,,,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86", "85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54", ",,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56", "57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,", ",,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,", ",,,,,200,,,204,,,52,53,,,54,,679,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,", "245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,,,280,,215,219,224,225,226,221,223,231,232,227,228,,208,209", ",,229,230,273,,,270,,,52,53,,,54,,269,,212,,218,,214,213,210,211,222", "220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51,,,,56,57,", ",,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41", ",,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,", "200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73", "78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,", ",56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,", "245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,", ",56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,", "245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,", ",56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,", "245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,", ",56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,", "245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,", ",56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,", "245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,", ",56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,", ",,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,", ",,,,,,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75", "76,77,,,,73,78,-249,-249,-249,,-249,,,,-249,-249,,,,-249,,-249,-249", "-249,-249,-249,-249,-249,,,,,-249,-249,-249,-249,-249,-249,-249,,,,", ",,,,,-249,,,-249,-249,-249,-249,-249,-249,-249,-249,-249,-249,,-249", "-249,,-249,-249,-249,,,,,,,,,,,,,,,,,,,,-249,,,-249,263,,-249,-249,", ",-249,,-249,,-249,,-249,,,,,,,,-249,,,,,-249,-249,-249,-249,-249,-249", ",,,-249,-249,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,", ",245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,,280", ",,,,,,,,,,,,,,,,,,,772,,,204,,,52,53,,,54,,,,,,,,,,,,,,,,,,,79,72,74", "75,76,77,,,,73,78,153,164,154,177,150,170,160,159,180,181,175,158,157", "152,178,182,183,162,151,165,169,171,163,156,,,172,179,174,173,166,176", "161,149,168,167,,,,,,148,155,146,147,144,145,109,111,,,110,,,,,,,,139", "140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,", ",134,133,,120,138,136,135,131,132,127,125,118,,119,,,143,79,,,62,63", "64,,51,,,78,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87", "89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,", ",,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72", "74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65", "66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85", "93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,", ",,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57", ",,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41", ",,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,", "200,,,204,,,52,53,,,54,,241,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77", ",,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245", "28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81", ",38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,445,53,,,54,,241,,243,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,,,92,91", "82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204", ",449,52,53,,,54,,241,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73", "78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,-249,-249,-249,,-249,,,,-249,-249,,,,-249", ",-249,-249,-249,-249,-249,-249,-249,,,,,-249,-249,-249,-249,-249,-249", "-249,,,,,,,,,,-249,,,-249,-249,-249,-249,-249,-249,-249,-249,-249,-249", ",-249,-249,,-249,-249,-249,,,,,,,,,,,,,,,,,,,,-249,,,-249,254,,-249", "-249,,,-249,,-249,,-249,,-249,,,,,,,,-249,,,,,-249,-249,-249,-249,-249", "-249,,,,-249,-249,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66", ",,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93", "94,,80,81,,,,280,,215,219,224,225,226,221,223,231,232,227,228,,208,209", ",,229,230,772,,,204,,,52,53,,,54,,,,212,,218,,214,213,210,211,222,220", "216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84", "83,86,85,93,94,,80,81,,,,280,,215,219,224,225,226,221,223,231,232,227", "228,,208,209,,,229,230,273,,,204,,,52,53,,,54,,,,212,,218,,214,213,210", "211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51,,", ",56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,", "245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,,,92,91", "82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204", ",,52,53,,,54,,241,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,889,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64", ",51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89", "90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,", ",,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74", "75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66", ",,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93", "94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40", ",,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,,,92,91", "82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204", ",,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62", "63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87", "89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,", ",,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79", "72,74,75,76,77,,,,73,78,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24", "65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54", ",32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56", "57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,", "41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,", ",,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77", ",,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245", "28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81", ",38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,241,,243,,40,,", ",,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,628,,,,40,,,,,,,,207,", ",,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61", "246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84", "83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53", ",,54,,241,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64", ",51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89", "90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,", ",,,,,,,,,,,,,,,200,,,204,469,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72", "74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65", "66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85", "93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,", ",,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57", ",,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,", ",92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200", ",,204,,,52,53,,,54,,584,,243,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,", "73,78,-479,-479,-479,,-479,,,,-479,-479,,,,-479,,-479,-479,-479,-479", "-479,-479,-479,,,,,-479,-479,-479,-479,-479,-479,-479,,,,,,,,,,-479", ",,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,,-479,-479,,-479", "-479,-479,,,,,,,,,,,,,,,,,,,,-479,,,-479,-479,,-479,-479,,,-479,,-479", ",-479,,-479,,,,,,,,-479,,,,,-479,-479,-479,-479,-479,-479,,,,-479,-479", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,", "79,72,74,75,76,77,,,,73,78,-478,-478,-478,,-478,,,,-478,-478,,,,-478", ",-478,-478,-478,-478,-478,-478,-478,,,,,-478,-478,-478,-478,-478,-478", "-478,,,,,,,,,,-478,,,-478,-478,-478,-478,-478,-478,-478,-478,-478,-478", ",-478,-478,,-478,-478,-478,,,,,,,,,,,,,,,,,,,,-478,,,-478,-478,,-478", "-478,,,-478,,-478,,-478,,-478,,,,,,,,-478,,,,,-478,-478,-478,-478,-478", "-478,,,,-478,-478,153,164,154,177,150,170,160,159,180,181,175,158,157", "152,178,182,183,162,151,165,169,171,163,156,,,172,179,174,173,166,176", "161,149,168,167,,,,,,148,155,146,147,144,145,109,111,108,,110,,,,,,", ",139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,", ",,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,,,143,79,,,62", "63,64,,51,,,78,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88", "87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37", ",,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79", "72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24", "65,66,,,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85", "93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,", ",,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57", ",,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41", ",,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,", "200,,,204,,,52,53,,,54,,802,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,", ",,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28", "27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81", ",38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18", ",,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61", "246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50", "84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52", "53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,", "51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22", "28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81", ",38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207", ",,,,79,72,74,75,76,77,,,,73,78,153,164,154,177,150,170,160,159,180,181", "175,158,157,152,178,182,183,162,151,165,169,171,163,156,,,172,179,174", "173,166,176,161,149,168,167,,,,,,148,155,146,147,144,145,109,111,,,110", ",,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,", ",,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,,,143", "79,,,62,63,64,,51,,,78,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27", "88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38", "39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,", ",,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23", "24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,-249,-249,-249,", "-249,,,,-249,-249,,,,-249,,-249,-249,-249,-249,-249,-249,-249,,,,,-249", "-249,-249,-249,-249,-249,-249,,,,,,,,,,-249,,,-249,-249,-249,-249,-249", "-249,-249,-249,-249,-249,,-249,-249,,-249,-249,-249,,,,,,,,,,,,,,,,", ",,,-249,,,-249,254,,-249,-249,,,-249,,-249,,-249,,-249,,,,,,,,-249,", ",,,-249,-249,-249,-249,-249,-249,,,,-249,-249,62,63,64,,51,,,,56,57", ",,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276", ",,92,91,82,50,84,83,86,85,93,94,,80,81,,,,280,,215,219,224,225,226,221", "223,231,232,227,228,,208,209,,,229,230,772,,,204,,,52,53,,,54,,,,212", ",218,,214,213,210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78", "62,63,64,233,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88", "87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79", "72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247", "65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85", "93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,299", ",,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57", ",,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41", ",,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,", "200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73", "78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,,280", ",215,219,224,225,226,221,223,231,232,227,228,,208,209,,,229,230,772", ",,204,,,52,53,,,54,,,,212,,218,,214,213,210,211,222,220,216,,217,,,79", "72,74,75,76,77,,,,73,78,62,63,64,233,51,,,,56,57,,,,60,,58,59,61,246", "247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83", "86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,", "54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,", ",56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,", ",,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,", ",,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76", "77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,", "245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78", "62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279", "88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,788,,243,,40,,,,,,,,207", ",,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61", "246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50", "84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52", "53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,", "51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90", ",,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,", ",,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75", "76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,", ",22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94", ",80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,", ",,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60", ",58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92", "91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,", ",204,,,52,53,,,54,,786,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,", "73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275", "279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,", "38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207", ",,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61", "246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50", "84,83,86,85,93,94,,80,81,,,,280,,215,219,224,225,226,221,223,231,232", "227,228,,208,209,,,229,230,772,,,204,,,52,53,,,54,,,,212,,218,,214,213", "210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51", ",,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,", ",,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,", ",,,,,,,,,,,200,,,204,,,52,53,,,54,,780,,243,,40,,,,,,,,207,,,,,79,72", "74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65", "66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85", "93,94,,80,81,,,,280,,215,219,224,225,226,221,223,231,232,227,228,,208", "209,,,229,230,772,,,204,,,52,53,,,54,,,,212,,218,,214,213,210,211,222", "220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51,,,,56,57,", ",,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,", ",92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200", ",,204,,,52,53,,,54,,560,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,", ",73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275", "279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,", "38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207", ",,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61", "246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50", "84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52", "53,,,54,,612,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64", ",51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89", "90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,", ",,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74", "75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66", ",,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93", "94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40", ",,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,153,164,154,177,150,170,160", "159,180,181,175,158,157,152,178,182,183,162,151,165,169,171,163,156", ",,172,179,174,173,166,176,161,149,168,167,,,,,,148,155,146,147,144,145", "109,111,,,110,,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141", "142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118", ",119,,,143,79,,,62,63,64,,51,,,78,56,57,,,,60,,58,59,61,246,247,65,66", ",,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93", "94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,369,", ",,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57", ",,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41", ",,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,", "200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73", "78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88", "87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39", "37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79", "72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247", "65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86", "85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54", ",,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56", "57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,", ",,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,,38,39,37,,,,,,,,,,,,,,", ",,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77", ",,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245", "275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80", "81,,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,", ",,207,,,,,79,72,74,75,76,77,,,,73,78,153,164,154,177,150,170,160,159", "180,181,175,158,157,152,178,182,183,162,151,165,169,171,163,156,,,172", "179,174,173,166,176,161,149,168,167,,,,,,148,155,146,147,144,145,109", "111,,,110,,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142", "129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119", ",,143,153,164,154,177,150,170,160,159,180,181,175,158,157,152,178,182", "183,162,151,165,169,171,163,156,,,172,179,174,336,335,337,334,149,168", "167,,,,,,148,155,146,147,332,333,330,111,84,83,331,85,,,,,,,139,140", ",137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,341,,,,,,,", "134,133,,120,138,136,135,131,132,127,125,118,,119,,,143,215,219,224", "225,226,221,223,231,232,227,228,,208,209,,,229,230,,,,-215,,,,,,,,,", ",212,,218,,214,213,210,211,222,220,216,,217,,,,,,,,552,385,,,553,,,", ",233,,-215,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130", ",,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,433,379", "143,,434,,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142", "129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119", "433,379,143,,434,,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,", "141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125", "118,,119,857,379,143,,858,,,,,,,,139,140,,137,121,122,123,,126,128,", ",124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132", "127,125,118,,119,376,379,143,,377,,,,,,,,139,140,,137,121,122,123,,126", "128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135", "131,132,127,125,118,,119,433,379,143,,434,,,,,,,,139,140,,137,121,122", "123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138", "136,135,131,132,127,125,118,,119,552,385,143,,553,,,,,,,,139,140,,137", "121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133", ",120,138,136,135,131,132,127,125,118,,119,,,143,215,219,224,225,226", "221,223,231,232,227,228,,208,209,,,229,230,,,,,,,,,,,,,,,212,,218,,214", "213,210,211,222,220,216,,217,,,,,,,550,379,,,551,,,,,,233,556,139,140", ",137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134", "133,,120,138,136,135,131,132,127,125,118,,119,381,385,143,,383,,,,,", ",,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,", ",,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,433,379,143", ",434,,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129", "130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,859", "385,143,,860,,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141", "142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118", ",119,635,385,143,,636,,,,,,,,139,140,,137,121,122,123,,126,128,,,124", ",,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127", "125,118,,119,632,385,143,,633,,,,,,,,139,140,,137,121,122,123,,126,128", ",,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131", "132,127,125,118,,119,630,379,143,,631,,,,,,,,139,140,,137,121,122,123", ",126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136", "135,131,132,127,125,118,,119,597,385,143,,598,,,,,,,,139,140,,137,121", "122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120", "138,136,135,131,132,127,125,118,,119,594,379,143,,595,,,,,,,,139,140", ",137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134", "133,,120,138,136,135,131,132,127,125,118,,119,550,379,143,,551,,,,,", ",,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,", ",,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,433,379,143", ",434,,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129", "130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,", ",143,215,219,224,225,226,221,223,231,232,227,228,,208,209,,,229,230", ",,,,,,,,,,,,,,212,,218,,214,213,210,211,222,220,216,,217,,215,219,224", "225,226,221,223,231,232,227,228,,208,209,291,233,229,230,,,,,,,,,,,", ",,,212,,218,,214,213,210,211,222,220,216,,217,,215,219,224,225,226,221", "223,231,232,227,228,,208,209,291,233,229,230,,,,,,,,,,,,,,,212,,218", ",214,213,210,211,222,220,216,,217,,215,219,224,225,226,221,223,231,232", "227,228,,208,209,,233,229,230,,,,,,,,,,,,,,,212,,218,,214,213,210,211", "222,220,216,,217,,,,,,,,,,,,,,,,,233"];

      racc_action_table = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(24400, nil);

      idx = 0;

      ($a = ($b = clist).$each, $a._p = (TMP_1 = function(str){var self = TMP_1._s || this, $a, $b, TMP_2;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_2 = function(i){var self = TMP_2._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_2._s = self, TMP_2), $a).call($b)}, TMP_1._s = self, TMP_1), $a).call($b);

      clist = ["381,512,512,518,518,627,848,381,381,381,326,440,711,381,381,316,381", "693,440,711,306,70,347,632,447,381,810,307,630,70,603,603,631,201,451", "381,381,743,381,381,381,381,381,727,798,298,450,500,298,313,591,199", "848,848,848,848,448,646,447,574,440,711,646,693,381,381,381,381,381", "381,381,381,381,381,381,381,381,381,442,201,381,381,381,603,381,347", "632,595,381,591,512,381,518,574,491,512,381,199,381,633,381,381,381", "381,381,381,381,383,381,381,381,441,55,326,383,383,383,627,316,627,383", "383,627,383,381,381,632,381,582,381,381,630,306,326,306,631,594,306", "326,307,743,307,383,383,307,383,383,383,383,383,500,595,313,550,26,727", "798,727,798,744,727,798,633,492,322,15,15,277,322,595,582,383,383,383", "383,383,383,383,383,383,383,383,383,383,383,345,446,383,383,383,595", "383,491,595,491,383,55,491,383,550,594,424,633,383,638,383,528,383,383", "383,383,383,383,383,432,383,26,383,594,551,446,432,432,432,597,394,432", "432,432,277,432,383,383,14,383,424,383,383,26,594,432,297,594,803,297", "803,345,345,345,432,432,277,432,432,432,432,432,744,344,744,439,492", "744,492,755,551,492,528,528,301,3,394,301,25,597,3,14,528,460,14,25", "597,376,346,643,635,597,348,331,432,597,50,310,35,438,331,432,310,50", "50,50,432,432,50,50,50,429,50,597,339,755,755,755,755,629,337,339,50", "50,344,344,344,337,647,432,376,50,50,376,50,50,50,50,50,330,635,35,648", "432,35,432,330,635,432,346,346,346,635,348,348,348,635,311,649,311,50", "50,50,50,50,50,50,50,50,50,50,50,50,50,635,336,50,50,50,636,303,50,336", "303,50,343,636,50,50,540,50,636,50,655,50,636,50,50,50,50,50,50,50,435", "50,858,50,377,859,511,435,435,435,283,511,435,435,435,857,435,50,50", "50,50,660,50,335,332,663,435,405,321,540,335,332,540,665,320,435,435", "401,435,435,435,435,435,343,343,343,404,377,294,294,377,333,858,283", "770,859,283,403,333,858,678,770,859,402,858,857,419,859,858,401,770", "859,857,401,401,435,286,857,321,37,37,857,435,286,320,321,858,435,435", "859,321,320,286,382,321,375,320,371,419,857,320,198,419,419,419,419", "280,280,198,368,435,645,321,645,645,645,645,198,320,552,552,552,363", "552,435,640,435,552,552,435,640,362,552,470,552,552,552,552,552,552", "552,870,870,758,758,552,552,552,552,552,552,552,420,305,305,334,473", "645,645,645,645,552,334,626,552,552,552,552,552,552,552,552,552,552", "625,552,552,696,552,552,552,413,615,615,420,623,503,617,420,420,420", "420,825,503,700,701,702,413,413,825,552,552,503,552,552,487,552,552", "825,705,552,611,552,413,552,413,552,413,413,413,413,314,108,413,552", "413,108,108,314,552,552,552,552,552,552,709,710,314,552,552,553,553", "553,400,553,608,712,552,553,553,607,493,716,553,718,553,553,553,553", "553,553,553,719,720,317,315,553,553,553,553,553,553,553,522,522,400", "522,522,522,400,400,312,553,604,494,553,553,553,553,553,553,553,553", "553,553,732,553,553,602,553,553,553,398,398,398,398,398,398,398,398", "398,398,398,42,398,398,721,735,398,398,42,553,553,721,553,553,601,553", "553,42,302,553,721,553,398,553,398,553,398,398,398,398,398,398,398,553", "398,599,300,577,553,553,553,553,553,553,526,324,746,553,553,60,60,60", "324,60,296,750,553,60,60,751,596,324,60,293,60,60,60,60,60,60,60,531", "292,764,288,60,60,60,60,60,60,60,285,284,60,543,279,772,276,366,774", "60,775,275,60,60,60,60,60,60,60,60,60,60,782,60,60,783,60,60,60,366", "366,366,366,366,366,366,366,366,366,366,771,366,366,459,784,366,366", "771,60,273,459,60,787,268,60,60,771,267,60,459,266,366,800,366,60,366", "366,366,366,366,366,366,60,366,801,264,593,60,60,60,60,60,60,806,808", "809,60,60,455,60,366,813,366,860,60,97,97,97,97,97,860,814,253,97,97", "860,244,240,97,860,97,97,97,97,97,97,97,239,203,202,200,97,97,97,97", "97,97,97,826,184,97,106,106,106,106,106,97,97,97,97,97,97,97,97,97,97", "97,97,97,97,547,97,97,554,97,97,97,399,399,399,399,399,399,399,399,399", "399,399,13,399,399,773,833,399,399,13,97,95,773,97,836,837,97,97,13", "561,97,773,97,399,41,399,97,399,399,399,399,399,399,399,97,399,586,36", "854,97,97,97,97,97,97,855,274,856,97,97,697,697,697,274,697,34,97,272", "697,697,563,20,274,697,272,697,697,697,697,697,697,697,583,272,12,11", "697,697,697,697,697,697,697,4,4,4,4,4,865,10,566,871,697,872,873,697", "697,697,697,697,697,697,697,697,697,874,697,697,412,9,514,697,514,514", "514,514,876,8,878,271,568,881,576,876,412,412,271,1,892,,,697,876,,697", "271,,697,697,,412,697,412,,412,412,412,412,514,,412,,412,,,,514,514", "514,514,697,697,697,697,697,697,,,,697,697,,821,821,821,697,821,,,,821", "821,,,,821,,821,821,821,821,821,821,821,,,,,821,821,821,821,821,821", "821,350,350,350,350,350,,,555,,821,,,821,821,821,821,821,821,821,821", "821,821,,821,821,,,,821,555,555,555,555,555,555,555,555,555,555,555", "598,555,555,,,555,555,598,821,,,821,598,,821,821,598,,821,,,555,,555", ",555,555,555,555,555,555,555,,555,,,,821,821,821,821,821,821,,,,821", "821,,,555,,821,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,0,0,0,0,0", "0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,,0,0,0,,,,,,,,,,,,,,,", ",,,,0,,,0,,,0,0,,,0,,0,,,,0,753,,753,753,753,753,,0,,,,,0,0,0,0,0,0", ",,,0,0,736,736,736,736,736,736,,,,736,736,,,,736,,736,736,736,736,736", "736,736,753,753,753,753,736,736,736,736,736,736,736,,,736,,,,,,736,736", "736,736,736,736,736,736,736,736,736,736,736,736,,736,736,,736,736,736", ",,,,,,,,,,,,,,,,,,,736,,,736,,,736,736,,,736,,736,,,,736,817,,817,817", "817,817,,736,,,,,736,736,736,736,736,736,,,,736,736,588,588,588,588", "588,588,,,,588,588,,,,588,817,588,588,588,588,588,588,588,817,817,817", "817,588,588,588,588,588,588,588,,,588,,,,,,588,588,588,588,588,588,588", "588,588,588,588,588,588,588,,588,588,,588,588,588,411,,,,,,,,,,,,,,", ",411,411,,588,,,588,,,588,588,,,588,,588,411,,411,588,411,411,411,411", ",,411,588,411,,,,588,588,588,588,588,588,,,,588,588,737,737,737,737", "737,737,,,,737,737,,,,737,,737,737,737,737,737,737,737,,,,,737,737,737", "737,737,737,737,,,737,,,,,,737,737,737,737,737,737,737,737,737,737,737", "737,737,737,,737,737,,737,737,737,410,,,,,,,,,,,,,,,,410,410,,737,,", "737,,,737,737,,,737,,737,410,,410,737,410,410,410,410,,,410,737,410", ",,,737,737,737,737,737,737,,,,737,737,741,741,741,741,741,741,,,,741", "741,,,,741,,741,741,741,741,741,741,741,,,,,741,741,741,741,741,741", "741,,,741,,,,,,741,741,741,741,741,741,741,741,741,741,741,741,741,741", ",741,741,,741,741,741,414,414,414,414,414,414,414,,,414,414,,,,,,414", "414,,741,,,741,,,741,741,,,741,,741,414,,414,741,414,414,414,414,414", "414,414,741,414,,,,741,741,741,741,741,741,,,,741,741,748,748,748,748", "748,748,,,,748,748,,,,748,,748,748,748,748,748,748,748,,,,,748,748,748", "748,748,748,748,,,748,,,,,,748,748,748,748,748,748,748,748,748,748,748", "748,748,748,,748,748,,748,748,748,409,409,409,409,409,409,409,,,409", "409,,,,,,409,409,,748,,,748,,,748,748,,,748,,748,409,,409,748,409,409", "409,409,409,409,409,748,409,,,,748,748,748,748,748,748,,,,748,748,606", "606,606,606,606,606,,,,606,606,,,,606,,606,606,606,606,606,606,606,", ",,,606,606,606,606,606,606,606,,,606,,,,,,606,606,606,606,606,606,606", "606,606,606,606,606,606,606,,606,606,,606,606,606,415,415,415,415,415", "415,415,,,415,415,,,,,,415,415,,606,,,606,,,606,606,,,606,,606,415,", "415,606,415,415,415,415,415,415,415,606,415,,,,606,606,606,606,606,606", ",,,606,606,495,495,495,495,495,495,,,,495,495,,,,495,,495,495,495,495", "495,495,495,,,,,495,495,495,495,495,495,495,,,495,,,,,,495,495,495,495", "495,495,495,495,495,495,495,495,495,495,,495,495,,495,495,495,416,416", "416,416,416,416,416,,,416,416,,,,,,416,416,,495,,,495,,,495,495,,,495", ",495,416,,416,495,416,416,416,416,416,416,416,495,416,,,,495,495,495", "495,495,495,,,,495,495,490,490,490,490,490,490,,,,490,490,,,,490,,490", "490,490,490,490,490,490,,,,,490,490,490,490,490,490,490,,,490,,,,,,490", "490,490,490,490,490,490,490,490,490,490,490,490,490,,490,490,,490,490", "490,417,417,417,417,417,417,417,,,417,417,,,,,,417,417,,490,,,490,,", "490,490,,,490,,490,417,,417,490,417,417,417,417,417,417,417,490,417", ",,,490,490,490,490,490,490,,,,490,490,513,513,513,513,513,513,,,,513", "513,,,,513,,513,513,513,513,513,513,513,,,,,513,513,513,513,513,513", "513,,,513,,,,,,513,513,513,513,513,513,513,513,513,513,513,513,513,513", ",513,513,,513,513,513,421,421,421,421,421,421,421,,,421,421,,,,,,421", "421,,513,,,513,,,513,513,,,513,,513,421,,421,513,421,421,421,421,421", "421,421,513,421,,,,513,513,513,513,513,513,,,,513,513,270,270,270,270", "270,270,,,,270,270,,,,270,,270,270,270,270,270,270,270,,,,,270,270,270", "270,270,270,270,,,270,,,,,,270,270,270,270,270,270,270,270,270,270,270", "270,270,270,,270,270,,270,270,270,422,422,422,422,422,422,422,422,,422", "422,,,,,,422,422,,270,,,270,,,270,270,,,270,,270,422,,422,270,422,422", "422,422,422,422,422,270,422,,,,270,270,270,270,270,270,,,,270,270,794", "794,794,794,794,794,,,,794,794,,,,794,,794,794,794,794,794,794,794,", ",,,794,794,794,794,794,794,794,,,794,,,,,,794,794,794,794,794,794,794", "794,794,794,794,794,794,794,,794,794,,794,794,794,418,418,418,418,418", "418,418,,,418,418,,,,,,418,418,,794,,,794,,,794,794,,,794,,794,418,", "418,794,418,418,418,418,418,418,418,794,418,,,,794,794,794,794,794,794", ",,,794,794,265,265,265,265,265,265,,,,265,265,,,,265,,265,265,265,265", "265,265,265,,,,,265,265,265,265,265,265,265,,,265,,,,,,265,265,265,265", "265,265,265,265,265,265,265,265,265,265,,265,265,,265,265,265,406,,", ",,,,,,,,,,,,,406,406,,265,,,265,,,265,265,,,265,,265,406,,406,265,406", "406,406,406,,,,265,,,,,265,265,265,265,265,265,,,,265,265,724,724,724", "724,724,724,,,,724,724,,,,724,,724,724,724,724,724,724,724,,,,,724,724", "724,724,724,724,724,,,724,,,,,,724,724,724,724,724,724,724,724,724,724", "724,724,724,724,,724,724,,724,724,724,408,,,,,,,,,,,,,,,,408,408,,724", ",,724,,,724,724,,,724,,724,408,,,724,408,408,408,408,,,,724,,,,,724", "724,724,724,724,724,,,,724,724,30,30,30,30,30,30,,,,30,30,,,,30,,30", "30,30,30,30,30,30,,,,,30,30,30,30,30,30,30,,,30,,,,,,30,30,30,30,30", "30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,407,,,,,,,,,,,,,,,,407,407", ",30,,,30,,,30,30,,,30,,30,407,,407,30,407,407,407,407,,,,30,,,,,30,30", "30,30,30,30,,,,30,30,204,204,204,204,204,204,,,,204,204,,,,204,,204", "204,204,204,204,204,204,,,,,204,204,204,204,204,204,204,,,204,,,,,,204", "204,204,204,204,204,204,204,204,204,204,204,204,204,,204,204,,204,204", "204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204,204,,,204,,204,,,,204,,,,,,,", "204,,,,,204,204,204,204,204,204,,,,204,204,486,486,486,486,486,486,", ",,486,486,,,,486,,486,486,486,486,486,486,486,,,,,486,486,486,486,486", "486,486,,,486,,,,,,486,486,486,486,486,486,486,486,486,486,486,486,486", "486,,486,486,,486,486,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486", ",486,,,,486,,,,,,,,486,,,,,486,486,486,486,486,486,,,,486,486,706,706", "706,706,706,706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,706", "706,706,706,706,706,706,,,706,,,,,,706,706,706,706,706,706,706,706,706", "706,706,706,706,706,,706,706,,706,706,706,,,,,,,,,,,,,,,,,,,,706,,,706", ",,706,706,,,706,,706,,,,706,,,,,,,,706,,,,,706,706,706,706,706,706,", ",,706,706,559,559,559,559,559,559,,,,559,559,,,,559,,559,559,559,559", "559,559,559,,,,,559,559,559,559,559,559,559,,,559,,,,,,559,559,559,559", "559,559,559,559,559,559,559,559,559,559,,559,559,,559,559,559,,,,,,", ",,,,,,,,,,,,,559,,,559,,,559,559,,,559,,559,,,,559,,,,,,,,559,,,,,559", "559,559,559,559,559,,,,559,559,852,852,852,852,852,852,,,,852,852,,", ",852,,852,852,852,852,852,852,852,,,,,852,852,852,852,852,852,852,,", "852,,,,,,852,852,852,852,852,852,852,852,852,852,852,852,852,852,,852", "852,,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,852,", ",,852,,,,,,,,852,,,,,852,852,852,852,852,852,,,,852,852,187,187,187", "187,187,187,,,,187,187,,,,187,,187,187,187,187,187,187,187,,,,,187,187", "187,187,187,187,187,,,187,,,,,,187,187,187,187,187,187,187,187,187,187", "187,187,187,187,,187,187,,187,187,187,,,,,,,,,,,,,,,,,,,,187,,,187,", ",187,187,,,187,,187,,,,187,,,,,,,,187,,,,,187,187,187,187,187,187,,", ",187,187,186,186,186,186,186,186,,,,186,186,,,,186,,186,186,186,186", "186,186,186,,,,,186,186,186,186,186,186,186,,,186,,,,,,186,186,186,186", "186,186,186,186,186,186,186,186,186,186,,186,186,,186,186,186,,,,,,", ",,,,,,,,,,,,,186,,,186,,,186,186,,,186,,186,,,,186,,,,,,,,186,,,,,186", "186,186,186,186,186,,,,186,186,589,589,589,589,589,589,,,,589,589,,", ",589,,589,589,589,589,589,589,589,,,,,589,589,589,589,589,589,589,,", "589,,,,,,589,589,589,589,589,589,589,589,589,589,589,589,589,589,,589", "589,,589,589,589,,,,,,,,,,,,,,,,,,,,589,,,589,,,589,589,,,589,,589,", ",,589,,,,,,,,589,,,,,589,589,589,589,589,589,,,,589,589,639,639,639", "639,639,639,,,,639,639,,,,639,,639,639,639,639,639,639,639,,,,,639,639", "639,639,639,639,639,,,639,,,,,,639,639,639,639,639,639,639,639,639,639", "639,639,639,639,,639,639,,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,", ",639,639,,,639,,639,,,,639,,,,,,,,639,,,,,639,639,639,639,639,639,,", ",639,639,845,845,845,845,845,845,,,,845,845,,,,845,,845,845,845,845", "845,845,845,,,,,845,845,845,845,845,845,845,,,845,,,,,,845,845,845,845", "845,845,845,845,845,845,845,845,845,845,,845,845,,845,845,845,,,,,,", ",,,,,,,,,,,,,845,,,845,,,845,845,,,845,,845,,,,845,,,,,,,,845,,,,,845", "845,845,845,845,845,,,,845,845,838,838,838,838,838,838,,,,838,838,,", ",838,,838,838,838,838,838,838,838,,,,,838,838,838,838,838,838,838,,", "838,,,,,,838,838,838,838,838,838,838,838,838,838,838,838,838,838,,838", "838,,838,838,838,,,,,,,,,,,,,,,,,,,,838,,,838,,,838,838,,,838,,838,", ",,838,,,,,,,,838,,,,,838,838,838,838,838,838,,,,838,838,644,644,644", "644,644,644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,644,644", "644,644,644,644,644,,,644,,,,,,644,644,644,644,644,644,644,644,644,644", "644,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,", ",644,644,,,644,,644,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,", ",644,644,51,51,51,51,51,51,,,,51,51,,,,51,,51,51,51,51,51,51,51,,,,", "51,51,51,51,51,51,51,,,51,,,,,,51,51,51,51,51,51,51,51,51,51,51,51,51", "51,,51,51,,51,51,51,,,,,,,,,,,,,,,,,,,,51,,,51,,,51,51,,,51,,51,,,,51", ",,,,,,,51,,,,,51,51,51,51,51,51,,,,51,51,671,671,671,671,671,671,,,", "671,671,,,,671,,671,671,671,671,671,671,671,,,,,671,671,671,671,671", "671,671,,,671,,,,,,671,671,671,671,671,671,671,671,671,671,671,671,671", "671,,671,671,,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671", ",671,,,,671,,,,,,,,671,,,,,671,671,671,671,671,671,,,,671,671,53,53", "53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,53,53,53,53,53,53,53", ",,,,,,,,,53,,,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53,,,,,,,", ",,,,,,,,,,,,53,,,53,,,53,53,,,53,,53,,,,53,,,,,,,,53,,,,,53,53,53,53", "53,53,,,,53,53,54,54,54,,54,,,,54,54,,,,54,,54,54,54,54,54,54,54,,,", ",54,54,54,54,54,54,54,,,,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,,54", "54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,,,,,54,,,,,,,", "54,,,,,54,54,54,54,54,54,,,,54,54,769,769,769,,769,,,,769,769,,,,769", ",769,769,769,769,769,769,769,,,,,769,769,769,769,769,769,769,,,,,,,", ",,769,,,769,769,769,769,769,769,769,769,769,769,,769,769,,,,769,,,,", ",,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,769,,769,,,,,,,,,,,,,,,769", "769,769,769,769,769,,,,769,769,56,56,56,,56,,,,56,56,,,,56,,56,56,56", "56,56,56,56,,,,,56,56,56,56,56,56,56,,,56,,,,,,,56,,,56,56,56,56,56", "56,56,56,56,56,,56,56,,56,56,56,,,,,,,,,,,,,,,,,,,,56,,,56,,,56,56,", ",56,,,,,,56,,,,,,,,56,,,,,56,56,56,56,56,56,,,,56,56,57,57,57,,57,,", ",57,57,,,,57,,57,57,57,57,57,57,57,,,,,57,57,57,57,57,57,57,,,57,,,", ",,,57,,,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,,,,,,,,,,", ",,,,,,57,,,57,,,57,57,,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,57,57,", ",,57,57,52,52,52,,52,,,,52,52,,,,52,,52,52,52,52,52,52,52,,,,,52,52", "52,52,52,52,52,,,52,,,,,,,52,,,52,52,52,52,52,52,52,52,52,52,,52,52", ",52,52,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,52", ",,,,52,52,52,52,52,52,,,,52,52,61,61,61,,61,,,,61,61,,,,61,,61,61,61", "61,61,61,61,,,,,61,61,61,61,61,61,61,,,,,,,,,,61,,,61,61,61,61,61,61", "61,61,61,61,,61,61,,,,61,,828,828,828,828,828,828,828,828,828,828,828", ",828,828,,,828,828,61,,,61,,,61,61,,,61,,61,,828,,828,,828,828,828,828", "828,828,828,,828,,,61,61,61,61,61,61,,,,61,61,62,62,62,828,62,828,,", "62,62,,,,62,,62,62,62,62,62,62,62,,,,,62,62,62,62,62,62,62,,,,,,,,,", "62,,,62,62,62,62,62,62,62,62,62,62,,62,62,,,,62,,388,388,388,388,388", "388,388,388,388,388,388,,388,388,,62,388,388,62,,,62,,,62,62,,,62,,", ",388,,388,,388,388,388,388,388,388,388,,388,,,62,62,62,62,62,62,,,,62", "62,63,63,63,388,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,63,63,63", "63,63,63,63,,,,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,,63,63,,,,63", ",19,19,19,19,19,19,19,19,19,19,19,,19,19,,,19,19,63,,,63,,,63,63,,,63", ",,,19,,19,,19,19,19,19,19,19,19,,19,,,63,63,63,63,63,63,,,,63,63,426", "426,426,19,426,,,,426,426,,,,426,,426,426,426,426,426,426,426,,,,,426", "426,426,426,426,426,426,,,,,,,,,,426,,,426,426,426,426,426,426,426,426", "426,426,,426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426,,,426,426", ",,426,,426,,426,,426,,,,,,,,426,,,,,426,426,426,426,426,426,,,,426,426", "556,556,556,,556,,,,556,556,,,,556,,556,556,556,556,556,556,556,,,,", "556,556,556,556,556,556,556,,,,,,,,,,556,,,556,556,556,556,556,556,556", "556,556,556,,556,556,,556,556,556,,,,,,,,,,,,,,,,,,,,556,,,556,,,556", "556,,,556,,,,,,556,,,,,,,,556,,,,,556,556,556,556,556,556,,,,556,556", "82,82,82,,82,,,,82,82,,,,82,,82,82,82,82,82,82,82,,82,,,82,82,82,82", "82,82,82,,,,,,,,,,82,,,82,82,82,82,82,82,82,82,82,82,,82,82,,82,82,82", ",,,,,,,,,,,,,,,,,,,82,,,82,82,,82,82,,,82,,82,,82,,82,,,,,,,,82,,82", ",,82,82,82,82,82,82,,,,82,82,86,86,86,,86,,,,86,86,,,,86,,86,86,86,86", "86,86,86,,86,,,86,86,86,86,86,86,86,,,,,,,,,,86,,,86,86,86,86,86,86", "86,86,86,86,,86,86,,86,86,86,,,,,,,,,,,,,,,,,,,,86,,,86,86,,86,86,,", "86,,86,,86,,86,,,,,,,,86,,86,,,86,86,86,86,86,86,,,,86,86,835,835,835", ",835,,,,835,835,,,,835,,835,835,835,835,835,835,835,,,,,835,835,835", "835,835,835,835,,,,,,,,,,835,,,835,835,835,835,835,835,835,835,835,835", ",835,835,,835,835,835,,,,,,,,,,,,,,,,,,,,835,,,835,,,835,835,,,835,", "835,,835,,835,,,,,,,,835,,,,,835,835,835,835,835,835,,,,835,835,40,40", "40,,40,,,,40,40,,,,40,,40,40,40,40,40,40,40,,,,,40,40,40,40,40,40,40", ",,,,,,,,,40,,,40,40,40,40,40,40,40,40,40,40,,40,40,,40,40,40,,,,,,,", ",,,,,,,,,,,,40,,,40,,,40,40,,,40,,,,,,40,,,,,,,,40,,,,,40,40,40,40,40", "40,,,,40,40,101,101,101,,101,,,,101,101,,,,101,,101,101,101,101,101", "101,101,,,,,101,101,101,101,101,101,101,,,101,,,,,,,101,,,101,101,101", "101,101,101,101,101,101,101,,101,101,,101,101,101,,,,,,,,,,,,,,,,,,", ",101,,,101,,,101,101,,,101,,,,,,101,,,,,,,,101,,,,,101,101,101,101,101", "101,,,,101,101,102,102,102,,102,,,,102,102,,,,102,,102,102,102,102,102", "102,102,,,,,102,102,102,102,102,102,102,,,102,,,,,,,102,,,102,102,102", "102,102,102,102,102,102,102,,102,102,,102,102,102,,,,,,,,,,,,,,,,,,", ",102,,,102,,,102,102,,,102,,,,,,102,,,,,,,,102,,,,,102,102,102,102,102", "102,,,,102,102,103,103,103,,103,,,,103,103,,,,103,,103,103,103,103,103", "103,103,,,,,103,103,103,103,103,103,103,,,103,,,,,,,103,,,103,103,103", "103,103,103,103,103,103,103,,103,103,,103,103,103,,,,,,,,,,,,,,,,,,", ",103,,,103,,,103,103,,,103,,,,,,103,,,,,,,,103,,,,,103,103,103,103,103", "103,,,,103,103,104,104,104,,104,,,,104,104,,,,104,,104,104,104,104,104", "104,104,,,,,104,104,104,104,104,104,104,,,104,,,,,,,104,,,104,104,104", "104,104,104,104,104,104,104,,104,104,,104,104,104,,,,,,,,,,,,,,,,,,", ",104,,,104,,,104,104,,,104,,,,,,104,,,,,,,,104,,,,,104,104,104,104,104", "104,,,,104,104,105,105,105,105,105,,,,105,105,,,,105,,105,105,105,105", "105,105,105,,,,,105,105,105,105,105,105,105,,,105,,,,,,105,105,105,105", "105,105,105,105,105,105,105,105,105,105,,105,105,,105,105,105,,,,,,", ",,,,,,,,,,,,,105,,,105,,,105,105,,,105,,105,,,,105,,,,,,,,105,,,,,105", "105,105,105,105,105,,,,105,105,832,832,832,,832,,,,832,832,,,,832,,832", "832,832,832,832,832,832,,,,,832,832,832,832,832,832,832,,,,,,,,,,832", ",,832,832,832,832,832,832,832,832,832,832,,832,832,,832,832,832,,,,", ",,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,832,,832,,832,,,,,,,,832,", ",,,832,832,832,832,832,832,,,,832,832,39,39,39,,39,,,,39,39,,,,39,,39", "39,39,39,39,39,39,,,,,39,39,39,39,39,39,39,,,,,,,,,,39,,,39,39,39,39", "39,39,39,39,39,39,,39,39,,39,39,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39", ",,39,,,,,,39,,,,,,,,39,,,,,39,39,39,39,39,39,,,,39,39,827,827,827,,827", ",,,827,827,,,,827,,827,827,827,827,827,827,827,,,,,827,827,827,827,827", "827,827,,,,,,,,,,827,,,827,827,827,827,827,827,827,827,827,827,,827", "827,,,,827,,468,468,468,468,468,468,468,468,468,468,468,,468,468,,,468", "468,827,,,827,,,827,827,,,827,,,,468,,468,,468,468,468,468,468,468,468", ",468,,,827,827,827,827,827,827,,,,827,827,38,38,38,468,38,,,,38,38,", ",,38,,38,38,38,38,38,38,38,,,,,38,38,38,38,38,38,38,,,,,,,,,,38,,,38", "38,38,38,38,38,38,38,38,38,,38,38,,38,38,38,,,,,,,,,,,,,,,,,,,,38,,", "38,,,38,38,,,38,,,,,,38,,,,,,,,38,,,,,38,38,38,38,38,38,,,,38,38,557", "557,557,,557,,,,557,557,,,,557,,557,557,557,557,557,557,557,,,,,557", "557,557,557,557,557,557,,,,,,,,,,557,,,557,557,557,557,557,557,557,557", "557,557,,557,557,,,,557,,,,,,,,,,,,,,,,,,,,557,,,557,,,557,557,,,557", ",557,,557,,,,,,,,,557,,,,,,557,557,557,557,557,557,,,,557,557,188,188", "188,,188,,,,188,188,,,,188,,188,188,188,188,188,188,188,,,,,188,188", "188,188,188,188,188,,,,,,,,,,188,,,188,188,188,188,188,188,188,188,188", "188,,188,188,,188,188,188,,,,,,,,,,,,,,,,,,,,188,,,188,,,188,188,,,188", ",188,,,,188,,,,,,,,188,,,,,188,188,188,188,188,188,,,,188,188,189,189", "189,,189,,,,189,189,,,,189,,189,189,189,189,189,189,189,,,,,189,189", "189,189,189,189,189,,,,,,,,,,189,,,189,189,189,189,189,189,189,189,189", "189,,189,189,,189,189,189,,,,,,,,,,,,,,,,,,,,189,,,189,,,189,189,,,189", ",189,,,,189,,,,,,,,189,,,,,189,189,189,189,189,189,,,,189,189,190,190", "190,,190,,,,190,190,,,,190,,190,190,190,190,190,190,190,,,,,190,190", "190,190,190,190,190,,,,,,,,,,190,,,190,190,190,190,190,190,190,190,190", "190,,190,190,,190,190,190,,,,,,,,,,,,,,,,,,,,190,,,190,,,190,190,,,190", ",,,,,190,,,,,,,,190,,,,,190,190,190,190,190,190,,,,190,190,191,191,191", ",191,,,,191,191,,,,191,,191,191,191,191,191,191,191,,,,,191,191,191", "191,191,191,191,,,,,,,,,,191,,,191,191,191,191,191,191,191,191,191,191", ",191,191,,191,191,191,,,,,,,,,,,,,,,,,,,,191,,,191,,,191,191,,,191,", "191,,,,191,,,,,,,,191,,,,,191,191,191,191,191,191,,,,191,191,679,679", "679,,679,,,,679,679,,,,679,,679,679,679,679,679,679,679,,,,,679,679", "679,679,679,679,679,,,,,,,,,,679,,,679,679,679,679,679,679,679,679,679", "679,,679,679,,679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679", ",,,,,679,,,,,,,,679,,,,,679,679,679,679,679,679,,,,679,679,32,32,32", ",32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,32,32,32,32,32,32,32,,", ",,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,,32,32,,,,32,,694,694,694", "694,694,694,694,694,694,694,694,,694,694,,,694,694,32,,,32,,,32,32,", ",32,,,,694,,694,,694,694,694,694,694,694,694,,694,,,32,32,32,32,32,32", ",,,32,32,194,194,194,694,194,,,,194,194,,,,194,,194,194,194,194,194", "194,194,,,,,194,194,194,194,194,194,194,,,,,,,,,,194,,,194,194,194,194", "194,194,194,194,194,194,,194,194,,194,194,194,,,,,,,,,,,,,,,,,,,,194", ",,194,,,194,194,,,194,,,,,,194,,,,,,,,194,,,,,194,194,194,194,194,194", ",,,194,194,195,195,195,,195,,,,195,195,,,,195,,195,195,195,195,195,195", "195,,,,,195,195,195,195,195,195,195,,,195,,,,,,,195,,,195,195,195,195", "195,195,195,195,195,195,,195,195,,195,195,195,,,,,,,,,,,,,,,,,,,,195", ",,195,,,195,195,,,195,,,,,,195,,,,,,,,195,,,,,195,195,195,195,195,195", ",,,195,195,196,196,196,,196,,,,196,196,,,,196,,196,196,196,196,196,196", "196,,,,,196,196,196,196,196,196,196,,,196,,,,,,,196,,,196,196,196,196", "196,196,196,196,196,196,,196,196,,196,196,196,,,,,,,,,,,,,,,,,,,,196", ",,196,,,196,196,,,196,,,,,,196,,,,,,,,196,,,,,196,196,196,196,196,196", ",,,196,196,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549,549", "549,,,,,549,549,549,549,549,549,549,,,,,,,,,,549,,,549,549,549,549,549", "549,549,549,549,549,,549,549,,549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549", ",,549,549,,,549,,,,,,549,,,,,,,,549,,,,,549,549,549,549,549,549,,,,549", "549,546,546,546,,546,,,,546,546,,,,546,,546,546,546,546,546,546,546", ",,,,546,546,546,546,546,546,546,,,,,,,,,,546,,,546,546,546,546,546,546", "546,546,546,546,,546,546,,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,", ",546,546,,,546,,,,,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546", "546,428,428,428,,428,,,,428,428,,,,428,,428,428,428,428,428,428,428", ",,,,428,428,428,428,428,428,428,,,,,,,,,,428,,,428,428,428,428,428,428", "428,428,428,428,,428,428,,428,428,428,,,,,,,,,,,,,,,,,,,,428,,,428,", ",428,428,,,428,,428,,428,,428,,,,,,,,428,,,,,428,428,428,428,428,428", ",,,428,428,542,542,542,,542,,,,542,542,,,,542,,542,542,542,542,542,542", "542,,,,,542,542,542,542,542,542,542,,,,,,,,,,542,,,542,542,542,542,542", "542,542,542,542,542,,542,542,,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542", ",,542,542,,,542,,,,,,542,,,,,,,,542,,,,,542,542,542,542,542,542,,,,542", "542,541,541,541,,541,,,,541,541,,,,541,,541,541,541,541,541,541,541", ",,,,541,541,541,541,541,541,541,,,,,,,,,,541,,,541,541,541,541,541,541", "541,541,541,541,,541,541,,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,", ",541,541,,,541,,,,,,541,,,,,,,,541,,,,,541,541,541,541,541,541,,,,541", "541,538,538,538,,538,,,,538,538,,,,538,,538,538,538,538,538,538,538", ",,,,538,538,538,538,538,538,538,,,,,,,,,,538,,,538,538,538,538,538,538", "538,538,538,538,,538,538,,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,", ",538,538,,,538,,538,,,,538,,,,,,,,538,,,,,538,538,538,538,538,538,,", ",538,538,31,31,31,,31,,,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,31,31", "31,31,31,31,31,,,,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,,31,31,,", ",31,,682,682,682,682,682,682,682,682,682,682,682,,682,682,,,682,682", "31,,,31,,,31,31,,,31,,31,,682,,682,,682,682,682,682,682,682,682,,682", ",,31,31,31,31,31,31,,,,31,31,207,207,207,682,207,,,,207,207,,,,207,", "207,207,207,207,207,207,207,,,,,207,207,207,207,207,207,207,,,,,,,,", ",207,,,207,207,207,207,207,207,207,207,207,207,,207,207,,207,207,207", ",,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,,,,,207,,,,,,,,207,,,", ",207,207,207,207,207,207,,,,207,207,208,208,208,,208,,,,208,208,,,,208", ",208,208,208,208,208,208,208,,,,,208,208,208,208,208,208,208,,,,,,,", ",,208,,,208,208,208,208,208,208,208,208,208,208,,208,208,,208,208,208", ",,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208,,,,,,,,208,,,", ",208,208,208,208,208,208,,,,208,208,209,209,209,,209,,,,209,209,,,,209", ",209,209,209,209,209,209,209,,,,,209,209,209,209,209,209,209,,,,,,,", ",,209,,,209,209,209,209,209,209,209,209,209,209,,209,209,,209,209,209", ",,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,", ",209,209,209,209,209,209,,,,209,209,210,210,210,,210,,,,210,210,,,,210", ",210,210,210,210,210,210,210,,,,,210,210,210,210,210,210,210,,,,,,,", ",,210,,,210,210,210,210,210,210,210,210,210,210,,210,210,,210,210,210", ",,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,,,,,210,,,,,,,,210,,,", ",210,210,210,210,210,210,,,,210,210,691,691,691,,691,,,,691,691,,,,691", ",691,691,691,691,691,691,691,,,,,691,691,691,691,691,691,691,,,,,,,", ",,691,,,691,691,691,691,691,691,691,691,691,691,,691,691,,691,691,691", ",,,,,,,,,,,,,,,,,,,691,,,691,,,691,691,,,691,,,,,,691,,,,,,,,691,,,", ",691,691,691,691,691,691,,,,691,691,212,212,212,,212,,,,212,212,,,,212", ",212,212,212,212,212,212,212,,,,,212,212,212,212,212,212,212,,,,,,,", ",,212,,,212,212,212,212,212,212,212,212,212,212,,212,212,,212,212,212", ",,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,,,,,212,,,,,,,,212,,,", ",212,212,212,212,212,212,,,,212,212,213,213,213,,213,,,,213,213,,,,213", ",213,213,213,213,213,213,213,,,,,213,213,213,213,213,213,213,,,,,,,", ",,213,,,213,213,213,213,213,213,213,213,213,213,,213,213,,213,213,213", ",,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213,,,,,,,,213,,,", ",213,213,213,213,213,213,,,,213,213,214,214,214,,214,,,,214,214,,,,214", ",214,214,214,214,214,214,214,,,,,214,214,214,214,214,214,214,,,,,,,", ",,214,,,214,214,214,214,214,214,214,214,214,214,,214,214,,214,214,214", ",,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,214,,,", ",214,214,214,214,214,214,,,,214,214,215,215,215,,215,,,,215,215,,,,215", ",215,215,215,215,215,215,215,,,,,215,215,215,215,215,215,215,,,,,,,", ",,215,,,215,215,215,215,215,215,215,215,215,215,,215,215,,215,215,215", ",,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,215,,,", ",215,215,215,215,215,215,,,,215,215,216,216,216,,216,,,,216,216,,,,216", ",216,216,216,216,216,216,216,,,,,216,216,216,216,216,216,216,,,,,,,", ",,216,,,216,216,216,216,216,216,216,216,216,216,,216,216,,216,216,216", ",,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216,,,", ",216,216,216,216,216,216,,,,216,216,217,217,217,,217,,,,217,217,,,,217", ",217,217,217,217,217,217,217,,,,,217,217,217,217,217,217,217,,,,,,,", ",,217,,,217,217,217,217,217,217,217,217,217,217,,217,217,,217,217,217", ",,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,217,,,", ",217,217,217,217,217,217,,,,217,217,218,218,218,,218,,,,218,218,,,,218", ",218,218,218,218,218,218,218,,,,,218,218,218,218,218,218,218,,,,,,,", ",,218,,,218,218,218,218,218,218,218,218,218,218,,218,218,,218,218,218", ",,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,", ",218,218,218,218,218,218,,,,218,218,219,219,219,,219,,,,219,219,,,,219", ",219,219,219,219,219,219,219,,,,,219,219,219,219,219,219,219,,,,,,,", ",,219,,,219,219,219,219,219,219,219,219,219,219,,219,219,,219,219,219", ",,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,", ",219,219,219,219,219,219,,,,219,219,220,220,220,,220,,,,220,220,,,,220", ",220,220,220,220,220,220,220,,,,,220,220,220,220,220,220,220,,,,,,,", ",,220,,,220,220,220,220,220,220,220,220,220,220,,220,220,,220,220,220", ",,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,", ",220,220,220,220,220,220,,,,220,220,221,221,221,,221,,,,221,221,,,,221", ",221,221,221,221,221,221,221,,,,,221,221,221,221,221,221,221,,,,,,,", ",,221,,,221,221,221,221,221,221,221,221,221,221,,221,221,,221,221,221", ",,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,", ",221,221,221,221,221,221,,,,221,221,222,222,222,,222,,,,222,222,,,,222", ",222,222,222,222,222,222,222,,,,,222,222,222,222,222,222,222,,,,,,,", ",,222,,,222,222,222,222,222,222,222,222,222,222,,222,222,,222,222,222", ",,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,", ",222,222,222,222,222,222,,,,222,222,223,223,223,,223,,,,223,223,,,,223", ",223,223,223,223,223,223,223,,,,,223,223,223,223,223,223,223,,,,,,,", ",,223,,,223,223,223,223,223,223,223,223,223,223,,223,223,,223,223,223", ",,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,223,,,", ",223,223,223,223,223,223,,,,223,223,224,224,224,,224,,,,224,224,,,,224", ",224,224,224,224,224,224,224,,,,,224,224,224,224,224,224,224,,,,,,,", ",,224,,,224,224,224,224,224,224,224,224,224,224,,224,224,,224,224,224", ",,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,", ",224,224,224,224,224,224,,,,224,224,225,225,225,,225,,,,225,225,,,,225", ",225,225,225,225,225,225,225,,,,,225,225,225,225,225,225,225,,,,,,,", ",,225,,,225,225,225,225,225,225,225,225,225,225,,225,225,,225,225,225", ",,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,", ",225,225,225,225,225,225,,,,225,225,226,226,226,,226,,,,226,226,,,,226", ",226,226,226,226,226,226,226,,,,,226,226,226,226,226,226,226,,,,,,,", ",,226,,,226,226,226,226,226,226,226,226,226,226,,226,226,,226,226,226", ",,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,", ",226,226,226,226,226,226,,,,226,226,227,227,227,,227,,,,227,227,,,,227", ",227,227,227,227,227,227,227,,,,,227,227,227,227,227,227,227,,,,,,,", ",,227,,,227,227,227,227,227,227,227,227,227,227,,227,227,,227,227,227", ",,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,", ",227,227,227,227,227,227,,,,227,227,228,228,228,,228,,,,228,228,,,,228", ",228,228,228,228,228,228,228,,,,,228,228,228,228,228,228,228,,,,,,,", ",,228,,,228,228,228,228,228,228,228,228,228,228,,228,228,,228,228,228", ",,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,", ",228,228,228,228,228,228,,,,228,228,229,229,229,,229,,,,229,229,,,,229", ",229,229,229,229,229,229,229,,,,,229,229,229,229,229,229,229,,,,,,,", ",,229,,,229,229,229,229,229,229,229,229,229,229,,229,229,,229,229,229", ",,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,", ",229,229,229,229,229,229,,,,229,229,230,230,230,,230,,,,230,230,,,,230", ",230,230,230,230,230,230,230,,,,,230,230,230,230,230,230,230,,,,,,,", ",,230,,,230,230,230,230,230,230,230,230,230,230,,230,230,,230,230,230", ",,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,", ",230,230,230,230,230,230,,,,230,230,231,231,231,,231,,,,231,231,,,,231", ",231,231,231,231,231,231,231,,,,,231,231,231,231,231,231,231,,,,,,,", ",,231,,,231,231,231,231,231,231,231,231,231,231,,231,231,,231,231,231", ",,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,", ",231,231,231,231,231,231,,,,231,231,232,232,232,,232,,,,232,232,,,,232", ",232,232,232,232,232,232,232,,,,,232,232,232,232,232,232,232,,,,,,,", ",,232,,,232,232,232,232,232,232,232,232,232,232,,232,232,,232,232,232", ",,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,", ",232,232,232,232,232,232,,,,232,232,233,233,233,,233,,,,233,233,,,,233", ",233,233,233,233,233,233,233,,,,,233,233,233,233,233,233,233,,,,,,,", ",,233,,,233,233,233,233,233,233,233,233,233,233,,233,233,,233,233,233", ",,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,", ",233,233,233,233,233,233,,,,233,233,537,537,537,,537,,,,537,537,,,,537", ",537,537,537,537,537,537,537,,,,,537,537,537,537,537,537,537,,,,,,,", ",,537,,,537,537,537,537,537,537,537,537,537,537,,537,537,,537,537,537", ",,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,,,,,537,,,,,,,,537,,,", ",537,537,537,537,537,537,,,,537,537,822,822,822,,822,,,,822,822,,,,822", ",822,822,822,822,822,822,822,,,,,822,822,822,822,822,822,822,,,,,,,", ",,822,,,822,822,822,822,822,822,822,822,822,822,,822,822,,822,822,822", ",,,,,,,,,,,,,,,,,,,822,,,822,,,822,822,,,822,,822,,,,822,,,,,,,,822", ",,,,822,822,822,822,822,822,,,,822,822,28,28,28,,28,,,,28,28,,,,28,", "28,28,28,28,28,28,28,,,,,28,28,28,28,28,28,28,,,,,,,,,,28,,,28,28,28", "28,28,28,28,28,28,28,,28,28,,28,28,28,,,,,,,,,,,,,,,,,,,,28,,,28,28", ",28,28,,,28,,28,,28,,28,,,,,,,,28,,,,,28,28,28,28,28,28,,,,28,28,241", "241,241,,241,,,,241,241,,,,241,,241,241,241,241,241,241,241,,,,,241", "241,241,241,241,241,241,,,,,,,,,,241,,,241,241,241,241,241,241,241,241", "241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241", ",,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,243", "243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,243", "243,243,243,243,243,243,,,,,,,,,,243,,,243,243,243,243,243,243,243,243", "243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243", ",,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,820", "820,820,,820,,,,820,820,,,,820,,820,820,820,820,820,820,820,,,,,820", "820,820,820,820,820,820,,,,,,,,,,820,,,820,820,820,820,820,820,820,820", "820,820,,820,820,,,,820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820,820,,,820", ",,,,,,,,,,,,,,,,,,820,820,820,820,820,820,,,,820,820,534,534,534,534", "534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534", "534,534,534,,,534,534,534,534,534,534,534,534,534,534,,,,,,534,534,534", "534,534,534,534,534,,,534,,,,,,,,534,534,,534,534,534,534,,534,534,", ",534,,,,,534,534,534,534,,,,,,,,,,,,,,534,534,,534,534,534,534,534,534", "534,534,534,,534,,,534,534,,,431,431,431,,431,,,534,431,431,,,,431,", "431,431,431,431,431,431,431,,,,,431,431,431,431,431,431,431,,,,,,,,", ",431,,,431,431,431,431,431,431,431,431,431,431,,431,431,,431,431,431", ",,,,,,,,,,,,,,,,,,,431,,,431,,,431,431,,,431,,,,,,431,,,,,,,,431,,,", ",431,431,431,431,431,431,,,,431,431,889,889,889,,889,,,,889,889,,,,889", ",889,889,889,889,889,889,889,,,,,889,889,889,889,889,889,889,,,,,,,", ",,889,,,889,889,889,889,889,889,889,889,889,889,,889,889,,889,889,889", ",,,,,,,,,,,,,,,,,,,889,,,889,,,889,889,,,889,,,,,,889,,,,,,,,889,,,", ",889,889,889,889,889,889,,,,889,889,254,254,254,,254,,,,254,254,,,,254", ",254,254,254,254,254,254,254,,,,,254,254,254,254,254,254,254,,,,,,,", ",,254,,,254,254,254,254,254,254,254,254,254,254,,254,254,,254,254,254", ",,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,254,,254,,254,,,,,,,,254", ",,,,254,254,254,254,254,254,,,,254,254,255,255,255,,255,,,,255,255,", ",,255,,255,255,255,255,255,255,255,,,,,255,255,255,255,255,255,255,", ",,,,,,,,255,,,255,255,255,255,255,255,255,255,255,255,,255,255,,255", "255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,255,,255,,255", ",,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,263,263,263,,263,", ",,263,263,,,,263,,263,263,263,263,263,263,263,,,,,263,263,263,263,263", "263,263,,,,,,,,,,263,,,263,263,263,263,263,263,263,263,263,263,,263", "263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,263,263,263,,,263,,263", ",263,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,802,802", "802,,802,,,,802,802,,,,802,,802,802,802,802,802,802,802,,,,,802,802", "802,802,802,802,802,,,,,,,,,,802,,,802,802,802,802,802,802,802,802,802", "802,,802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802", ",,,,,802,,,,,,,,802,,,,,802,802,802,802,802,802,,,,802,802,27,27,27", ",27,,,,27,27,,,,27,,27,27,27,27,27,27,27,,,,,27,27,27,27,27,27,27,,", ",,,,,,,27,,,27,27,27,27,27,27,27,27,27,27,,27,27,,27,27,27,,,,,,,,,", ",,,,,,,,,,27,,,27,27,,27,27,,,27,,27,,27,,27,,,,,,,,27,,,,,27,27,27", "27,27,27,,,,27,27,886,886,886,,886,,,,886,886,,,,886,,886,886,886,886", "886,886,886,,,,,886,886,886,886,886,886,886,,,,,,,,,,886,,,886,886,886", "886,886,886,886,886,886,886,,886,886,,,,886,,374,374,374,374,374,374", "374,374,374,374,374,,374,374,,,374,374,886,,,886,,,886,886,,,886,,,", "374,,374,,374,374,374,374,374,374,374,,374,,,886,886,886,886,886,886", ",,,886,886,397,397,397,374,397,,,,397,397,,,,397,,397,397,397,397,397", "397,397,,,,,397,397,397,397,397,397,397,,,,,,,,,,397,,,397,397,397,397", "397,397,397,397,397,397,,397,397,,397,397,397,,,,,,,,,,,,,,,,,,,,397", ",,397,,,397,397,,,397,,,,,,397,,,,,,,,397,,,,,397,397,397,397,397,397", ",,,397,397,788,788,788,,788,,,,788,788,,,,788,,788,788,788,788,788,788", "788,,,,,788,788,788,788,788,788,788,,,,,,,,,,788,,,788,788,788,788,788", "788,788,788,788,788,,788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788", ",,788,788,,,788,,,,,,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788", "788,269,269,269,,269,,,,269,269,,,,269,,269,269,269,269,269,269,269", ",,,,269,269,269,269,269,269,269,,,,,,,,,,269,,,269,269,269,269,269,269", "269,269,269,269,,269,269,,,,269,,684,684,684,684,684,684,684,684,684", "684,684,,684,684,,,684,684,269,,,269,,,269,269,,,269,,,,684,,684,,684", "684,684,684,684,684,684,,684,,,269,269,269,269,269,269,,,,269,269,396", "396,396,684,396,,,,396,396,,,,396,,396,396,396,396,396,396,396,,,,,396", "396,396,396,396,396,396,,,,,,,,,,396,,,396,396,396,396,396,396,396,396", "396,396,,396,396,,396,396,396,,,,,,,,,,,,,,,,,,,,396,,,396,,,396,396", ",,396,,,,,,396,,,,,,,,396,,,,,396,396,396,396,396,396,,,,396,396,395", "395,395,,395,,,,395,395,,,,395,,395,395,395,395,395,395,395,,,,,395", "395,395,395,395,395,395,,,,,,,,,,395,,,395,395,395,395,395,395,395,395", "395,395,,395,395,,395,395,395,,,,,,,,,,,,,,,,,,,,395,,,395,,,395,395", ",,395,,,,,,395,,,,,,,,395,,,,,395,395,395,395,395,395,,,,395,395,24", "24,24,,24,,,,24,24,,,,24,,24,24,24,24,24,24,24,,,,,24,24,24,24,24,24", "24,,,,,,,,,,24,,,24,24,24,24,24,24,24,24,24,24,,24,24,,24,24,24,,,,", ",,,,,,,,,,,,,,,24,,,24,,,24,24,,,24,,24,,24,,24,,,,,,,,24,,,,,24,24", "24,24,24,24,,,,24,24,786,786,786,,786,,,,786,786,,,,786,,786,786,786", "786,786,786,786,,,,,786,786,786,786,786,786,786,,,,,,,,,,786,,,786,786", "786,786,786,786,786,786,786,786,,786,786,,786,786,786,,,,,,,,,,,,,,", ",,,,,786,,,786,,,786,786,,,786,,,,,,786,,,,,,,,786,,,,,786,786,786,786", "786,786,,,,786,786,880,880,880,,880,,,,880,880,,,,880,,880,880,880,880", "880,880,880,,,,,880,880,880,880,880,880,880,,,,,,,,,,880,,,880,880,880", "880,880,880,880,880,880,880,,880,880,,880,880,880,,,,,,,,,,,,,,,,,,", ",880,,,880,,,880,880,,,880,,880,,880,,880,,,,,,,,880,,,,,880,880,880", "880,880,880,,,,880,880,780,780,780,,780,,,,780,780,,,,780,,780,780,780", "780,780,780,780,,,,,780,780,780,780,780,780,780,,,,,,,,,,780,,,780,780", "780,780,780,780,780,780,780,780,,780,780,,780,780,780,,,,,,,,,,,,,,", ",,,,,780,,,780,,,780,780,,,780,,,,,,780,,,,,,,,780,,,,,780,780,780,780", "780,780,,,,780,780,510,510,510,,510,,,,510,510,,,,510,,510,510,510,510", "510,510,510,,,,,510,510,510,510,510,510,510,,,510,,,,,,,510,,,510,510", "510,510,510,510,510,510,510,510,,510,510,,510,510,510,,,,,,,,,,,,,,", ",,,,,510,,,510,,,510,510,,,510,,,,,,510,,,,,,,,510,,,,,510,510,510,510", "510,510,,,,510,510,393,393,393,,393,,,,393,393,,,,393,,393,393,393,393", "393,393,393,,,,,393,393,393,393,393,393,393,,,,,,,,,,393,,,393,393,393", "393,393,393,393,393,393,393,,393,393,,393,393,393,,,,,,,,,,,,,,,,,,", ",393,,,393,,,393,393,,,393,,393,,,,393,,,,,,,,393,,,,,393,393,393,393", "393,393,,,,393,393,506,506,506,,506,,,,506,506,,,,506,,506,506,506,506", "506,506,506,,,,,506,506,506,506,506,506,506,,,,,,,,,,506,,,506,506,506", "506,506,506,506,506,506,506,,506,506,,506,506,506,,,,,,,,,,,,,,,,,,", ",506,,,506,,,506,506,,,506,,506,,,,506,,,,,,,,506,,,,,506,506,506,506", "506,506,,,,506,506,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,5,5,5,5", "5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,,5,5,5,,,,,,,,,,,,,", ",,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,5,5,,,,5,5,497,497", "497,,497,,,,497,497,,,,497,,497,497,497,497,497,497,497,,,,,497,497", "497,497,497,497,497,,,,,,,,,,497,,,497,497,497,497,497,497,497,497,497", "497,,497,497,,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497", ",497,,,,497,,,,,,,,497,,,,,497,497,497,497,497,497,,,,497,497,23,23", "23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,23,23,23,23,23,23,23", ",,,,,,,,,23,,,23,23,23,23,23,23,23,23,23,23,,23,23,,23,23,23,,,,,,,", ",,,,,,,,,,,,23,,,23,,,23,23,,,23,,23,,23,,23,,,,,,,,23,,,,,23,23,23", "23,23,23,,,,23,23,768,768,768,,768,,,,768,768,,,,768,,768,768,768,768", "768,768,768,,,,,768,768,768,768,768,768,768,,,,,,,,,,768,,,768,768,768", "768,768,768,768,768,768,768,,768,768,,768,768,768,,,,,,,,,,,,,,,,,,", ",768,,,768,,,768,768,,,768,,,,,,768,,,,,,,,768,,,,,768,768,768,768,768", "768,,,,768,768,496,496,496,,496,,,,496,496,,,,496,,496,496,496,496,496", "496,496,,,,,496,496,496,496,496,496,496,,,,,,,,,,496,,,496,496,496,496", "496,496,496,496,496,496,,496,496,,496,496,496,,,,,,,,,,,,,,,,,,,,496", ",,496,,,496,496,,,496,,496,,,,496,,,,,,,,496,,,,,496,496,496,496,496", "496,,,,496,496,22,22,22,,22,,,,22,22,,,,22,,22,22,22,22,22,22,22,,,", ",22,22,22,22,22,22,22,,,,,,,,,,22,,,22,22,22,22,22,22,22,22,22,22,,22", "22,,22,22,22,,,,,,,,,,,,,,,,,,,,22,,,22,,,22,22,,,22,,22,,22,,22,,,", ",,,,22,,,,,22,22,22,22,22,22,,,,22,22,290,290,290,,290,,,,290,290,,", ",290,,290,290,290,290,290,290,290,,,,,290,290,290,290,290,290,290,,", ",,,,,,,290,,,290,290,290,290,290,290,290,290,290,290,,290,290,,290,290", "290,,,,,,,,,,,,,,,,,,,,290,,,290,290,,290,290,,,290,,,,,,290,,,,,,,", "290,,,,,290,290,290,290,290,290,,,,290,290,759,759,759,,759,,,,759,759", ",,,759,,759,759,759,759,759,759,759,,,,,759,759,759,759,759,759,759", ",,,,,,,,,759,,,759,759,759,759,759,759,759,759,759,759,,759,759,,759", "759,759,,,,,,,,,,,,,,,,,,,,759,,,759,,,759,759,,,759,,,,,,759,,,,,,", ",759,,,,,759,759,759,759,759,759,,,,759,759,445,445,445,,445,,,,445", "445,,,,445,,445,445,445,445,445,445,445,,,,,445,445,445,445,445,445", "445,,,445,,,,,,,445,,,445,445,445,445,445,445,445,445,445,445,,445,445", ",445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445,,445,,445", ",445,,,,,,,,445,,,,,445,445,445,445,445,445,,,,445,445,386,386,386,", "386,,,,386,386,,,,386,,386,386,386,386,386,386,386,,,,,386,386,386,386", "386,386,386,,,,,,,,,,386,,,386,386,386,386,386,386,386,386,386,386,", "386,386,,386,386,386,,,,,,,,,,,,,,,,,,,,386,,,386,386,,386,386,,,386", ",386,,386,,386,,,,,,,,386,,,,,386,386,386,386,386,386,,,,386,386,560", "560,560,,560,,,,560,560,,,,560,,560,560,560,560,560,560,560,,,,,560", "560,560,560,560,560,560,,,,,,,,,,560,,,560,560,560,560,560,560,560,560", "560,560,,560,560,,560,560,560,,,,,,,,,,,,,,,,,,,,560,,,560,,,560,560", ",,560,,,,,,560,,,,,,,,560,,,,,560,560,560,560,560,560,,,,560,560,385", "385,385,,385,,,,385,385,,,,385,,385,385,385,385,385,385,385,,,,,385", "385,385,385,385,385,385,,,,,,,,,,385,,,385,385,385,385,385,385,385,385", "385,385,,385,385,,385,385,385,,,,,,,,,,,,,,,,,,,,385,,,385,385,,385", "385,,,385,,385,,385,,385,,,,,,,,385,,,,,385,385,385,385,385,385,,,,385", "385,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,,,6,6,6,6,6,6,6", "6,6,6,,,,,,6,6,6,6,6,6,6,6,6,,6,,,,,,,,6,6,,6,6,6,6,,6,6,,,6,,,,,6,6", "6,6,,,,,,,,,,,,,,6,6,,6,6,6,6,6,6,6,6,6,,6,,,6,6,,,299,299,299,,299", ",,6,299,299,,,,299,,299,299,299,299,299,299,299,,,,,299,299,299,299", "299,299,299,,,,,,,,,,299,,,299,299,299,299,299,299,299,299,299,299,", "299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,", ",,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299,299,18,18,18,,18", ",,,18,18,,,,18,,18,18,18,18,18,18,18,,,,,18,18,18,18,18,18,18,,,,,,", ",,,18,,,18,18,18,18,18,18,18,18,18,18,,18,18,,18,18,18,,,,,,,,,,,,,", ",,,,,,18,,,18,,,18,18,,,18,,,,,,18,,,,,,,,18,,,,,18,18,18,18,18,18,", ",,18,18,740,740,740,,740,,,,740,740,,,,740,,740,740,740,740,740,740", "740,,,,,740,740,740,740,740,740,740,,,,,,,,,,740,,,740,740,740,740,740", "740,740,740,740,740,,740,740,,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740", ",,740,740,,,740,,740,,,,740,,,,,,,,740,,,,,740,740,740,740,740,740,", ",,740,740,17,17,17,,17,,,,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17", "17,17,17,17,17,,,17,,,,,,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17", ",17,17,17,,,,,,,,,,,,,,,,,,,,17,,,17,,,17,17,,,17,,,,,,17,,,,,,,,17", ",,,,17,17,17,17,17,17,,,,17,17,584,584,584,,584,,,,584,584,,,,584,,584", "584,584,584,584,584,584,,,,,584,584,584,584,584,584,584,,,,,,,,,,584", ",,584,584,584,584,584,584,584,584,584,584,,584,584,,584,584,584,,,,", ",,,,,,,,,,,,,,,584,,,584,,,584,584,,,584,,,,,,584,,,,,,,,584,,,,,584", "584,584,584,584,584,,,,584,584,734,734,734,,734,,,,734,734,,,,734,,734", "734,734,734,734,734,734,,,,,734,734,734,734,734,734,734,,,734,,,,,,", "734,,,734,734,734,734,734,734,734,734,734,734,,734,734,,734,734,734", ",,,,,,,,,,,,,,,,,,,734,,,734,,,734,734,,,734,,,,,,734,,,,,,,,734,,,", ",734,734,734,734,734,734,,,,734,734,680,680,680,,680,,,,680,680,,,,680", ",680,680,680,680,680,680,680,,,,,680,680,680,680,680,680,680,,,,,,,", ",,680,,,680,680,680,680,680,680,680,680,680,680,,680,680,,680,680,680", ",,,,,,,,,,,,,,,,,,,680,,,680,,,680,680,,,680,,,,,,680,,,,,,,,680,,,", ",680,680,680,680,680,680,,,,680,680,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7", "7,7,7,7,7,7,7,7,,,7,7,7,7,7,7,7,7,7,7,,,,,,7,7,7,7,7,7,7,7,,,7,,,,,", ",,7,7,,7,7,7,7,,7,7,,,7,,,,,7,7,7,7,,,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7", "7,7,,7,,,7,7,,,308,308,308,,308,,,7,308,308,,,,308,,308,308,308,308", "308,308,308,,,,,308,308,308,308,308,308,308,,,308,,,,,,,308,,,308,308", "308,308,308,308,308,308,308,308,,308,308,,308,308,308,,,,,,,,,,,,,,", ",,,,,308,,,308,,,308,308,,,308,,,,,,308,,,,,,,,308,,,,,308,308,308,308", "308,308,,,,308,308,309,309,309,,309,,,,309,309,,,,309,,309,309,309,309", "309,309,309,,,,,309,309,309,309,309,309,309,,,309,,,,,,,309,,,309,309", "309,309,309,309,309,309,309,309,,309,309,,309,309,309,,,,,,,,,,,,,,", ",,,,,309,,,309,,,309,309,,,309,,,,,,309,,,,,,,,309,,,,,309,309,309,309", "309,309,,,,309,309,378,378,378,,378,,,,378,378,,,,378,,378,378,378,378", "378,378,378,,,,,378,378,378,378,378,378,378,,,,,,,,,,378,,,378,378,378", "378,378,378,378,378,378,378,,378,378,,378,378,378,,,,,,,,,,,,,,,,,,", ",378,,,378,378,,378,378,,,378,,378,,378,,378,,,,,,,,378,,,,,378,378", "378,378,378,378,,,,378,378,728,728,728,,728,,,,728,728,,,,728,,728,728", "728,728,728,728,728,,,,,728,728,728,728,728,728,728,,,,,,,,,,728,,,728", "728,728,728,728,728,728,728,728,728,,728,728,,,,728,,237,237,237,237", "237,237,237,237,237,237,237,,237,237,,,237,237,728,,,728,,,728,728,", ",728,,,,237,,237,,237,237,237,237,237,237,237,,237,,,728,728,728,728", "728,728,,,,728,728,634,634,634,237,634,,,,634,634,,,,634,,634,634,634", "634,634,634,634,,,,,634,634,634,634,634,634,634,,,634,,,,,,,634,,,634", "634,634,634,634,634,634,634,634,634,,634,634,,634,634,634,,,,,,,,,,", ",,,,,,,,,634,,,634,,,634,634,,,634,,,,,,634,,,,,,,,634,,,,,634,634,634", "634,634,634,,,,634,634,456,456,456,,456,,,,456,456,,,,456,,456,456,456", "456,456,456,456,,,,,456,456,456,456,456,456,456,,,,,,,,,,456,,,456,456", "456,456,456,456,456,456,456,456,,456,456,,456,456,456,,,,,,,,,,,,,,", ",,,,,456,,,456,,,456,456,,,456,,456,,,,456,,,,,,,,456,,,,,456,456,456", "456,456,456,,,,456,456,564,564,564,,564,,,,564,564,,,,564,,564,564,564", "564,564,564,564,,,,,564,564,564,564,564,564,564,,,,,,,,,,564,,,564,564", "564,564,564,564,564,564,564,564,,564,564,,564,564,564,,,,,,,,,,,,,,", ",,,,,564,,,564,,,564,564,,,564,,,,,,564,,,,,,,,564,,,,,564,564,564,564", "564,564,,,,564,564,861,861,861,,861,,,,861,861,,,,861,,861,861,861,861", "861,861,861,,,,,861,861,861,861,861,861,861,,,,,,,,,,861,,,861,861,861", "861,861,861,861,861,861,861,,861,861,,,,861,,767,767,767,767,767,767", "767,767,767,767,767,,767,767,,,767,767,861,,,861,,,861,861,,,861,,,", "767,,767,,767,767,767,767,767,767,767,,767,,,861,861,861,861,861,861", ",,,861,861,369,369,369,767,369,,,,369,369,,,,369,,369,369,369,369,369", "369,369,,,,,369,369,369,369,369,369,369,,,,,,,,,,369,,,369,369,369,369", "369,369,369,369,369,369,,369,369,,369,369,369,,,,,,,,,,,,,,,,,,,,369", ",,369,,,369,369,,,369,,,,,,369,,,,,,,,369,,,,,369,369,369,369,369,369", ",,,369,369,612,612,612,,612,,,,612,612,,,,612,,612,612,612,612,612,612", "612,,,,,612,612,612,612,612,612,612,,,,,,,,,,612,,,612,612,612,612,612", "612,612,612,612,612,,612,612,,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612", ",,612,612,,,612,,,,,,612,,,,,,,,612,,,,,612,612,612,612,612,612,,,,612", "612,463,463,463,,463,,,,463,463,,,,463,,463,463,463,463,463,463,463", ",,,,463,463,463,463,463,463,463,,,,,,,,,,463,,,463,463,463,463,463,463", "463,463,463,463,,463,463,,463,463,463,,,,,,,,,,,,,,,,,,,,463,,,463,", ",463,463,,,463,,,,,,463,,,,,,,,463,,,,,463,463,463,463,463,463,,,,463", "463,690,690,690,,690,,,,690,690,,,,690,,690,690,690,690,690,690,690", ",,,,690,690,690,690,690,690,690,,,,,,,,,,690,,,690,690,690,690,690,690", "690,690,690,690,,690,690,,690,690,690,,,,,,,,,,,,,,,,,,,,690,,,690,", ",690,690,,,690,,,,,,690,,,,,,,,690,,,,,690,690,690,690,690,690,,,,690", "690,715,715,715,,715,,,,715,715,,,,715,,715,715,715,715,715,715,715", ",,,,715,715,715,715,715,715,715,,,,,,,,,,715,,,715,715,715,715,715,715", "715,715,715,715,,715,715,,715,715,715,,,,,,,,,,,,,,,,,,,,715,,,715,", ",715,715,,,715,,715,,715,,715,,,,,,,,715,,,,,715,715,715,715,715,715", ",,,715,715,864,864,864,,864,,,,864,864,,,,864,,864,864,864,864,864,864", "864,,,,,864,864,864,864,864,864,864,,,,,,,,,,864,,,864,864,864,864,864", "864,864,864,864,864,,864,864,,864,864,864,,,,,,,,,,,,,,,,,,,,864,,,864", ",,864,864,,,864,,,,,,864,,,,,,,,864,,,,,864,864,864,864,864,864,,,,864", "864,867,867,867,,867,,,,867,867,,,,867,,867,867,867,867,867,867,867", ",,,,867,867,867,867,867,867,867,,,,,,,,,,867,,,867,867,867,867,867,867", "867,867,867,867,,867,867,,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867,", ",867,867,,,867,,,,,,867,,,,,,,,867,,,,,867,867,867,867,867,867,,,,867", "867,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327,327", ",,,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327,327,327", "327,327,327,327,327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327", ",,327,327,,,327,,,,,,327,,,,,,,,327,,,,,327,327,327,327,327,327,,,,327", "327,713,713,713,,713,,,,713,713,,,,713,,713,713,713,713,713,713,713", ",,,,713,713,713,713,713,713,713,,,,,,,,,,713,,,713,713,713,713,713,713", "713,713,713,713,,713,713,,713,713,713,,,,,,,,,,,,,,,,,,,,713,,,713,", ",713,713,,,713,,713,,713,,713,,,,,,,,713,,,,,713,713,713,713,713,713", ",,,713,713,482,482,482,,482,,,,482,482,,,,482,,482,482,482,482,482,482", "482,,,,,482,482,482,482,482,482,482,,,,,,,,,,482,,,482,482,482,482,482", "482,482,482,482,482,,482,482,,482,482,482,,,,,,,,,,,,,,,,,,,,482,,,482", ",,482,482,,,482,,,,,,482,,,,,,,,482,,,,,482,482,482,482,482,482,,,,482", "482,875,875,875,,875,,,,875,875,,,,875,,875,875,875,875,875,875,875", ",,,,875,875,875,875,875,875,875,,,,,,,,,,875,,,875,875,875,875,875,875", "875,875,875,875,,875,875,,,,875,,600,600,600,600,600,600,600,600,600", "600,600,,600,600,,,600,600,875,,,875,,,875,875,,,875,,,,600,,600,,600", "600,600,600,600,600,600,,600,,,875,875,875,875,875,875,,,,875,875,704", "704,704,600,704,,,,704,704,,,,704,,704,704,704,704,704,704,704,,,,,704", "704,704,704,704,704,704,,,,,,,,,,704,,,704,704,704,704,704,704,704,704", "704,704,,704,704,,704,704,704,,,,,,,,,,,,,,,,,,,,704,,,704,,,704,704", ",,704,,704,,704,,704,,,,,,,,704,,,,,704,704,704,704,704,704,,,,704,704", "698,698,698,,698,,,,698,698,,,,698,,698,698,698,698,698,698,698,,,,", "698,698,698,698,698,698,698,,,,,,,,,,698,,,698,698,698,698,698,698,698", "698,698,698,,698,698,,,,698,,687,687,687,687,687,687,687,687,687,687", "687,,687,687,,,687,687,698,,,698,,,698,698,,,698,,,,687,,687,,687,687", "687,687,687,687,687,,687,,,698,698,698,698,698,698,,,,698,698,580,580", "580,687,580,,,,580,580,,,,580,,580,580,580,580,580,580,580,,,,,580,580", "580,580,580,580,580,,,,,,,,,,580,,,580,580,580,580,580,580,580,580,580", "580,,580,580,,580,580,580,,,,,,,,,,,,,,,,,,,,580,,,580,,,580,580,,,580", ",580,,580,,580,,,,,,,,580,,,,,580,580,580,580,580,580,,,,580,580,479", "479,479,,479,,,,479,479,,,,479,,479,479,479,479,479,479,479,,,,,479", "479,479,479,479,479,479,,,,,,,,,,479,,,479,479,479,479,479,479,479,479", "479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479", ",,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479,479,479,,,,479,479,476", "476,476,,476,,,,476,476,,,,476,,476,476,476,476,476,476,476,,,,,476", "476,476,476,476,476,476,,,,,,,,,,476,,,476,476,476,476,476,476,476,476", "476,476,,476,476,,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476,,,476,476", ",,476,,476,,,,476,,,,,,,,476,,,,,476,476,476,476,476,476,,,,476,476", "692,692,692,,692,,,,692,692,,,,692,,692,692,692,692,692,692,692,,,,", "692,692,692,692,692,692,692,,,,,,,,,,692,,,692,692,692,692,692,692,692", "692,692,692,,692,692,,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692", "692,,,692,,,,,,692,,,,,,,,692,,,,,692,692,692,692,692,692,,,,692,692", "341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341,341,341,,,,", "341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,341,341,341,341", "341,341,341,341,,341,341,,341,341,341,,,,,,,,,,,,,,,,,,,,341,,,341,", ",341,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341,341,341,341,,,,341", "341,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357", "357,357,357,357,357,357,357,357,,,357,357,357,357,357,357,357,357,357", "357,,,,,,357,357,357,357,357,357,357,357,,,357,,,,,,,,357,357,,357,357", "357,357,,357,357,,,357,,,,,357,357,357,357,,,,,,,,,,,,,,357,357,,357", "357,357,357,357,357,357,357,357,,357,,,357,357,,,471,471,471,,471,,", "357,471,471,,,,471,,471,471,471,471,471,471,471,,,,,471,471,471,471", "471,471,471,,,,,,,,,,471,,,471,471,471,471,471,471,471,471,471,471,", "471,471,,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471,,,471,471,,,471,,471", ",,,471,,,,,,,,471,,,,,471,471,471,471,471,471,,,,471,471,628,628,628", ",628,,,,628,628,,,,628,,628,628,628,628,628,628,628,,,,,628,628,628", "628,628,628,628,,,,,,,,,,628,,,628,628,628,628,628,628,628,628,628,628", ",628,628,,628,628,628,,,,,,,,,,,,,,,,,,,,628,,,628,,,628,628,,,628,", ",,,,628,,,,,,,,628,,,,,628,628,628,628,628,628,,,,628,628,469,469,469", ",469,,,,469,469,,,,469,,469,469,469,469,469,469,469,,,,,469,469,469", "469,469,469,469,,,469,,,,,,,469,,,469,469,469,469,469,469,469,469,469", "469,,469,469,,469,469,469,,,,,,,,,,,,,,,,,,,,469,,,469,,,469,469,,,469", ",,,,,469,,,,,,,,469,,,,,469,469,469,469,469,469,,,,469,469,465,465,465", ",465,,,,465,465,,,,465,,465,465,465,465,465,465,465,,,,,465,465,465", "465,465,465,465,,,,,,,,,,465,,,465,465,465,465,465,465,465,465,465,465", ",465,465,,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,465,,,465,", ",,,,465,,,,,,,,465,,,,,465,465,465,465,465,465,,,,465,465,464,464,464", ",464,,,,464,464,,,,464,,464,464,464,464,464,464,464,,,,,464,464,464", "464,464,464,464,,,,,,,,,,464,,,464,464,464,464,464,464,464,464,464,464", ",464,464,,464,464,464,,,,,,,,,,,,,,,,,,,,464,,,464,,,464,464,,,464,", ",,,,464,,,,,,,,464,,,,,464,464,464,464,464,464,,,,464,464,211,211,211", ",211,,,,211,211,,,,211,,211,211,211,211,211,211,211,,,,,211,211,211", "211,211,211,211,,,,,,,,,,211,,,211,211,211,211,211,211,211,211,211,211", ",211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,", ",,,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,664,664,664", "664,664,664,664,664,664,664,664,664,664,664,664,664,664,664,664,664", "664,664,664,664,,,664,664,664,664,664,664,664,664,664,664,,,,,,664,664", "664,664,664,664,664,664,,,664,,,,,,,,664,664,,664,664,664,664,,664,664", ",,664,,,,,664,664,664,664,,,,,,,,,,,,,,664,664,,664,664,664,664,664", "664,664,664,664,,664,,,664,64,64,64,64,64,64,64,64,64,64,64,64,64,64", "64,64,64,64,64,64,64,64,64,64,,,64,64,64,64,64,64,64,64,64,64,,,,,,64", "64,64,64,64,64,64,64,64,64,64,64,,,,,,,64,64,,64,64,64,64,,64,64,,,64", ",,,,64,64,64,64,,,,,,64,,,,,,,,64,64,,64,64,64,64,64,64,64,64,64,,64", ",,64,581,581,581,581,581,581,581,581,581,581,581,,581,581,,,581,581", ",,,581,,,,,,,,,,,581,,581,,581,581,581,581,581,581,581,,581,,,,,,,,392", "392,,,392,,,,,581,,581,392,392,,392,392,392,392,,392,392,,,392,,,,,392", "392,392,392,,,,,,,,,,,,,,392,392,,392,392,392,392,392,392,392,392,392", ",392,251,251,392,,251,,,,,,,,251,251,,251,251,251,251,,251,251,,,251", ",,,,251,251,251,251,,,,,,,,,,,,,,251,251,,251,251,251,251,251,251,251", "251,251,,251,252,252,251,,252,,,,,,,,252,252,,252,252,252,252,,252,252", ",,252,,,,,252,252,252,252,,,,,,,,,,,,,,252,252,,252,252,252,252,252", "252,252,252,252,,252,823,823,252,,823,,,,,,,,823,823,,823,823,823,823", ",823,823,,,823,,,,,823,823,823,823,,,,,,,,,,,,,,823,823,,823,823,823", "823,823,823,823,823,823,,823,192,192,823,,192,,,,,,,,192,192,,192,192", "192,192,,192,192,,,192,,,,,192,192,192,192,,,,,,,,,,,,,,192,192,,192", "192,192,192,192,192,192,192,192,,192,578,578,192,,578,,,,,,,,578,578", ",578,578,578,578,,578,578,,,578,,,,,578,578,578,578,,,,,,,,,,,,,,578", "578,,578,578,578,578,578,578,578,578,578,,578,467,467,578,,467,,,,,", ",,467,467,,467,467,467,467,,467,467,,,467,,,,,467,467,467,467,,,,,,", ",,,,,,,467,467,,467,467,467,467,467,467,467,467,467,,467,,,467,423,423", "423,423,423,423,423,423,423,423,423,,423,423,,,423,423,,,,,,,,,,,,,", ",423,,423,,423,423,423,423,423,423,423,,423,,,,,,,466,466,,,466,,,,", ",423,423,466,466,,466,466,466,466,,466,466,,,466,,,,,466,466,466,466", ",,,,,,,,,,,,,466,466,,466,466,466,466,466,466,466,466,466,,466,193,193", "466,,193,,,,,,,,193,193,,193,193,193,193,,193,193,,,193,,,,,193,193", "193,193,,,,,,,,,,,,,,193,193,,193,193,193,193,193,193,193,193,193,,193", "507,507,193,,507,,,,,,,,507,507,,507,507,507,507,,507,507,,,507,,,,", "507,507,507,507,,,,,,,,,,,,,,507,507,,507,507,507,507,507,507,507,507", "507,,507,824,824,507,,824,,,,,,,,824,824,,824,824,824,824,,824,824,", ",824,,,,,824,824,824,824,,,,,,,,,,,,,,824,824,,824,824,824,824,824,824", "824,824,824,,824,505,505,824,,505,,,,,,,,505,505,,505,505,505,505,,505", "505,,,505,,,,,505,505,505,505,,,,,,,,,,,,,,505,505,,505,505,505,505", "505,505,505,505,505,,505,499,499,505,,499,,,,,,,,499,499,,499,499,499", "499,,499,499,,,499,,,,,499,499,499,499,,,,,,,,,,,,,,499,499,,499,499", "499,499,499,499,499,499,499,,499,498,498,499,,498,,,,,,,,498,498,,498", "498,498,498,,498,498,,,498,,,,,498,498,498,498,,,,,,,,,,,,,,498,498", ",498,498,498,498,498,498,498,498,498,,498,458,458,498,,458,,,,,,,,458", "458,,458,458,458,458,,458,458,,,458,,,,,458,458,458,458,,,,,,,,,,,,", ",458,458,,458,458,458,458,458,458,458,458,458,,458,457,457,458,,457", ",,,,,,,457,457,,457,457,457,457,,457,457,,,457,,,,,457,457,457,457,", ",,,,,,,,,,,,457,457,,457,457,457,457,457,457,457,457,457,,457,391,391", "457,,391,,,,,,,,391,391,,391,391,391,391,,391,391,,,391,,,,,391,391", "391,391,,,,,,,,,,,,,,391,391,,391,391,391,391,391,391,391,391,391,,391", "579,579,391,,579,,,,,,,,579,579,,579,579,579,579,,579,579,,,579,,,,", "579,579,579,579,,,,,,,,,,,,,,579,579,,579,579,579,579,579,579,579,579", "579,,579,,,579,480,480,480,480,480,480,480,480,480,480,480,,480,480", ",,480,480,,,,,,,,,,,,,,,480,,480,,480,480,480,480,480,480,480,,480,", "731,731,731,731,731,731,731,731,731,731,731,,731,731,480,480,731,731", ",,,,,,,,,,,,,,731,,731,,731,731,731,731,731,731,731,,731,,689,689,689", "689,689,689,689,689,689,689,689,,689,689,731,731,689,689,,,,,,,,,,,", ",,,689,,689,,689,689,689,689,689,689,689,,689,,677,677,677,677,677,677", "677,677,677,677,677,,677,677,,689,677,677,,,,,,,,,,,,,,,677,,677,,677", "677,677,677,677,677,677,,677,,,,,,,,,,,,,,,,,677"];

      racc_action_check = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(24400, nil);

      idx = 0;

      ($a = ($c = clist).$each, $a._p = (TMP_3 = function(str){var self = TMP_3._s || this, $a, $b, TMP_4;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_4 = function(i){var self = TMP_4._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_4._s = self, TMP_4), $a).call($b)}, TMP_3._s = self, TMP_3), $a).call($c);

      racc_action_pointer = [1255, 1085, nil, 146, 1003, 16279, 17731, 18691, 966, 958, 917, 903, 948, 885, 149, 130, nil, 18207, 17965, 5761, 992, nil, 16884, 16521, 15432, 198, 129, 14585, 13262, nil, 2963, 9632, 8422, nil, 886, 209, 942, 419, 7575, 7333, 6486, 858, 636, nil, nil, nil, nil, nil, nil, nil, 291, 4549, 5397, 4792, 4913, 87, 5155, 5276, nil, nil, 757, 5518, 5639, 5760, 22899, nil, nil, nil, nil, nil, -92, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 6123, nil, nil, nil, 6244, nil, nil, nil, nil, nil, nil, nil, nil, 969, nil, 885, nil, nil, nil, 6607, 6728, 6849, 6970, 7091, 885, nil, 569, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 794, nil, 3817, 3695, 7817, 7938, 8059, 8180, 23254, 23548, 8543, 8664, 8785, nil, 424, -33, 859, -51, 781, 826, 3085, nil, nil, 9753, 9874, 9995, 10116, 22668, 10358, 10479, 10600, 10721, 10842, 10963, 11084, 11205, 11326, 11447, 11568, 11689, 11810, 11931, 12052, 12173, 12294, 12415, 12536, 12657, 12778, 12899, nil, nil, nil, 19168, nil, 782, 772, 13383, nil, 13504, 813, nil, nil, nil, nil, nil, nil, 23074, 23134, 800, 14101, 14222, nil, nil, nil, nil, nil, nil, nil, 14343, 779, 2719, 764, 761, 718, 15069, 2475, 1002, 940, 788, 929, 716, 674, 142, nil, 709, 446, nil, nil, 324, 729, 728, 399, nil, 720, nil, 17005, nil, 775, 764, 411, nil, 640, 117, -79, 17844, 654, 145, 618, 251, nil, 516, 8, 15, 18804, 18925, 168, 338, 550, 25, 544, 610, -9, 638, nil, nil, 407, 401, 115, nil, 680, nil, 9, 20619, nil, nil, 259, 213, 347, 374, 478, 346, 295, 240, nil, 234, nil, 21829, nil, 323, 201, 128, 226, -35, 230, nil, 1125, nil, nil, nil, nil, nil, nil, 21950, nil, nil, nil, nil, 419, 410, nil, nil, 757, nil, 380, 19772, nil, 368, nil, nil, 14707, 401, 198, 318, 19046, nil, nil, 0, 404, 107, nil, 17610, 17368, nil, 5640, nil, nil, 24028, 23014, 16037, 141, 15311, 15190, 14827, 636, 885, 577, 371, 397, 391, 380, 361, 2719, 2963, 2841, 1865, 1621, 1499, 1002, 515, 1743, 1987, 2109, 2231, 2597, 400, 486, 2353, 2475, 23422, 129, nil, 5881, nil, 9148, 179, nil, 13859, 214, nil, nil, 398, nil, nil, 206, 136, -64, -16, 51, nil, nil, 17247, 114, -48, -32, nil, -42, -93, nil, nil, nil, 792, 19409, 23968, 23908, 760, 191, nil, nil, 20014, 22547, 22426, 23488, 23374, 7455, 22305, 517, 22063, nil, 430, nil, nil, 21587, nil, nil, 21466, 24136, nil, 20861, nil, nil, nil, 3207, 591, nil, nil, 2231, 68, 137, 633, 673, 2109, 16763, 16400, 23848, 23788, 23, nil, nil, 509, nil, 23728, 16158, 23608, nil, nil, 15916, 280, -34, 2353, 1019, nil, nil, nil, -32, nil, nil, nil, 620, nil, nil, nil, 631, nil, 149, nil, nil, 653, nil, nil, 13746, nil, nil, 13020, 9511, nil, 300, 9390, 9269, 701, nil, nil, 9027, 848, nil, 8906, 69, 135, 515, 636, 853, 1128, 6002, 7696, nil, 3451, 17489, 850, nil, 933, 19530, nil, 963, nil, 981, nil, nil, nil, nil, nil, -13, nil, 992, 659, 23314, 24088, 21345, 22947, 43, 903, 18328, nil, 906, nil, 1499, 3939, nil, -38, nil, 776, 112, 63, 683, 199, 1128, 658, 20983, 660, 632, -5, 673, nil, 1987, 521, 558, nil, nil, 521, 19893, nil, nil, 567, nil, 571, nil, nil, nil, nil, nil, 574, nil, 563, 434, -7, 22184, 222, 4, 8, -1, 75, 19288, 260, 299, nil, 112, 4061, 399, nil, nil, 275, 4427, 460, -67, 196, 210, 226, nil, nil, nil, nil, nil, 258, nil, nil, nil, nil, 370, nil, nil, 374, 22789, 343, nil, nil, nil, nil, nil, 4671, nil, nil, nil, nil, nil, 24274, 331, 8301, 18570, nil, 9633, nil, 15070, nil, nil, 21225, nil, 24228, 20135, 10237, 21708, -67, 8423, nil, 448, 1006, 21224, nil, 486, 584, 467, nil, 21103, 480, 3329, nil, nil, 546, 547, -63, 617, 20740, nil, 20256, 523, nil, 564, 550, 652, 639, nil, nil, 2841, nil, nil, 31, 19167, nil, nil, 24182, 684, nil, 18449, 706, 1377, 1621, nil, nil, 18086, 1743, nil, 13, 133, nil, 747, nil, 1865, nil, 756, 645, nil, 1306, nil, 215, nil, nil, 444, 17126, nil, nil, nil, nil, 673, nil, nil, 19652, 16642, 5034, 377, 757, 744, 888, 673, 705, nil, nil, nil, nil, 15795, nil, 704, 729, 709, nil, 15553, 717, 14948, nil, nil, nil, nil, nil, 2597, nil, nil, nil, 32, nil, 845, 857, 14464, 229, nil, nil, 866, nil, 788, 750, -101, nil, nil, 756, 763, nil, nil, 1428, nil, nil, 13625, 1128, 13141, 23194, 23668, 515, 823, 7454, 5519, nil, nil, nil, 7212, 837, nil, 6365, 845, 966, 4305, nil, nil, nil, nil, nil, nil, 4183, nil, nil, -43, nil, nil, nil, 3573, nil, 869, 906, 913, 388, 375, 378, 810, 19651, nil, nil, 20377, 919, nil, 20498, nil, nil, 526, 1040, 924, 1043, 966, 20982, 999, nil, 949, nil, 15674, 952, nil, nil, nil, nil, 14706, nil, nil, 13980, nil, nil, 959, nil];

      racc_action_default = [-4, -497, -1, -485, -5, -497, -497, -497, -497, -497, -497, -497, -497, -497, -271, -32, -33, -497, -497, -38, -40, -41, -282, -315, -316, -45, -249, -361, -285, -58, -4, -62, -67, -68, -497, -428, -497, -497, -497, -497, -497, -487, -214, -264, -265, -266, -267, -268, -269, -270, -475, -4, -497, -496, -467, -288, -497, -497, -292, -295, -485, -497, -497, -497, -497, -317, -318, -381, -382, -383, -384, -385, -399, -388, -401, -401, -392, -397, -411, -401, -413, -414, -417, -418, -419, -420, -421, -422, -423, -424, -425, -426, -427, -430, -431, -497, -3, -486, -492, -493, -494, -497, -497, -497, -497, -497, -6, -8, -497, -93, -94, -95, -96, -97, -98, -99, -100, -101, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -13, -102, -4, -4, -497, -497, -497, -496, -497, -497, -497, -497, -497, -36, -497, -428, -497, -271, -497, -497, -4, -37, -206, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -497, -351, -353, -42, -215, -228, -258, -258, -497, -236, -497, -259, -282, -315, -316, -470, -43, -44, -497, -497, -50, -496, -497, -287, -356, -362, -364, -56, -360, -57, -497, -58, -4, -497, -497, -63, -65, -4, -72, -497, -497, -79, -285, -487, -497, -319, -361, -497, -66, -70, -278, -415, -416, -497, -191, -192, -207, -497, -488, -373, -497, -274, -216, -487, -489, -489, -497, -497, -489, -497, -489, -289, -39, -497, -497, -497, -497, -485, -497, -486, -428, -497, -497, -271, -497, -331, -332, -88, -89, -497, -91, -497, -271, -497, -497, -428, -308, -93, -94, -131, -132, -148, -153, -160, -163, -310, -497, -465, -497, -386, -497, -497, -497, -497, -497, -497, 894, -7, -495, -14, -15, -16, -17, -18, -497, -10, -11, -12, -103, -497, -497, -21, -29, -171, -259, -497, -497, -22, -30, -31, -23, -173, -497, -476, -477, -226, -478, -479, -476, -249, -477, -359, -481, -482, -28, -180, -34, -35, -497, -497, -496, -278, -497, -497, -497, -181, -182, -183, -184, -185, -186, -187, -188, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -208, -209, -210, -211, -497, -347, -229, -497, -231, -497, -258, -256, -497, -249, -476, -477, -249, -48, -51, -497, -487, -487, -258, -228, -250, -251, -252, -347, -347, -497, -284, -497, -59, -276, -71, -64, -497, -496, -497, -497, -78, -497, -415, -416, -497, -497, -497, -497, -497, -212, -497, -496, -496, -273, -487, -217, -218, -491, -490, -220, -491, -487, -280, -491, -469, -281, -468, -4, -320, -321, -322, -4, -497, -497, -497, -497, -4, -497, -496, -497, -497, -278, -301, -88, -89, -90, -497, -496, -497, -304, -432, -497, -497, -497, -4, -445, -312, -483, -484, -487, -387, -400, -403, -497, -405, -389, -402, -497, -391, -497, -394, -396, -497, -412, -9, -497, -19, -20, -497, -497, -263, -279, -497, -497, -52, -227, -357, -497, -54, -358, -497, -476, -477, -480, -277, -497, -171, -497, -497, -349, -4, -497, -258, -257, -260, -497, -471, -497, -235, -497, -472, -46, -354, -47, -355, -347, -222, -497, -497, -497, -497, -497, -38, -497, -258, -497, -248, -497, -254, -4, -4, -283, -59, -69, -497, -476, -477, -226, -75, -77, -497, -179, -189, -190, -497, -496, -329, -4, -374, -496, -375, -376, -497, -497, -260, -221, -496, -323, -496, -293, -324, -325, -326, -296, -497, -299, -497, -367, -497, -497, -497, -476, -477, -480, -277, -497, -88, -89, -92, -497, -4, -497, -434, -306, -497, -4, -445, -497, -464, -464, -464, -444, -446, -447, -448, -449, -450, -451, -454, -456, -457, -459, -460, -461, -497, -497, -497, -404, -407, -408, -409, -410, -4, -390, -393, -395, -398, -104, -172, -261, -497, -497, -25, -175, -26, -176, -53, -27, -177, -55, -178, -497, -497, -497, -279, -213, -333, -335, -345, -497, -348, -497, -497, -258, -233, -497, -258, -4, -223, -224, -226, -226, -487, -497, -497, -241, -497, -258, -253, -497, -497, -497, -73, -286, -2, -4, -380, -330, -497, -497, -378, -275, -487, -497, -327, -497, -497, -4, -4, -298, -300, -497, -4, -369, -279, -497, -279, -497, -433, -4, -309, -497, -487, -436, -497, -440, -497, -442, -443, -497, -497, -458, -462, -313, -466, -497, -262, -24, -174, -497, -336, -80, -497, -497, -87, -344, -497, -346, -350, -352, -230, -497, -232, -497, -497, -258, -238, -497, -258, -497, -247, -255, -363, -365, -379, -4, -377, -219, -290, -497, -291, -497, -497, -497, -496, -302, -305, -497, -311, -497, -464, -464, -452, -463, -464, -497, -455, -453, -445, -406, -334, -497, -341, -496, -497, -497, -86, -497, -497, -258, -49, -225, -237, -497, -258, -243, -497, -258, -373, -4, -294, -297, -368, -366, -370, -371, -4, -307, -435, -497, -438, -439, -441, -4, -337, -340, -497, -497, -82, -84, -83, -85, -497, -343, -234, -497, -258, -239, -497, -242, -372, -496, -497, -464, -497, -497, -497, -81, -342, -258, -244, -497, -258, -328, -303, -437, -314, -497, -339, -240, -497, -245, -338, -258, -246];

      clist = ["13,338,470,266,293,13,300,278,278,240,240,240,604,486,490,100,440,198", "198,268,732,650,198,198,198,242,242,242,112,112,13,272,272,644,281,115", "115,278,278,278,504,303,306,307,438,494,310,106,257,261,264,13,198,198", "96,520,198,198,529,514,198,314,324,324,565,437,107,185,815,304,117,117", "100,365,372,253,260,262,238,238,238,340,618,622,559,718,112,352,353", "354,355,571,326,329,573,586,443,13,236,249,250,198,198,198,198,13,588", "589,810,296,813,311,475,478,317,565,483,508,485,35,587,239,239,239,35", "534,205,344,345,339,515,473,348,378,382,308,736,309,737,350,634,754", "756,757,375,845,639,356,748,35,271,271,650,301,513,302,664,817,696,735", "700,815,424,446,447,627,842,608,727,342,35,10,343,574,346,528,10,357", "347,666,313,328,328,328,671,751,13,13,198,198,198,198,432,435,198,198", "198,809,319,184,97,10,811,872,13,723,1,,,,,,,,,386,35,,,,,,10,637,35", ",,623,,,,,318,,706,,,,450,,674,240,240,455,,278,,296,,,240,,,,198,198", ",242,242,,605,610,,198,,13,242,,10,272,13,454,,,,882,10,,,,,,,,,264", "197,368,368,,264,,,,491,492,364,370,373,257,,261,387,849,850,35,35,851", "198,198,442,238,,,,,,,,238,,294,100,35,650,305,305,198,,305,439,444", "378,382,741,804,852,,509,448,565,198,711,,,843,554,,,,,565,290,441,239", "685,609,10,10,688,,493,239,,,,884,,571,573,305,305,305,305,,10,,,,112", ",,,,35,,115,,271,35,,,,198,725,,,,729,599,,,,,548,605,,605,599,593,", ",,561,386,,,533,,,,117,,,,12,,543,,,12,547,583,,794,,10,,,,599,10,,", ",198,599,,585,296,629,,,,,12,198,,,638,,2,,,389,390,643,,,198,,565,", ",,,12,14,,,386,570,14,,572,,13,,,386,13,267,,,,13,640,198,,,,,,619,619", "838,198,14,274,274,198,,296,13,,,565,,,709,710,386,12,641,642,,,386", "14,,12,,,278,,,,844,316,325,325,198,198,,,695,198,869,,,,,,296,,,112", "272,,13,,,296,115,,,,561,,,368,,,,14,,,305,305,,198,,14,,,,,460,13,13", ",,746,605,676,626,512,750,117,,,762,,,,35,13,474,,35,518,12,12,,35,", ",,,,744,548,,,,,,,,12,,,35,,198,,712,,,13,,,,,13,,,362,363,681,683,", "747,,686,,,10,752,,605,10,,14,14,267,10,,,,,13,,278,278,,271,,35,,198", "14,,,10,,112,,,,12,,,,,12,,771,771,,787,806,,,278,,13,35,35,,,,,,294", ",785,,,,798,,,,13,35,267,,771,,10,267,,,198,,13,13,603,,,13,14,,,278", "274,14,13,,576,577,,,,,619,819,35,10,10,,,35,,599,,,,272,,,,,,856,,10", ",305,,,,,611,,,,766,,35,614,,,13,,278,278,,,,,,278,,873,,,,,10,,784", ",,10,770,770,,865,771,771,198,,,35,,771,,665,,,,,,,,278,13,,,,10,35", ",13,386,770,,,,278,13,,,35,35,,,,35,771,278,,,,427,35,774,776,,,,,,771", ",10,296,,,,,,,,771,,271,,,,,,,10,,,,795,,,,305,,,,10,10,,,12,10,35,", "12,,,,10,12,,,,,,,,,,,,,,,,,,12,770,770,,,,,,770,615,,,,617,,,,,625", "35,,,,,,14,35,10,,14,,,,35,14,,,,,,,,770,,,,12,,,,,,14,853,854,,770", ",,,862,670,,,,305,,770,,,,10,,,,12,12,,10,,,,701,,783,10,,,,,,,,12,877", ",274,,14,,,,,,796,,,,887,,,719,720,,,,,567,,891,,,,,808,,12,14,14,726", ",12,,,,,,,,,,,,,,14,,,,,,,,,,,,,12,,,,,,,,,,,,,,,,,,,,14,,,,,14,,,,", ",,,,,12,764,,,,,,,,,,,,,,,,14,12,,,,,,,,,,,,12,12,,,,12,782,,,,,,12", "773,773,,,,,,,,14,,793,206,703,,,237,237,237,,,,,800,801,,,14,803,,", "773,287,288,289,714,,,,14,14,,,,14,12,,237,237,,,14,,,,,,,,,,,,,367", "371,,,,,,,274,,,,,,,,,837,,,,,,,,12,,,,,,,12,14,,,,,,12,,,,,,,,,,,,", ",429,,430,,,,773,773,870,,,,,773,,871,,,,,,,,,14,,,,,,,14,,,,,,779,14", ",781,,,,,,,773,,,,789,,,,,,,,,,773,,,,366,237,374,237,,,388,773,,,,", ",,,,,,,206,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412", "413,414,415,416,417,418,419,420,421,422,423,,,,,,,,237,831,237,,834", ",,,,,539,,,237,237,,,,,,,,237,,,,,,,,,,,,,,,,,,,,,,,863,,,,468,866,", ",868,,,,,480,,,,,,,,,563,,566,,,569,,,,,,,,,,879,,,,582,,,,,,,,,888", ",,890,,,,,,,,,,,893,,,607,,,,,613,,,566,,,613,,,,,237,,,,,,,,,367,,", ",,,,,,,,,,,,237,,388,555,374,,,,,,,,,,,,,,,,,,,,,,,678,,,,,,237,,237", ",,237,,,,,,,,,,,702,,,581,705,,,,,,,,,,237,,,,,,563,600,601,602,716", ",26,,,237,,26,,,237,,,237,,,237,,,26,26,,,,26,26,26,,,,237,237,26,,", ",,,,,237,,,,742,,,,,,,,,26,26,26,,,26,26,,,26,,,,,,,,,677,237,,,682", "684,,,,687,,,689,,,,,,,694,,,,237,765,,,237,26,,,,26,26,26,26,26,,,", ",,,237,,,,237,,566,,,,,,,,,,,566,,,,,,,,,,,,,,,731,,,,,,,,,,613,,,,", ",237,,,,,,,,,,,,,816,,,,,,,,,,,,,26,26,26,26,26,26,,,26,26,26,,,,833", ",836,,26,,,,,,,237,767,,,,841,,,,,,682,684,687,,,,,,,,,,,,237,,,,,,", ",,237,563,237,,566,,,,,26,26,,,,,,,,26,,26,,,,,26,,237,,,,,,878,,,881", ",,,,,,,,,237,,,566,,,,,,767,,,892,,,,,26,26,,,828,,,,,,237,,237,,,,", ",,26,,,,,,,237,,,,,,,26,,,,,,,,,,,,,237,,,,,,,,,,237,,,237,,,,,,,,,", ",,,,,,,,,,,,,,,,26,,,237,,,237,,,,,,,,,,,,,237,,,,,,,,,237,,,,,,,,,", ",,,,,,,,,,,,,,26,,,,,,,,,,,26,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,26,,,,26", ",,,,26,,26,,,,,,,,,26,,,,26,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,26,,", ",26,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,26,,,,,,,,26,26,,,,,,,,,,,,,", ",,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,,,,26,,,,,26,,,,,,,,,,,,,,,,,,", ",,,,,,,,26,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,26", ",,,,,,,,,26,,26,26,,,,26,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,26,,,,,,", "26,,,,,,,26"];

      racc_goto_table = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(2489, nil);

      idx = 0;

      ($a = ($d = clist).$each, $a._p = (TMP_5 = function(str){var self = TMP_5._s || this, $a, $b, TMP_6;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_6 = function(i){var self = TMP_6._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_6._s = self, TMP_6), $a).call($b)}, TMP_5._s = self, TMP_5), $a).call($d);

      clist = ["18,44,4,37,3,18,19,52,52,56,56,56,5,76,76,82,29,18,18,39,77,126,18,18", "18,60,60,60,45,45,18,18,18,83,40,48,48,52,52,52,42,56,13,13,53,79,13", "9,57,57,36,18,18,18,8,117,18,18,117,96,18,18,18,18,131,32,11,11,128", "74,49,49,82,21,21,31,31,31,26,26,26,72,78,78,33,65,45,13,13,13,13,58", "43,43,58,64,62,18,28,28,28,18,18,18,18,18,33,33,124,26,124,8,55,55,80", "131,55,81,55,41,61,54,54,54,41,50,15,114,114,84,85,86,114,30,30,87,88", "89,90,9,91,125,125,125,19,92,93,9,94,41,41,41,126,54,95,73,97,98,99", "5,100,128,102,104,105,106,107,108,109,112,41,14,113,34,115,116,14,24", "118,119,41,41,41,41,120,121,18,18,18,18,18,18,30,30,18,18,18,123,16", "12,10,14,127,124,18,6,1,,,,,,,,,45,41,,,,,,14,42,41,,,79,,,,,14,,33", ",,,37,,117,56,56,37,,52,,26,,,56,,,,18,18,,60,60,,53,53,,18,,18,60,", "14,18,18,40,,,,77,14,,,,,,,,,36,23,54,54,,36,,,,13,13,15,15,15,57,,57", "15,125,125,41,41,125,18,18,26,26,,,,,,,,26,,23,82,41,126,23,23,18,,23", "28,28,30,30,76,78,83,,82,28,131,18,29,,,5,19,,,,,131,51,54,54,32,21", "14,14,32,,8,54,,,,125,,58,58,23,23,23,23,,14,,,,45,,,,,41,,48,,41,41", ",,,18,53,,,,53,30,,,,,57,53,,53,30,19,,,,56,45,,,11,,,,49,,,,17,,31", ",,17,31,56,,76,,14,,,,30,14,,,,18,30,,60,26,19,,,,,17,18,,,19,,2,,,23", "23,3,,,18,,131,,,,,17,20,,,45,31,20,,31,,18,,,45,18,2,,,,18,13,18,,", ",,,82,82,76,18,20,20,20,18,,26,18,,,131,,,30,30,45,17,82,82,,,45,20", ",17,,,52,,,,79,20,20,20,18,18,,,39,18,4,,,,,,26,,,45,18,,18,,,26,48", ",,,56,,,54,,,,20,,,23,23,,18,,20,,,,,51,18,18,,,3,53,11,54,23,3,49,", ",44,,,,41,18,51,,41,23,17,17,,41,,,,,,13,57,,,,,,,,17,,,41,,18,,26,", ",18,,,,,18,,,2,2,15,15,,82,,15,,,14,82,,53,14,,20,20,2,14,,,,,18,,52", "52,,41,,41,,18,20,,,14,,45,,,,17,,,,,17,,18,18,,56,3,,,52,,18,41,41", ",,,,,23,,60,,,,13,,,,18,41,2,,18,,14,2,,,18,,18,18,23,,,18,20,,,52,20", "20,18,,51,51,,,,,82,39,41,14,14,,,41,,30,,,,18,,,,,,19,,14,,23,,,,,51", ",,,15,,41,51,,,18,,52,52,,,,,,52,,3,,,,,14,,54,,,14,41,41,,56,18,18", "18,,,41,,18,,51,,,,,,,,52,18,,,,14,41,,18,45,41,,,,52,18,,,41,41,,,", "41,18,52,,,,59,41,14,14,,,,,,18,,14,26,,,,,,,,18,,41,,,,,,,14,,,,14", ",,,23,,,,14,14,,,17,14,41,,17,,,,14,17,,,,,,,,,,,,,,,,,,17,41,41,,,", ",,41,2,,,,2,,,,,2,41,,,,,,20,41,14,,20,,,,41,20,,,,,,,,41,,,,17,,,,", ",20,14,14,,41,,,,14,20,,,,23,,41,,,,14,,,,17,17,,14,,,,2,,51,14,,,,", ",,,17,14,,20,,20,,,,,,51,,,,14,,,2,2,,,,,59,,14,,,,,51,,17,20,20,2,", "17,,,,,,,,,,,,,,20,,,,,,,,,,,,,17,,,,,,,,,,,,,,,,,,,,20,,,,,20,,,,,", ",,,,17,2,,,,,,,,,,,,,,,,20,17,,,,,,,,,,,,17,17,,,,17,2,,,,,,17,20,20", ",,,,,,,20,,2,25,59,,,25,25,25,,,,,2,2,,,20,2,,,20,25,25,25,59,,,,20", "20,,,,20,17,,25,25,,,20,,,,,,,,,,,,,22,22,,,,,,,20,,,,,,,,,2,,,,,,,", "17,,,,,,,17,20,,,,,,17,,,,,,,,,,,,,,22,,22,,,,20,20,2,,,,,20,,2,,,,", ",,,,20,,,,,,,20,,,,,,59,20,,59,,,,,,,20,,,,59,,,,,,,,,,20,,,,25,25,25", "25,,,25,20,,,,,,,,,,,,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25", "25,25,25,25,25,25,25,25,25,25,25,,,,,,,,25,59,25,,59,,,,,,22,,,25,25", ",,,,,,,25,,,,,,,,,,,,,,,,,,,,,,,59,,,,25,59,,,59,,,,,25,,,,,,,,,22,", "22,,,22,,,,,,,,,,59,,,,22,,,,,,,,,59,,,59,,,,,,,,,,,59,,,22,,,,,22,", ",22,,,22,,,,,25,,,,,,,,,22,,,,,,,,,,,,,,,25,,25,25,25,,,,,,,,,,,,,,", ",,,,,,,,22,,,,,,25,,25,,,25,,,,,,,,,,,22,,,25,22,,,,,,,,,,25,,,,,,22", "25,25,25,22,,35,,,25,,35,,,25,,,25,,,25,,,35,35,,,,35,35,35,,,,25,25", "35,,,,,,,,25,,,,22,,,,,,,,,35,35,35,,,35,35,,,35,,,,,,,,,25,25,,,25", "25,,,,25,,,25,,,,,,,25,,,,25,22,,,25,35,,,,35,35,35,35,35,,,,,,,25,", ",,25,,22,,,,,,,,,,,22,,,,,,,,,,,,,,,25,,,,,,,,,,22,,,,,,25,,,,,,,,,", ",,,22,,,,,,,,,,,,,35,35,35,35,35,35,,,35,35,35,,,,22,,22,,35,,,,,,,25", "25,,,,22,,,,,,25,25,25,,,,,,,,,,,,25,,,,,,,,,25,22,25,,22,,,,,35,35", ",,,,,,,35,,35,,,,,35,,25,,,,,,22,,,22,,,,,,,,,,25,,,22,,,,,,25,,,22", ",,,,35,35,,,25,,,,,,25,,25,,,,,,,35,,,,,,,25,,,,,,,35,,,,,,,,,,,,,25", ",,,,,,,,,25,,,25,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,25,,,25,,,,,,,,,,,,,25", ",,,,,,,,25,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,35,,,,,,,,,,,,,35,,,", ",,,,,,,,,,,,,35,,,,35,,,,,35,,35,,,,,,,,,35,,,,35,,,35,,,,,,,,,,,,,", ",,,,,,,,,,,,,,35,35,,,,35,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,", ",,,35,35,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,35,,,", ",35,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,", ",35,,,,,,,,,,,,,,,,,,35,,,,,,,,,,35,,35,35,,,,35,,,,,,,35,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,35", ",,,,,,,,,,,,,,,35,,,,,,,35,,,,,,,35"];

      racc_goto_check = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(2489, nil);

      idx = 0;

      ($a = ($e = clist).$each, $a._p = (TMP_7 = function(str){var self = TMP_7._s || this, $a, $b, TMP_8;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_8 = function(i){var self = TMP_8._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_8._s = self, TMP_8), $a).call($b)}, TMP_7._s = self, TMP_7), $a).call($e);

      racc_goto_pointer = [nil, 206, 461, -47, -290, -458, -399, nil, 51, 42, 197, 60, 192, -14, 171, 108, 137, 425, 0, -47, 477, -115, 1050, 269, 70, 1168, 56, nil, 76, -238, -59, 49, -188, -340, -263, 1636, 20, -27, nil, -12, 2, 119, -282, 30, -63, 22, nil, nil, 29, 64, -236, 311, -24, -210, 99, -185, -13, 22, -341, 626, 3, -325, -159, nil, -350, -502, nil, nil, nil, nil, nil, nil, 17, 101, 14, nil, -293, -595, -409, -266, 53, -209, 12, -481, 65, -209, -163, 77, -482, 78, -484, -361, -659, -362, -494, -175, -279, -359, -605, -399, -397, nil, -72, nil, -95, -95, -331, -637, -304, -440, nil, nil, 99, 100, 53, 98, -171, -288, 101, -343, -339, -460, nil, -556, -645, -506, -493, -551, -687, nil, nil, -364];

      racc_goto_default = [nil, nil, 292, nil, nil, 733, nil, 3, nil, 4, 312, nil, nil, nil, 202, 16, 11, 203, 286, nil, 201, nil, 244, 15, nil, 19, 20, 21, nil, 25, 596, nil, nil, nil, nil, 277, 29, nil, 31, 34, 33, 199, 323, nil, 114, 380, 113, 116, 68, 69, nil, nil, 42, 295, 297, nil, 298, 544, 545, 425, 562, nil, nil, 255, nil, nil, 43, 44, 45, 46, 47, 48, 49, nil, 256, 55, nil, nil, nil, nil, nil, nil, 487, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 235, nil, 384, nil, nil, nil, nil, nil, nil, 67, 70, 71, nil, nil, nil, nil, 525, nil, nil, nil, 646, 647, 648, 649, nil, 812, 656, 657, 660, 663, 248];

      racc_reduce_table = [0, 0, "racc_error", 1, 133, "_reduce_1", 4, 135, "_reduce_2", 2, 134, "_reduce_3", 0, 139, "_reduce_4", 1, 139, "_reduce_5", 2, 139, "_reduce_6", 3, 139, "_reduce_7", 0, 156, "_reduce_8", 4, 141, "_reduce_9", 3, 141, "_reduce_10", 3, 141, "_reduce_11", 3, 141, "_reduce_12", 2, 141, "_reduce_13", 3, 141, "_reduce_14", 3, 141, "_reduce_15", 3, 141, "_reduce_16", 3, 141, "_reduce_17", 3, 141, "_reduce_18", 4, 141, "_reduce_19", 4, 141, "_reduce_20", 3, 141, "_reduce_21", 3, 141, "_reduce_22", 3, 141, "_reduce_23", 6, 141, "_reduce_24", 5, 141, "_reduce_25", 5, 141, "_reduce_26", 5, 141, "_reduce_27", 3, 141, "_reduce_28", 3, 141, "_reduce_29", 3, 141, "_reduce_30", 3, 141, "_reduce_31", 1, 141, "_reduce_none", 1, 155, "_reduce_none", 3, 155, "_reduce_34", 3, 155, "_reduce_35", 2, 155, "_reduce_36", 2, 155, "_reduce_37", 1, 155, "_reduce_none", 1, 145, "_reduce_none", 1, 147, "_reduce_none", 1, 147, "_reduce_none", 2, 147, "_reduce_42", 2, 147, "_reduce_43", 2, 147, "_reduce_44", 1, 159, "_reduce_none", 4, 159, "_reduce_46", 4, 159, "_reduce_47", 0, 166, "_reduce_48", 5, 164, "_reduce_49", 2, 158, "_reduce_50", 3, 158, "_reduce_51", 4, 158, "_reduce_52", 5, 158, "_reduce_53", 4, 158, "_reduce_54", 5, 158, "_reduce_55", 2, 158, "_reduce_56", 2, 158, "_reduce_57", 1, 148, "_reduce_58", 3, 148, "_reduce_59", 1, 169, "_reduce_60", 3, 169, "_reduce_61", 1, 168, "_reduce_62", 2, 168, "_reduce_63", 3, 168, "_reduce_64", 2, 168, "_reduce_65", 2, 168, "_reduce_66", 1, 168, "_reduce_67", 1, 171, "_reduce_none", 3, 171, "_reduce_69", 2, 170, "_reduce_70", 3, 170, "_reduce_71", 1, 172, "_reduce_72", 4, 172, "_reduce_73", 3, 172, "_reduce_74", 3, 172, "_reduce_75", 3, 172, "_reduce_76", 3, 172, "_reduce_77", 2, 172, "_reduce_78", 1, 172, "_reduce_79", 1, 146, "_reduce_80", 4, 146, "_reduce_81", 3, 146, "_reduce_82", 3, 146, "_reduce_83", 3, 146, "_reduce_84", 3, 146, "_reduce_85", 2, 146, "_reduce_86", 1, 146, "_reduce_87", 1, 174, "_reduce_88", 1, 174, "_reduce_none", 2, 175, "_reduce_90", 1, 175, "_reduce_91", 3, 175, "_reduce_92", 1, 176, "_reduce_none", 1, 176, "_reduce_none", 1, 176, "_reduce_none", 1, 176, "_reduce_none", 1, 176, "_reduce_none", 1, 179, "_reduce_98", 1, 179, "_reduce_none", 1, 143, "_reduce_none", 1, 143, "_reduce_none", 1, 144, "_reduce_102", 0, 182, "_reduce_103", 4, 144, "_reduce_104", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 3, 157, "_reduce_171", 5, 157, "_reduce_172", 3, 157, "_reduce_173", 6, 157, "_reduce_174", 5, 157, "_reduce_175", 5, 157, "_reduce_176", 5, 157, "_reduce_177", 5, 157, "_reduce_178", 4, 157, "_reduce_179", 3, 157, "_reduce_180", 3, 157, "_reduce_181", 3, 157, "_reduce_182", 3, 157, "_reduce_183", 3, 157, "_reduce_184", 3, 157, "_reduce_185", 3, 157, "_reduce_186", 3, 157, "_reduce_187", 3, 157, "_reduce_188", 4, 157, "_reduce_189", 4, 157, "_reduce_190", 2, 157, "_reduce_191", 2, 157, "_reduce_192", 3, 157, "_reduce_193", 3, 157, "_reduce_194", 3, 157, "_reduce_195", 3, 157, "_reduce_196", 3, 157, "_reduce_197", 3, 157, "_reduce_198", 3, 157, "_reduce_199", 3, 157, "_reduce_200", 3, 157, "_reduce_201", 3, 157, "_reduce_202", 3, 157, "_reduce_203", 3, 157, "_reduce_204", 3, 157, "_reduce_205", 2, 157, "_reduce_206", 2, 157, "_reduce_207", 3, 157, "_reduce_208", 3, 157, "_reduce_209", 3, 157, "_reduce_210", 3, 157, "_reduce_211", 3, 157, "_reduce_212", 5, 157, "_reduce_213", 1, 157, "_reduce_none", 1, 154, "_reduce_none", 1, 151, "_reduce_none", 2, 151, "_reduce_217", 2, 151, "_reduce_218", 5, 151, "_reduce_219", 2, 151, "_reduce_220", 3, 151, "_reduce_221", 3, 189, "_reduce_222", 4, 189, "_reduce_223", 4, 189, "_reduce_224", 6, 189, "_reduce_225", 0, 190, "_reduce_226", 1, 190, "_reduce_none", 1, 160, "_reduce_228", 2, 160, "_reduce_229", 5, 160, "_reduce_230", 2, 160, "_reduce_231", 5, 160, "_reduce_232", 4, 160, "_reduce_233", 7, 160, "_reduce_234", 3, 160, "_reduce_235", 1, 160, "_reduce_236", 4, 193, "_reduce_237", 3, 193, "_reduce_238", 5, 193, "_reduce_239", 7, 193, "_reduce_240", 2, 193, "_reduce_241", 5, 193, "_reduce_242", 4, 193, "_reduce_243", 6, 193, "_reduce_244", 7, 193, "_reduce_245", 9, 193, "_reduce_246", 3, 193, "_reduce_247", 1, 193, "_reduce_248", 0, 195, "_reduce_249", 2, 163, "_reduce_250", 1, 194, "_reduce_251", 0, 196, "_reduce_252", 3, 194, "_reduce_253", 0, 197, "_reduce_254", 4, 194, "_reduce_255", 2, 192, "_reduce_256", 2, 191, "_reduce_257", 0, 191, "_reduce_258", 1, 186, "_reduce_259", 3, 186, "_reduce_260", 3, 153, "_reduce_261", 4, 153, "_reduce_262", 2, 153, "_reduce_263", 1, 184, "_reduce_none", 1, 184, "_reduce_none", 1, 184, "_reduce_none", 1, 184, "_reduce_none", 1, 184, "_reduce_none", 1, 184, "_reduce_none", 1, 184, "_reduce_none", 1, 184, "_reduce_none", 1, 184, "_reduce_272", 3, 184, "_reduce_273", 0, 218, "_reduce_274", 5, 184, "_reduce_275", 3, 184, "_reduce_276", 3, 184, "_reduce_277", 2, 184, "_reduce_278", 4, 184, "_reduce_279", 3, 184, "_reduce_280", 3, 184, "_reduce_281", 1, 184, "_reduce_282", 4, 184, "_reduce_283", 3, 184, "_reduce_284", 1, 184, "_reduce_285", 5, 184, "_reduce_286", 2, 184, "_reduce_287", 1, 184, "_reduce_none", 2, 184, "_reduce_289", 6, 184, "_reduce_290", 6, 184, "_reduce_291", 0, 219, "_reduce_292", 0, 220, "_reduce_293", 7, 184, "_reduce_294", 0, 221, "_reduce_295", 0, 222, "_reduce_296", 7, 184, "_reduce_297", 5, 184, "_reduce_298", 4, 184, "_reduce_299", 5, 184, "_reduce_300", 0, 223, "_reduce_301", 0, 224, "_reduce_302", 9, 184, "_reduce_303", 0, 225, "_reduce_304", 6, 184, "_reduce_305", 0, 226, "_reduce_306", 7, 184, "_reduce_307", 0, 227, "_reduce_308", 5, 184, "_reduce_309", 0, 228, "_reduce_310", 6, 184, "_reduce_311", 0, 229, "_reduce_312", 0, 230, "_reduce_313", 9, 184, "_reduce_314", 1, 184, "_reduce_315", 1, 184, "_reduce_316", 1, 184, "_reduce_317", 1, 184, "_reduce_318", 1, 150, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 2, 208, "_reduce_323", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 209, "_reduce_none", 5, 209, "_reduce_328", 1, 137, "_reduce_none", 2, 137, "_reduce_330", 1, 212, "_reduce_none", 1, 212, "_reduce_none", 1, 231, "_reduce_333", 3, 231, "_reduce_334", 1, 232, "_reduce_none", 2, 232, "_reduce_none", 4, 232, "_reduce_337", 7, 232, "_reduce_338", 6, 232, "_reduce_339", 4, 232, "_reduce_340", 3, 232, "_reduce_341", 5, 232, "_reduce_342", 4, 232, "_reduce_343", 2, 232, "_reduce_344", 1, 232, "_reduce_345", 2, 232, "_reduce_346", 0, 165, "_reduce_347", 2, 165, "_reduce_348", 1, 165, "_reduce_349", 3, 165, "_reduce_350", 0, 234, "_reduce_351", 5, 233, "_reduce_352", 2, 161, "_reduce_353", 4, 161, "_reduce_354", 4, 161, "_reduce_355", 2, 207, "_reduce_356", 4, 207, "_reduce_357", 4, 207, "_reduce_358", 3, 207, "_reduce_359", 2, 207, "_reduce_360", 1, 207, "_reduce_361", 0, 236, "_reduce_362", 5, 206, "_reduce_363", 0, 237, "_reduce_364", 5, 206, "_reduce_365", 5, 211, "_reduce_366", 1, 238, "_reduce_none", 4, 238, "_reduce_368", 2, 238, "_reduce_369", 1, 239, "_reduce_370", 1, 239, "_reduce_none", 6, 136, "_reduce_372", 0, 136, "_reduce_373", 1, 240, "_reduce_374", 1, 240, "_reduce_none", 1, 240, "_reduce_none", 2, 241, "_reduce_377", 1, 241, "_reduce_none", 2, 138, "_reduce_379", 1, 138, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 199, "_reduce_384", 1, 243, "_reduce_385", 2, 243, "_reduce_386", 3, 244, "_reduce_387", 1, 244, "_reduce_388", 3, 200, "_reduce_389", 4, 201, "_reduce_390", 3, 202, "_reduce_391", 0, 247, "_reduce_392", 3, 247, "_reduce_393", 1, 248, "_reduce_394", 2, 248, "_reduce_395", 3, 203, "_reduce_396", 0, 250, "_reduce_397", 3, 250, "_reduce_398", 0, 245, "_reduce_399", 2, 245, "_reduce_400", 0, 246, "_reduce_401", 2, 246, "_reduce_402", 1, 249, "_reduce_403", 2, 249, "_reduce_404", 0, 252, "_reduce_405", 4, 249, "_reduce_406", 1, 251, "_reduce_407", 1, 251, "_reduce_408", 1, 251, "_reduce_409", 1, 251, "_reduce_none", 1, 180, "_reduce_411", 3, 181, "_reduce_412", 1, 242, "_reduce_413", 1, 242, "_reduce_414", 2, 242, "_reduce_415", 2, 242, "_reduce_416", 1, 173, "_reduce_417", 1, 173, "_reduce_418", 1, 173, "_reduce_419", 1, 173, "_reduce_420", 1, 173, "_reduce_421", 1, 173, "_reduce_422", 1, 173, "_reduce_423", 1, 173, "_reduce_424", 1, 173, "_reduce_425", 1, 173, "_reduce_426", 1, 173, "_reduce_427", 1, 204, "_reduce_428", 1, 149, "_reduce_429", 1, 152, "_reduce_430", 1, 152, "_reduce_431", 1, 213, "_reduce_432", 3, 213, "_reduce_433", 2, 213, "_reduce_434", 4, 215, "_reduce_435", 2, 215, "_reduce_436", 6, 253, "_reduce_437", 4, 253, "_reduce_438", 4, 253, "_reduce_439", 2, 253, "_reduce_440", 4, 253, "_reduce_441", 2, 253, "_reduce_442", 2, 253, "_reduce_443", 1, 253, "_reduce_444", 0, 253, "_reduce_445", 1, 259, "_reduce_446", 1, 259, "_reduce_447", 1, 259, "_reduce_448", 1, 259, "_reduce_449", 1, 259, "_reduce_450", 1, 254, "_reduce_451", 3, 254, "_reduce_452", 3, 260, "_reduce_453", 1, 255, "_reduce_454", 3, 255, "_reduce_455", 1, 261, "_reduce_none", 1, 261, "_reduce_none", 2, 256, "_reduce_458", 1, 256, "_reduce_459", 1, 262, "_reduce_none", 1, 262, "_reduce_none", 2, 258, "_reduce_462", 2, 257, "_reduce_463", 0, 257, "_reduce_464", 1, 216, "_reduce_none", 4, 216, "_reduce_466", 0, 205, "_reduce_467", 2, 205, "_reduce_468", 2, 205, "_reduce_469", 1, 188, "_reduce_470", 3, 188, "_reduce_471", 3, 263, "_reduce_472", 1, 167, "_reduce_none", 1, 167, "_reduce_none", 1, 167, "_reduce_none", 1, 162, "_reduce_none", 1, 162, "_reduce_none", 1, 162, "_reduce_none", 1, 162, "_reduce_none", 1, 235, "_reduce_none", 1, 235, "_reduce_none", 1, 235, "_reduce_none", 1, 217, "_reduce_none", 1, 217, "_reduce_none", 0, 140, "_reduce_none", 1, 140, "_reduce_none", 0, 183, "_reduce_none", 1, 183, "_reduce_none", 0, 187, "_reduce_none", 1, 187, "_reduce_none", 1, 187, "_reduce_none", 1, 214, "_reduce_492", 1, 214, "_reduce_none", 1, 142, "_reduce_none", 2, 142, "_reduce_none", 0, 185, "_reduce_496"];

      racc_reduce_n = 497;

      racc_shift_n = 894;

      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kRETURN", 28, "kYIELD", 29, "kSUPER", 30, "kSELF", 31, "kNIL", 32, "kTRUE", 33, "kFALSE", 34, "kAND", 35, "kOR", 36, "kNOT", 37, "kIF_MOD", 38, "kUNLESS_MOD", 39, "kWHILE_MOD", 40, "kUNTIL_MOD", 41, "kRESCUE_MOD", 42, "kALIAS", 43, "kDEFINED", 44, "klBEGIN", 45, "klEND", 46, "k__LINE__", 47, "k__FILE__", 48, "tIDENTIFIER", 49, "tFID", 50, "tGVAR", 51, "tIVAR", 52, "tCONSTANT", 53, "tCVAR", 54, "tNTH_REF", 55, "tBACK_REF", 56, "tSTRING_CONTENT", 57, "tINTEGER", 58, "tFLOAT", 59, "tREGEXP_END", 60, "tUPLUS", 61, "tUMINUS", 62, "tUMINUS_NUM", 63, "tPOW", 64, "tCMP", 65, "tEQ", 66, "tEQQ", 67, "tNEQ", 68, "tGEQ", 69, "tLEQ", 70, "tANDOP", 71, "tOROP", 72, "tMATCH", 73, "tNMATCH", 74, "tDOT", 75, "tDOT2", 76, "tDOT3", 77, "tAREF", 78, "tASET", 79, "tLSHFT", 80, "tRSHFT", 81, "tCOLON2", 82, "tCOLON3", 83, "tOP_ASGN", 84, "tASSOC", 85, "tLPAREN", 86, "tLPAREN2", 87, "tRPAREN", 88, "tLPAREN_ARG", 89, "tLBRACK", 90, "tLBRACK2", 91, "tRBRACK", 92, "tLBRACE", 93, "tLBRACE_ARG", 94, "tSTAR", 95, "tSTAR2", 96, "tAMPER", 97, "tAMPER2", 98, "tTILDE", 99, "tPERCENT", 100, "tDIVIDE", 101, "tPLUS", 102, "tMINUS", 103, "tLT", 104, "tGT", 105, "tPIPE", 106, "tBANG", 107, "tCARET", 108, "tLCURLY", 109, "tRCURLY", 110, "tBACK_REF2", 111, "tSYMBEG", 112, "tSTRING_BEG", 113, "tXSTRING_BEG", 114, "tREGEXP_BEG", 115, "tWORDS_BEG", 116, "tQWORDS_BEG", 117, "tSTRING_DBEG", 118, "tSTRING_DVAR", 119, "tSTRING_END", 120, "tSTRING", 121, "tSYMBOL", 122, "tREGEXP_OPT", 123, "tNL", 124, "tEH", 125, "tCOLON", 126, "tCOMMA", 127, "tSPACE", 128, "tSEMI", 129, "tEQL", 130, "tLOWEST", 131);

      racc_nt_base = 132;

      racc_use_result_var = true;

      $opal.cdecl($scope, 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);

      $opal.cdecl($scope, 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tREGEXP_END", "tUPLUS", "tUMINUS", "tUMINUS_NUM", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tLBRACK", "tLBRACK2", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tWORDS_BEG", "tQWORDS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING", "tSYMBOL", "tREGEXP_OPT", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tEQL", "tLOWEST", "$start", "program", "compstmt", "bodystmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "opt_terms", "stmt", "terms", "fitem", "undef_list", "expr_value", "lhs", "command_call", "mlhs", "var_lhs", "primary_value", "aref_args", "backref", "mrhs", "arg_value", "expr", "@1", "arg", "command", "block_command", "call_args", "block_call", "operation2", "command_args", "cmd_brace_block", "opt_block_var", "@2", "operation", "mlhs_basic", "mlhs_entry", "mlhs_head", "mlhs_item", "mlhs_node", "variable", "cname", "cpath", "fname", "op", "reswords", "fsym", "symbol", "dsym", "@3", "opt_nl", "primary", "none", "args", "trailer", "assocs", "paren_args", "opt_paren_args", "opt_block_arg", "block_arg", "call_args2", "open_args", "@4", "@5", "@6", "literal", "strings", "xstring", "regexp", "words", "qwords", "var_ref", "assoc_list", "brace_block", "method_call", "then", "if_tail", "do", "case_body", "for_var", "superclass", "term", "f_arglist", "singleton", "dot_or_colon", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "@16", "@17", "@18", "@19", "block_par", "block_var", "do_block", "@20", "operation3", "@21", "@22", "when_args", "cases", "exc_list", "exc_var", "numeric", "string", "string1", "string_contents", "xstring_contents", "word_list", "word", "string_content", "qword_list", "string_dvar", "@23", "f_args", "f_arg", "f_optarg", "f_rest_arg", "opt_f_block_arg", "f_block_arg", "f_norm_arg", "f_opt", "restarg_mark", "blkarg_mark", "assoc"]);

      $opal.cdecl($scope, 'Racc_debug_parser', false);

      def.$_reduce_1 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_2 = function(val, _values, result) {
        var $a, $b, self = this, rescue_bodies = nil, else_t = nil, else_ = nil, ensure_t = nil, ensure_ = nil;

        rescue_bodies = val['$[]'](1);
        $a = $opal.to_ary(val['$[]'](2)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        $a = $opal.to_ary(val['$[]'](3)), ensure_t = ($a[0] == null ? nil : $a[0]), ensure_ = ($a[1] == null ? nil : $a[1]);
        if ((($a = ($b = rescue_bodies['$empty?'](), $b !== false && $b !== nil ?else_['$nil?']()['$!']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("warning", "useless_else", nil, else_t)};
        result = self.builder.$begin_body(val['$[]'](0), rescue_bodies, else_t, else_, ensure_t, ensure_);
        return result;
      };

      def.$_reduce_3 = function(val, _values, result) {
        var self = this;

        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      };

      def.$_reduce_4 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_5 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_6 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_7 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_8 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_9 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      };

      def.$_reduce_10 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$gvar(val['$[]'](2)));
        return result;
      };

      def.$_reduce_11 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$back_ref(val['$[]'](2)));
        return result;
      };

      def.$_reduce_12 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "nth_ref_alias", nil, val['$[]'](2));
        return result;
      };

      def.$_reduce_13 = function(val, _values, result) {
        var self = this;

        result = self.builder.$undef_method(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_14 = function(val, _values, result) {
        var self = this;

        result = self.builder.$condition_mod(val['$[]'](0), nil, val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_15 = function(val, _values, result) {
        var self = this;

        result = self.builder.$condition_mod(nil, val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_16 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop_mod("while", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_17 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop_mod("until", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_18 = function(val, _values, result) {
        var self = this, rescue_body = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      };

      def.$_reduce_19 = function(val, _values, result) {
        var $a, self = this;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "begin_in_method", nil, val['$[]'](0))};
        result = self.builder.$preexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_20 = function(val, _values, result) {
        var self = this;

        result = self.builder.$postexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_21 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_22 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_23 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_24 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_25 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_26 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_27 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_28 = function(val, _values, result) {
        var self = this;

        self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_29 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_30 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_31 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_34 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_35 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_36 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_37 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_42 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("return", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_43 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("break", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_44 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("next", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_46 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_47 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_48 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_49 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_50 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_51 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        $a = $opal.to_ary(val['$[]'](2)), begin_t = ($a[0] == null ? nil : $a[0]), block_args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, block_args, body, end_t);
        return result;
      };

      def.$_reduce_52 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_53 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), block_args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, block_args, body, end_t);
        return result;
      };

      def.$_reduce_54 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_55 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), block_args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, block_args, body, end_t);
        return result;
      };

      def.$_reduce_56 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_57 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_58 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_59 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_60 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_61 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_62 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_63 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_64 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_65 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](1)));
        return result;
      };

      def.$_reduce_66 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_67 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0))];
        return result;
      };

      def.$_reduce_69 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_70 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_71 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_72 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_73 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_74 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_75 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_76 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_77 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_78 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      };

      def.$_reduce_79 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_80 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_81 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_82 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_83 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_84 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_85 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_86 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      };

      def.$_reduce_87 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_88 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "module_name_const", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_90 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_91 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const(val['$[]'](0));
        return result;
      };

      def.$_reduce_92 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_98 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol(val['$[]'](0));
        return result;
      };

      def.$_reduce_102 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_103 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_104 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](3));
        return result;
      };

      def.$_reduce_171 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_172 = function(val, _values, result) {
        var self = this, rescue_body = nil, rescue_ = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        rescue_ = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), rescue_);
        return result;
      };

      def.$_reduce_173 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_174 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_175 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_176 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_177 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_178 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "dynamic_const", nil, val['$[]'](2), [val['$[]'](3)]);
        return result;
      };

      def.$_reduce_179 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "dynamic_const", nil, val['$[]'](1), [val['$[]'](2)]);
        return result;
      };

      def.$_reduce_180 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_181 = function(val, _values, result) {
        var self = this;

        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_182 = function(val, _values, result) {
        var self = this;

        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_183 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_184 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_185 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_186 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_187 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_188 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_189 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(self.builder.$integer(val['$[]'](1)), val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_190 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(self.builder.$float(val['$[]'](1)), val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_191 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_192 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_193 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_194 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_195 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_196 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_197 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_198 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_199 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_200 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_201 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_202 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_203 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_204 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_205 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_206 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_207 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_208 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_209 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_210 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_211 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_212 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), nil, [val['$[]'](2)], nil);
        return result;
      };

      def.$_reduce_213 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ternary(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_217 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_218 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_219 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_220 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      };

      def.$_reduce_221 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_222 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), [], val['$[]'](2)];
        return result;
      };

      def.$_reduce_223 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1), val['$[]'](3)];
        return result;
      };

      def.$_reduce_224 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), [val['$[]'](1)], val['$[]'](3)];
        return result;
      };

      def.$_reduce_225 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)['$<<'](val['$[]'](3)), val['$[]'](5)];
        return result;
      };

      def.$_reduce_226 = function(val, _values, result) {
        var self = this;

        result = [nil, [], nil];
        return result;
      };

      def.$_reduce_228 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_229 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_230 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat([self.builder.$splat(val['$[]'](2), val['$[]'](3))].concat(val['$[]'](4)));
        return result;
      };

      def.$_reduce_231 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)].concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_232 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil), self.builder.$splat(val['$[]'](2), val['$[]'](3))].concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_233 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat([self.builder.$associate(nil, val['$[]'](2), nil)].concat(val['$[]'](3)));
        return result;
      };

      def.$_reduce_234 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat([self.builder.$associate(nil, val['$[]'](2), nil), self.builder.$splat(val['$[]'](4), val['$[]'](5))].concat(val['$[]'](6)));
        return result;
      };

      def.$_reduce_235 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat(val['$[]'](2));
        return result;
      };

      def.$_reduce_236 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_237 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)].concat(val['$[]'](2).$concat(val['$[]'](3)));
        return result;
      };

      def.$_reduce_238 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      };

      def.$_reduce_239 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), self.builder.$splat(val['$[]'](2), val['$[]'](3))].concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_240 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)].concat(val['$[]'](2).$push(self.builder.$splat(val['$[]'](4), val['$[]'](5))).$concat(val['$[]'](6)));
        return result;
      };

      def.$_reduce_241 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)].concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_242 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil), self.builder.$splat(val['$[]'](2), val['$[]'](3))].concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_243 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), self.builder.$associate(nil, val['$[]'](2), nil)].concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_244 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)].concat(val['$[]'](2).$push(self.builder.$associate(nil, val['$[]'](4), nil)).$concat(val['$[]'](5)));
        return result;
      };

      def.$_reduce_245 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), self.builder.$associate(nil, val['$[]'](2), nil), self.builder.$splat(val['$[]'](4), val['$[]'](5))].concat(val['$[]'](6));
        return result;
      };

      def.$_reduce_246 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)].concat(val['$[]'](2).$push(self.builder.$associate(nil, val['$[]'](4), nil)).$push(self.builder.$splat(val['$[]'](6), val['$[]'](7))).$concat(val['$[]'](8)));
        return result;
      };

      def.$_reduce_247 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat(val['$[]'](2));
        return result;
      };

      def.$_reduce_248 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_249 = function(val, _values, result) {
        var self = this;

        result = self.lexer.$cmdarg().$dup();
        self.lexer.$cmdarg().$push(true);
        return result;
      };

      def.$_reduce_250 = function(val, _values, result) {
        var self = this;

        self.lexer['$cmdarg='](val['$[]'](0));
        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_251 = function(val, _values, result) {
        var self = this;

        result = [nil, val['$[]'](0), nil];
        return result;
      };

      def.$_reduce_252 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_endarg");
        return result;
      };

      def.$_reduce_253 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), [], val['$[]'](2)];
        return result;
      };

      def.$_reduce_254 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_endarg");
        return result;
      };

      def.$_reduce_255 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1), val['$[]'](3)];
        return result;
      };

      def.$_reduce_256 = function(val, _values, result) {
        var self = this;

        result = self.builder.$block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_257 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_258 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_259 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_260 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_261 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_262 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_263 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_272 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(nil, nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_273 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin_keyword(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_274 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_endarg");
        return result;
      };

      def.$_reduce_275 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](4));
        return result;
      };

      def.$_reduce_276 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_277 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_278 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_279 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_280 = function(val, _values, result) {
        var self = this;

        result = self.builder.$array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_281 = function(val, _values, result) {
        var self = this;

        result = self.builder.$associate(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_282 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("return", val['$[]'](0));
        return result;
      };

      def.$_reduce_283 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_284 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), [], val['$[]'](2));
        return result;
      };

      def.$_reduce_285 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0));
        return result;
      };

      def.$_reduce_286 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), val['$[]'](2), [val['$[]'](3)], val['$[]'](4));
        return result;
      };

      def.$_reduce_287 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(nil, nil, val['$[]'](0));
        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_289 = function(val, _values, result) {
        var $a, self = this, begin_t = nil, args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(val['$[]'](0), begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_290 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, val['$[]'](5));
        return result;
      };

      def.$_reduce_291 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), else_, else_t, val['$[]'](3), val['$[]'](5));
        return result;
      };

      def.$_reduce_292 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_293 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_294 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop("while", val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](5), val['$[]'](6));
        return result;
      };

      def.$_reduce_295 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_296 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_297 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop("until", val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](5), val['$[]'](6));
        return result;
      };

      def.$_reduce_298 = function(val, _values, result) {
        var $a, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        when_bodies = val['$[]'](3)['$[]']($range(0, -2, false));
        $a = $opal.to_ary(val['$[]'](3)['$[]'](-1)), else_t = ($a[0] == null ? nil : $a[0]), else_body = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$case(val['$[]'](0), val['$[]'](1), when_bodies, else_t, else_body, val['$[]'](4));
        return result;
      };

      def.$_reduce_299 = function(val, _values, result) {
        var $a, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        when_bodies = val['$[]'](2)['$[]']($range(0, -2, false));
        $a = $opal.to_ary(val['$[]'](2)['$[]'](-1)), else_t = ($a[0] == null ? nil : $a[0]), else_body = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$case(val['$[]'](0), nil, when_bodies, else_t, else_body, val['$[]'](3));
        return result;
      };

      def.$_reduce_300 = function(val, _values, result) {
        var self = this;

        result = self.builder.$case(val['$[]'](0), nil, [], val['$[]'](2), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_301 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_302 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_303 = function(val, _values, result) {
        var self = this;

        result = self.builder.$for(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5), val['$[]'](7), val['$[]'](8));
        return result;
      };

      def.$_reduce_304 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_305 = function(val, _values, result) {
        var $a, self = this, lt_t = nil, superclass = nil;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "class_in_def", nil, val['$[]'](0))};
        $a = $opal.to_ary(val['$[]'](2)), lt_t = ($a[0] == null ? nil : $a[0]), superclass = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$def_class(val['$[]'](0), val['$[]'](1), lt_t, superclass, val['$[]'](4), val['$[]'](5));
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_306 = function(val, _values, result) {
        var self = this;

        result = self.def_level;
        self.def_level = 0;
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_307 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_sclass(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](5), val['$[]'](6));
        self.static_env.$unextend();
        self.def_level = val['$[]'](4);
        return result;
      };

      def.$_reduce_308 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_309 = function(val, _values, result) {
        var $a, self = this;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "module_in_def", nil, val['$[]'](0))};
        result = self.builder.$def_module(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_310 = function(val, _values, result) {
        var self = this;

        self.def_level = self.def_level['$+'](1);
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_311 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_method(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4), val['$[]'](5));
        self.static_env.$unextend();
        self.def_level = self.def_level['$-'](1);
        return result;
      };

      def.$_reduce_312 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_313 = function(val, _values, result) {
        var self = this;

        self.def_level = self.def_level['$+'](1);
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_314 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_singleton(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](6), val['$[]'](7), val['$[]'](8));
        self.static_env.$unextend();
        self.def_level = self.def_level['$-'](1);
        return result;
      };

      def.$_reduce_315 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("break", val['$[]'](0));
        return result;
      };

      def.$_reduce_316 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("next", val['$[]'](0));
        return result;
      };

      def.$_reduce_317 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("redo", val['$[]'](0));
        return result;
      };

      def.$_reduce_318 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("retry", val['$[]'](0));
        return result;
      };

      def.$_reduce_323 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_328 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = [val['$[]'](0), self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, nil)];
        return result;
      };

      def.$_reduce_330 = function(val, _values, result) {
        var self = this;

        result = val;
        return result;
      };

      def.$_reduce_333 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$arg_expr(val['$[]'](0))];
        return result;
      };

      def.$_reduce_334 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$arg_expr(val['$[]'](2)));
        return result;
      };

      def.$_reduce_337 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$blockarg_expr(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_338 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg_expr(val['$[]'](2), val['$[]'](3))).$push(self.builder.$blockarg_expr(val['$[]'](5), val['$[]'](6)));
        return result;
      };

      def.$_reduce_339 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg_expr(val['$[]'](2))).$push(self.builder.$blockarg_expr(val['$[]'](4), val['$[]'](5)));
        return result;
      };

      def.$_reduce_340 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg_expr(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_341 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg_expr(val['$[]'](2)));
        return result;
      };

      def.$_reduce_342 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg_expr(val['$[]'](0), val['$[]'](1)), self.builder.$blockarg_expr(val['$[]'](3), val['$[]'](4))];
        return result;
      };

      def.$_reduce_343 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg_expr(val['$[]'](0)), self.builder.$blockarg_expr(val['$[]'](2), val['$[]'](3))];
        return result;
      };

      def.$_reduce_344 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg_expr(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_345 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg_expr(val['$[]'](0))];
        return result;
      };

      def.$_reduce_346 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$blockarg_expr(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_347 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, [], nil);
        return result;
      };

      def.$_reduce_348 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), [], val['$[]'](1));
        return result;
      };

      def.$_reduce_349 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), [], val['$[]'](0));
        return result;
      };

      def.$_reduce_350 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2), false);
        return result;
      };

      def.$_reduce_351 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_352 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_353 = function(val, _values, result) {
        var $a, self = this, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), block_args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(val['$[]'](0), begin_t, block_args, body, end_t);
        return result;
      };

      def.$_reduce_354 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_355 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_356 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_357 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_358 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_359 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_360 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_361 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("zsuper", val['$[]'](0));
        return result;
      };

      def.$_reduce_362 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_363 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_364 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_365 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_366 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$when(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3))].concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_368 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_369 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_370 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_372 = function(val, _values, result) {
        var $a, self = this, assoc_t = nil, exc_var = nil, exc_list = nil;

        $a = $opal.to_ary(val['$[]'](2)), assoc_t = ($a[0] == null ? nil : $a[0]), exc_var = ($a[1] == null ? nil : $a[1]);
        if ((($a = val['$[]'](1)) !== nil && (!$a._isBoolean || $a == true))) {
          exc_list = self.builder.$array(nil, val['$[]'](1), nil)};
        result = [self.builder.$rescue_body(val['$[]'](0), exc_list, assoc_t, exc_var, val['$[]'](3), val['$[]'](4))].concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_373 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_374 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_377 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_379 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_384 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_compose(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_385 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_386 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_387 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_388 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string(val['$[]'](0));
        return result;
      };

      def.$_reduce_389 = function(val, _values, result) {
        var self = this;

        result = self.builder.$xstring_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_390 = function(val, _values, result) {
        var self = this, opts = nil;

        opts = self.builder.$regexp_options(val['$[]'](3));
        result = self.builder.$regexp_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2), opts);
        return result;
      };

      def.$_reduce_391 = function(val, _values, result) {
        var self = this;

        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_392 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_393 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      };

      def.$_reduce_394 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_395 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_396 = function(val, _values, result) {
        var self = this;

        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_397 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_398 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$string_internal(val['$[]'](1)));
        return result;
      };

      def.$_reduce_399 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_400 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_401 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_402 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_403 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_internal(val['$[]'](0));
        return result;
      };

      def.$_reduce_404 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_405 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(false);
        self.lexer.$cmdarg().$push(false);
        return result;
      };

      def.$_reduce_406 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$lexpop();
        self.lexer.$cmdarg().$lexpop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_407 = function(val, _values, result) {
        var self = this;

        result = self.builder.$gvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_408 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ivar(val['$[]'](0));
        return result;
      };

      def.$_reduce_409 = function(val, _values, result) {
        var self = this;

        result = self.builder.$cvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_411 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol(val['$[]'](0));
        return result;
      };

      def.$_reduce_412 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_413 = function(val, _values, result) {
        var self = this;

        result = self.builder.$integer(val['$[]'](0));
        return result;
      };

      def.$_reduce_414 = function(val, _values, result) {
        var self = this;

        result = self.builder.$float(val['$[]'](0));
        return result;
      };

      def.$_reduce_415 = function(val, _values, result) {
        var self = this;

        result = self.builder.$negate(val['$[]'](0), self.builder.$integer(val['$[]'](1)));
        return result;
      };

      def.$_reduce_416 = function(val, _values, result) {
        var self = this;

        result = self.builder.$negate(val['$[]'](0), self.builder.$float(val['$[]'](1)));
        return result;
      };

      def.$_reduce_417 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ident(val['$[]'](0));
        return result;
      };

      def.$_reduce_418 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ivar(val['$[]'](0));
        return result;
      };

      def.$_reduce_419 = function(val, _values, result) {
        var self = this;

        result = self.builder.$gvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_420 = function(val, _values, result) {
        var self = this;

        result = self.builder.$cvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_421 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const(val['$[]'](0));
        return result;
      };

      def.$_reduce_422 = function(val, _values, result) {
        var self = this;

        result = self.builder.$nil(val['$[]'](0));
        return result;
      };

      def.$_reduce_423 = function(val, _values, result) {
        var self = this;

        result = self.builder.$self(val['$[]'](0));
        return result;
      };

      def.$_reduce_424 = function(val, _values, result) {
        var self = this;

        result = self.builder.$true(val['$[]'](0));
        return result;
      };

      def.$_reduce_425 = function(val, _values, result) {
        var self = this;

        result = self.builder.$false(val['$[]'](0));
        return result;
      };

      def.$_reduce_426 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__FILE__(val['$[]'](0));
        return result;
      };

      def.$_reduce_427 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__LINE__(val['$[]'](0));
        return result;
      };

      def.$_reduce_428 = function(val, _values, result) {
        var self = this;

        result = self.builder.$accessible(val['$[]'](0));
        return result;
      };

      def.$_reduce_429 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_430 = function(val, _values, result) {
        var self = this;

        result = self.builder.$nth_ref(val['$[]'](0));
        return result;
      };

      def.$_reduce_431 = function(val, _values, result) {
        var self = this;

        result = self.builder.$back_ref(val['$[]'](0));
        return result;
      };

      def.$_reduce_432 = function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      };

      def.$_reduce_433 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_434 = function(val, _values, result) {
        var self = this;

        self.$yyerrok();
        result = nil;
        return result;
      };

      def.$_reduce_435 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        self.lexer['$state=']("expr_beg");
        return result;
      };

      def.$_reduce_436 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_437 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_438 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_439 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_440 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_441 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_442 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_443 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_444 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_445 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_446 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_const", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_447 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_ivar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_448 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_gvar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_449 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_cvar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_450 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$arg(val['$[]'](0));
        return result;
      };

      def.$_reduce_451 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_452 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_453 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_454 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_455 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_458 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_459 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_462 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = self.builder.$blockarg(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_463 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_464 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_466 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_467 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_468 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_469 = function(val, _values, result) {
        var self = this;

        result = self.builder.$pair_list_18(val['$[]'](0));
        return result;
      };

      def.$_reduce_470 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_471 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_472 = function(val, _values, result) {
        var self = this;

        result = self.builder.$pair(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_492 = function(val, _values, result) {
        var self = this;

        self.$yyerrok();
        return result;
      };

      def.$_reduce_496 = function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      };

      return (def.$_reduce_none = function(val, _values, result) {
        var self = this;

        return val['$[]'](0);
      }, nil) && '_reduce_none';
    })(self, (($a = ((($b = $scope.Parser) == null ? $opal.cm('Parser') : $b))._scope).Base == null ? $a.cm('Base') : $a.Base))
    
  })(self);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash = $opal.hash;

  $opal.add_stubs(['$check_for_encoding_support', '$new', '$each', '$empty?', '$[]=', '$to_i', '$+', '$split', '$compstmt', '$[]', '$<<', '$preexe', '$!', '$nil?', '$diagnostic', '$begin_body', '$state=', '$alias', '$gvar', '$back_ref', '$undef_method', '$condition_mod', '$loop_mod', '$rescue_body', '$postexe', '$multi_assign', '$op_assign', '$index', '$call_method', '$assign', '$array', '$logical_op', '$not_op', '$extend_dynamic', '$unextend', '$block', '$keyword_cmd', '$multi_lhs', '$begin', '$push', '$splat', '$concat', '$assignable', '$index_asgn', '$attr_asgn', '$const_fetch', '$const_global', '$const', '$symbol', '$range_inclusive', '$range_exclusive', '$binary_op', '$unary_op', '$integer', '$float', '$match_op', '$ternary', '$associate', '$dup', '$cmdarg', '$cmdarg=', '$block_pass', '$begin_keyword', '$call_lambda', '$begin_t', '$args', '$body', '$end_t', '$condition', '$cond', '$pop', '$loop', '$new_while', '$lexer', '$for', '$extend_static', '$in_def?', '$def_class', '$def_sclass', '$def_module', '$def_method', '$-', '$def_singleton', '$declare', '$arg', '$restarg', '$shadowarg', '$when', '$string_compose', '$string', '$character', '$xstring_compose', '$regexp_options', '$regexp_compose', '$words_compose', '$word', '$string_internal', '$lexpop', '$ivar', '$cvar', '$symbol_compose', '$negate', '$ident', '$nil', '$self', '$true', '$false', '$__FILE__', '$__LINE__', '$__ENCODING__', '$accessible', '$nth_ref', '$yyerrok', '$optarg', '$blockarg', '$pair', '$pair_keyword']);
  ;
  ;
  (($a = $scope.Parser) == null ? $opal.cm('Parser') : $a).$check_for_encoding_support();
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a, $b;

    (function($base, $super) {
      function $Ruby19(){};
      var self = $Ruby19 = $klass($base, $super, 'Ruby19', $Ruby19);

      var def = self._proto, $scope = self._scope, $a, $b, TMP_1, $c, TMP_3, $d, TMP_5, $e, TMP_7, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      def.builder = def.lexer = def.static_env = def.def_level = nil;
      def.$version = function() {
        var self = this;

        return 19;
      };

      def.$default_encoding = function() {
        var $a, $b, self = this;

        return (($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).BINARY == null ? $a.cm('BINARY') : $a.BINARY);
      };

      clist = ["-527,278,66,67,68,9,54,-527,-527,-527,60,61,-527,-527,-527,64,-527,62", "63,65,29,30,69,70,911,-527,-527,-527,-527,28,27,26,93,92,94,95,-527", "-527,19,-527,-527,-527,-527,-527,8,44,-98,10,97,96,98,87,53,89,88,90", "563,91,99,100,542,85,86,-100,41,42,40,-527,-527,-527,-527,-527,-527", "-527,-527,-527,-527,-527,-527,-527,-527,746,-92,-527,-527,-527,39,743", "-527,32,-97,-527,55,56,-527,-527,57,-527,34,-527,753,-527,43,-527,-527", "-527,-527,-527,-527,-527,20,-527,-527,-527,-99,84,76,79,80,208,81,82", "584,-103,788,77,83,-527,-527,-527,-527,-449,-527,59,-527,78,-100,542", "-449,-449,-449,-523,491,-449,-449,-449,258,-449,-96,-92,-101,511,209", "-101,510,-449,209,-449,-449,-449,-104,-98,562,619,542,542,-98,-449,-449", "262,-449,-449,-449,-449,-449,105,-99,542,-100,105,104,-100,105,-100", "104,-92,583,104,-92,-102,205,206,205,206,-92,656,-88,618,-449,-449,-449", "-449,-449,-449,-449,-449,-449,-449,-449,-449,-449,-449,665,688,-449", "-449,-449,-98,-449,-449,-90,688,-449,817,-449,-449,-449,798,-449,-94", "-449,-449,-449,257,-449,-449,-449,-449,-449,-449,-449,554,-449,-452", "-449,555,573,-523,-90,209,-452,-463,105,209,-87,-524,-92,104,-449,-449", "-449,-449,-280,-449,498,-449,-95,-449,-101,-280,-280,-280,-98,-101,-280", "-280,-280,688,-280,105,105,105,799,209,104,104,104,-91,-280,-280,-280", "-99,105,205,206,-93,-99,104,-280,-280,-96,-280,-280,-280,-280,-280,205", "206,575,574,619,514,258,-103,105,-90,258,720,664,104,515,511,105,-89", "513,741,-393,104,619,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280", "-280,-280,-280,-280,105,618,-280,-280,-280,104,744,-280,-90,573,-280", "-90,428,-280,-280,-527,-280,-90,-280,618,-280,484,-280,-280,-280,-280", "-280,-280,-280,483,-280,-99,-280,209,253,105,-393,573,253,498,104,209", "-67,-393,-527,-521,-280,-280,-280,-280,-452,-280,-393,-280,209,-102", "257,-452,-452,-452,257,-104,-452,-452,-452,209,-452,742,-527,619,-393", "575,574,585,-452,-527,-452,-452,-452,-82,-523,209,-94,-520,-527,-68", "-452,-452,-103,-452,-452,-452,-452,-452,656,773,548,-527,-452,575,574", "578,-527,618,-527,-452,381,771,-458,-523,-521,383,382,-527,-452,-458", "-101,-452,-452,-452,-452,-452,-452,-452,-452,-452,-452,-452,-452,-452", "-452,-527,-521,-452,-452,-452,-449,-452,-452,-464,727,-452,573,-449", "-452,-452,807,-452,-520,-452,-260,-452,-449,-452,-452,-452,-452,-452", "-452,-452,-527,-452,76,-452,-464,-460,475,-527,-527,-527,-520,77,-460", "-527,-527,253,-527,-452,-452,-452,-452,78,-452,-89,-452,-527,-452,-457", "-97,-98,105,-454,794,656,-457,104,-527,-527,-454,-527,-527,-527,-527", "-527,575,574,580,-88,754,-274,526,525,524,-97,527,679,-274,526,525,524", "679,527,526,525,524,-274,527,-527,-527,-527,-527,-527,-527,-527,-527", "-527,-527,-527,-527,-527,-527,573,598,-527,-527,-527,531,603,205,206", "475,-527,573,-455,-527,535,534,538,537,-527,-455,-527,473,-527,-527", "-527,-527,-527,-527,-527,-280,-527,-527,-527,203,-456,597,-280,-280", "-280,493,494,-456,-280,-280,-92,-280,-527,-527,753,-91,-101,-527,568", "790,229,-100,105,-262,896,569,250,104,575,574,571,-280,-280,251,-280", "-280,-280,-280,-280,575,574,576,-95,679,-90,526,525,524,-104,527,-99", "229,226,-459,794,656,228,227,224,225,-459,471,-280,-280,-280,-280,-280", "-280,-280,-280,-280,-280,-280,-280,-280,-280,462,-463,-280,-280,-280", "531,602,226,767,105,-280,228,227,-280,104,816,538,537,-280,462,-280", "229,-280,-280,-280,-280,-280,-280,-280,424,-280,679,-280,526,525,524", "425,527,105,511,205,206,513,104,-87,426,-280,-280,548,-93,-96,-280,304", "305,373,-102,278,66,67,68,9,54,205,206,511,60,61,513,728,531,64,462", "62,63,65,29,30,69,70,208,538,537,430,429,28,27,26,93,92,94,95,552,829", "19,526,525,524,553,527,8,44,229,10,97,96,98,87,53,89,88,90,819,91,99", "100,821,85,86,229,41,42,40,824,679,825,526,525,524,679,527,526,525,524", "226,527,753,558,228,227,224,225,39,229,557,32,831,832,55,56,427,226", "57,559,34,228,227,679,43,526,525,524,675,527,714,715,20,531,716,99,100", "84,76,79,80,834,81,82,538,537,835,77,83,278,66,67,68,9,54,59,649,78", "60,61,-261,531,506,64,722,62,63,65,29,30,69,70,538,537,384,844,845,28", "27,26,93,92,94,95,209,829,19,526,525,524,847,527,8,44,850,10,97,96,98", "87,53,89,88,90,852,91,99,100,854,85,86,854,41,42,40,209,679,719,526", "525,524,679,527,526,525,524,859,527,495,679,861,526,525,524,39,527,649", "32,863,371,55,56,253,586,57,209,34,473,303,679,43,526,525,524,675,527", "869,589,20,531,871,209,874,84,76,79,80,675,81,82,538,537,-263,77,83", "278,66,67,68,9,54,59,691,78,60,61,548,531,302,64,-260,62,63,65,29,30", "69,70,538,537,591,209,684,28,27,26,93,92,94,95,881,882,19,108,109,110", "111,112,8,44,595,10,97,96,98,87,53,89,88,90,885,91,99,100,248,85,86", "682,41,42,40,681,679,673,526,525,524,679,527,526,525,524,890,527,672", "679,669,526,525,524,39,527,667,32,596,209,55,56,253,656,57,898,34,606", "900,679,43,526,525,524,675,527,901,475,20,531,906,609,908,84,76,79,80", "675,81,82,538,537,507,77,83,278,66,67,68,9,54,59,913,78,60,61,854,531", "854,64,253,62,63,65,29,30,69,70,538,537,649,918,506,28,27,26,93,92,94", "95,499,204,19,108,109,110,111,112,8,44,504,10,97,96,98,87,53,89,88,90", "888,91,99,100,229,85,86,889,41,42,40,229,926,854,854,558,887,679,489", "526,525,524,917,527,854,490,930,243,244,229,39,559,898,32,488,209,55", "56,229,199,57,198,34,226,638,232,43,228,227,224,225,-82,209,197,20,531", "209,113,500,84,76,79,80,209,81,82,538,537,649,77,83,278,66,67,68,9,54", "59,229,78,60,61,209,898,229,64,945,62,63,65,29,30,69,70,108,109,110", "111,112,28,27,26,93,92,94,95,946,679,19,526,525,524,948,527,8,44,854", "10,97,96,98,87,53,89,88,90,-462,91,99,100,854,85,86,-462,41,42,40,679", "854,526,525,524,-462,527,550,675,-524,-523,-462,101,854,551,898,209", "678,-462,39,854,-281,32,549,,55,56,-462,-281,57,,34,,,,43,,-281,675", "501,,,,20,,,502,678,84,76,79,80,,81,82,426,,,77,83,278,66,67,68,9,54", "59,,78,60,61,,,,64,,62,63,65,29,30,69,70,108,109,110,111,112,28,27,26", "93,92,94,95,,679,19,526,525,524,,527,8,44,,10,97,96,98,87,53,89,88,90", "-274,91,99,100,201,85,86,-274,41,42,40,202,,,,-280,-274,,-281,675,200", ",-280,,,-281,,-524,858,,39,-280,-461,32,-281,,55,56,,-461,57,,34,,,", "43,,-461,,-323,-280,,,20,,,-323,-280,84,76,79,80,-524,81,82,-323,-280", ",77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,", ",,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,", "91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235,237,-461,-280", "-546,-546,-281,,,-461,-280,243,244,-281,39,-524,,280,-461,-280,55,56", "-281,,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76", "79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65", "29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87", "53,89,88,90,,91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235", "237,,,-546,-546,,,,,,243,244,,39,,,280,,,55,56,,,57,,34,226,,232,43", "228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278", "66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26", "93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85", "86,,41,42,40,229,233,238,239,240,235,237,245,246,241,242,,-546,-546", ",,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236", "234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,", "78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19", ",,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229", "233,238,239,240,235,237,245,,241,242,,,,,,243,244,,39,,,32,,,55,56,", ",57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80", ",81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30", "69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89", "88,90,,91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235,237,,", "-546,-546,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227", "224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67", "68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92", "94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,", "41,42,40,229,233,238,239,240,235,237,,,241,242,,,,,,243,244,,39,,,32", ",,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84", "76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63", "65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98", "87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235", "237,,,-546,-546,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228", "227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66", "67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93", "92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86", ",41,42,40,229,233,238,239,240,235,237,245,246,241,242,,-546,-546,,,243", "244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230", "20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61", ",,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44", ",10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,-546,-546", "-546,-546,235,237,,,-546,-546,,,,,,243,244,,39,,,32,,,55,56,,,57,,34", "226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82", ",,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70", ",,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90", ",91,99,100,,85,86,,41,42,40,229,-546,-546,-546,-546,235,237,,,-546,-546", ",,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236", "234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,", "78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19", ",,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229", ",,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227", "224,225,,,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54", "59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,", ",19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40", "229,,,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228", "227,224,225,,,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68", "9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94", "95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41", "42,40,229,,,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232", "43,228,227,224,225,,,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66", "67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93", "92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86", ",41,42,40,229,,,,,,,,,,,,,,,,243,244,,39,,,280,,,55,56,,,57,,34,226", ",232,43,228,227,224,225,,,230,20,231,,,,84,76,79,80,,81,82,,,,77,83", "278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27", "26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,229,,,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34", "226,,,43,228,227,224,225,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,5,66", "67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93", "92,94,95,,,19,,,,,,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85", "86,,41,42,40,229,,,,,,,,,,,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226", ",232,43,228,227,224,225,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,278,66", "67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93", "92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86", ",41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20", ",,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64", ",62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97", "96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,", "39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77", "83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28", "27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99", "100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,", "43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,5,66,67,68,9,54,59,,78", "60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,", ",607,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229", "233,238,239,240,235,237,245,246,241,242,,222,223,,,243,244,,39,,,32", ",,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84", "76,79,80,,81,82,,,,77,83,,247,-529,-237,,,59,,78,-529,-529,-529,,,-529", "-529,-529,529,-529,526,525,524,,527,,,,-529,-529,-529,-529,,,,,,,,-529", "-529,,-529,-529,-529,-529,-529,,,,,,,,,,531,,,,,,,,,535,534,538,537", ",-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529", ",,-529,-529,-529,,,-529,,,-529,,,-529,-529,,-529,,-529,,-529,,-529,-529", "-529,-529,-529,-529,-529,,-529,-529,-529,,,,,,,,,,,,,,-529,-529,-529", "-529,,-529,,-529,278,66,67,68,9,54,,,,60,61,,,,64,,62,63,65,29,30,69", "70,,,,,,28,27,26,93,92,94,95,,,19,,,,,592,8,44,,10,97,96,98,87,53,89", "88,90,,91,99,100,,85,86,,41,42,40,229,233,238,239,240,235,237,245,246", "241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228", "227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,,247,-528", ",,,59,,78,-528,-528,-528,,,-528,-528,-528,529,-528,526,525,524,,527", ",,,-528,-528,-528,-528,,,,,,,,-528,-528,,-528,-528,-528,-528,-528,,", ",,,,,,,531,,,,,,,,,535,534,538,537,,-528,-528,-528,-528,-528,-528,-528", "-528,-528,-528,-528,-528,-528,-528,,,-528,-528,-528,,,-528,,,-528,,", "-528,-528,,-528,,-528,,-528,,-528,-528,-528,-528,-528,-528,-528,,-528", "-528,-528,,,,,,,,,,,,,,-528,-528,-528,-528,,-528,,-528,278,66,67,68", "9,54,,,,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95", ",,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84", "76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63", "65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,607,8,44,,10,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,233,238,239,240,235", "237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226", ",232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,", "77,83,,247,-275,,,,59,,78,-275,-275,-275,,,-275,-275,-275,529,-275,526", "525,524,,527,,,,,-275,-275,-275,,,,,,,,-275,-275,,-275,-275,-275,-275", "-275,,,,,,,,,,531,709,,,,,,,,535,534,538,537,,-275,-275,-275,-275,-275", "-275,-275,-275,-275,-275,-275,-275,-275,-275,,,-275,-275,-275,,,-275", ",,-275,,,-275,-275,,-275,,-275,,-275,,-275,-275,-275,-275,-275,-275", "-275,,-275,,-275,,,,,,,,,,,,,,-275,-275,-275,-275,,-275,,-275,66,67", "68,,54,,,,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92", "94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41", "42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,", ",,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62", "63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97", "96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,", "214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,", "77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28", "27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,", ",,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,,,43,,,,,,,,219,,,,,84,76", "79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295", "296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87", "53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,", "220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44", ",,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,", ",,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82", ",,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,", ",28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99", "100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,", "43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60", "61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,", "44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,233,238", "239,240,235,237,245,246,241,242,,222,223,,,243,244,,214,,,220,,,55,56", ",,57,,,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80", ",81,82,,,,77,83,105,247,,,,104,59,,78,66,67,68,,54,,,,60,61,,,,64,,62", "63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97", "96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,335", ",,32,,,55,56,,,57,,34,,,,,,529,,526,525,524,,527,,,,,84,76,79,80,,81", "82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,295,296,69", "70,,535,534,538,537,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96", "98,340,53,89,88,341,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,347,,,342", ",,220,,,55,56,,,57,,,,,,,,529,,526,525,524,,527,,,,,84,76,79,80,,81", "82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,295,296,69", "70,,535,534,538,537,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96", "98,340,53,89,88,341,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,342", ",,220,,,55,56,,,57,,,,,,,,754,,526,525,524,,527,,,,,84,76,79,80,,81", "82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,295,296,69", "70,,535,534,538,537,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98", "87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,", "220,,,55,56,,,57,,389,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77", "83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291", "292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99", "100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,", "43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60", "61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,", "44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,", ",,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81", "82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70", ",,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90", "273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68", ",54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92", "94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41", "42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,", ",,,84,76,79,80,,81,82,,,,77,83,,66,67,68,9,54,59,,78,60,61,,,,64,,62", "63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,7,10,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,233,238,239,240,235", "237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226", ",232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,", "77,83,,247,,,,373,59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,29,30", "69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,", ",19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,", ",,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76", "79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29", "30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89", "88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55", "56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68", ",54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94", "95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84", "76,79,80,,81,82,,,,77,83,,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65", "29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87", "53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,", ",55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66", "67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298", "93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85", "86,,,,299,229,233,238,239,240,235,237,245,246,241,242,,222,223,,,243", "244,,289,,,220,,,55,56,,,57,,,226,,232,,228,227,224,225,236,234,230", ",231,,,,84,76,79,80,,81,82,,,,77,83,,247,,301,,,59,,78,66,67,68,,54", ",,,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19", ",,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,", ",,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79", "80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296", "69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53", "89,88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,841,,,220,,,55", "56,,,57,,,,,,,,529,,526,525,524,,527,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,295,296,69,70,,535,534", "538,537,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89", "88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,289,,,285,,,55,56", ",,57,,284,,,,,,754,,526,525,524,,527,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,531,62,63,65,29,30,69,70,,535,534,538", "537,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91", "99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,389", ",,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78", "60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,", ",,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,", ",,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69", "70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90", "273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67", "68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92", "94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86", ",41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,", ",,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44", ",,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,", ",,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79", "80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30", "69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,", ",221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40", ",,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,389,,,,43,,,,,,,,219,,,,", "84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87", "53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220", ",,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67", "68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92", "94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41", "42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,", ",,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87", "53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220", ",,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67", "68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92", "94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41", "42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,", ",,84,76,79,80,,81,82,,,,77,83,209,66,67,68,,54,59,,78,60,61,,,,64,,62", "63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97", "96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,", ",,,214,,,220,,,55,56,,,57,,633,,,,43,,,,,,,,219,,,,,84,76,79,80,,81", "82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,", ",,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273", "91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57", ",271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,", "54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92", "94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86", ",41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219", ",,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62", "63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98", "87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214", ",,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,", ",,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,", ",,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,", "91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57", ",,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59", ",78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95", ",,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40", ",,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84", "76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65", "295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98", "87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,", "220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,", ",,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94", "95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,", "84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214", ",,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,", ",,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94", "95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,", "84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214", ",,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,", ",,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94", "95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,", "84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214", ",,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,", ",,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94", "95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,", "84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214", ",,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,", ",,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94", "95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,", "84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214", ",,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,", ",,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94", "95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,", "84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214", ",,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,,,299,,,,,,,,,,,,,,,,,,,,884,,,220,,,55,56,,,57,,,,,,,,754,", "526,525,524,,527,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78", "60,61,,,,64,531,62,63,65,295,296,69,70,,535,534,538,537,291,292,298", "93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85", "86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,", ",,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,", "64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,", "97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,", ",,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69", "70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90", "273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67", "68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92", "94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86", ",41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,", ",,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,209,66,67,68,,54,59,,78,60", "61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,", ",44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,", ",,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,", "81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94", "95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,", "84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214", ",,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,633,,,,43", ",,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,", ",,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,", ",221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40", ",,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84", "76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65", "295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98", "87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,", "220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26", "93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85", "86,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,", ",,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64", ",62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44", ",,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,", ",,,,,214,,,220,,,55,56,,,57,,271,,,,43,,,,,,,,219,,,,,84,76,79,80,,81", "82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,", ",,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273", "91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57", ",271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,", "54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95", ",,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40", ",,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76", "79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29", "30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89", "88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,", "55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26", "93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86", ",41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20", ",,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62", "63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97", "96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,229,233,238,239,240,235", "237,245,246,241,242,,222,223,,,243,244,,289,,,220,,,55,56,,,57,,,226", ",232,,228,227,224,225,236,234,230,,231,,,,84,76,79,80,,81,82,,,,77,83", ",247,,486,,,59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,295,296,69", "70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,", ",221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42", "40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219", ",,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62", "63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98", "87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,", "220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,", "66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292", "298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100", ",85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,", ",,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44", ",,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,", ",,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82", ",,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,", ",,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90", ",91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57", ",,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59", ",78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95", ",,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,", ",,,,,,,,,,,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79", "80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30", "69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88", "90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55", "56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66", "67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298", "93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85", "86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,725,,,,43,,", ",,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61", ",,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,", ",,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,", ",,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81,82", ",,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,", ",,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90", ",91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57", ",,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59", ",78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95", ",,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,,299,", ",,,,,,,,,,,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79", "80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296", "69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53", "89,88,90,,91,99,100,,85,86,,,,299,,,,,,,,,,,,,,,,,,,,289,,,285,,,55", "56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54", "59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94", "95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41", "42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,633,,269,,43,,,,,,", ",219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64", ",62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44", ",,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,", ",,,,,,,,214,,,220,,,55,56,,,57,,,,269,,43,,,,,,,,219,,,,,84,76,79,80", ",81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69", "70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90", ",91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57", ",,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59", ",78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19", ",,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,", ",,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79", "80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296", "69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89", "88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55", "56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68", ",54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92", "94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41", "42,40,,,,,,,,,,,,,,,,,,,,214,,,220,504,,55,56,,,57,,,,,,43,,,,,,,,219", ",,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,9,54,59,,78,60,61,,,,64,,62", "63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96", "98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,229,233,238,239,240,235", "237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226", ",232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,", "77,83,,247,,,,373,59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,295,296", "69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89", "88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55", "56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68", "9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94", "95,,,19,,,,,,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41", "42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,", ",,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63", "65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87", "53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220", ",,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66", "67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93", "92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,", "41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20", ",,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62", "63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97", "96,98,87,53,89,88,90,273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,", ",,,214,,,220,,,55,56,,,57,,,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81", "82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70", ",,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90", "273,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56", ",,57,,633,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67", "68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93", "92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86", ",41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219", ",,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62", "63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98", "87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,", "220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83", ",66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26", "93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85", "86,,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,", ",,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,", "64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,", "97,96,98,87,53,89,88,90,,91,99,100,,85,86,,41,42,40,,,,,,,,,,,,,,,,", ",,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82", ",,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,", ",,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89,88,90", ",91,99,100,,85,86,,-243,,299,,,,,-243,-243,-243,,,-243,-243,-243,,-243", ",,,,,289,,,285,-243,,55,56,,,57,,,,-243,-243,,-243,-243,-243,-243,-243", ",,,,,,,84,76,79,80,,81,82,,,,77,83,,,,,-243,,59,,78,,,-243,-243,-243", ",-243,-243,-243,-243,,-243,,-243,,,,,253,-243,-243,-243,-243,,,,,,,", ",-243,-243,,-243,-243,-243,-243,-243,,,-243,,,,,,,,,,,,,,-243,,,,,-243", ",-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243", ",,-243,-243,-243,,,-243,,253,-243,,,-243,-243,,-243,,-243,,-243,,-243", "-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,,,,-243,-243,-243", ",,-243,-243,-243,,-243,-243,-243,,-243,529,-243,526,525,524,-243,527", ",,,,,,,,-243,-243,,-243,-243,-243,-243,-243,,,,,529,,526,525,524,,527", ",,,,531,518,,,,,,,-287,535,534,538,537,,,-287,-287,-287,,-243,-287,-287", "-287,,-287,,-243,531,709,,,253,-243,,-287,-287,535,534,538,537,,,,,-287", "-287,,-287,-287,-287,-287,-287,,,-243,,,,,,,,,,,,,,-243,,,,,-243,,-287", "-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,,,-287", "-287,-287,,,-287,,262,-287,,,-287,-287,,-287,,-287,,-287,,-287,-287", "-287,-287,-287,-287,-287,-392,-287,,-287,,,,-392,-392,-392,,,-392,-392", "-392,,-392,-287,-287,,-287,,-287,,,-392,-392,-392,,,,,,,,,-392,-392", ",-392,-392,-392,-392,-392,,,,,,,,,,,,,,,,,,,,,,,,-392,-392,-392,-392", "-392,-392,-392,-392,-392,-392,-392,-392,-392,-392,,,-392,-392,-392,", ",-392,,253,-392,,,-392,-392,,-392,,-392,,-392,,-392,-392,-392,-392,-392", "-392,-392,,-392,-392,-392,,,,,,,,,,,,,,-392,-392,,-392,,-392,164,175", "165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173,162", "176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,", "159,166,157,158,154,155,156,116,118,,,117,,,,,,,,,149,150,,146,128,129", "130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127", "148,145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164,175", "165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173,162", "176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,", "159,166,157,158,154,155,156,116,118,115,,117,,,,,,,,,149,150,,146,128", "129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142", ",127,148,145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164", "175,165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173", "162,176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,", ",,,,159,166,157,158,154,155,156,116,118,,,117,,,,,,,,,149,150,,146,128", "129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142", ",127,148,145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164", "175,165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173", "162,176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,", ",,,,159,166,157,158,154,155,156,116,118,,,117,,,,,,,,,149,150,,146,128", "129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142", ",127,148,145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164", "175,165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173", "162,176,180,182,174,167,,,,183,190,185,358,357,359,356,160,179,178,", ",,,,159,166,157,158,353,354,355,351,118,89,88,352,,91,,,,,,,149,150", ",146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,363,", ",,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,,,153,164", "175,165,188,161,181,171,170,191,192,186,169,168,163,189,193,194,173", "162,176,180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,", ",,,,159,166,157,158,154,155,156,116,118,,,117,,,,,,,,,149,150,,146,128", "129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142", ",127,148,145,144,140,141,135,133,125,147,126,610,401,153,,611,,,,,,", ",,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139", ",,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126", "612,408,153,,613,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131", "132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140", "141,135,133,125,147,126,610,401,153,,611,,,,,,,,,149,150,,146,128,129", "130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142", ",127,148,145,144,140,141,135,133,125,147,126,612,408,153,,613,,,,,,", ",,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139", ",,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126", "921,401,153,,922,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131", "132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140", "141,135,133,125,147,126,923,408,153,,924,,,,,,,,,149,150,,146,128,129", "130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142", ",127,148,145,144,140,141,135,133,125,147,126,940,408,153,,939,,,,,,", ",,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139", ",,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126", "645,408,153,,646,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131", "132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140", "141,135,133,125,147,126,642,401,153,,643,,,,,,,,,149,150,,146,128,129", "130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142", ",127,148,145,144,140,141,135,133,125,147,126,694,401,153,,695,,,,,,", ",,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139", ",,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126", "696,408,153,,697,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131", "132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140", "141,135,133,125,147,126,699,408,153,,700,,,,,,,,,149,150,,146,128,129", "130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142", ",127,148,145,144,140,141,135,133,125,147,126,459,401,153,,460,,,,,,", ",,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139", ",,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126", "459,401,153,,460,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131", "132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148,145,144,140,141", "135,133,125,147,126,459,401,153,,460,,,,,,,,,149,150,,146,128,129,130", "137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148", "145,144,140,141,135,133,125,147,126,404,408,153,,403,,,,,,,,,149,150", ",146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,", ",,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,397,401,153", ",398,,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152", "138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125", "147,126,,,153,229,233,238,239,240,235,237,245,246,241,242,,222,223,", ",243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229", "233,238,239,240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,", ",,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239", "240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226", ",232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240,235,237", "245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227", "224,225,236,234,230,,231,,229,233,238,239,240,235,237,245,246,241,242", ",222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234", "230,,231,,229,233,238,239,240,235,237,245,246,241,242,,222,223,,247", "243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229", "233,238,239,240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,", ",,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239", "240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226", ",232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240,235,237", "245,246,241,242,,222,223,209,247,243,244,,,,,,,,,,,,,,,226,,232,,228", "227,224,225,236,234,230,,231,,,,,,,,,,,,,,,,,247"];

      racc_action_table = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(23473, nil);

      idx = 0;

      ($a = ($b = clist).$each, $a._p = (TMP_1 = function(str){var self = TMP_1._s || this, $a, $b, TMP_2;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_2 = function(i){var self = TMP_2._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_2._s = self, TMP_2), $a).call($b)}, TMP_1._s = self, TMP_1), $a).call($b);

      clist = ["612,543,543,543,543,543,543,612,612,612,543,543,612,612,612,543,612", "543,543,543,543,543,543,543,876,612,612,612,612,543,543,543,543,543", "543,543,612,612,543,612,612,612,612,612,543,543,941,543,543,543,543", "543,543,543,543,543,346,543,543,543,325,543,543,923,543,543,543,612", "612,612,612,612,612,612,612,612,612,612,612,612,612,616,643,612,612", "612,543,612,612,543,333,612,543,543,612,612,543,612,543,612,666,612", "543,612,612,612,612,612,612,612,543,612,612,612,694,543,543,543,543", "19,543,543,369,552,677,543,543,612,612,612,612,87,612,543,612,543,612", "770,87,87,87,923,289,87,87,87,58,87,332,643,695,315,680,922,315,87,19", "87,87,87,336,941,346,467,692,862,941,87,87,292,87,87,87,87,87,325,921", "326,923,710,325,696,346,923,710,643,369,346,643,697,564,564,421,421", "643,685,333,467,87,87,87,87,87,87,87,87,87,87,87,87,87,87,517,802,87", "87,87,801,87,87,694,545,87,745,351,87,87,690,87,552,87,351,87,58,87", "87,87,87,87,87,87,342,87,352,87,342,581,696,642,614,352,212,770,693", "332,697,695,770,87,87,87,87,613,87,427,87,336,87,922,613,613,613,745", "922,613,613,613,544,613,692,862,564,692,421,692,862,564,696,613,613", "613,921,326,653,653,697,921,326,613,613,212,613,613,613,613,613,570", "570,581,581,625,317,25,427,802,642,294,581,517,802,318,662,545,801,662", "610,763,545,466,613,613,613,613,613,613,613,613,613,613,613,613,613", "613,329,625,613,613,613,329,613,613,642,370,613,642,215,613,613,645", "613,642,613,466,613,283,613,613,613,613,613,613,613,282,613,610,613", "281,25,544,763,367,294,303,544,653,279,763,699,341,613,613,613,613,90", "613,763,613,570,613,25,90,90,90,294,215,90,90,90,293,90,611,645,457", "763,370,370,370,90,645,90,90,90,637,645,702,303,340,645,637,90,90,303", "90,90,90,90,90,867,661,867,699,341,367,367,367,645,457,699,341,115,658", "354,699,341,115,115,699,341,354,611,90,90,90,90,90,90,90,90,90,90,90", "90,90,90,699,341,90,90,90,340,90,90,213,593,90,368,340,90,90,707,90", "340,90,657,90,340,90,90,90,90,90,90,90,404,90,74,90,38,355,320,404,404", "404,340,74,355,404,404,298,404,90,90,90,90,74,90,593,90,404,90,356,213", "593,3,357,932,932,356,3,404,404,357,404,404,404,404,404,368,368,368", "38,618,842,618,618,618,38,618,678,842,678,678,678,858,678,858,858,858", "842,858,404,404,404,404,404,404,404,404,404,404,404,404,404,404,365", "398,404,404,404,618,404,324,324,270,404,366,358,404,618,618,618,618", "404,358,404,267,404,404,404,404,404,404,404,403,404,404,404,15,359,397", "403,403,403,299,299,359,403,403,398,403,404,404,618,404,398,404,361", "678,452,404,276,724,858,361,24,276,365,365,365,403,403,24,403,403,403", "403,403,366,366,366,15,672,397,672,672,672,15,672,397,433,452,353,683", "683,452,452,452,452,353,266,403,403,403,403,403,403,403,403,403,403", "403,403,403,403,604,37,403,403,403,672,403,433,654,704,403,433,433,403", "704,729,672,672,403,599,403,652,403,403,403,403,403,403,403,211,403", "854,403,854,854,854,211,854,563,316,17,17,316,563,37,211,403,403,330", "403,37,403,40,40,331,403,664,664,664,664,664,664,313,313,319,664,664", "319,594,854,664,252,664,664,664,664,664,664,664,221,854,854,217,216", "664,664,664,664,664,664,664,335,753,664,753,753,753,337,753,664,664", "453,664,664,664,664,664,664,664,664,664,747,664,664,664,748,664,664", "434,664,664,664,749,898,751,898,898,898,852,898,852,852,852,453,852", "752,344,453,453,453,453,664,651,344,664,754,756,664,664,214,434,664", "344,664,434,434,850,664,850,850,850,898,850,574,574,664,852,574,574", "574,664,664,664,664,758,664,664,852,852,759,664,664,665,665,665,665", "665,665,664,762,664,665,665,590,850,311,665,584,665,665,665,665,665", "665,665,850,850,195,775,776,665,665,665,665,665,665,665,777,882,665", "882,882,882,778,882,665,665,779,665,665,665,665,665,665,665,665,665", "782,665,665,665,783,665,665,785,665,665,665,787,859,578,859,859,859", "926,859,926,926,926,789,926,300,896,792,896,896,896,665,896,648,665", "795,101,665,665,647,379,665,44,665,630,39,913,665,913,913,913,859,913", "804,385,665,926,808,809,812,665,665,665,665,896,665,665,926,926,813", "665,665,907,907,907,907,907,907,665,547,665,907,907,546,913,36,907,387", "907,907,907,907,907,907,907,913,913,390,393,541,907,907,907,907,907", "907,907,826,827,907,636,636,636,636,636,907,907,395,907,907,907,907", "907,907,907,907,907,833,907,907,907,22,907,907,539,907,907,907,536,790", "529,790,790,790,911,790,911,911,911,841,911,522,930,521,930,930,930", "907,930,520,907,396,508,907,907,405,505,907,860,907,413,864,824,907", "824,824,824,790,824,865,632,907,911,870,423,875,907,907,907,907,930", "907,907,911,911,312,907,907,905,905,905,905,905,905,907,877,907,905", "905,878,824,880,905,644,905,905,905,905,905,905,905,824,824,496,884", "886,905,905,905,905,905,905,905,304,16,905,277,277,277,277,277,905,905", "492,905,905,905,905,905,905,905,905,905,840,905,905,905,435,905,905", "840,905,905,905,439,891,892,893,883,840,948,288,948,948,948,883,948", "894,288,895,439,439,436,905,883,897,905,288,487,905,905,437,13,905,12", "905,439,485,439,905,439,439,439,439,482,481,10,905,948,920,7,305,905", "905,905,905,641,905,905,948,948,639,905,905,899,899,899,899,899,899", "905,438,905,899,899,468,931,308,899,933,899,899,899,899,899,899,899", "480,480,480,480,480,899,899,899,899,899,899,899,934,675,899,675,675", "675,935,675,899,899,936,899,899,899,899,899,899,899,899,899,287,899", "899,899,937,899,899,287,899,899,899,531,938,531,531,531,287,531,334", "675,939,940,839,1,942,334,943,464,675,839,899,953,890,899,334,,899,899", "839,890,899,,899,,,,899,,890,531,306,,,,899,,,306,531,899,899,899,899", ",899,899,306,,,899,899,565,565,565,565,565,565,899,,899,565,565,,,,565", ",565,565,565,565,565,565,565,6,6,6,6,6,565,565,565,565,565,565,565,", "788,565,788,788,788,,788,565,565,,565,565,565,565,565,565,565,565,565", "290,565,565,565,14,565,565,290,565,565,565,14,,,,924,290,,555,788,14", ",924,,,555,,924,788,,565,924,838,565,555,,565,565,,838,565,,565,,,,565", ",838,,45,700,,,565,,,45,700,565,565,565,565,700,565,565,45,700,,565", "565,285,285,285,285,285,285,565,,565,285,285,,,,285,,285,285,285,285", "285,285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,285,285,,285", "285,285,285,285,285,285,285,285,,285,285,285,,285,285,,285,285,285,450", "450,450,450,450,450,450,286,646,450,450,491,,,286,646,450,450,491,285", "646,,285,286,646,285,285,491,,285,,285,450,,450,285,450,450,450,450", "450,450,450,285,450,,,,285,285,285,285,,285,285,,,,285,285,280,280,280", "280,280,280,285,,285,280,280,,,,280,,280,280,280,280,280,280,280,,,", ",,280,280,280,280,280,280,280,,,280,,,,,,280,280,,280,280,280,280,280", "280,280,280,280,,280,280,280,,280,280,,280,280,280,451,451,451,451,451", "451,451,,,451,451,,,,,,451,451,,280,,,280,,,280,280,,,280,,280,451,", "451,280,451,451,451,451,451,451,451,280,451,,,,280,280,280,280,,280", "280,,,,280,280,703,703,703,703,703,703,280,,280,703,703,,,,703,,703", "703,703,703,703,703,703,,,,,,703,703,703,703,703,703,703,,,703,,,,,", "703,703,,703,703,703,703,703,703,703,703,703,,703,703,703,,703,703,", "703,703,703,431,431,431,431,431,431,431,431,431,431,431,,431,431,,,431", "431,,703,,,703,,,703,703,,,703,,703,431,,431,703,431,431,431,431,431", "431,431,703,431,,,,703,703,703,703,,703,703,,,,703,703,708,708,708,708", "708,708,703,,703,708,708,,,,708,,708,708,708,708,708,708,708,,,,,,708", "708,708,708,708,708,708,,,708,,,,,,708,708,,708,708,708,708,708,708", "708,708,708,,708,708,708,,708,708,,708,708,708,455,455,455,455,455,455", "455,455,,455,455,,,,,,455,455,,708,,,708,,,708,708,,,708,,708,455,,455", "708,455,455,455,455,455,455,455,708,455,,,,708,708,708,708,,708,708", ",,,708,708,718,718,718,718,718,718,708,,708,718,718,,,,718,,718,718", "718,718,718,718,718,,,,,,718,718,718,718,718,718,718,,,718,,,,,,718", "718,,718,718,718,718,718,718,718,718,718,,718,718,718,,718,718,,718", "718,718,442,442,442,442,442,442,442,,,442,442,,,,,,442,442,,718,,,718", ",,718,718,,,718,,718,442,,442,718,442,442,442,442,442,442,442,718,442", ",,,718,718,718,718,,718,718,,,,718,718,837,837,837,837,837,837,718,", "718,837,837,,,,837,,837,837,837,837,837,837,837,,,,,,837,837,837,837", "837,837,837,,,837,,,,,,837,837,,837,837,837,837,837,837,837,837,837", ",837,837,837,,837,837,,837,837,837,454,454,454,454,454,454,454,,,454", "454,,,,,,454,454,,837,,,837,,,837,837,,,837,,837,454,,454,837,454,454", "454,454,454,454,454,837,454,,,,837,837,837,837,,837,837,,,,837,837,656", "656,656,656,656,656,837,,837,656,656,,,,656,,656,656,656,656,656,656", "656,,,,,,656,656,656,656,656,656,656,,,656,,,,,,656,656,,656,656,656", "656,656,656,656,656,656,,656,656,656,,656,656,,656,656,656,449,449,449", "449,449,449,449,,,449,449,,,,,,449,449,,656,,,656,,,656,656,,,656,,656", "449,,449,656,449,449,449,449,449,449,449,656,449,,,,656,656,656,656", ",656,656,,,,656,656,540,540,540,540,540,540,656,,656,540,540,,,,540", ",540,540,540,540,540,540,540,,,,,,540,540,540,540,540,540,540,,,540", ",,,,,540,540,,540,540,540,540,540,540,540,540,540,,540,540,540,,540", "540,,540,540,540,432,432,432,432,432,432,432,432,432,432,432,,432,432", ",,432,432,,540,,,540,,,540,540,,,540,,540,432,,432,540,432,432,432,432", "432,432,432,540,432,,,,540,540,540,540,,540,540,,,,540,540,220,220,220", "220,220,220,540,,540,220,220,,,,220,,220,220,220,220,220,220,220,,,", ",,220,220,220,220,220,220,220,,,220,,,,,,220,220,,220,220,220,220,220", "220,220,220,220,,220,220,220,,220,220,,220,220,220,448,448,448,448,448", "448,448,,,448,448,,,,,,448,448,,220,,,220,,,220,220,,,220,,220,448,", "448,220,448,448,448,448,448,448,448,220,448,,,,220,220,220,220,,220", "220,,,,220,220,757,757,757,757,757,757,220,,220,757,757,,,,757,,757", "757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757,,,757,,,,,", "757,757,,757,757,757,757,757,757,757,757,757,,757,757,757,,757,757,", "757,757,757,447,447,447,447,447,447,447,,,447,447,,,,,,447,447,,757", ",,757,,,757,757,,,757,,757,447,,447,757,447,447,447,447,447,447,447", "757,447,,,,757,757,757,757,,757,757,,,,757,757,767,767,767,767,767,767", "757,,757,767,767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767", "767,767,767,767,,,767,,,,,,767,767,,767,767,767,767,767,767,767,767", "767,,767,767,767,,767,767,,767,767,767,446,,,,,,,,,,,,,,,,446,446,,767", ",,767,,,767,767,,,767,,767,446,,446,767,446,446,446,446,,,446,767,446", ",,,767,767,767,767,,767,767,,,,767,767,628,628,628,628,628,628,767,", "767,628,628,,,,628,,628,628,628,628,628,628,628,,,,,,628,628,628,628", "628,628,628,,,628,,,,,,628,628,,628,628,628,628,628,628,628,628,628", ",628,628,628,,628,628,,628,628,628,445,,,,,,,,,,,,,,,,445,445,,628,", ",628,,,628,628,,,628,,628,445,,445,628,445,445,445,445,,,445,628,445", ",,,628,628,628,628,,628,628,,,,628,628,627,627,627,627,627,627,628,", "628,627,627,,,,627,,627,627,627,627,627,627,627,,,,,,627,627,627,627", "627,627,627,,,627,,,,,,627,627,,627,627,627,627,627,627,627,627,627", ",627,627,627,,627,627,,627,627,627,443,,,,,,,,,,,,,,,,443,443,,627,", ",627,,,627,627,,,627,,627,443,,443,627,443,443,443,443,,,443,627,443", ",,,627,627,627,627,,627,627,,,,627,627,32,32,32,32,32,32,627,,627,32", "32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,32", "32,,32,32,32,32,32,32,32,32,32,,32,32,32,,32,32,,32,32,32,444,,,,,,", ",,,,,,,,,444,444,,32,,,32,,,32,32,,,32,,32,444,,444,32,444,444,444,444", ",,444,32,444,,,,32,32,32,32,,32,32,,,,32,32,197,197,197,197,197,197", "32,,32,197,197,,,,197,,197,197,197,197,197,197,197,,,,,,197,197,197", "197,197,197,197,,,197,,,,,,197,197,,197,197,197,197,197,197,197,197", "197,,197,197,197,,197,197,,197,197,197,441,,,,,,,,,,,,,,,,441,441,,197", ",,197,,,197,197,,,197,,197,441,,,197,441,441,441,441,,,,197,,,,,197", "197,197,197,,197,197,,,,197,197,113,113,113,113,113,113,197,,197,113", "113,,,,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113", "113,,,113,,,,,,113,113,113,113,113,113,113,113,113,113,113,113,,113", "113,113,,113,113,,113,113,113,440,,,,,,,,,,,,,,,,440,440,,113,,,113", ",,113,113,,,113,,113,440,,440,113,440,440,440,440,,,,113,,,,,113,113", "113,113,,113,113,,,,113,113,796,796,796,796,796,796,113,,113,796,796", ",,,796,,796,796,796,796,796,796,796,,,,,,796,796,796,796,796,796,796", ",,796,,,,,,796,796,,796,796,796,796,796,796,796,796,796,,796,796,796", ",796,796,,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,", "796,,,,796,,,,,,,,796,,,,,796,796,796,796,,796,796,,,,796,796,620,620", "620,620,620,620,796,,796,620,620,,,,620,,620,620,620,620,620,620,620", ",,,,,620,620,620,620,620,620,620,,,620,,,,,,620,620,,620,620,620,620", "620,620,620,620,620,,620,620,620,,620,620,,620,620,620,,,,,,,,,,,,,", ",,,,,,620,,,620,,,620,620,,,620,,620,,,,620,,,,,,,,620,,,,,620,620,620", "620,,620,620,,,,620,620,806,806,806,806,806,806,620,,620,806,806,,,", "806,,806,806,806,806,806,806,806,,,,,,806,806,806,806,806,806,806,,", "806,,,,,,806,806,,806,806,806,806,806,806,806,806,806,,806,806,806,", "806,806,,806,806,806,,,,,,,,,,,,,,,,,,,,806,,,806,,,806,806,,,806,,806", ",,,806,,,,,,,,806,,,,,806,806,806,806,,806,806,,,,806,806,0,0,0,0,0", "0,806,,806,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,416,0", "0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,,0,0,0,416,416,416,416,416,416,416", "416,416,416,416,,416,416,,,416,416,,0,,,0,,,0,0,,,0,,0,416,,416,0,416", "416,416,416,416,416,416,0,416,,,,0,0,0,0,,0,0,,,,0,0,,416,409,416,,", "0,,0,409,409,409,,,409,409,409,669,409,669,669,669,,669,,,,409,409,409", "409,,,,,,,,409,409,,409,409,409,409,409,,,,,,,,,,669,,,,,,,,,669,669", "669,669,,409,409,409,409,409,409,409,409,409,409,409,409,409,409,,,409", "409,409,,,409,,,409,,,409,409,,409,,409,,409,,409,409,409,409,409,409", "409,,409,409,409,,,,,,,,,,,,,,409,409,409,409,,409,,409,797,797,797", "797,797,797,,,,797,797,,,,797,,797,797,797,797,797,797,797,,,,,,797", "797,797,797,797,797,797,,,797,,,,,392,797,797,,797,797,797,797,797,797", "797,797,797,,797,797,797,,797,797,,797,797,797,392,392,392,392,392,392", "392,392,392,392,392,,392,392,,,392,392,,797,,,797,,,797,797,,,797,,797", "392,,392,797,392,392,392,392,392,392,392,797,392,,,,797,797,797,797", ",797,797,,,,797,797,,392,408,,,,797,,797,408,408,408,,,408,408,408,518", "408,518,518,518,,518,,,,408,408,408,408,,,,,,,,408,408,,408,408,408", "408,408,,,,,,,,,,518,,,,,,,,,518,518,518,518,,408,408,408,408,408,408", "408,408,408,408,408,408,408,408,,,408,408,408,,,408,,,408,,,408,408", ",408,,408,,408,,408,408,408,408,408,408,408,,408,408,408,,,,,,,,,,,", ",,408,408,408,408,,408,,408,54,54,54,54,54,54,,,,54,54,,,,54,,54,54", "54,54,54,54,54,,,,,,54,54,54,54,54,54,54,,,54,,,,,,54,54,,54,54,54,54", "54,54,54,54,54,,54,54,54,,54,54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54", ",,54,54,,,54,,54,,,,54,,,,,,,,54,,,,,54,54,54,54,,54,54,,,,54,54,800", "800,800,800,800,800,54,,54,800,800,,,,800,,800,800,800,800,800,800,800", ",,,,,800,800,800,800,800,800,800,,,800,,,,,615,800,800,,800,800,800", "800,800,800,800,800,800,,800,800,800,,800,800,,800,800,800,615,615,615", "615,615,615,615,615,615,615,615,,615,615,,,615,615,,800,,,800,,,800", "800,,,800,,800,615,,615,800,615,615,615,615,615,615,615,800,615,,,,800", "800,800,800,,800,800,,,,800,800,,615,53,,,,800,,800,53,53,53,,,53,53", "53,873,53,873,873,873,,873,,,,,53,53,53,,,,,,,,53,53,,53,53,53,53,53", ",,,,,,,,,873,873,,,,,,,,873,873,873,873,,53,53,53,53,53,53,53,53,53", "53,53,53,53,53,,,53,53,53,,,53,,,53,,,53,53,,53,,53,,53,,53,53,53,53", "53,53,53,,53,,53,,,,,,,,,,,,,,53,53,53,53,,53,,53,389,389,389,,389,", ",,389,389,,,,389,,389,389,389,389,389,389,389,,,,,,389,389,389,389,389", "389,389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389,,389,389,389", ",389,389,,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,,389,", ",,,,389,,,,,,,,389,,,,,389,389,389,389,,389,389,,,,389,389,,43,43,43", ",43,389,,389,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43", "43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,,43,43,43", ",,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,43,,,,,43,43", "43,43,,43,43,,,,43,43,,55,55,55,,55,43,,43,55,55,,,,55,,55,55,55,55", "55,55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55", "55,55,,55,55,55,,55,55,,55,55,55,,,,,,,,,,,,,,,,,,,,55,,,55,,,55,55", ",,55,,,,,,55,,,,,,,,55,,,,,55,55,55,55,,55,55,,,,55,55,,56,56,56,,56", "55,,55,56,56,,,,56,,56,56,56,56,56,56,56,,,,,,56,56,56,56,56,56,56,", ",56,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56", ",,,,,,,,,,,,,,,,,,,56,,,56,,,56,56,,,56,,56,,,,56,,,,,,,,56,,,,,56,56", "56,56,,56,56,,,,56,56,,57,57,57,,57,56,,56,57,57,,,,57,,57,57,57,57", "57,57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57,57,57,57", "57,57,57,57,57,57,,57,57,,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57,,,57,57", ",,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,,57,57,,,,57,57,,42,42,42,,42", "57,,57,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,", ",42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,,42,42,42,,", ",,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,42,,,,,42,42,42", "42,,42,42,,,,42,42,,60,60,60,,60,42,,42,60,60,,,,60,,60,60,60,60,60", "60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60", "60,,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60", ",,,,,60,,,,,,,,60,,,,,60,60,60,60,,60,60,,,,60,60,,61,61,61,,61,60,", "60,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61", ",,,,,,61,,,61,61,61,61,61,61,61,61,,61,61,61,,61,61,,61,61,61,,,,,,", ",,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61", ",61,61,,,,61,61,,64,64,64,,64,61,,61,64,64,,,,64,,64,64,64,64,64,64", "64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64", ",64,64,64,,64,64,,64,64,64,740,740,740,740,740,740,740,740,740,740,740", ",740,740,,,740,740,,64,,,64,,,64,64,,,64,,,740,,740,64,740,740,740,740", "740,740,740,64,740,,,,64,64,64,64,,64,64,,,,64,64,64,740,,,,64,64,,64", "65,65,65,,65,,,,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65", "65,65,,,65,,,,,,,65,,,65,65,65,65,65,65,65,65,,65,65,65,,65,65,,,,65", ",,,,,,,,,,,,,,,,,,,65,,,65,,,65,65,,,65,,65,,,,,,709,,709,709,709,,709", ",,,,65,65,65,65,,65,65,,,,65,65,,66,66,66,,66,65,,65,66,66,,,,66,709", "66,66,66,66,66,66,66,,709,709,709,709,66,66,66,66,66,66,66,,,66,,,,", ",,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,,,66,,,,,,,,,,,,,,", ",,66,,,66,,,66,,,66,66,,,66,,,,,,,,667,,667,667,667,,667,,,,,66,66,66", "66,,66,66,,,,66,66,,67,67,67,,67,66,,66,67,67,,,,67,667,67,67,67,67", "67,67,67,,667,667,667,667,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67", "67,67,67,67,67,67,,67,67,67,,67,67,,,,67,,,,,,,,,,,,,,,,,,,,67,,,67", ",,67,67,,,67,,,,,,,,908,,908,908,908,,908,,,,,67,67,67,67,,67,67,,,", "67,67,,506,506,506,,506,67,,67,506,506,,,,506,908,506,506,506,506,506", "506,506,,908,908,908,908,506,506,506,506,506,506,506,,,506,,,,,,,506", ",,506,506,506,506,506,506,506,506,,506,506,506,,506,506,,506,506,506", ",,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,506,,,,506,,,,,,,,506", ",,,,506,506,506,506,,506,506,,,,506,506,,41,41,41,,41,506,,506,41,41", ",,,41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41,,,,,,,41", ",,41,41,41,41,41,41,41,41,,41,41,41,,41,41,,41,41,41,,,,,,,,,,,,,,,", ",,,,41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,41,,,,,41,41,41,41,,41,41,,", ",41,41,,504,504,504,,504,41,,41,504,504,,,,504,,504,504,504,504,504", "504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,,,504,,,504,504,504", "504,504,504,504,504,,504,504,504,,504,504,,504,504,504,,,,,,,,,,,,,", ",,,,,,504,,,504,,,504,504,,,504,,,,,,504,,,,,,,,504,,,,,504,504,504", "504,,504,504,,,,504,504,,816,816,816,,816,504,,504,816,816,,,,816,,816", "816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816,,,816,,,,,", ",816,,,816,816,816,816,816,816,816,816,816,816,816,816,,816,816,,816", "816,816,,,,,,,,,,,,,,,,,,,,816,,,816,,,816,816,,,816,,,,816,,816,,,", ",,,,816,,,,,816,816,816,816,,816,816,,,,816,816,,817,817,817,,817,816", ",816,817,817,,,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817", "817,817,817,,,817,,,,,,,817,,,817,817,817,817,817,817,817,817,,817,817", "817,,817,817,,817,817,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817", ",,,,,817,,,,,,,,817,,,,,817,817,817,817,,817,817,,,,817,817,,103,103", "103,103,103,817,,817,103,103,,,,103,,103,103,103,103,103,103,103,,,", ",,103,103,103,103,103,103,103,,,103,,,,,,103,103,103,103,103,103,103", "103,103,103,103,103,,103,103,103,,103,103,,103,103,103,818,818,818,818", "818,818,818,818,818,818,818,,818,818,,,818,818,,103,,,103,,,103,103", ",,103,,103,818,,818,103,818,818,818,818,818,818,818,103,818,,,,103,103", "103,103,,103,103,,,,103,103,,818,,,,103,103,,103,108,108,108,,108,,", ",108,108,,,,108,,108,108,108,108,108,108,108,,,,,,108,108,108,108,108", "108,108,,,108,,,,,,,108,,,108,108,108,108,108,108,108,108,,108,108,108", ",108,108,,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108,", ",,,,108,,,,,,,,108,,,,,108,108,108,108,,108,108,,,,108,108,,109,109", "109,,109,108,,108,109,109,,,,109,,109,109,109,109,109,109,109,,,,,,109", "109,109,109,109,109,109,,,109,,,,,,,109,,,109,109,109,109,109,109,109", "109,,109,109,109,,109,109,,109,109,109,,,,,,,,,,,,,,,,,,,,109,,,109", ",,109,109,,,109,,,,,,109,,,,,,,,109,,,,,109,109,109,109,,109,109,,,", "109,109,,110,110,110,,110,109,,109,110,110,,,,110,,110,110,110,110,110", "110,110,,,,,,110,110,110,110,110,110,110,,,110,,,,,,,110,,,110,110,110", "110,110,110,110,110,,110,110,110,,110,110,,110,110,110,,,,,,,,,,,,,", ",,,,,,110,,,110,,,110,110,,,110,,,,,,110,,,,,,,,110,,,,,110,110,110", "110,,110,110,,,,110,110,,111,111,111,,111,110,,110,111,111,,,,111,,111", "111,111,111,111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,", ",111,,,111,111,111,111,111,111,111,111,,111,111,111,,111,111,,111,111", "111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,,,,,111,,,,,,,,111", ",,,,111,111,111,111,,111,111,,,,111,111,,112,112,112,112,112,111,,111", "112,112,,,,112,,112,112,112,112,112,112,112,,,,,,112,112,112,112,112", "112,112,,,112,,,,,,112,112,,112,112,112,112,112,112,112,112,112,,112", "112,112,,112,112,,112,112,112,,,,,,,,,,,,,,,,,,,,112,,,112,,,112,112", ",,112,,112,,,,112,,,,,,,,112,,,,,112,112,112,112,,112,112,,,,112,112", ",34,34,34,,34,112,,112,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34", "34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34", "34,,,,34,738,738,738,738,738,738,738,738,738,738,738,,738,738,,,738", "738,,34,,,34,,,34,34,,,34,,,738,,738,,738,738,738,738,738,738,738,,738", ",,,34,34,34,34,,34,34,,,,34,34,,738,,34,,,34,,34,794,794,794,,794,,", ",794,794,,,,794,,794,794,794,794,794,794,794,,,,,,794,794,794,794,794", "794,794,,,794,,,,,,,794,,,794,794,794,794,794,794,794,794,,794,794,794", ",794,794,,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,,794,", ",,,,794,,,,,,,,794,,,,,794,794,794,794,,794,794,,,,794,794,,771,771", "771,,771,794,,794,771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771", "771,771,771,771,771,771,,,771,,,,,,,771,,,771,771,771,771,771,771,771", "771,,771,771,771,,771,771,,,,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771", "771,,,771,,,,,,,,847,,847,847,847,,847,,,,,771,771,771,771,,771,771", ",,,771,771,,33,33,33,,33,771,,771,33,33,,,,33,847,33,33,33,33,33,33", "33,,847,847,847,847,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33", "33,33,33,33,,33,33,33,,33,33,,,,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33", ",,33,,33,,,,,,821,,821,821,821,,821,,,,,33,33,33,33,,33,33,,,,33,33", ",198,198,198,,198,33,,33,198,198,,,,198,821,198,198,198,198,198,198", "198,,821,821,821,821,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198", "198,198,198,198,198,198,198,,198,198,198,,198,198,,198,198,198,,,,,", ",,,,,,,,,,,,,,198,,,198,,,198,198,,,198,,198,,,,198,,,,,,,,198,,,,,198", "198,198,198,,198,198,,,,198,198,,199,199,199,,199,198,,198,199,199,", ",,199,,199,199,199,199,199,199,199,,,,,,199,199,199,199,199,199,199", ",,199,,,,,,,199,,,199,199,199,199,199,199,199,199,,199,199,199,,199", "199,,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,,199,,,,,,199", ",,,,,,,199,,,,,199,199,199,199,,199,199,,,,199,199,,200,200,200,,200", "199,,199,200,200,,,,200,,200,200,200,200,200,200,200,,,,,,200,200,200", "200,200,200,200,,,200,,,,,,,200,,,200,200,200,200,200,200,200,200,200", "200,200,200,,200,200,,200,200,200,,,,,,,,,,,,,,,,,,,,200,,,200,,,200", "200,,,200,,200,,200,,200,,,,,,,,200,,,,,200,200,200,200,,200,200,,,", "200,200,,30,30,30,,30,200,,200,30,30,,,,30,,30,30,30,30,30,30,30,,,", ",,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30", "30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,", "30,,30,,,,,,,,30,,,,,30,30,30,30,,30,30,,,,30,30,,29,29,29,,29,30,,30", "29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,", ",,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,,29,29,29,,,,,,,", ",,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,,,,,,29,,,,,29,29,29", "29,,29,29,,,,29,29,,203,203,203,,203,29,,29,203,203,,,,203,,203,203", "203,203,203,203,203,,,,,,203,203,203,203,203,203,203,,,203,,,,,,,203", ",,203,203,203,203,203,203,203,203,,203,203,203,,203,203,,203,203,203", ",,,,,,,,,,,,,,,,,,,203,,,203,,,203,203,,,203,,,,,,203,,,,,,,,203,,,", ",203,203,203,203,,203,203,,,,203,203,,204,204,204,,204,203,,203,204", "204,,,,204,,204,204,204,204,204,204,204,,,,,,204,204,204,204,204,204", "204,,,204,,,,,,,204,,,204,204,204,204,204,204,204,204,,204,204,204,", "204,204,,204,204,204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204,204,,,204,,204", ",,,204,,,,,,,,204,,,,,204,204,204,204,,204,204,,,,204,204,,205,205,205", ",205,204,,204,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205", "205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205", ",205,205,205,,205,205,,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205", "205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205,,205,205,,,,205,205", ",206,206,206,,206,205,,205,206,206,,,,206,,206,206,206,206,206,206,206", ",,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206", "206,206,206,,206,206,206,,206,206,,206,206,206,,,,,,,,,,,,,,,,,,,,206", ",,206,,,206,206,,,206,,,,,,206,,,,,,,,206,,,,,206,206,206,206,,206,206", ",,,206,206,,207,207,207,,207,206,,206,207,207,,,,207,,207,207,207,207", "207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207", "207,207,207,207,207,207,,207,207,207,,207,207,,207,207,207,,,,,,,,,", ",,,,,,,,,,207,,,207,,,207,207,,,207,,,,,,207,,,,,,,,207,,,,,207,207", "207,207,,207,207,,,,207,207,,208,208,208,,208,207,,207,208,208,,,,208", ",208,208,208,208,208,208,208,,,,,,208,208,208,208,208,208,208,,,208", ",,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208,,208,208,,208", "208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208,,,,,,", ",208,,,,,208,208,208,208,,208,208,,,,208,208,208,510,510,510,,510,208", ",208,510,510,,,,510,,510,510,510,510,510,510,510,,,,,,510,510,510,510", "510,510,510,,,510,,,,,,,510,,,510,510,510,510,510,510,510,510,510,510", "510,510,,510,510,,510,510,510,,,,,,,,,,,,,,,,,,,,510,,,510,,,510,510", ",,510,,510,,,,510,,,,,,,,510,,,,,510,510,510,510,,510,510,,,,510,510", ",28,28,28,,28,510,,510,28,28,,,,28,,28,28,28,28,28,28,28,,,,,,28,28", "28,28,28,28,28,,,28,,,,,,,28,,,28,28,28,28,28,28,28,28,28,28,28,28,", "28,28,,28,28,28,,,,,,,,,,,,,,,,,,,,28,,,28,,,28,28,,,28,,28,,28,,28", ",,,,,,,28,,,,,28,28,28,28,,28,28,,,,28,28,,513,513,513,,513,28,,28,513", "513,,,,513,,513,513,513,513,513,513,513,,,,,,513,513,513,513,513,513", "513,,,513,,,,,,,513,,,513,513,513,513,513,513,513,513,513,513,513,513", ",513,513,,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,", ",,,,513,,,,,,,,513,,,,,513,513,513,513,,513,513,,,,513,513,,426,426", "426,,426,513,,513,426,426,,,,426,,426,426,426,426,426,426,426,,,,,,426", "426,426,426,426,426,426,,,426,,,,,,,426,,,426,426,426,426,426,426,426", "426,426,426,426,426,,426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426", ",,426,426,,,426,,426,,426,,426,,,,,,,,426,,,,,426,426,426,426,,426,426", ",,,426,426,,746,746,746,,746,426,,426,746,746,,,,746,,746,746,746,746", "746,746,746,,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746", "746,746,746,746,746,746,,746,746,746,,746,746,,746,746,746,,,,,,,,,", ",,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,746,,,,,,,,746,,,,,746,746", "746,746,,746,746,,,,746,746,,744,744,744,,744,746,,746,744,744,,,,744", ",744,744,744,744,744,744,744,,,,,,744,744,744,744,744,744,744,,,744", ",,,,,,744,,,744,744,744,744,744,744,744,744,,744,744,744,,744,744,,744", "744,744,,,,,,,,,,,,,,,,,,,,744,,,744,,,744,744,,,744,,,,,,744,,,,,,", ",744,,,,,744,744,744,744,,744,744,,,,744,744,,743,743,743,,743,744,", "744,743,743,,,,743,,743,743,743,743,743,743,743,,,,,,743,743,743,743", "743,743,743,,,743,,,,,,,743,,,743,743,743,743,743,743,743,743,,743,743", "743,,743,743,,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743", ",,,,,743,,,,,,,,743,,,,,743,743,743,743,,743,743,,,,743,743,,219,219", "219,,219,743,,743,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219", "219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219", "219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219", ",,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,,219,219,,,", "219,219,,500,500,500,,500,219,,219,500,500,,,,500,,500,500,500,500,500", "500,500,,,,,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500", "500,500,500,500,500,,500,500,500,,500,500,,500,500,500,,,,,,,,,,,,,", ",,,,,,500,,,500,,,500,500,,,500,,,,,,500,,,,,,,,500,,,,,500,500,500", "500,,500,500,,,,500,500,,742,742,742,,742,500,,500,742,742,,,,742,,742", "742,742,742,742,742,742,,,,,,742,742,742,742,742,742,742,,,742,,,,,", ",742,,,742,742,742,742,742,742,742,742,,742,742,742,,742,742,,742,742", "742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,,742,,,,,,742,,,,,,,,742", ",,,,742,742,742,742,,742,742,,,,742,742,,222,222,222,,222,742,,742,222", "222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222", "222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,", "222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,", ",,,222,,,,,,,,222,,,,,222,222,222,222,,222,222,,,,222,222,,223,223,223", ",223,222,,222,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223", "223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223", ",223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223", "223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,,223,223,,,,223,223", ",224,224,224,,224,223,,223,224,224,,,,224,,224,224,224,224,224,224,224", ",,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224", "224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224", ",,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,,224,224", ",,,224,224,,225,225,225,,225,224,,224,225,225,,,,225,,225,225,225,225", "225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225", "225,225,225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,", ",,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225", "225,225,,225,225,,,,225,225,,226,226,226,,226,225,,225,226,226,,,,226", ",226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226", ",,,,,,226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226,,226", "226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,", ",226,,,,,226,226,226,226,,226,226,,,,226,226,,227,227,227,,227,226,", "226,227,227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227", "227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227", "227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227", ",,,,,227,,,,,,,,227,,,,,227,227,227,227,,227,227,,,,227,227,,228,228", "228,,228,227,,227,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228", "228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228", "228,,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228", ",,228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,,228,228,,,", "228,228,,229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229", "229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229", "229,229,229,229,229,,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,", ",,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229", "229,,229,229,,,,229,229,,230,230,230,,230,229,,229,230,230,,,,230,,230", "230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,", ",230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,,230,230", "230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230", ",,,,230,230,230,230,,230,230,,,,230,230,,231,231,231,,231,230,,230,231", "231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231", "231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,", "231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,", ",,,231,,,,,,,,231,,,,,231,231,231,231,,231,231,,,,231,231,,232,232,232", ",232,231,,231,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232", "232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232", ",232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232", "232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,,232,232,,,,232,232", ",233,233,233,,233,232,,232,233,233,,,,233,,233,233,233,233,233,233,233", ",,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233", "233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233", ",,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,,233,233", ",,,233,233,,234,234,234,,234,233,,233,234,234,,,,234,,234,234,234,234", "234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234", "234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,", ",,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234", "234,234,,234,234,,,,234,234,,235,235,235,,235,234,,234,235,235,,,,235", ",235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235", ",,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235", "235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,", ",235,,,,,235,235,235,235,,235,235,,,,235,235,,236,236,236,,236,235,", "235,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236", "236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236", "236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236", ",,,,,236,,,,,,,,236,,,,,236,236,236,236,,236,236,,,,236,236,,237,237", "237,,237,236,,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237", "237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237", "237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237", ",,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,,237,237,,,", "237,237,,238,238,238,,238,237,,237,238,238,,,,238,,238,238,238,238,238", "238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238", "238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,", ",,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238", "238,,238,238,,,,238,238,,239,239,239,,239,238,,238,239,239,,,,239,,239", "239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,", ",239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239", "239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239", ",,,,239,239,239,239,,239,239,,,,239,239,,240,240,240,,240,239,,239,240", "240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240", "240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,", "240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,", ",,,240,,,,,,,,240,,,,,240,240,240,240,,240,240,,,,240,240,,241,241,241", ",241,240,,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241", "241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241", ",241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241", "241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,,241,241,,,,241,241", ",242,242,242,,242,241,,241,242,242,,,,242,,242,242,242,242,242,242,242", ",,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242", "242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242", ",,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,,242,242", ",,,242,242,,243,243,243,,243,242,,242,243,243,,,,243,,243,243,243,243", "243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243", "243,243,243,243,243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,", ",,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243", "243,243,,243,243,,,,243,243,,244,244,244,,244,243,,243,244,244,,,,244", ",244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244", ",,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244", "244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,", ",244,,,,,244,244,244,244,,244,244,,,,244,244,,245,245,245,,245,244,", "244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245", "245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245", "245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245", ",,,,,245,,,,,,,,245,,,,,245,245,245,245,,245,245,,,,245,245,,246,246", "246,,246,245,,245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246", "246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246", "246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246", ",,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,,246,246,,,", "246,246,,247,247,247,,247,246,,246,247,247,,,,247,,247,247,247,247,247", "247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247", "247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,", ",,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247", "247,,247,247,,,,247,247,,428,428,428,,428,247,,247,428,428,,,,428,,428", "428,428,428,428,428,428,,,,,,428,428,428,428,428,428,428,,,428,,,,,", ",428,,,428,428,428,428,428,428,428,428,,428,428,428,,428,428,,428,428", "428,,,,,,,,,,,,,,,,,,,,428,,,428,,,428,428,,,428,,,,,,428,,,,,,,,428", ",,,,428,428,428,428,,428,428,,,,428,428,,831,831,831,,831,428,,428,831", "831,,,,831,,831,831,831,831,831,831,831,,,,,,831,831,831,831,831,831", "831,,,831,,,,,,,831,,,831,831,831,831,831,831,831,831,,831,831,831,", "831,831,,,,831,,,,,,,,,,,,,,,,,,,,831,,,831,,,831,831,,,831,,,,,,,,819", ",819,819,819,,819,,,,,831,831,831,831,,831,831,,,,831,831,,741,741,741", ",741,831,,831,741,741,,,,741,819,741,741,741,741,741,741,741,,819,819", "819,819,741,741,741,741,741,741,741,,,741,,,,,,,741,,,741,741,741,741", "741,741,741,741,,741,741,741,,741,741,,741,741,741,,,,,,,,,,,,,,,,,", ",,741,,,741,,,741,741,,,741,,,,,,741,,,,,,,,741,,,,,741,741,741,741", ",741,741,,,,741,741,,253,253,253,,253,741,,741,253,253,,,,253,,253,253", "253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253", ",,253,253,253,253,253,253,253,253,253,253,253,253,,253,253,,253,253", "253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,253,,253,,253,,,,", ",,,253,,,,,253,253,253,253,,253,253,,,,253,253,,254,254,254,,254,253", ",253,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254", "254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,254,254", "254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254", ",,254,,254,,254,,254,,,,,,,,254,,,,,254,254,254,254,,254,254,,,,254", "254,,262,262,262,,262,254,,254,262,262,,,,262,,262,262,262,262,262,262", "262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262", "262,262,262,262,262,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,,", ",,,,,262,,,262,,,262,262,,,262,,262,,262,,262,,,,,,,,262,,,,,262,262", "262,262,,262,262,,,,262,262,262,727,727,727,,727,262,,262,727,727,,", ",727,,727,727,727,727,727,727,727,,,,,,727,727,727,727,727,727,727,", ",727,,,,,,,727,,,727,727,727,727,727,727,727,727,,727,727,727,,727,727", ",727,727,727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,,727,,,,,,727,", ",,,,,,727,,,,,727,727,727,727,,727,727,,,,727,727,,725,725,725,,725", "727,,727,725,725,,,,725,,725,725,725,725,725,725,725,,,,,,725,725,725", "725,725,725,725,,,725,,,,,,,725,,,725,725,725,725,725,725,725,725,,725", "725,725,,725,725,,725,725,725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725", ",,725,,,,,,725,,,,,,,,725,,,,,725,725,725,725,,725,725,,,,725,725,,429", "429,429,,429,725,,725,429,429,,,,429,,429,429,429,429,429,429,429,,", ",,,429,429,429,429,429,429,429,,,429,,,,,,,429,,,429,429,429,429,429", "429,429,429,,429,429,429,,429,429,,429,429,429,,,,,,,,,,,,,,,,,,,,429", ",,429,,,429,429,,,429,,,,,,429,,,,,,,,429,,,,,429,429,429,429,,429,429", ",,,429,429,,269,269,269,,269,429,,429,269,269,,,,269,,269,269,269,269", "269,269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269", "269,269,269,269,269,269,,269,269,269,,269,269,,269,269,269,,,,,,,,,", ",,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269,269", "269,269,,269,269,,,,269,269,,799,799,799,,799,269,,269,799,799,,,,799", ",799,799,799,799,799,799,799,,,,,,799,799,799,799,799,799,799,,,799", ",,,,,,799,,,799,799,799,799,799,799,799,799,,799,799,799,,799,799,,799", "799,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,,,799,,799,,,,799,,,", ",,,,799,,,,,799,799,799,799,,799,799,,,,799,799,,271,271,271,,271,799", ",799,271,271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271,271", "271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271,,271,271", "271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271", ",,,,,271,,,,,,,,271,,,,,271,271,271,271,,271,271,,,,271,271,,273,273", "273,,273,271,,271,273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273", "273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273", "273,,273,273,273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273", ",,273,273,,,273,,,,,,273,,,,,,,,273,,,,,273,273,273,273,,273,273,,,", "273,273,,20,20,20,,20,273,,273,20,20,,,,20,,20,20,20,20,20,20,20,,,", ",,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20", "20,,20,20,,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20", ",,,,,,,20,,,,,20,20,20,20,,20,20,,,,20,20,,430,430,430,,430,20,,20,430", "430,,,,430,,430,430,430,430,430,430,430,,,,,,430,430,430,430,430,430", "430,,,430,,,,,,,430,,,430,430,430,430,430,430,430,430,,430,430,430,", "430,430,,430,430,430,,,,,,,,,,,,,,,,,,,,430,,,430,,,430,430,,,430,,", ",,,430,,,,,,,,430,,,,,430,430,430,430,,430,430,,,,430,430,,278,278,278", "278,278,430,,430,278,278,,,,278,,278,278,278,278,278,278,278,,,,,,278", "278,278,278,278,278,278,,,278,,,,,,278,278,,278,278,278,278,278,278", "278,278,278,,278,278,278,,278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278", ",,278,,,278,278,,,278,,278,,,,278,,,,,,,,278,,,,,278,278,278,278,,278", "278,,,,278,278,,548,548,548,,548,278,,278,548,548,,,,548,,548,548,548", "548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548", "548,548,548,548,548,548,548,,548,548,548,,548,548,,548,548,548,,,,,", ",,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,548,,,,548,,,,,,,,548,,,,,548", "548,548,548,,548,548,,,,548,548,,887,887,887,,887,548,,548,887,887,", ",,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887,887,887,887", ",,887,,,,,,,887,,,887,887,887,887,887,887,887,887,887,887,887,887,,887", "887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,887,", "887,,887,,,,,,,,887,,,,,887,887,887,887,,887,887,,,,887,887,,698,698", "698,,698,887,,887,698,698,,,,698,,698,698,698,698,698,698,698,,,,,,698", "698,698,698,698,698,698,,,698,,,,,,,698,,,698,698,698,698,698,698,698", "698,,698,698,698,,698,698,,698,698,698,,,,,,,,,,,,,,,,,,,,698,,,698", ",,698,698,,,698,,,,,,698,,,,,,,,698,,,,,698,698,698,698,,698,698,,,", "698,698,,549,549,549,,549,698,,698,549,549,,,,549,,549,549,549,549,549", "549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549,549", "549,549,549,549,549,549,549,549,549,,549,549,,549,549,549,,,,,,,,,,", ",,,,,,,,,549,,,549,,,549,549,,,549,,549,,549,,549,,,,,,,,549,,,,,549", "549,549,549,,549,549,,,,549,549,,363,363,363,,363,549,,549,363,363,", ",,363,,363,363,363,363,363,363,363,,,,,,363,363,363,363,363,363,363", ",,363,,,,,,,363,,,363,363,363,363,363,363,363,363,,363,363,363,,363", "363,,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,,,363,363,,,363,,,,,,363", ",,,,,,,363,,,,,363,363,363,363,,363,363,,,,363,363,,284,284,284,,284", "363,,363,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284,284", "284,284,284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284,284,,284", "284,284,,284,284,,,,284,736,736,736,736,736,736,736,736,736,736,736", ",736,736,,,736,736,,284,,,284,,,284,284,,,284,,,736,,736,,736,736,736", "736,736,736,736,,736,,,,284,284,284,284,,284,284,,,,284,284,,736,,284", ",,284,,284,499,499,499,,499,,,,499,499,,,,499,,499,499,499,499,499,499", "499,,,,,,499,499,499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499", "499,499,499,499,,499,499,499,,499,499,,499,499,499,,,,,,,,,,,,,,,,,", ",,499,,,499,,,499,499,,,499,,,,,,499,,,,,,,,499,,,,,499,499,499,499", ",499,499,,,,499,499,,559,559,559,,559,499,,499,559,559,,,,559,,559,559", "559,559,559,559,559,,,,,,559,559,559,559,559,559,559,,,559,,,,,,,559", ",,559,559,559,559,559,559,559,559,559,559,559,559,,559,559,,559,559", "559,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,559,,,559,,559,,559,,559,,,,", ",,,559,,,,,559,559,559,559,,559,559,,,,559,559,,562,562,562,,562,559", ",559,562,562,,,,562,,562,562,562,562,562,562,562,,,,,,562,562,562,562", "562,562,562,,,562,,,,,,,562,,,562,562,562,562,562,562,562,562,,562,562", "562,,562,562,,562,562,562,,,,,,,,,,,,,,,,,,,,562,,,562,,,562,562,,,562", ",,,,,562,,,,,,,,562,,,,,562,562,562,562,,562,562,,,,562,562,,498,498", "498,,498,562,,562,498,498,,,,498,,498,498,498,498,498,498,498,,,,,,498", "498,498,498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498,498,498", "498,,498,498,498,,498,498,,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498", ",,498,498,,,498,,,,,,498,,,,,,,,498,,,,,498,498,498,498,,498,498,,,", "498,498,,347,347,347,,347,498,,498,347,347,,,,347,,347,347,347,347,347", "347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,,347,,,347,347,347", "347,347,347,347,347,,347,347,347,,347,347,,347,347,347,,,,,,,,,,,,,", ",,,,,,347,,,347,,,347,347,,,347,,,,,,347,,,,,,,,347,,,,,347,347,347", "347,,347,347,,,,347,347,,673,673,673,,673,347,,347,673,673,,,,673,,673", "673,673,673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,", ",673,,,673,673,673,673,673,673,673,673,,673,673,673,,673,673,,673,673", "673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,673", ",,,,673,673,673,673,,673,673,,,,673,673,,495,495,495,,495,673,,673,495", "495,,,,495,,495,495,495,495,495,495,495,,,,,,495,495,495,495,495,495", "495,,,495,,,,,,,495,,,495,495,495,495,495,495,495,495,,495,495,495,", "495,495,,,,495,,,,,,,,,,,,,,,,,,,,495,,,495,,,495,495,,,495,,,,,,,,", ",,,,,,,,,,495,495,495,495,,495,495,,,,495,495,,488,488,488,,488,495", ",495,488,488,,,,488,,488,488,488,488,488,488,488,,,,,,488,488,488,488", "488,488,488,,,488,,,,,,,488,,,488,488,488,488,488,488,488,488,488,488", "488,488,,488,488,,488,488,488,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,488", ",,488,,488,,488,,488,,,,,,,,488,,,,,488,488,488,488,,488,488,,,,488", "488,,591,591,591,,591,488,,488,591,591,,,,591,,591,591,591,591,591,591", "591,,,,,,591,591,591,591,591,591,591,,,591,,,,,,,591,,,591,591,591,591", "591,591,591,591,,591,591,591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,", ",,591,,,591,,,591,591,,,591,,591,,,,591,,,,,,,,591,,,,,591,591,591,591", ",591,591,,,,591,591,,486,486,486,,486,591,,591,486,486,,,,486,,486,486", "486,486,486,486,486,,,,,,486,486,486,486,486,486,486,,,486,,,,,,,486", ",,486,486,486,486,486,486,486,486,,486,486,486,,486,486,,,,486,,,,,", ",,,,,,,,,,,,,,486,,,486,,,486,486,,,486,,,,,,,,,,,,,,,,,,,486,486,486", "486,,486,486,,,,486,486,,592,592,592,,592,486,,486,592,592,,,,592,,592", "592,592,592,592,592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,", ",592,,,592,592,592,592,592,592,592,592,,592,592,592,,592,592,,592,592", "592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,,,,,592,,,,,,,,592", ",,,,592,592,592,592,,592,592,,,,592,592,,649,649,649,,649,592,,592,649", "649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649", "649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,", "649,649,,,,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,,,", ",,,,,,,,,,649,649,649,649,,649,649,,,,649,649,,301,301,301,,301,649", ",649,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301", "301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,301,,301,301", "301,,301,301,,,,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,,301,,,", ",,,,,,,,,,,,,,,301,301,301,301,,301,301,,,,301,301,,595,595,595,,595", "301,,301,595,595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595,595", "595,595,595,595,,,595,,,,,,,595,,,595,595,595,595,595,595,595,595,595", "595,595,595,,595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595", "595,,,595,,595,,595,,595,,,,,,,,595,,,,,595,595,595,595,,595,595,,,", "595,595,,596,596,596,,596,595,,595,596,596,,,,596,,596,596,596,596,596", "596,596,,,,,,596,596,596,596,596,596,596,,,596,,,,,,,596,,,596,596,596", "596,596,596,596,596,596,596,596,596,,596,596,,596,596,596,,,,,,,,,,", ",,,,,,,,,596,,,596,,,596,596,,,596,,,,596,,596,,,,,,,,596,,,,,596,596", "596,596,,596,596,,,,596,596,,597,597,597,,597,596,,596,597,597,,,,597", ",597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597,,,597", ",,,,,,597,,,597,597,597,597,597,597,597,597,,597,597,597,,597,597,,597", "597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597,,,,,,597,,,,,,", ",597,,,,,597,597,597,597,,597,597,,,,597,597,,327,327,327,,327,597,", "597,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327", "327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327,327", "327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,,327", ",,,,,327,,,,,,,,327,,,,,327,327,327,327,,327,327,,,,327,327,,633,633", "633,,633,327,,327,633,633,,,,633,,633,633,633,633,633,633,633,,,,,,633", "633,633,633,633,633,633,,,633,,,,,,,633,,,633,633,633,633,633,633,633", "633,,633,633,633,,633,633,,633,633,633,,,,,,,,,,,,,,,,,,,,633,,,633", ",,633,633,,,633,,,,,,633,,,,,,,,633,,,,,633,633,633,633,,633,633,,,", "633,633,,310,310,310,,310,633,,633,310,310,,,,310,,310,310,310,310,310", "310,310,,,,,,310,310,310,310,310,310,310,,,310,,,,,,,310,,,310,310,310", "310,310,310,310,310,,310,310,310,,310,310,,310,310,310,,,,,,,,,,,,,", ",,,,,,310,,,310,310,,310,310,,,310,,,,,,310,,,,,,,,310,,,,,310,310,310", "310,,310,310,,,,310,310,,479,479,479,479,479,310,,310,479,479,,,,479", ",479,479,479,479,479,479,479,,,,,,479,479,479,479,479,479,479,,,479", ",,,,,479,479,,479,479,479,479,479,479,479,479,479,,479,479,479,,479", "479,,479,479,479,733,733,733,733,733,733,733,733,733,733,733,,733,733", ",,733,733,,479,,,479,,,479,479,,,479,,479,733,,733,479,733,733,733,733", "733,733,733,479,733,,,,479,479,479,479,,479,479,,,,479,479,,733,,,,479", "479,,479,475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475", "475,,,,,,475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475", "475,475,475,475,,475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,", ",,475,,,475,,,475,475,,,475,,,,,,475,,,,,,,,475,,,,,475,475,475,475", ",475,475,,,,475,475,,5,5,5,5,5,475,,475,5,5,,,,5,,5,5,5,5,5,5,5,,,,", ",5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,,5,5,5,", ",,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5", ",,,5,5,,598,598,598,,598,5,,5,598,598,,,,598,,598,598,598,598,598,598", "598,,,,,,598,598,598,598,598,598,598,,,598,,,,,,,598,,,598,598,598,598", "598,598,598,598,,598,598,598,,598,598,,598,598,598,,,,,,,,,,,,,,,,,", ",,598,,,598,,,598,598,,,598,,,,,,598,,,,,,,,598,,,,,598,598,598,598", ",598,598,,,,598,598,,328,328,328,,328,598,,598,328,328,,,,328,,328,328", "328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,,,328", ",,328,328,328,328,328,328,328,328,,328,328,328,,328,328,,328,328,328", ",,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328,,,,,,,,328,,,", ",328,328,328,328,,328,328,,,,328,328,,473,473,473,,473,328,,328,473", "473,,,,473,,473,473,473,473,473,473,473,,,,,,473,473,473,473,473,473", "473,,,473,,,,,,,473,,,473,473,473,473,473,473,473,473,473,473,473,473", ",473,473,,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473,,,473,473,,,473,", ",,473,,473,,,,,,,,473,,,,,473,473,473,473,,473,473,,,,473,473,,471,471", "471,,471,473,,473,471,471,,,,471,,471,471,471,471,471,471,471,,,,,,471", "471,471,471,471,471,471,,,471,,,,,,,471,,,471,471,471,471,471,471,471", "471,471,471,471,471,,471,471,,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471", ",,471,471,,,471,,471,,471,,471,,,,,,,,471,,,,,471,471,471,471,,471,471", ",,,471,471,,607,607,607,,607,471,,471,607,607,,,,607,,607,607,607,607", "607,607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,,,607,,,607,607", "607,607,607,607,607,607,,607,607,607,,607,607,,607,607,607,,,,,,,,,", ",,,,,,,,,,607,,,607,,,607,607,,,607,,,,,,607,,,,,,,,607,,,,,607,607", "607,607,,607,607,,,,607,607,,606,606,606,,606,607,,607,606,606,,,,606", ",606,606,606,606,606,606,606,,,,,,606,606,606,606,606,606,606,,,606", ",,,,,,606,,,606,606,606,606,606,606,606,606,,606,606,606,,606,606,,606", "606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606,606,,,606,,,,,,606,,,,,,", ",606,,,,,606,606,606,606,,606,606,,,,606,606,,603,603,603,,603,606,", "606,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603,603,603,603", "603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603,603,603,,603,603", "603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603", ",,,,,603,,,,,,,,603,,,,,603,603,603,603,,603,603,,,,603,603,,602,602", "602,,602,603,,603,602,602,,,,602,,602,602,602,602,602,602,602,,,,,,602", "602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602,602,602,602,602", "602,,602,602,602,,602,602,,602,602,602,,,,,,,,,,,,,,,,,,,,602,,,602", ",,602,602,,,602,,,,,,602,,,,,,,,602,,,,,602,602,602,602,,602,602,,,", "602,602,,638,638,638,,638,602,,602,638,638,,,,638,,638,638,638,638,638", "638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638", "638,638,638,638,638,,638,638,638,,638,638,,461,,638,,,,,461,461,461", ",,461,461,461,,461,,,,,,638,,,638,461,,638,638,,,638,,,,461,461,,461", "461,461,461,461,,,,,,,,638,638,638,638,,638,638,,,,638,638,,,,,399,", "638,,638,,,399,399,399,,461,399,399,399,,399,,461,,,,,461,461,399,399", "399,,,,,,,,,399,399,,399,399,399,399,399,,,461,,,,,,,,,,,,,,461,,,,", "461,,399,399,399,399,399,399,399,399,399,399,399,399,399,399,,,399,399", "399,,,399,,399,399,,,399,399,,399,,399,,399,,399,399,399,399,399,399", "399,458,399,399,399,,,,458,458,458,,,458,458,458,,458,399,399,,399,323", "399,323,323,323,458,323,,,,,,,,,458,458,,458,458,458,458,458,,,,,566", ",566,566,566,,566,,,,,323,323,,,,,,,27,323,323,323,323,,,27,27,27,,458", "27,27,27,,27,,458,566,566,,,458,458,,27,27,566,566,566,566,,,,,27,27", ",27,27,27,27,27,,,458,,,,,,,,,,,,,,458,,,,,458,,27,27,27,27,27,27,27", "27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27", "27,27,27,27,27,27,26,27,,27,,,,26,26,26,,,26,26,26,,26,27,27,,27,,27", ",,26,26,26,,,,,,,,,26,26,,26,26,26,26,26,,,,,,,,,,,,,,,,,,,,,,,,26,26", "26,26,26,26,26,26,26,26,26,26,26,26,,,26,26,26,,,26,,26,26,,,26,26,", "26,,26,,26,,26,26,26,26,26,26,26,,26,26,26,,,,,,,,,,,,,,26,26,,26,,26", "9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9", "9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9", "9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,9,8,8,8", "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,", ",,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8", ",,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,8,380,380,380", "380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380", "380,380,380,380,,,,380,380,380,380,380,380,380,380,380,380,,,,,,380", "380,380,380,380,380,380,380,380,,,380,,,,,,,,,380,380,,380,380,380,380", "380,380,380,,,380,380,,,,380,380,380,380,,,,,,,,,,,,,,380,380,,380,380", "380,380,380,380,380,380,380,380,380,,,380,380,,,,,,,,,,,380,588,588", "588,588,588,588,588,588,588,588,588,588,588,588,588,588,588,588,588", "588,588,588,588,588,,,,588,588,588,588,588,588,588,588,588,588,,,,,", "588,588,588,588,588,588,588,588,588,,,588,,,,,,,,,588,588,,588,588,588", "588,588,588,588,,,588,588,,,,588,588,588,588,,,,,,,,,,,,,,588,588,,588", "588,588,588,588,588,588,588,588,588,588,,,588,588,,,,,,,,,,,588,68,68", "68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,,", ",68,68,68,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,68,68,68,68", "68,,68,,,,,,,68,68,,68,68,68,68,68,68,68,,,68,68,,,,68,68,68,68,,,,", ",68,,,,,,,,68,68,,68,68,68,68,68,68,68,68,68,68,68,,,68,711,711,711", "711,711,711,711,711,711,711,711,711,711,711,711,711,711,711,711,711", "711,711,711,711,,,,711,711,711,711,711,711,711,711,711,711,,,,,,711", "711,711,711,711,711,711,711,711,,,711,,,,,,,,,711,711,,711,711,711,711", "711,711,711,,,711,711,,,,711,711,711,711,,,,,,,,,,,,,,711,711,,711,711", "711,711,711,711,711,711,711,711,711,424,424,711,,424,,,,,,,,,424,424", ",424,424,424,424,424,424,424,,,424,424,,,,424,424,424,424,,,,,,424,", ",,,,,,424,424,,424,424,424,424,424,424,424,424,424,424,424,425,425,424", ",425,,,,,,,,,425,425,,425,425,425,425,425,425,425,,,425,425,,,,425,425", "425,425,,,,,,425,,,,,,,,425,425,,425,425,425,425,425,425,425,425,425", "425,425,501,501,425,,501,,,,,,,,,501,501,,501,501,501,501,501,501,501", ",,501,501,,,,501,501,501,501,,,,,,501,,,,,,,,501,501,,501,501,501,501", "501,501,501,501,501,501,501,502,502,501,,502,,,,,,,,,502,502,,502,502", "502,502,502,502,502,,,502,502,,,,502,502,502,502,,,,,,502,,,,,,,,502", "502,,502,502,502,502,502,502,502,502,502,502,502,888,888,502,,888,,", ",,,,,,888,888,,888,888,888,888,888,888,888,,,888,888,,,,888,888,888", "888,,,,,,888,,,,,,,,888,888,,888,888,888,888,888,888,888,888,888,888", "888,889,889,888,,889,,,,,,,,,889,889,,889,889,889,889,889,889,889,,", "889,889,,,,889,889,889,889,,,,,,889,,,,,,,,889,889,,889,889,889,889", "889,889,889,889,889,889,889,917,917,889,,917,,,,,,,,,917,917,,917,917", "917,917,917,917,917,,,917,917,,,,917,917,917,917,,,,,,917,,,,,,,,917", "917,,917,917,917,917,917,917,917,917,917,917,917,490,490,917,,490,,", ",,,,,,490,490,,490,490,490,490,490,490,490,,,490,490,,,,490,490,490", "490,,,,,,490,,,,,,,,490,490,,490,490,490,490,490,490,490,490,490,490", "490,489,489,490,,489,,,,,,,,,489,489,,489,489,489,489,489,489,489,,", "489,489,,,,489,489,489,489,,,,,,489,,,,,,,,489,489,,489,489,489,489", "489,489,489,489,489,489,489,550,550,489,,550,,,,,,,,,550,550,,550,550", "550,550,550,550,550,,,550,550,,,,550,550,550,550,,,,,,550,,,,,,,,550", "550,,550,550,550,550,550,550,550,550,550,550,550,551,551,550,,551,,", ",,,,,,551,551,,551,551,551,551,551,551,551,,,551,551,,,,551,551,551", "551,,,,,,551,,,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551", "551,557,557,551,,557,,,,,,,,,557,557,,557,557,557,557,557,557,557,,", "557,557,,,,557,557,557,557,,,,,,557,,,,,,,,557,557,,557,557,557,557", "557,557,557,557,557,557,557,558,558,557,,558,,,,,,,,,558,558,,558,558", "558,558,558,558,558,,,558,558,,,,558,558,558,558,,,,,,558,,,,,,,,558", "558,,558,558,558,558,558,558,558,558,558,558,558,250,250,558,,250,,", ",,,,,,250,250,,250,250,250,250,250,250,250,,,250,250,,,,250,250,250", "250,,,,,,,,,,,,,,250,250,,250,250,250,250,250,250,250,250,250,250,250", "251,251,250,,251,,,,,,,,,251,251,,251,251,251,251,251,251,251,,,251", "251,,,,251,251,251,251,,,,,,,,,,,,,,251,251,,251,251,251,251,251,251", "251,251,251,251,251,202,202,251,,202,,,,,,,,,202,202,,202,202,202,202", "202,202,202,,,202,202,,,,202,202,202,202,,,,,,202,,,,,,,,202,202,,202", "202,202,202,202,202,202,202,202,202,202,201,201,202,,201,,,,,,,,,201", "201,,201,201,201,201,201,201,201,,,201,201,,,,201,201,201,201,,,,,,201", ",,,,,,,201,201,,201,201,201,201,201,201,201,201,201,201,201,,,201,815", "815,815,815,815,815,815,815,815,815,815,,815,815,,,815,815,,,,,,,,,", ",,,,,815,,815,,815,815,815,815,815,815,815,,815,,731,731,731,731,731", "731,731,731,731,731,731,,731,731,,815,731,731,,,,,,,,,,,,,,,731,,731", ",731,731,731,731,731,731,731,,731,,264,264,264,264,264,264,264,264,264", "264,264,,264,264,,731,264,264,,,,,,,,,,,,,,,264,,264,,264,264,264,264", "264,264,264,,264,,650,650,650,650,650,650,650,650,650,650,650,,650,650", ",264,650,650,,,,,,,,,,,,,,,650,,650,,650,650,650,650,650,650,650,,650", ",726,726,726,726,726,726,726,726,726,726,726,,726,726,,650,726,726,", ",,,,,,,,,,,,,726,,726,,726,726,726,726,726,726,726,,726,,503,503,503", "503,503,503,503,503,503,503,503,,503,503,,726,503,503,,,,,,,,,,,,,,", "503,,503,,503,503,503,503,503,503,503,,503,,411,411,411,411,411,411", "411,411,411,411,411,,411,411,,503,411,411,,,,,,,,,,,,,,,411,,411,,411", "411,411,411,411,411,411,,411,,456,456,456,456,456,456,456,456,456,456", "456,,456,456,,411,456,456,,,,,,,,,,,,,,,456,,456,,456,456,456,456,456", "456,456,,456,,21,21,21,21,21,21,21,21,21,21,21,,21,21,456,456,21,21", ",,,,,,,,,,,,,,21,,21,,21,21,21,21,21,21,21,,21,,,,,,,,,,,,,,,,,21"];

      racc_action_check = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(23473, nil);

      idx = 0;

      ($a = ($c = clist).$each, $a._p = (TMP_3 = function(str){var self = TMP_3._s || this, $a, $b, TMP_4;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_4 = function(i){var self = TMP_4._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_4._s = self, TMP_4), $a).call($b)}, TMP_3._s = self, TMP_3), $a).call($c);

      racc_action_pointer = [3899, 1332, nil, 406, nil, 19595, 1364, 1128, 21403, 21278, 1124, nil, 1088, 1135, 1361, 530, 1028, 698, nil, 29, 15799, 23344, 1034, nil, 566, 287, 21147, 21037, 9751, 8743, 8617, nil, 3143, 8113, 7727, nil, 885, 608, 420, 920, 685, 6459, 5443, 4939, 845, 1407, nil, nil, nil, nil, nil, nil, nil, 4680, 4425, 5065, 5191, 5317, 121, nil, 5569, 5695, nil, nil, 5821, 5955, 6081, 6207, 21778, nil, nil, nil, nil, nil, 389, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 131, nil, nil, 393, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 966, nil, 6963, nil, nil, nil, nil, 7097, 7223, 7349, 7475, 7601, 3395, nil, 396, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 771, nil, 3269, 8239, 8365, 8491, 22928, 22867, 8869, 8995, 9121, 9247, 9373, 9499, nil, nil, 645, 164, 395, 788, 268, 641, 689, nil, 10507, 2513, 683, 10885, 11011, 11137, 11263, 11389, 11515, 11641, 11767, 11893, 12019, 12145, 12271, 12397, 12523, 12649, 12775, 12901, 13027, 13153, 13279, 13405, 13531, 13657, 13783, 13909, 14035, nil, nil, 22745, 22806, 668, 14539, 14665, nil, nil, nil, nil, nil, nil, nil, 14791, nil, 23068, nil, 549, 475, nil, 15295, 505, 15547, nil, 15673, nil, nil, 513, 1127, 16051, 249, 1631, 249, 281, 234, 16807, 1505, 1501, 1231, 1123, 87, 1357, nil, 79, 281, 291, nil, nil, nil, 428, 562, 825, 18453, nil, 295, 1096, 1174, 1281, nil, 1200, nil, 19209, 882, 1116, 720, nil, 24, 606, 216, 207, 631, 421, nil, nil, 20940, 555, 48, 165, 18957, 19847, 216, 726, 616, 124, 66, 1249, 730, 136, 767, nil, nil, 401, 363, 190, nil, 752, nil, 55, 17445, nil, nil, nil, 146, 165, 593, 373, 430, 452, 456, 518, 540, nil, 558, nil, 16681, nil, 524, 535, 320, 425, 62, 292, nil, nil, nil, nil, nil, nil, nil, nil, 857, 21528, nil, nil, nil, nil, 871, nil, 887, nil, 4813, 897, nil, 4162, 901, nil, 917, 961, 532, 498, 20860, nil, nil, nil, 613, 503, 1005, nil, nil, 4291, 4028, nil, 23252, nil, 964, nil, nil, 3899, nil, nil, nil, nil, 156, nil, 1023, 21952, 22013, 10003, 177, 14161, 15169, 15925, 1757, 2387, 602, 745, 1120, 1145, 1154, 1194, 1127, 3395, 3269, 2009, 3017, 3143, 2891, 2765, 2639, 2513, 2261, 1505, 1631, 571, 728, 2135, 1883, 23298, 337, 20970, nil, nil, 20793, nil, nil, 1209, nil, 253, 88, 1138, nil, nil, 20099, nil, 19973, nil, 19469, nil, nil, nil, 19335, 1238, 1108, 1104, nil, nil, 1097, 18075, 1091, 17823, 22440, 22379, 1505, 1083, nil, nil, 17697, 1023, nil, 17319, 16941, 10633, 22074, 22135, 23206, 6585, 1082, 6333, nil, 965, nil, 9625, nil, nil, 9877, nil, nil, nil, 184, 4255, nil, 959, 953, 951, nil, nil, nil, nil, nil, nil, 934, nil, 1269, nil, nil, nil, nil, 1017, nil, nil, 1013, 2387, 1017, nil, 0, 251, 195, 997, 1000, 16177, 16555, 22501, 22562, 99, nil, nil, 1375, nil, 22623, 22684, 17067, nil, nil, 17193, 605, 154, 1379, 20967, nil, nil, nil, 270, nil, nil, nil, 804, nil, nil, nil, 825, nil, nil, 186, nil, nil, 760, nil, nil, nil, 21653, nil, 757, 17949, 18201, 396, 667, 18579, 18705, 18831, 19721, 616, nil, nil, 20603, 20477, 597, nil, 20351, 20225, nil, nil, 238, 323, 0, 262, 122, 4551, -48, nil, 500, nil, 3647, nil, nil, nil, nil, 235, nil, 3017, 2891, nil, 844, nil, 1022, 19083, nil, nil, 1001, 292, 20729, 1121, nil, 1119, 224, 58, 1053, 333, 1502, 879, 833, 18327, 23114, 769, 648, 257, 694, nil, 2261, 363, 362, nil, nil, 347, 194, nil, 749, 875, -32, 6134, nil, 3992, nil, nil, 610, 17571, nil, 1239, nil, -6, 507, nil, 25, nil, nil, 659, nil, 181, nil, nil, nil, nil, 218, nil, 152, 126, 90, 126, 157, 165, 16429, 362, 1408, nil, 297, 1757, 576, nil, nil, 480, 1883, 6008, 52, 21891, nil, nil, nil, nil, nil, nil, 2009, nil, nil, nil, nil, nil, 511, 15043, 23160, 14917, nil, 579, nil, 23022, nil, 19335, nil, nil, 16807, nil, 7727, nil, 5821, 14413, 10759, 10381, 10255, 136, 10129, 675, 679, 686, nil, 709, 697, 735, 703, nil, 831, 2639, 755, 864, nil, nil, 753, 301, nil, nil, nil, 2765, nil, nil, 125, 7987, nil, nil, nil, 789, 894, 784, 787, 791, nil, nil, 801, 805, nil, 808, nil, 815, 1365, 823, 1018, nil, 948, nil, 7861, 956, 3521, 4162, nil, 15421, 4551, 193, 187, nil, 974, nil, 3773, nil, 978, 861, nil, nil, 876, 869, nil, 22976, 6711, 6837, 6963, 14340, nil, 8166, nil, nil, 1051, nil, 928, 908, nil, nil, nil, 14287, nil, 944, nil, nil, nil, 2135, 1389, 1253, 1105, 1024, 474, nil, nil, nil, nil, 8040, nil, nil, 799, nil, 771, nil, 674, nil, nil, nil, 512, 892, 968, nil, 153, nil, 1092, 1100, nil, 423, nil, nil, 1104, nil, nil, 4644, nil, 985, -106, 1005, 1009, nil, 1011, nil, 861, 1120, 1099, nil, 1148, 16303, 22196, 22257, 1263, 1065, 1066, 1067, 1077, 1079, 905, 1085, 766, 1253, nil, nil, nil, nil, nil, 1127, nil, 1001, 6260, nil, nil, 1023, nil, 925, nil, nil, nil, 22318, nil, nil, 1112, 164, 141, 51, 1372, nil, 897, nil, nil, nil, 1031, 1136, 522, 1260, 1280, 1165, 1169, 1183, 1191, 1239, 1240, 34, 1203, 1205, nil, nil, nil, nil, 1149, nil, nil, nil, nil, 1210, nil];

      racc_action_default = [-3, -546, -1, -532, -4, -546, -7, -546, -546, -546, -546, -27, -546, -546, -546, -274, -546, -39, -42, -534, -546, -47, -49, -50, -51, -255, -255, -255, -284, -319, -320, -67, -11, -71, -79, -81, -546, -461, -462, -546, -546, -546, -546, -546, -534, -236, -267, -268, -269, -270, -271, -272, -273, -522, -11, -546, -545, -514, -292, -374, -546, -546, -297, -300, -532, -546, -546, -546, -546, -321, -322, -410, -411, -412, -413, -414, -429, -417, -418, -431, -433, -422, -427, -443, -431, -445, -446, -520, -450, -451, -521, -453, -454, -455, -456, -457, -458, -459, -460, -465, -466, -546, -2, -533, -541, -542, -543, -6, -546, -546, -546, -546, -546, -3, -15, -546, -110, -111, -112, -113, -114, -115, -116, -117, -118, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -20, -119, -11, -546, -546, -245, -546, -546, -546, -546, -546, -546, -546, -534, -535, -46, -546, -461, -462, -546, -274, -546, -546, -228, -546, -11, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -546, -380, -382, -546, -546, -56, -245, -546, -291, -385, -394, -396, -62, -391, -63, -534, -64, -237, -250, -259, -259, -254, -546, -260, -546, -516, -546, -65, -66, -532, -12, -546, -69, -11, -534, -546, -72, -75, -11, -87, -88, -546, -546, -95, -284, -287, -534, -546, -319, -320, -323, -392, -546, -77, -546, -83, -281, -447, -448, -546, -213, -214, -229, -546, -402, -546, -277, -238, -538, -538, -546, -546, -538, -546, -293, -294, -486, -48, -546, -546, -546, -546, -532, -546, -533, -461, -462, -546, -546, -274, -546, -333, -334, -105, -106, -546, -108, -546, -274, -546, -546, -461, -462, -312, -110, -111, -151, -152, -153, -169, -174, -181, -184, -314, -546, -512, -546, -415, -546, -546, -546, -546, -546, -546, 955, -5, -544, -21, -22, -23, -24, -25, -546, -546, -17, -18, -19, -120, -546, -28, -37, -38, -546, -546, -29, -194, -534, -246, -259, -259, -523, -524, -255, -389, -525, -526, -524, -523, -255, -388, -390, -525, -526, -35, -202, -36, -546, -40, -41, -192, -260, -43, -44, -45, -534, -290, -546, -546, -546, -245, -281, -546, -546, -546, -203, -204, -205, -206, -207, -208, -209, -210, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -230, -231, -232, -233, -534, -363, -255, -523, -524, -255, -54, -57, -534, -256, -363, -363, -534, -286, -251, -546, -252, -546, -257, -546, -261, -519, -10, -533, -14, -534, -68, -279, -84, -73, -546, -534, -245, -546, -546, -94, -546, -447, -448, -546, -80, -85, -546, -546, -546, -546, -546, -234, -546, -545, -545, -276, -534, -239, -540, -539, -241, -540, -282, -283, -515, -546, -486, -377, -511, -511, -511, -485, -487, -488, -489, -490, -491, -492, -493, -546, -495, -501, -503, -504, -506, -507, -508, -546, -11, -324, -325, -11, -546, -546, -546, -546, -546, -245, -546, -546, -281, -305, -105, -106, -107, -546, -546, -245, -308, -467, -546, -546, -546, -11, -486, -316, -530, -531, -534, -416, -430, -435, -546, -437, -419, -432, -546, -434, -421, -546, -424, -426, -546, -444, -8, -16, -546, -26, -266, -546, -546, -393, -546, -247, -249, -546, -546, -58, -244, -386, -546, -546, -60, -387, -546, -546, -289, -536, -523, -524, -523, -524, -534, -192, -546, -364, -368, -366, -11, -52, -383, -53, -384, -363, -242, -11, -11, -285, -259, -258, -262, -546, -517, -518, -13, -70, -546, -76, -82, -534, -523, -524, -243, -91, -93, -546, -78, -546, -201, -211, -212, -534, -545, -331, -11, -403, -545, -404, -405, -546, -538, -375, -11, -11, -368, -546, -478, -546, -481, -483, -546, -546, -335, -546, -337, -339, -346, -492, -534, -505, -509, -545, -326, -545, -298, -327, -328, -301, -546, -304, -546, -534, -523, -524, -527, -280, -546, -105, -106, -109, -534, -11, -546, -469, -310, -546, -11, -486, -546, -546, -513, -436, -439, -440, -441, -442, -11, -420, -423, -425, -428, -121, -264, -546, -195, -546, -537, -259, -31, -197, -32, -198, -59, -33, -200, -34, -199, -61, -193, -546, -546, -546, -546, -393, -546, -511, -511, -511, -362, -546, -368, -546, -492, -499, -546, -11, -546, -546, -253, -263, -74, -89, -86, -288, -9, -11, -409, -332, -546, -546, -407, -278, -240, -546, -546, -534, -511, -511, -496, -510, -511, -511, -502, -511, -497, -534, -546, -344, -546, -494, -546, -329, -546, -546, -11, -11, -303, -546, -11, -393, -546, -393, -546, -468, -11, -313, -546, -534, -471, -317, -546, -265, -30, -196, -248, -546, -235, -353, -355, -546, -358, -360, -546, -365, -546, -369, -370, -372, -373, -546, -381, -546, -395, -397, -408, -11, -96, -97, -546, -546, -104, -406, -378, -379, -376, -546, -474, -476, -546, -479, -546, -482, -546, -484, -336, -338, -342, -546, -347, -295, -546, -296, -546, -546, -262, -545, -306, -309, -546, -315, -470, -486, -438, -511, -511, -511, -511, -500, -511, -367, -546, -498, -546, -55, -402, -245, -546, -546, -103, -511, -511, -511, -511, -340, -546, -345, -546, -11, -299, -302, -398, -399, -400, -11, -311, -11, -546, -350, -352, -546, -356, -546, -359, -361, -371, -546, -281, -401, -534, -523, -524, -527, -102, -472, -546, -475, -477, -480, -546, -343, -545, -546, -546, -511, -511, -511, -511, -280, -527, -393, -511, -341, -330, -307, -318, -348, -546, -351, -354, -357, -473, -511, -349];

      clist = ["119,119,505,360,312,210,283,14,523,265,265,265,14,297,297,114,196,314", "708,207,547,256,260,415,13,540,543,211,6,13,509,512,106,6,516,211,211", "211,749,14,288,288,519,654,310,297,297,297,472,399,405,124,124,325,326", "748,13,329,37,388,119,14,211,37,281,412,751,211,211,634,279,211,334", "344,344,393,593,300,13,463,122,122,674,103,631,496,631,779,780,782,37", "286,286,106,680,102,792,107,458,461,879,374,375,376,377,784,686,689", "317,634,14,556,37,830,777,211,211,211,211,14,14,828,860,332,348,348", "348,13,464,797,572,6,579,582,2,857,13,13,698,620,378,6,252,259,261,263", "274,275,627,628,366,622,346,350,624,370,330,267,267,267,905,37,703,313", "806,565,566,711,324,324,37,37,324,873,796,339,328,472,327,752,195,265", "508,386,391,316,319,879,410,414,766,897,634,567,409,372,361,400,380", "827,826,560,337,523,14,211,211,211,631,631,211,211,211,211,211,211,324", "324,324,324,517,13,663,795,323,625,674,14,931,789,249,457,466,467,265", "265,690,666,787,876,780,877,830,265,13,857,902,379,658,770,916,523,364", "365,322,37,875,367,368,581,211,211,943,321,297,369,713,891,718,211,639", "778,399,405,497,780,318,362,37,648,588,297,1,784,,14,,14,,,256,288,14", "492,260,,,745,,,,614,13,750,13,106,480,757,288,13,,,481,418,419,420", "421,487,279,,544,545,,279,763,907,701,485,935,,,,,,211,211,37,644,37", "674,,674,286,37,,944,721,,38,644,266,266,266,38,211,,479,,106,286,,", ",641,868,,,659,478,,211,465,119,,,561,801,774,315,468,38,287,287,267", ",803,,587,,,,267,800,594,523,600,,,644,,,605,38,,,903,644,265,,895,674", "760,634,333,349,349,349,409,,,400,546,762,124,693,415,734,,809,631,", "739,,211,702,324,324,,,,,,,,,,,674,,674,,38,122,,600,564,616,600,,497", "38,38,,,,,297,660,497,265,837,570,,,,297,,,,,,674,409,,,400,14,,,,,", ",288,409,211,,400,,,,,288,13,,,,636,661,,760,211,,,,707,599,,,,390,", "604,,,,390,,,282,265,,,,,,,37,,,265,,,409,286,38,400,14,,409,14,,,286", "400,704,211,904,523,,,,899,,13,,211,13,38,211,,,14,687,687,621,266,919", "623,,119,,730,732,266,,,735,737,13,,414,705,706,,723,,,37,,630,37,,941", "211,211,,,,211,211,497,653,211,594,768,,,297,772,,,764,37,,,38,14,38", "297,,124,287,38,14,14,,,,662,600,594,,605,13,288,811,,,287,,13,13,804", ",,288,,808,,122,,422,14,,,,,,,324,14,14,,,,,,37,,13,,,,,37,37,,13,13", ",802,,594,385,,286,,,,,,594,119,,211,,286,,,14,,814,,37,14,469,282,", ",,,37,37,729,14,,13,,,,,13,805,211,482,644,,,810,,,13,,,,,,,,,297,,", ",,870,,,,,37,920,,14,,37,,,,,,,,14,,37,282,840,,,13,282,,,,,862,,,,13", ",,,,,,,,,211,,14,14,,324,14,,,,297,,14,,37,,,,,13,13,,,13,37,,38,390", "838,13,687,,,287,,,,883,,,,,287,14,,,,,,,,,,37,37,,934,37,,,13,,,37", ",,,265,,692,15,,,,608,15,,,,,409,,,400,,,,38,348,,38,,,211,37,,,,,,", "324,15,290,290,14,,,409,,,14,38,14,,,,626,,594,,629,13,,15,,,,13,,13", ",,,637,336,345,345,,,640,,,,,,,,,,,,,,,,37,,,,,,37,,37,,,38,,,,,,15", "38,38,,,,,,,15,15,,287,,,25,,,,,25,,,287,,,,,,,38,,,,,25,,,38,38,,,", "25,25,25,,25,,,712,,,,,,,,,,,,,683,,,685,,,25,25,,,,,25,25,38,,25,,", "38,,,,,,,,,,38,,15,,,,320,,,747,,,,,,,,,,,668,670,671,,,15,25,,,,,25", "25,25,25,25,25,,16,38,,765,,16,,,,,,38,,756,,839,,,,,758,759,783,,,785", ",,,,791,,16,,,,,,,,38,38,,,38,15,,15,,769,38,290,15,,16,,,775,776,,", ",,,,338,,,290,,,,,,,349,,,,,,38,25,25,25,25,,,25,25,25,25,25,25,,,,", ",,,,,16,,25,,,,387,,812,16,16,,417,,,,,,,,,,,,846,,,,,,,,,,856,25,25", ",,,38,,,,25,,38,833,38,,,,,,,,872,836,,,25,,25,,,,,25,,,,878,,,880,", ",474,,476,,477,,,,,864,865,,,867,,,,16,,,892,,,893,413,894,,,,820,822", "823,25,25,,,,,,,16,,,,,,,,,,886,,25,,,,,,,,848,849,,,851,853,15,855", "25,,,,,290,,,,,,,,936,290,,937,,938,,,,,,,,,,,,16,942,16,,,,,16,,,,", ",,932,,,,,,933,,590,953,,,,,,15,,,15,25,,,,,,,,,,,,,,,,,,,,,15,,,,,909", "910,912,914,717,915,,,,,,,,,,,925,927,928,929,,,,,,,,25,,,,,,,,,25,", ",,,,,,,632,,320,,635,15,,25,,,,,15,15,,947,949,950,951,,,,952,290,,", ",,,,,,,954,290,657,,,,632,,15,320,25,,,25,,,15,15,,25,,,,,,,,,,25,,", "25,,,25,,,,,,,,,417,,,,,,,,,,,15,,,,,15,,,,16,,,25,25,,15,,25,25,,,25", ",,,,,,,,,,724,,,25,632,320,,,,,25,25,,,,,,,,,,,15,,,,,,,,,,15,,,,842", ",16,25,,16,761,,,,,25,25,,,,,,,,,,,,,15,15,16,,15,,,,,,15,,,,,,,,,,25", "786,,,,25,,,,,25,,,,,345,,,,,25,15,,413,,,,,,25,,,,,,,,16,,,,,,,16,16", ",,,,,,,813,,,218,,,25,,,,,264,264,264,,,25,,,,16,,,,307,308,309,,16", "16,15,,,,,,15,,15,264,264,,,25,,25,25,,,25,,,,,,25,,,,,,,,,,,,16,,,", ",16,,866,,,,,,,,16,,,,25,,,,,320,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,,,", ",,,,,,16,,,,843,25,,,,,,,,,,,,25,,,,,,25,,25,,,,16,16,,,16,,,,,,16,", ",,,,,,,,,264,392,264,,,411,416,,,,,,,,,,,,,,16,218,,,431,432,433,434", "435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451", "452,453,454,455,456,,,,,,264,264,,,,,,,,264,,,,,,,264,,264,,264,,,,", ",,16,,,,,,16,,16,,,,,,,,,,,,,,,,,,,,,,503,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,264,,411,615,392,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,264,,264,,264,,,,,,,,,,,,,264,,,,,,,,,,650,651,652,,,,", ",264,,,,264,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,264,,,,,,,,", ",264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,726,,,264,264,731,733,,,,736", "738,,,615,740,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",264,,815,,,,,,,,,,,,,,731,733,738,736,,818,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,264,815,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264"];

      racc_goto_table = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(2611, nil);

      idx = 0;

      ($a = ($d = clist).$each, $a._p = (TMP_5 = function(str){var self = TMP_5._s || this, $a, $b, TMP_6;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_6 = function(i){var self = TMP_6._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_6._s = self, TMP_6), $a).call($b)}, TMP_5._s = self, TMP_5), $a).call($d);

      clist = ["54,54,10,53,8,19,46,21,114,32,32,32,21,60,60,14,14,62,89,30,85,66,66", "17,20,82,82,21,7,20,64,64,88,7,64,21,21,21,112,21,21,21,123,11,30,60", "60,60,68,35,35,58,58,16,16,111,20,16,49,26,54,21,21,49,43,26,116,21", "21,150,42,21,21,21,21,22,23,47,20,37,57,57,106,6,69,48,69,112,145,112", "49,49,49,88,107,4,83,5,35,35,147,16,16,16,16,146,84,84,61,150,21,51", "49,119,116,21,21,21,21,21,21,118,108,49,49,49,49,20,22,96,140,7,140", "140,2,105,20,20,97,38,7,7,36,36,36,41,41,41,38,38,136,67,52,52,67,136", "4,65,65,65,98,49,99,28,100,101,102,103,28,28,49,49,28,104,94,18,95,68", "93,109,15,32,92,19,19,65,65,147,19,19,12,108,150,91,54,5,90,66,29,117", "116,87,86,114,21,21,21,21,69,69,21,21,21,21,21,21,28,28,28,28,120,20", "121,11,122,39,106,21,108,106,124,125,127,128,32,32,85,123,107,112,145", "112,119,32,20,105,129,2,130,131,118,114,134,135,81,49,111,137,138,139", "21,21,108,79,60,141,142,112,143,21,48,144,35,35,46,145,78,77,49,48,59", "60,1,146,,21,,21,,,66,21,21,30,66,,,23,,,,22,20,114,20,88,7,38,21,20", ",,43,28,28,28,28,43,42,,16,16,,42,23,89,51,47,112,,,,,,21,21,49,35,49", "106,,106,49,49,,83,140,,50,35,63,63,63,50,21,,6,,88,49,,,,22,84,,,26", "4,,21,41,54,,,88,23,64,63,41,50,50,50,65,,23,,14,,,,65,82,30,114,66", ",,35,,,66,50,,,11,35,32,,106,106,68,150,50,50,50,50,54,,,66,4,48,58", "22,17,37,,123,69,,37,,21,22,28,28,,,,,,,,,,,106,,106,,50,57,,66,28,30", "66,,46,50,50,,,,,60,62,46,32,82,28,,,,60,,,,,,106,54,,,66,21,,,,,,,21", "54,21,,66,,,,,21,20,,,,7,30,,68,21,,,,8,36,,,,63,,36,,,,63,,,9,32,,", ",,,,49,,,32,,,54,49,50,66,21,,54,21,,,49,66,16,21,85,114,,,,82,,20,", "21,20,50,21,,,21,88,88,36,63,10,36,,54,,19,19,63,,,19,19,20,,19,88,88", ",14,,,49,,65,49,,23,21,21,,,,21,21,46,28,21,30,62,,,60,62,,,46,49,,", "50,21,50,60,,58,50,50,21,21,,,,65,66,30,,66,20,21,53,,,50,,20,20,8,", ",21,,8,,57,,44,21,,,,,,,28,21,21,,,,,,49,,20,,,,,49,49,,20,20,,16,,30", "9,,49,,,,,,30,54,,21,,49,,,21,,19,,49,21,44,9,,,,,49,49,65,21,,20,,", ",,20,88,21,44,35,,,88,,,20,,,,,,,,,60,,,,,8,,,,,49,22,,21,,49,,,,,,", ",21,,49,9,21,,,20,9,,,,,16,,,,20,,,,,,,,,,21,,21,21,,28,21,,,,60,,21", ",49,,,,,20,20,,,20,49,,50,63,49,20,88,,,50,,,,21,,,,,50,21,,,,,,,,,", "49,49,,8,49,,,20,,,49,,,,32,,63,24,,,,44,24,,,,,54,,,66,,,,50,49,,50", ",,21,49,,,,,,,28,24,24,24,21,,,54,,,21,50,21,,,,44,,30,,44,20,,24,,", ",20,,20,,,,44,24,24,24,,,44,,,,,,,,,,,,,,,,49,,,,,,49,,49,,,50,,,,,", "24,50,50,,,,,,,24,24,,50,,,40,,,,,40,,,50,,,,,,,50,,,,,40,,,50,50,,", ",40,40,40,,40,,,44,,,,,,,,,,,,,9,,,9,,,40,40,,,,,40,40,50,,40,,,50,", ",,,,,,,,50,,24,,,,27,,,110,,,,,,,,,,,113,113,113,,,24,40,,,,,40,40,40", "40,40,40,,25,50,,44,,25,,,,,,50,,9,,50,,,,,9,9,110,,,110,,,,,44,,25", ",,,,,,,50,50,,,50,24,,24,,9,50,24,24,,25,,,9,9,,,,,,,25,,,24,,,,,,,50", ",,,,,50,40,40,40,40,,,40,40,40,40,40,40,,,,,,,,,,25,,40,,,,27,,9,25", "25,,27,,,,,,,,,,,,44,,,,,,,,,,44,40,40,,,,50,,,,40,,50,9,50,,,,,,,,44", "9,,,40,,40,,,,,40,,,,110,,,110,,,27,,27,,27,,,,,9,9,,,9,,,,25,,,110", ",,110,25,110,,,,113,113,113,40,40,,,,,,,25,,,,,,,,,,9,,40,,,,,,,,113", "113,,,113,113,24,113,40,,,,,24,,,,,,,,110,24,,110,,110,,,,,,,,,,,,25", "110,25,,,,,25,,,,,,,9,,,,,,9,,27,110,,,,,,24,,,24,40,,,,,,,,,,,,,,,", ",,,,,24,,,,,113,113,113,113,24,113,,,,,,,,,,,113,113,113,113,,,,,,,", "40,,,,,,,,,40,,,,,,,,,27,,27,,27,24,,40,,,,,24,24,,113,113,113,113,", ",,113,24,,,,,,,,,,113,24,27,,,,27,,24,27,40,,,40,,,24,24,,40,,,,,,,", ",,40,,,40,,,40,,,,,,,,,27,,,,,,,,,,,24,,,,,24,,,,25,,,40,40,,24,,40", "40,,,40,,,,,,,,,,,27,,,40,27,27,,,,,40,40,,,,,,,,,,,24,,,,,,,,,,24,", ",,24,,25,40,,25,27,,,,,40,40,,,,,,,,,,,,,24,24,25,,24,,,,,,24,,,,,,", ",,,40,27,,,,40,,,,,40,,,,,24,,,,,40,24,,25,,,,,,40,,,,,,,,25,,,,,,,25", "25,,,,,,,,27,,,31,,,40,,,,,31,31,31,,,40,,,,25,,,,31,31,31,,25,25,24", ",,,,,24,,24,31,31,,,40,,40,40,,,40,,,,,,40,,,,,,,,,,,,25,,,,,25,,27", ",,,,,,,25,,,,40,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,,,,25,", ",,25,40,,,,,,,,,,,,40,,,,,,40,,40,,,,25,25,,,25,,,,,,25,,,,,,,,,,,31", "31,31,,,31,31,,,,,,,,,,,,,,25,31,,,31,31,31,31,31,31,31,31,31,31,31", "31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,,,,31,31,,,,,,,,31,,", ",,,,31,,31,,31,,,,,,,25,,,,,,25,,25,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,31,31,31,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,31,,31,,31,,,,,,,,,,,,,31,,,,,,,,,,31,31,31", ",,,,,31,,,,31,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,31,,,,,,,,,", "31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,31,,,31,31,31,31,,,,31,31,,,31", "31,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,31,,,,,", ",,,,,,,,31,31,31,31,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,31,,,,,,,,,,,,,,,,,31,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31"];

      racc_goto_check = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(2611, nil);

      idx = 0;

      ($a = ($e = clist).$each, $a._p = (TMP_7 = function(str){var self = TMP_7._s || this, $a, $b, TMP_8;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_8 = function(i){var self = TMP_8._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_8._s = self, TMP_8), $a).call($b)}, TMP_7._s = self, TMP_7), $a).call($e);

      racc_goto_pointer = [nil, 282, 134, nil, 92, 92, 80, 28, -50, 497, -309, -462, -464, nil, 7, 171, -7, -181, 110, -15, 24, 7, -125, -317, 871, 1104, -139, 1015, 108, 84, 0, 1723, -19, nil, nil, -152, 117, -173, -318, -237, 989, 117, 38, 32, 454, nil, -27, 43, -216, 58, 348, -231, 86, -65, -8, nil, nil, 72, 43, -104, -20, 52, -39, 322, -285, 129, -4, -307, -219, -387, nil, nil, nil, nil, nil, nil, nil, 209, 219, 205, nil, 195, -300, -587, -438, -310, 137, -145, 29, -548, 128, -168, -131, 116, -512, 113, -560, -415, -708, -398, -542, -185, -194, -400, -638, -653, -449, -437, -668, -439, 457, -563, -580, 566, -315, nil, -552, -554, -632, -640, -103, -295, 165, -281, 208, -17, nil, -25, -25, -621, -258, -409, nil, nil, 178, 177, 71, 177, 177, -109, -235, 183, -308, -307, -396, -579, -564, -721, nil, nil, -404];

      racc_goto_default = [nil, nil, nil, 3, nil, 4, 331, 277, nil, 311, nil, 793, nil, 276, nil, nil, nil, 11, 12, 18, 217, 306, nil, nil, 215, 216, nil, 270, 17, nil, 423, 21, 22, 23, 24, 647, nil, nil, nil, nil, 294, 394, 31, nil, nil, 33, 36, 35, nil, 212, 213, 343, nil, 121, 402, 120, 123, 72, 73, nil, 45, nil, 655, 395, nil, 396, 407, 601, 470, 268, 254, 46, 47, 48, 49, 50, 51, 52, nil, 255, 58, nil, nil, nil, nil, nil, nil, nil, 541, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 676, 530, nil, 677, nil, 520, nil, 522, nil, 781, 617, nil, nil, nil, 528, nil, nil, nil, 710, nil, nil, 406, nil, nil, nil, nil, nil, 71, 74, 75, nil, nil, nil, nil, nil, 577, nil, nil, nil, 521, 532, 533, 755, 536, 539, 272];

      racc_reduce_table = [0, 0, "racc_error", 1, 139, "_reduce_none", 2, 140, "_reduce_2", 0, 141, "_reduce_3", 1, 141, "_reduce_4", 3, 141, "_reduce_5", 2, 141, "_reduce_6", 1, 143, "_reduce_none", 4, 143, "_reduce_8", 4, 146, "_reduce_9", 2, 147, "_reduce_10", 0, 151, "_reduce_11", 1, 151, "_reduce_12", 3, 151, "_reduce_13", 2, 151, "_reduce_14", 0, 167, "_reduce_15", 4, 145, "_reduce_16", 3, 145, "_reduce_17", 3, 145, "_reduce_18", 3, 145, "_reduce_19", 2, 145, "_reduce_20", 3, 145, "_reduce_21", 3, 145, "_reduce_22", 3, 145, "_reduce_23", 3, 145, "_reduce_24", 3, 145, "_reduce_25", 4, 145, "_reduce_26", 1, 145, "_reduce_none", 3, 145, "_reduce_28", 3, 145, "_reduce_29", 6, 145, "_reduce_30", 5, 145, "_reduce_31", 5, 145, "_reduce_32", 5, 145, "_reduce_33", 5, 145, "_reduce_34", 3, 145, "_reduce_35", 3, 145, "_reduce_36", 3, 145, "_reduce_37", 3, 145, "_reduce_38", 1, 145, "_reduce_none", 3, 155, "_reduce_40", 3, 155, "_reduce_41", 1, 166, "_reduce_none", 3, 166, "_reduce_43", 3, 166, "_reduce_44", 3, 166, "_reduce_45", 2, 166, "_reduce_46", 1, 166, "_reduce_none", 1, 154, "_reduce_none", 1, 157, "_reduce_none", 1, 157, "_reduce_none", 1, 171, "_reduce_none", 4, 171, "_reduce_52", 4, 171, "_reduce_53", 0, 177, "_reduce_54", 5, 175, "_reduce_55", 2, 170, "_reduce_56", 3, 170, "_reduce_57", 4, 170, "_reduce_58", 5, 170, "_reduce_59", 4, 170, "_reduce_60", 5, 170, "_reduce_61", 2, 170, "_reduce_62", 2, 170, "_reduce_63", 2, 170, "_reduce_64", 2, 170, "_reduce_65", 2, 170, "_reduce_66", 1, 156, "_reduce_67", 3, 156, "_reduce_68", 1, 181, "_reduce_69", 3, 181, "_reduce_70", 1, 180, "_reduce_none", 2, 180, "_reduce_72", 3, 180, "_reduce_73", 5, 180, "_reduce_74", 2, 180, "_reduce_75", 4, 180, "_reduce_76", 2, 180, "_reduce_77", 4, 180, "_reduce_78", 1, 180, "_reduce_79", 3, 180, "_reduce_80", 1, 184, "_reduce_none", 3, 184, "_reduce_82", 2, 183, "_reduce_83", 3, 183, "_reduce_84", 1, 186, "_reduce_85", 3, 186, "_reduce_86", 1, 185, "_reduce_87", 1, 185, "_reduce_88", 4, 185, "_reduce_89", 3, 185, "_reduce_90", 3, 185, "_reduce_91", 3, 185, "_reduce_92", 3, 185, "_reduce_93", 2, 185, "_reduce_94", 1, 185, "_reduce_95", 1, 163, "_reduce_96", 1, 163, "_reduce_97", 4, 163, "_reduce_98", 3, 163, "_reduce_99", 3, 163, "_reduce_100", 3, 163, "_reduce_101", 3, 163, "_reduce_102", 2, 163, "_reduce_103", 1, 163, "_reduce_104", 1, 189, "_reduce_105", 1, 189, "_reduce_none", 2, 190, "_reduce_107", 1, 190, "_reduce_108", 3, 190, "_reduce_109", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 194, "_reduce_115", 1, 194, "_reduce_none", 1, 152, "_reduce_none", 1, 152, "_reduce_none", 1, 153, "_reduce_119", 0, 197, "_reduce_120", 4, 153, "_reduce_121", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 3, 169, "_reduce_192", 5, 169, "_reduce_193", 3, 169, "_reduce_194", 5, 169, "_reduce_195", 6, 169, "_reduce_196", 5, 169, "_reduce_197", 5, 169, "_reduce_198", 5, 169, "_reduce_199", 5, 169, "_reduce_200", 4, 169, "_reduce_201", 3, 169, "_reduce_202", 3, 169, "_reduce_203", 3, 169, "_reduce_204", 3, 169, "_reduce_205", 3, 169, "_reduce_206", 3, 169, "_reduce_207", 3, 169, "_reduce_208", 3, 169, "_reduce_209", 3, 169, "_reduce_210", 4, 169, "_reduce_211", 4, 169, "_reduce_212", 2, 169, "_reduce_213", 2, 169, "_reduce_214", 3, 169, "_reduce_215", 3, 169, "_reduce_216", 3, 169, "_reduce_217", 3, 169, "_reduce_218", 3, 169, "_reduce_219", 3, 169, "_reduce_220", 3, 169, "_reduce_221", 3, 169, "_reduce_222", 3, 169, "_reduce_223", 3, 169, "_reduce_224", 3, 169, "_reduce_225", 3, 169, "_reduce_226", 3, 169, "_reduce_227", 2, 169, "_reduce_228", 2, 169, "_reduce_229", 3, 169, "_reduce_230", 3, 169, "_reduce_231", 3, 169, "_reduce_232", 3, 169, "_reduce_233", 3, 169, "_reduce_234", 6, 169, "_reduce_235", 1, 169, "_reduce_none", 1, 165, "_reduce_none", 1, 199, "_reduce_none", 2, 199, "_reduce_none", 4, 199, "_reduce_240", 2, 199, "_reduce_241", 3, 204, "_reduce_242", 0, 205, "_reduce_243", 1, 205, "_reduce_none", 0, 160, "_reduce_245", 1, 160, "_reduce_none", 2, 160, "_reduce_none", 4, 160, "_reduce_248", 2, 160, "_reduce_249", 1, 179, "_reduce_250", 2, 179, "_reduce_251", 2, 179, "_reduce_252", 4, 179, "_reduce_253", 1, 179, "_reduce_254", 0, 208, "_reduce_255", 2, 174, "_reduce_256", 2, 207, "_reduce_257", 2, 206, "_reduce_258", 0, 206, "_reduce_259", 1, 201, "_reduce_260", 2, 201, "_reduce_261", 3, 201, "_reduce_262", 4, 201, "_reduce_263", 3, 164, "_reduce_264", 4, 164, "_reduce_265", 2, 164, "_reduce_266", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_275", 3, 198, "_reduce_276", 0, 230, "_reduce_277", 5, 198, "_reduce_278", 3, 198, "_reduce_279", 3, 198, "_reduce_280", 2, 198, "_reduce_281", 3, 198, "_reduce_282", 3, 198, "_reduce_283", 1, 198, "_reduce_284", 4, 198, "_reduce_285", 3, 198, "_reduce_286", 1, 198, "_reduce_287", 5, 198, "_reduce_288", 4, 198, "_reduce_289", 3, 198, "_reduce_290", 2, 198, "_reduce_291", 1, 198, "_reduce_none", 2, 198, "_reduce_293", 2, 198, "_reduce_294", 6, 198, "_reduce_295", 6, 198, "_reduce_296", 0, 231, "_reduce_297", 0, 232, "_reduce_298", 7, 198, "_reduce_299", 0, 233, "_reduce_300", 0, 234, "_reduce_301", 7, 198, "_reduce_302", 5, 198, "_reduce_303", 4, 198, "_reduce_304", 0, 235, "_reduce_305", 0, 236, "_reduce_306", 9, 198, "_reduce_307", 0, 237, "_reduce_308", 6, 198, "_reduce_309", 0, 238, "_reduce_310", 7, 198, "_reduce_311", 0, 239, "_reduce_312", 5, 198, "_reduce_313", 0, 240, "_reduce_314", 6, 198, "_reduce_315", 0, 241, "_reduce_316", 0, 242, "_reduce_317", 9, 198, "_reduce_318", 1, 198, "_reduce_319", 1, 198, "_reduce_320", 1, 198, "_reduce_321", 1, 198, "_reduce_322", 1, 159, "_reduce_none", 1, 220, "_reduce_none", 1, 220, "_reduce_none", 2, 220, "_reduce_326", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 221, "_reduce_none", 5, 221, "_reduce_330", 1, 149, "_reduce_none", 2, 149, "_reduce_332", 1, 224, "_reduce_none", 1, 224, "_reduce_none", 1, 243, "_reduce_335", 3, 243, "_reduce_336", 1, 246, "_reduce_337", 3, 246, "_reduce_338", 1, 245, "_reduce_none", 4, 245, "_reduce_340", 6, 245, "_reduce_341", 3, 245, "_reduce_342", 5, 245, "_reduce_343", 2, 245, "_reduce_344", 4, 245, "_reduce_345", 1, 245, "_reduce_346", 3, 245, "_reduce_347", 6, 247, "_reduce_348", 8, 247, "_reduce_349", 4, 247, "_reduce_350", 6, 247, "_reduce_351", 4, 247, "_reduce_352", 2, 247, "_reduce_none", 6, 247, "_reduce_354", 2, 247, "_reduce_355", 4, 247, "_reduce_356", 6, 247, "_reduce_357", 2, 247, "_reduce_358", 4, 247, "_reduce_359", 2, 247, "_reduce_360", 4, 247, "_reduce_361", 1, 247, "_reduce_362", 0, 176, "_reduce_363", 1, 176, "_reduce_364", 3, 253, "_reduce_365", 1, 253, "_reduce_366", 4, 253, "_reduce_367", 0, 254, "_reduce_368", 2, 254, "_reduce_369", 1, 255, "_reduce_370", 3, 255, "_reduce_371", 1, 256, "_reduce_372", 1, 256, "_reduce_none", 0, 260, "_reduce_374", 3, 219, "_reduce_375", 4, 258, "_reduce_376", 1, 258, "_reduce_377", 3, 259, "_reduce_378", 3, 259, "_reduce_379", 0, 263, "_reduce_380", 5, 262, "_reduce_381", 2, 172, "_reduce_382", 4, 172, "_reduce_383", 4, 172, "_reduce_384", 2, 218, "_reduce_385", 4, 218, "_reduce_386", 4, 218, "_reduce_387", 3, 218, "_reduce_388", 3, 218, "_reduce_389", 3, 218, "_reduce_390", 2, 218, "_reduce_391", 1, 218, "_reduce_392", 4, 218, "_reduce_393", 0, 265, "_reduce_394", 5, 217, "_reduce_395", 0, 266, "_reduce_396", 5, 217, "_reduce_397", 5, 223, "_reduce_398", 1, 267, "_reduce_399", 1, 267, "_reduce_none", 6, 148, "_reduce_401", 0, 148, "_reduce_402", 1, 268, "_reduce_403", 1, 268, "_reduce_none", 1, 268, "_reduce_none", 2, 269, "_reduce_406", 1, 269, "_reduce_none", 2, 150, "_reduce_408", 1, 150, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 210, "_reduce_413", 1, 271, "_reduce_414", 2, 271, "_reduce_415", 3, 272, "_reduce_416", 1, 272, "_reduce_417", 1, 272, "_reduce_418", 3, 211, "_reduce_419", 4, 212, "_reduce_420", 3, 213, "_reduce_421", 0, 276, "_reduce_422", 3, 276, "_reduce_423", 1, 277, "_reduce_424", 2, 277, "_reduce_425", 3, 214, "_reduce_426", 0, 279, "_reduce_427", 3, 279, "_reduce_428", 0, 273, "_reduce_429", 2, 273, "_reduce_430", 0, 274, "_reduce_431", 2, 274, "_reduce_432", 0, 275, "_reduce_433", 2, 275, "_reduce_434", 1, 278, "_reduce_435", 2, 278, "_reduce_436", 0, 281, "_reduce_437", 4, 278, "_reduce_438", 1, 280, "_reduce_439", 1, 280, "_reduce_440", 1, 280, "_reduce_441", 1, 280, "_reduce_none", 1, 195, "_reduce_443", 3, 196, "_reduce_444", 1, 270, "_reduce_445", 1, 270, "_reduce_446", 2, 270, "_reduce_447", 2, 270, "_reduce_448", 1, 187, "_reduce_449", 1, 187, "_reduce_450", 1, 187, "_reduce_451", 1, 187, "_reduce_452", 1, 187, "_reduce_453", 1, 188, "_reduce_454", 1, 188, "_reduce_455", 1, 188, "_reduce_456", 1, 188, "_reduce_457", 1, 188, "_reduce_458", 1, 188, "_reduce_459", 1, 188, "_reduce_460", 1, 215, "_reduce_461", 1, 215, "_reduce_462", 1, 158, "_reduce_463", 1, 158, "_reduce_464", 1, 162, "_reduce_465", 1, 162, "_reduce_466", 1, 225, "_reduce_467", 3, 225, "_reduce_468", 2, 225, "_reduce_469", 3, 227, "_reduce_470", 2, 227, "_reduce_471", 6, 261, "_reduce_472", 8, 261, "_reduce_473", 4, 261, "_reduce_474", 6, 261, "_reduce_475", 4, 261, "_reduce_476", 6, 261, "_reduce_477", 2, 261, "_reduce_478", 4, 261, "_reduce_479", 6, 261, "_reduce_480", 2, 261, "_reduce_481", 4, 261, "_reduce_482", 2, 261, "_reduce_483", 4, 261, "_reduce_484", 1, 261, "_reduce_485", 0, 261, "_reduce_486", 1, 257, "_reduce_487", 1, 257, "_reduce_488", 1, 257, "_reduce_489", 1, 257, "_reduce_490", 1, 244, "_reduce_none", 1, 244, "_reduce_none", 1, 283, "_reduce_493", 3, 283, "_reduce_494", 1, 248, "_reduce_495", 3, 248, "_reduce_496", 3, 284, "_reduce_497", 3, 285, "_reduce_498", 1, 249, "_reduce_499", 3, 249, "_reduce_500", 1, 282, "_reduce_501", 3, 282, "_reduce_502", 1, 286, "_reduce_none", 1, 286, "_reduce_none", 2, 250, "_reduce_505", 1, 250, "_reduce_506", 1, 287, "_reduce_none", 1, 287, "_reduce_none", 2, 252, "_reduce_509", 2, 251, "_reduce_510", 0, 251, "_reduce_511", 1, 228, "_reduce_none", 3, 228, "_reduce_513", 0, 216, "_reduce_514", 2, 216, "_reduce_none", 1, 203, "_reduce_516", 3, 203, "_reduce_517", 3, 288, "_reduce_518", 2, 288, "_reduce_519", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 264, "_reduce_none", 1, 264, "_reduce_none", 1, 264, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 0, 142, "_reduce_none", 1, 142, "_reduce_none", 0, 168, "_reduce_none", 1, 168, "_reduce_none", 2, 182, "_reduce_536", 2, 161, "_reduce_537", 0, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 226, "_reduce_541", 1, 226, "_reduce_none", 1, 144, "_reduce_none", 2, 144, "_reduce_none", 0, 200, "_reduce_545"];

      racc_reduce_n = 546;

      racc_shift_n = 955;

      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "k__ENCODING__", 50, "tIDENTIFIER", 51, "tFID", 52, "tGVAR", 53, "tIVAR", 54, "tCONSTANT", 55, "tLABEL", 56, "tCVAR", 57, "tNTH_REF", 58, "tBACK_REF", 59, "tSTRING_CONTENT", 60, "tINTEGER", 61, "tFLOAT", 62, "tREGEXP_END", 63, "tUPLUS", 64, "tUMINUS", 65, "tUMINUS_NUM", 66, "tPOW", 67, "tCMP", 68, "tEQ", 69, "tEQQ", 70, "tNEQ", 71, "tGEQ", 72, "tLEQ", 73, "tANDOP", 74, "tOROP", 75, "tMATCH", 76, "tNMATCH", 77, "tDOT", 78, "tDOT2", 79, "tDOT3", 80, "tAREF", 81, "tASET", 82, "tLSHFT", 83, "tRSHFT", 84, "tCOLON2", 85, "tCOLON3", 86, "tOP_ASGN", 87, "tASSOC", 88, "tLPAREN", 89, "tLPAREN2", 90, "tRPAREN", 91, "tLPAREN_ARG", 92, "tLBRACK", 93, "tLBRACK2", 94, "tRBRACK", 95, "tLBRACE", 96, "tLBRACE_ARG", 97, "tSTAR", 98, "tSTAR2", 99, "tAMPER", 100, "tAMPER2", 101, "tTILDE", 102, "tPERCENT", 103, "tDIVIDE", 104, "tPLUS", 105, "tMINUS", 106, "tLT", 107, "tGT", 108, "tPIPE", 109, "tBANG", 110, "tCARET", 111, "tLCURLY", 112, "tRCURLY", 113, "tBACK_REF2", 114, "tSYMBEG", 115, "tSTRING_BEG", 116, "tXSTRING_BEG", 117, "tREGEXP_BEG", 118, "tREGEXP_OPT", 119, "tWORDS_BEG", 120, "tQWORDS_BEG", 121, "tSTRING_DBEG", 122, "tSTRING_DVAR", 123, "tSTRING_END", 124, "tSTRING", 125, "tSYMBOL", 126, "tNL", 127, "tEH", 128, "tCOLON", 129, "tCOMMA", 130, "tSPACE", 131, "tSEMI", 132, "tLAMBDA", 133, "tLAMBEG", 134, "tCHARACTER", 135, "tEQL", 136, "tLOWEST", 137);

      racc_nt_base = 138;

      racc_use_result_var = true;

      $opal.cdecl($scope, 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);

      $opal.cdecl($scope, 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "k__ENCODING__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tREGEXP_END", "tUPLUS", "tUMINUS", "tUMINUS_NUM", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tLBRACK", "tLBRACK2", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tREGEXP_OPT", "tWORDS_BEG", "tQWORDS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tCHARACTER", "tEQL", "tLOWEST", "$start", "program", "top_compstmt", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "fitem", "undef_list", "expr_value", "command_asgn", "mlhs", "command_call", "var_lhs", "primary_value", "opt_call_args", "rbracket", "backref", "lhs", "mrhs", "arg_value", "expr", "@1", "opt_nl", "arg", "command", "block_command", "block_call", "operation2", "command_args", "cmd_brace_block", "opt_block_param", "@2", "operation", "call_args", "mlhs_basic", "mlhs_inner", "rparen", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "user_variable", "keyword_variable", "cname", "cpath", "fname", "op", "reswords", "fsym", "symbol", "dsym", "@3", "primary", "aref_args", "none", "args", "trailer", "assocs", "paren_args", "opt_paren_args", "opt_block_arg", "block_arg", "@4", "literal", "strings", "xstring", "regexp", "words", "qwords", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "do", "case_body", "for_var", "superclass", "term", "f_arglist", "singleton", "dot_or_colon", "@5", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "@16", "@17", "f_marg", "f_norm_arg", "f_margs", "f_marg_list", "block_param", "f_arg", "f_block_optarg", "f_rest_arg", "opt_f_block_arg", "f_block_arg", "block_param_def", "opt_bv_decl", "bv_decls", "bvar", "f_bad_arg", "f_larglist", "lambda_body", "@18", "f_args", "do_block", "@19", "operation3", "@20", "@21", "cases", "exc_list", "exc_var", "numeric", "string", "string1", "string_contents", "xstring_contents", "regexp_contents", "word_list", "word", "string_content", "qword_list", "string_dvar", "@22", "f_optarg", "f_arg_item", "f_opt", "f_block_opt", "restarg_mark", "blkarg_mark", "assoc"]);

      $opal.cdecl($scope, 'Racc_debug_parser', false);

      def.$_reduce_2 = function(val, _values, result) {
        var self = this;

        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      };

      def.$_reduce_3 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_4 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_5 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_6 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_8 = function(val, _values, result) {
        var self = this;

        result = self.builder.$preexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_9 = function(val, _values, result) {
        var $a, $b, self = this, rescue_bodies = nil, else_t = nil, else_ = nil, ensure_t = nil, ensure_ = nil;

        rescue_bodies = val['$[]'](1);
        $a = $opal.to_ary(val['$[]'](2)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        $a = $opal.to_ary(val['$[]'](3)), ensure_t = ($a[0] == null ? nil : $a[0]), ensure_ = ($a[1] == null ? nil : $a[1]);
        if ((($a = ($b = rescue_bodies['$empty?'](), $b !== false && $b !== nil ?else_['$nil?']()['$!']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("warning", "useless_else", nil, else_t)};
        result = self.builder.$begin_body(val['$[]'](0), rescue_bodies, else_t, else_, ensure_t, ensure_);
        return result;
      };

      def.$_reduce_10 = function(val, _values, result) {
        var self = this;

        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      };

      def.$_reduce_11 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_12 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_13 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_14 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_15 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_16 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      };

      def.$_reduce_17 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$gvar(val['$[]'](2)));
        return result;
      };

      def.$_reduce_18 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$back_ref(val['$[]'](2)));
        return result;
      };

      def.$_reduce_19 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "nth_ref_alias", nil, val['$[]'](2));
        return result;
      };

      def.$_reduce_20 = function(val, _values, result) {
        var self = this;

        result = self.builder.$undef_method(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_21 = function(val, _values, result) {
        var self = this;

        result = self.builder.$condition_mod(val['$[]'](0), nil, val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_22 = function(val, _values, result) {
        var self = this;

        result = self.builder.$condition_mod(nil, val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_23 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop_mod("while", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_24 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop_mod("until", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_25 = function(val, _values, result) {
        var self = this, rescue_body = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      };

      def.$_reduce_26 = function(val, _values, result) {
        var self = this;

        result = self.builder.$postexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_28 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_29 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_30 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_31 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_32 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_33 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_34 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_35 = function(val, _values, result) {
        var self = this;

        self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_36 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_37 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_38 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_40 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_41 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_43 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_44 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_45 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](2), nil);
        return result;
      };

      def.$_reduce_46 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_52 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_53 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_54 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_55 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_56 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_57 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        $a = $opal.to_ary(val['$[]'](2)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_58 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_59 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_60 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_61 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_62 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("super", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_63 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_64 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("return", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_65 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("break", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_66 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("next", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_67 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_68 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_69 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_70 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_72 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(val['$[]'](1));
        return result;
      };

      def.$_reduce_73 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_74 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_75 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1)));
        return result;
      };

      def.$_reduce_76 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1))).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_77 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_78 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_79 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0))];
        return result;
      };

      def.$_reduce_80 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0))].concat(val['$[]'](2));
        return result;
      };

      def.$_reduce_82 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_83 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_84 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_85 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_86 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_87 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_88 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_89 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_90 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_91 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_92 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_93 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_94 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      };

      def.$_reduce_95 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_96 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_97 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_98 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_99 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_100 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_101 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_102 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_103 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      };

      def.$_reduce_104 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_105 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "module_name_const", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_107 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_108 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const(val['$[]'](0));
        return result;
      };

      def.$_reduce_109 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_115 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol(val['$[]'](0));
        return result;
      };

      def.$_reduce_119 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_120 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_121 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](3));
        return result;
      };

      def.$_reduce_192 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_193 = function(val, _values, result) {
        var self = this, rescue_body = nil, rescue_ = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        rescue_ = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), rescue_);
        return result;
      };

      def.$_reduce_194 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_195 = function(val, _values, result) {
        var self = this, rescue_body = nil, rescue_ = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        rescue_ = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), rescue_);
        return result;
      };

      def.$_reduce_196 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_197 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_198 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_199 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_200 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "dynamic_const", nil, val['$[]'](2), [val['$[]'](3)]);
        return result;
      };

      def.$_reduce_201 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "dynamic_const", nil, val['$[]'](1), [val['$[]'](2)]);
        return result;
      };

      def.$_reduce_202 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_203 = function(val, _values, result) {
        var self = this;

        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_204 = function(val, _values, result) {
        var self = this;

        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_205 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_206 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_207 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_208 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_209 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_210 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_211 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(self.builder.$integer(val['$[]'](1)), val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_212 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(self.builder.$float(val['$[]'](1)), val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_213 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_214 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_215 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_216 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_217 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_218 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_219 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_220 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_221 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_222 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_223 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_224 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_225 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_226 = function(val, _values, result) {
        var self = this;

        result = self.builder.$match_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_227 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_228 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_229 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_230 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_231 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_232 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_233 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_234 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), nil, [val['$[]'](2)], nil);
        return result;
      };

      def.$_reduce_235 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ternary(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_240 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_241 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      };

      def.$_reduce_242 = function(val, _values, result) {
        var self = this;

        result = val;
        return result;
      };

      def.$_reduce_243 = function(val, _values, result) {
        var self = this;

        result = [nil, [], nil];
        return result;
      };

      def.$_reduce_245 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_248 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_249 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      };

      def.$_reduce_250 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_251 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_252 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        result.$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_253 = function(val, _values, result) {
        var self = this, assocs = nil;

        assocs = self.builder.$associate(nil, val['$[]'](2), nil);
        result = val['$[]'](0)['$<<'](assocs);
        result.$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_254 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_255 = function(val, _values, result) {
        var self = this;

        result = self.lexer.$cmdarg().$dup();
        self.lexer.$cmdarg().$push(true);
        return result;
      };

      def.$_reduce_256 = function(val, _values, result) {
        var self = this;

        self.lexer['$cmdarg='](val['$[]'](0));
        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_257 = function(val, _values, result) {
        var self = this;

        result = self.builder.$block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_258 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_259 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_260 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_261 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_262 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_263 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_264 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_265 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_266 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_275 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(nil, nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_276 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin_keyword(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_277 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_endarg");
        return result;
      };

      def.$_reduce_278 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](4));
        return result;
      };

      def.$_reduce_279 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_280 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_281 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_282 = function(val, _values, result) {
        var self = this;

        result = self.builder.$array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_283 = function(val, _values, result) {
        var self = this;

        result = self.builder.$associate(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_284 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("return", val['$[]'](0));
        return result;
      };

      def.$_reduce_285 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_286 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), [], val['$[]'](2));
        return result;
      };

      def.$_reduce_287 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0));
        return result;
      };

      def.$_reduce_288 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), val['$[]'](2), [val['$[]'](3)], val['$[]'](4));
        return result;
      };

      def.$_reduce_289 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_290 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), nil, val['$[]'](2));
        return result;
      };

      def.$_reduce_291 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(nil, nil, val['$[]'](0));
        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_293 = function(val, _values, result) {
        var $a, self = this, begin_t = nil, args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(val['$[]'](0), begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_294 = function(val, _values, result) {
        var self = this, lambda_call = nil;

        lambda_call = self.builder.$call_lambda(val['$[]'](0));
        result = self.builder.$block(lambda_call, self.$begin_t(), self.$args(), self.$body(), self.$end_t());
        return result;
      };

      def.$_reduce_295 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, val['$[]'](5));
        return result;
      };

      def.$_reduce_296 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), else_, else_t, val['$[]'](3), val['$[]'](5));
        return result;
      };

      def.$_reduce_297 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_298 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_299 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop("while", val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](5), val['$[]'](6));
        return result;
      };

      def.$_reduce_300 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_301 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_302 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop("until", val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](5), val['$[]'](6));
        return result;
      };

      def.$_reduce_303 = function(val, _values, result) {
        var self = this;

        result = self.$new_while(val['$[]'](5), val['$[]'](2), true);
        return result;
      };

      def.$_reduce_304 = function(val, _values, result) {
        var self = this;

        self.$lexer().$cond().$push(true);
        return result;
      };

      def.$_reduce_305 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_306 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_307 = function(val, _values, result) {
        var self = this;

        result = self.builder.$for(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5), val['$[]'](7), val['$[]'](8));
        return result;
      };

      def.$_reduce_308 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_309 = function(val, _values, result) {
        var $a, self = this, lt_t = nil, superclass = nil;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "class_in_def", nil, val['$[]'](0))};
        $a = $opal.to_ary(val['$[]'](2)), lt_t = ($a[0] == null ? nil : $a[0]), superclass = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$def_class(val['$[]'](0), val['$[]'](1), lt_t, superclass, val['$[]'](4), val['$[]'](5));
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_310 = function(val, _values, result) {
        var self = this;

        result = self.def_level;
        self.def_level = 0;
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_311 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_sclass(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](5), val['$[]'](6));
        self.static_env.$unextend();
        self.def_level = val['$[]'](4);
        return result;
      };

      def.$_reduce_312 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_313 = function(val, _values, result) {
        var $a, self = this;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "module_in_def", nil, val['$[]'](0))};
        result = self.builder.$def_module(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_314 = function(val, _values, result) {
        var self = this;

        self.def_level = self.def_level['$+'](1);
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_315 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_method(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4), val['$[]'](5));
        self.static_env.$unextend();
        self.def_level = self.def_level['$-'](1);
        return result;
      };

      def.$_reduce_316 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_317 = function(val, _values, result) {
        var self = this;

        self.def_level = self.def_level['$+'](1);
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_318 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_singleton(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](6), val['$[]'](7), val['$[]'](8));
        self.static_env.$unextend();
        self.def_level = self.def_level['$-'](1);
        return result;
      };

      def.$_reduce_319 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("break", val['$[]'](0));
        return result;
      };

      def.$_reduce_320 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("next", val['$[]'](0));
        return result;
      };

      def.$_reduce_321 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("redo", val['$[]'](0));
        return result;
      };

      def.$_reduce_322 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("retry", val['$[]'](0));
        return result;
      };

      def.$_reduce_326 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_330 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = [val['$[]'](0), self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, nil)];
        return result;
      };

      def.$_reduce_332 = function(val, _values, result) {
        var self = this;

        result = val;
        return result;
      };

      def.$_reduce_335 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$arg(val['$[]'](0));
        return result;
      };

      def.$_reduce_336 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_337 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_338 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_340 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](3)['$[]'](0));
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_341 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](3)['$[]'](0));
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3))).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_342 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2)));
        return result;
      };

      def.$_reduce_343 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_344 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_345 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))].concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_346 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_347 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))].concat(val['$[]'](2));
        return result;
      };

      def.$_reduce_348 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_349 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      };

      def.$_reduce_350 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_351 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_352 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_354 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_355 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_356 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_357 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_358 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_359 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_360 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_361 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_362 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_363 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, [], nil);
        return result;
      };

      def.$_reduce_364 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_value");
        return result;
      };

      def.$_reduce_365 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_366 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), [], val['$[]'](0));
        return result;
      };

      def.$_reduce_367 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      };

      def.$_reduce_368 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_369 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_370 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_371 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_372 = function(val, _values, result) {
        var self = this;

        result = self.builder.$shadowarg(val['$[]'](0));
        return result;
      };

      def.$_reduce_374 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_375 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1), val['$[]'](2)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_376 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      };

      def.$_reduce_377 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_378 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1), val['$[]'](2)];
        return result;
      };

      def.$_reduce_379 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1), val['$[]'](2)];
        return result;
      };

      def.$_reduce_380 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_381 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_382 = function(val, _values, result) {
        var $a, self = this, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), block_args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(val['$[]'](0), begin_t, block_args, body, end_t);
        return result;
      };

      def.$_reduce_383 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_384 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_385 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_386 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_387 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_388 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_389 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](2)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_390 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](2)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_391 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_392 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("zsuper", val['$[]'](0));
        return result;
      };

      def.$_reduce_393 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_394 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_395 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_396 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_397 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_398 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$when(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3))].concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_399 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_401 = function(val, _values, result) {
        var $a, self = this, assoc_t = nil, exc_var = nil, exc_list = nil;

        $a = $opal.to_ary(val['$[]'](2)), assoc_t = ($a[0] == null ? nil : $a[0]), exc_var = ($a[1] == null ? nil : $a[1]);
        if ((($a = val['$[]'](1)) !== nil && (!$a._isBoolean || $a == true))) {
          exc_list = self.builder.$array(nil, val['$[]'](1), nil)};
        result = [self.builder.$rescue_body(val['$[]'](0), exc_list, assoc_t, exc_var, val['$[]'](3), val['$[]'](4))].concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_402 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_403 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_406 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_408 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_413 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_compose(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_414 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_415 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_416 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_417 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string(val['$[]'](0));
        return result;
      };

      def.$_reduce_418 = function(val, _values, result) {
        var self = this;

        result = self.builder.$character(val['$[]'](0));
        return result;
      };

      def.$_reduce_419 = function(val, _values, result) {
        var self = this;

        result = self.builder.$xstring_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_420 = function(val, _values, result) {
        var self = this, opts = nil;

        opts = self.builder.$regexp_options(val['$[]'](3));
        result = self.builder.$regexp_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2), opts);
        return result;
      };

      def.$_reduce_421 = function(val, _values, result) {
        var self = this;

        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_422 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_423 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      };

      def.$_reduce_424 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_425 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_426 = function(val, _values, result) {
        var self = this;

        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_427 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_428 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$string_internal(val['$[]'](1)));
        return result;
      };

      def.$_reduce_429 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_430 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_431 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_432 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_433 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_434 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_435 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_internal(val['$[]'](0));
        return result;
      };

      def.$_reduce_436 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_437 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(false);
        self.lexer.$cmdarg().$push(false);
        return result;
      };

      def.$_reduce_438 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$lexpop();
        self.lexer.$cmdarg().$lexpop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_439 = function(val, _values, result) {
        var self = this;

        result = self.builder.$gvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_440 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ivar(val['$[]'](0));
        return result;
      };

      def.$_reduce_441 = function(val, _values, result) {
        var self = this;

        result = self.builder.$cvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_443 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol(val['$[]'](0));
        return result;
      };

      def.$_reduce_444 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_445 = function(val, _values, result) {
        var self = this;

        result = self.builder.$integer(val['$[]'](0));
        return result;
      };

      def.$_reduce_446 = function(val, _values, result) {
        var self = this;

        result = self.builder.$float(val['$[]'](0));
        return result;
      };

      def.$_reduce_447 = function(val, _values, result) {
        var self = this;

        result = self.builder.$negate(val['$[]'](0), self.builder.$integer(val['$[]'](1)));
        return result;
      };

      def.$_reduce_448 = function(val, _values, result) {
        var self = this;

        result = self.builder.$negate(val['$[]'](0), self.builder.$float(val['$[]'](1)));
        return result;
      };

      def.$_reduce_449 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ident(val['$[]'](0));
        return result;
      };

      def.$_reduce_450 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ivar(val['$[]'](0));
        return result;
      };

      def.$_reduce_451 = function(val, _values, result) {
        var self = this;

        result = self.builder.$gvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_452 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const(val['$[]'](0));
        return result;
      };

      def.$_reduce_453 = function(val, _values, result) {
        var self = this;

        result = self.builder.$cvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_454 = function(val, _values, result) {
        var self = this;

        result = self.builder.$nil(val['$[]'](0));
        return result;
      };

      def.$_reduce_455 = function(val, _values, result) {
        var self = this;

        result = self.builder.$self(val['$[]'](0));
        return result;
      };

      def.$_reduce_456 = function(val, _values, result) {
        var self = this;

        result = self.builder.$true(val['$[]'](0));
        return result;
      };

      def.$_reduce_457 = function(val, _values, result) {
        var self = this;

        result = self.builder.$false(val['$[]'](0));
        return result;
      };

      def.$_reduce_458 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__FILE__(val['$[]'](0));
        return result;
      };

      def.$_reduce_459 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__LINE__(val['$[]'](0));
        return result;
      };

      def.$_reduce_460 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__ENCODING__(val['$[]'](0));
        return result;
      };

      def.$_reduce_461 = function(val, _values, result) {
        var self = this;

        result = self.builder.$accessible(val['$[]'](0));
        return result;
      };

      def.$_reduce_462 = function(val, _values, result) {
        var self = this;

        result = self.builder.$accessible(val['$[]'](0));
        return result;
      };

      def.$_reduce_463 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_464 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_465 = function(val, _values, result) {
        var self = this;

        result = self.builder.$nth_ref(val['$[]'](0));
        return result;
      };

      def.$_reduce_466 = function(val, _values, result) {
        var self = this;

        result = self.builder.$back_ref(val['$[]'](0));
        return result;
      };

      def.$_reduce_467 = function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      };

      def.$_reduce_468 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_469 = function(val, _values, result) {
        var self = this;

        self.$yyerrok();
        result = nil;
        return result;
      };

      def.$_reduce_470 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        self.lexer['$state=']("expr_value");
        return result;
      };

      def.$_reduce_471 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_472 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_473 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      };

      def.$_reduce_474 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_475 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_476 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_477 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_478 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_479 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_480 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_481 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_482 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_483 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_484 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_485 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_486 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_487 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_const", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_488 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_ivar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_489 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_gvar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_490 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_cvar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_493 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$arg(val['$[]'](0));
        return result;
      };

      def.$_reduce_494 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_495 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_496 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_497 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_498 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_499 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_500 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_501 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_502 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_505 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_506 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_509 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = self.builder.$blockarg(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_510 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_511 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_513 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_514 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_516 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_517 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_518 = function(val, _values, result) {
        var self = this;

        result = self.builder.$pair(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_519 = function(val, _values, result) {
        var self = this;

        result = self.builder.$pair_keyword(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_536 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_537 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_541 = function(val, _values, result) {
        var self = this;

        self.$yyerrok();
        return result;
      };

      def.$_reduce_545 = function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      };

      return (def.$_reduce_none = function(val, _values, result) {
        var self = this;

        return val['$[]'](0);
      }, nil) && '_reduce_none';
    })(self, (($a = ((($b = $scope.Parser) == null ? $opal.cm('Parser') : $b))._scope).Base == null ? $a.cm('Base') : $a.Base))
    
  })(self);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash = $opal.hash;

  $opal.add_stubs(['$check_for_encoding_support', '$new', '$each', '$empty?', '$[]=', '$to_i', '$+', '$split', '$compstmt', '$[]', '$<<', '$preexe', '$!', '$nil?', '$diagnostic', '$begin_body', '$in_def?', '$state=', '$alias', '$gvar', '$back_ref', '$undef_method', '$condition_mod', '$loop_mod', '$rescue_body', '$postexe', '$multi_assign', '$op_assign', '$index', '$call_method', '$assign', '$array', '$logical_op', '$not_op', '$extend_dynamic', '$unextend', '$block', '$keyword_cmd', '$multi_lhs', '$begin', '$push', '$splat', '$concat', '$assignable', '$index_asgn', '$attr_asgn', '$const_fetch', '$const_global', '$const', '$symbol', '$const_op_assignable', '$range_inclusive', '$range_exclusive', '$binary_op', '$unary_op', '$integer', '$float', '$match_op', '$ternary', '$associate', '$dup', '$cmdarg', '$cmdarg=', '$block_pass', '$clear', '$begin_keyword', '$call_lambda', '$begin_t', '$args', '$body', '$end_t', '$condition', '$cond', '$pop', '$loop', '$case', '$when_bodies', '$else_t', '$else_body', '$for', '$extend_static', '$def_class', '$def_sclass', '$def_module', '$def_method', '$-', '$def_singleton', '$declare', '$arg', '$restarg', '$shadowarg', '$when', '$string_compose', '$string', '$character', '$xstring_compose', '$regexp_options', '$regexp_compose', '$words_compose', '$word', '$symbols_compose', '$string_internal', '$symbol_internal', '$lexpop', '$ivar', '$cvar', '$symbol_compose', '$negate', '$ident', '$nil', '$self', '$true', '$false', '$__FILE__', '$__LINE__', '$__ENCODING__', '$accessible', '$nth_ref', '$yyerrok', '$check_kwarg_name', '$kwoptarg', '$kwrestarg', '$optarg', '$blockarg', '$pair', '$pair_keyword', '$kwsplat']);
  ;
  ;
  (($a = $scope.Parser) == null ? $opal.cm('Parser') : $a).$check_for_encoding_support();
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a, $b;

    (function($base, $super) {
      function $Ruby20(){};
      var self = $Ruby20 = $klass($base, $super, 'Ruby20', $Ruby20);

      var def = self._proto, $scope = self._scope, $a, $b, TMP_1, $c, TMP_3, $d, TMP_5, $e, TMP_7, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      def.builder = def.lexer = def.static_env = def.def_level = nil;
      def.$version = function() {
        var self = this;

        return 20;
      };

      def.$default_encoding = function() {
        var $a, $b, self = this;

        return (($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8);
      };

      clist = ["-288,265,563,-101,265,-106,684,-288,-288,-288,211,212,265,-288,-288", "605,-288,214,235,-100,235,607,-101,893,642,-103,584,642,-484,642,592", "524,-103,-98,526,-105,-288,-288,563,-288,-288,-288,-288,-288,-102,563", "-100,563,563,-485,232,642,232,744,234,233,234,233,215,641,211,212,641", "-99,641,826,260,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288", "-288,-288,-288,-98,604,-288,-288,-288,641,625,606,264,748,-288,264,110", "-288,594,593,608,109,-288,264,-288,-99,-288,-288,215,-288,-288,-288", "-288,-288,-470,-288,-92,-288,-97,683,713,-470,-470,-470,110,-562,-470", "-470,-470,109,-470,-288,-91,713,-288,-288,583,-95,-470,-288,-470,-470", "-470,-104,-101,-94,-89,-103,-96,-101,-470,-470,-103,-470,-470,-470,-470", "-470,215,110,110,-104,-92,837,109,109,-102,110,-100,110,110,-102,109", "-100,109,109,-90,-94,215,211,212,-470,-470,-470,-470,-470,-470,-470", "-470,-470,-470,-470,-470,-470,-470,713,749,-470,-470,-470,-102,-470", "-470,211,212,-470,754,768,-470,-470,803,-470,-481,-470,511,-470,265", "-470,-470,-481,-470,-470,-470,-470,-470,110,-470,-563,-470,-92,109,702", "-480,542,541,540,592,543,110,-480,836,769,-470,109,-94,-470,-470,-470", "-470,-473,-470,442,-470,-91,-470,855,-473,-473,-473,-100,-101,-473,-473", "-473,-84,-473,-562,-105,215,-92,-70,-95,-92,-473,110,-473,-473,-473", "-92,109,215,260,-559,970,-94,-473,-473,-94,-473,-473,-473,-473,-473", "-94,-103,575,436,260,215,576,110,594,593,437,264,109,592,-408,-100,-264", "-93,747,438,803,828,569,-473,-473,-473,-473,-473,-473,-473,-473,-473", "-473,-473,-473,-473,-473,211,212,-473,-473,-473,-470,-473,-473,592,508", "-473,592,-470,-473,-473,512,-473,-559,-473,-566,-473,-470,-473,-473", "441,-473,-473,-473,-473,-473,-408,-473,702,-473,542,541,540,-408,543", "592,-559,594,593,590,592,-484,-408,-473,-560,440,-473,-473,-473,-473", "-288,-473,716,-473,569,-473,215,-288,-288,-288,-478,-408,-288,-288,-288", "513,-288,-478,-566,594,593,439,594,593,595,-566,-288,-288,-288,745,-562", "845,524,-566,-566,526,-288,-288,-89,-288,-288,-288,-288,-288,-98,709", "524,-473,-106,523,594,593,597,-566,-473,594,593,599,592,-560,110,947", "707,-473,620,109,209,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288", "-288,-288,-288,-288,215,-560,-288,-288,-288,-566,771,-288,-475,235,-288", "511,-566,-288,-288,-475,-288,-562,-288,706,-288,-566,-288,-288,621,-288", "-288,-288,-288,-288,-92,-288,-97,-288,524,705,-101,526,-106,-485,-566", "232,594,593,603,234,233,-288,230,231,-288,-288,-288,-288,-566,-288,-265", "-288,-96,-104,235,-566,-566,-566,-105,785,-566,-566,-566,393,-566,-94", "314,315,395,394,551,-103,-473,-566,-566,-566,-566,739,740,-473,-90,741", "104,105,-566,-566,-99,-566,-566,-566,-566,-566,702,-331,542,541,540", "110,543,257,-331,696,109,559,558,-479,258,-470,552,-331,211,212,-479", "694,-470,-566,-566,-566,-566,-566,-566,-566,-566,-566,-566,-566,-566", "-566,-566,549,698,-566,-566,-566,-279,770,-566,514,854,-566,551,-279", "-566,-566,515,-566,692,-566,690,-566,-279,-566,-566,438,-566,-566,-566", "-566,-566,689,-566,-566,-566,702,257,542,541,540,-477,543,686,258,215", "559,558,-477,-566,235,552,-566,-566,-566,-566,-566,-566,215,-566,396", "-102,473,-566,-566,-566,249,250,-476,-566,-566,110,-566,383,698,-476", "109,680,-289,235,215,-566,232,701,238,-289,234,233,857,230,231,79,-566", "-566,-289,-566,-566,-566,-566,-566,832,803,689,80,545,579,542,541,540", "549,543,232,931,81,860,234,233,110,230,231,551,580,109,-566,-566,-566", "-566,-566,-566,-566,-566,-566,-566,-566,-566,-566,-566,559,558,-566", "-566,-566,547,626,110,506,507,-566,862,109,-566,556,555,559,558,-566", "864,-566,552,-566,-566,866,-566,-566,-566,-566,-566,215,-566,-566,-566", "832,803,868,702,-289,542,541,540,-279,543,869,-289,678,-566,872,-279", "-566,-566,677,-93,-289,-566,211,212,-279,-102,286,69,70,71,9,57,874", "875,671,63,64,808,877,755,67,698,65,66,68,30,31,72,73,-263,701,881,883", "884,29,28,27,98,97,99,100,885,689,19,887,889,891,893,630,8,45,288,10", "102,101,103,92,56,94,93,95,214,96,104,105,215,90,91,527,42,43,41,235", "239,244,245,246,241,243,251,252,247,248,207,228,229,502,899,249,250", "208,40,528,503,33,901,215,58,59,206,903,60,501,35,232,803,238,44,234", "233,313,230,231,242,240,236,20,237,773,671,269,89,79,82,83,-483,84,86", "85,87,517,909,-483,-482,80,88,235,253,-568,-240,-482,-483,62,312,81", "-568,-568,-568,912,-482,-568,-568,-568,702,-568,542,541,540,215,543", "-288,915,-266,-568,-568,-568,-568,-288,486,215,235,660,-563,-84,-568", "-568,-288,-568,-568,-568,-568,-568,702,215,542,541,540,504,543,482,702", "698,542,541,540,928,543,542,541,540,898,543,925,671,254,-568,-568,-568", "-568,-568,-568,-568,-568,-568,-568,-568,-568,-568,-568,260,698,-568", "-568,-568,571,932,-568,579,698,-568,933,572,-568,-568,578,-568,569,-568", "385,-568,570,-568,-568,580,-568,-568,-568,-568,-568,473,-568,-568,-568", "215,702,215,542,541,540,928,543,542,541,540,235,543,-568,235,579,-568", "-568,-568,-568,235,-568,931,-568,286,69,70,71,9,57,235,580,949,63,64", "210,951,952,67,698,65,66,68,30,31,72,73,113,114,115,116,117,29,28,27", "98,97,99,100,473,702,19,542,541,540,957,543,8,45,288,10,102,101,103", "92,56,94,93,95,-288,96,104,105,573,90,91,-288,42,43,41,235,-563,-288", "689,975,-288,960,962,698,-288,964,976,966,966,-563,260,249,250,-288", "40,974,574,33,632,629,58,59,260,497,60,496,35,232,977,238,44,234,233", "619,230,231,978,893,236,20,237,893,893,983,89,79,82,83,618,84,86,85", "87,949,215,614,205,80,88,286,69,70,71,9,57,62,204,81,63,64,215,-263", "612,67,671,65,66,68,30,31,72,73,113,114,115,116,117,29,28,27,98,97,99", "100,484,-563,19,113,114,115,116,117,8,45,288,10,102,101,103,92,56,94", "93,95,-483,96,104,105,-562,90,91,-483,42,43,41,235,677,-482,203,-289", "-483,609,796,486,-482,486,-289,484,949,215,1002,249,250,-482,40,-289", "1003,33,1004,966,58,59,966,966,60,215,35,232,118,238,44,234,233,215", "230,231,-69,254,236,20,237,893,949,493,89,79,82,83,106,84,86,85,87,966", ",,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73", ",,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94", "93,95,,96,104,105,,90,91,,42,43,41,235,-585,-585,-585,-585,241,243,", ",-585,-585,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233", ",230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286", "69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27", "98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104", "105,,90,91,,42,43,41,235,239,244,245,246,241,243,,,247,248,,,,,,249", "250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236", "20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81", "63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,", ",,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,235,-585,-585,-585,-585,241,243,,,-585,-585,,,,,,249,250,,40,,,33", ",,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,", "89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,", ",67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45", "288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,", ",,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233", ",230,231,,,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70", "71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97", "99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,235,239,244,245,246,241,243,251,252,247,248,,-585,-585", ",,249,250,,40,,,290,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242", "240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,5,69,70,71,9,57", "62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100", ",,19,,,,,,8,45,7,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42", "43,41,235,239,244,245,246,241,243,251,252,247,248,,-585,-585,,,249,250", ",40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20", "237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63", "64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,", "8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41", "235,-585,-585,-585,-585,241,243,,,-585,-585,,,,,,249,250,,40,,,290,", ",58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67", ",65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288", "10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,-585", "-585,-585,-585,241,243,,,-585,-585,,,,,,249,250,,40,,,33,,,58,59,,,60", ",35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,", "84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68", "30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101", "103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,239,244,245,246", "241,243,251,,247,248,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238", "44,234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73", ",,,,,29,28,27,98,97,99,100,,,19,,,,,630,8,45,288,10,102,101,103,92,56", "94,93,95,,96,104,105,,90,91,,42,43,41,235,239,244,245,246,241,243,251", "252,247,248,,228,229,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44", "234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,", "80,88,,253,-567,,,,62,,81,-567,-567,-567,,,-567,-567,-567,235,-567,", ",,,,,,,-567,-567,-567,-567,,,249,250,,,,-567,-567,,-567,-567,-567,-567", "-567,,,,232,,238,,234,233,,230,231,,,236,,237,,,,,,,-567,-567,-567,-567", "-567,-567,-567,-567,-567,-567,-567,-567,-567,-567,,,-567,-567,-567,", ",-567,,,-567,,,-567,-567,,-567,,-567,,-567,,-567,-567,,-567,-567,-567", "-567,-567,,-567,-567,-567,,,,,,,,,,,,,,-567,,,-567,-567,-567,-567,,-567", ",-567,286,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29", "28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95", ",96,104,105,,90,91,,42,43,41,235,-585,-585,-585,-585,241,243,,,-585", "-585,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230", "231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69", "70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98", "97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,235,-585,-585,-585,-585,241,243,,,-585,-585,,,,,,249", "250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236", "20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81", "63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,", ",,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,235,,,,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,,44,234", "233,,230,231,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70", "71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97", "99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,235,,,,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35", "232,,238,44,234,233,,230,231,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,", "80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,", ",,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,", ",60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286", "69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27", "98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104", "105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,290,,,58,59,,,60,,35,,", ",44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9", "57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100", ",,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91", ",42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,", "20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63", "64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,", "8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41", ",,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67", ",65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288", "10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,", ",,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68", "30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101", "103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40", ",,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73", ",,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94", "93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59", ",,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286", "69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27", "98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104", "105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,", "44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9", "57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100", ",,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91", ",42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,", "20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,5,69,70,71,9,57,62,,81,63", "64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,", "8,45,7,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,", ",,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65", "66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102", "101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,", ",,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,5,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,7,10,102,101,103,92,56", "94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58", "59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88", "286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28", "27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96", "104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35", ",,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71", "9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99", "100,,,19,,,,,615,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,235,239,244,245,246,241,243,251,252,247,248,,228,229", ",,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242", "240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,-280,,,,62", ",81,-280,-280,-280,,,-280,-280,-280,,-280,,,,,,,,,,-280,-280,-280,,", ",,,,,-280,-280,,-280,-280,-280,-280,-280,,,,,,,,,,,,,,,,,,,,,,,,-280", "-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,,,-280", "-280,-280,,,-280,,,-280,,,-280,-280,,-280,,-280,,-280,,-280,-280,,-280", "-280,-280,-280,-280,,-280,,-280,,,,,,,,,,,,,,-280,,,-280,-280,-280,-280", ",-280,,-280,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,", "29,28,27,98,97,99,100,,,19,,,,,,8,45,,10,102,101,103,92,56,94,93,95", ",96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60", ",35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97", "99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90", "91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,,,44,,", "281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62", ",81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42", "43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,281,,,,,,225", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,", ",67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,", ",102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,", ",,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84", "86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31", "72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94", "93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58", "59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98", "97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90", "91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,", ",,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63", "64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,", ",45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,239", "244,245,246,241,243,251,252,247,248,,228,229,,,249,250,,220,,,226,,", "58,59,,,60,,,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,110,253,,,,109,62,,81,69,70,71,,57,,,,63", "64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227", ",,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309,,,", ",,,,,,,,,,,,,,,,345,,,33,,,58,59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68", "305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101", "103,350,56,94,93,351,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,357,", ",352,,,226,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,", ",,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,350,56,94", "93,351,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,352,,,226,,,58,59", ",,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97", "99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,,90", "91,,,,309,,,,,,,,,,,,,,,,,,,,871,,,226,,,58,59,,,60,,,,,,,,,,,,,,,,", ",,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,", "67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,", ",45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,", ",,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68", "305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101", "103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220", ",,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,", ",,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308", "98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,", ",,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62", ",81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19", ",,,,,8,45,7,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,235,239,244,245,246,241,243,251,252,247,248,,228,229,,,249,250,,40", ",,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237", ",,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,,,,385,62,,81,69,70,71,,57", ",,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19", ",,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,", ",,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66", "68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103", "92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,", ",226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,", ",,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,", "29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96", "104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,", ",,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,", "57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100", ",,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,", "89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62,,81,63,64,,,,67", ",65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,,10", "102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,", ",,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84", "86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306", "72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92", "56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226", ",,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301", "302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96", "104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,", ",,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97", "99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91", ",42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,", "225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64", ",,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,", ",,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,", ",,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,654,,,,44,,,,,,,,,225,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65", "66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101", "103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220", ",,226,,,58,59,,,60,,401,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85", "87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73", ",,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98", "97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276", ",44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97", "99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91", ",42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,", "225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64", ",,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92", "56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226", ",,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28", "27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104", "105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,401", ",,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,", "57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100", ",,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,", "89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102", "101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,", ",,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70", "71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97", "99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91", ",42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,", "20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,215,69,70,71,,57,62,,81,63", "64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227", ",,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,", ",,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65", "66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,", "102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309,235,239,244,245", "246,241,243,251,252,247,248,,228,229,,,249,250,,299,,,226,,,58,59,,", "60,,,232,,238,,234,233,,230,231,242,240,236,,237,,,,89,79,82,83,,84", "86,85,87,,,,,80,88,,253,,311,,,62,,81,69,70,71,,57,,,,63,64,,,,67,,65", "66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,", "102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,", ",,,,299,,,295,,,58,59,,,60,,294,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70", "71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97", "99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90", "91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44", ",,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57", "62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100", ",,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,", "89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305", "306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103", "92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,", ",226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,", ",29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280", "96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60", ",278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302", "308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104", "105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,", "44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57", "62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99", "100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,", "42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,", ",67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,", ",,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,", ",,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68", "305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101", "103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220", ",,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,", ",,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308", "98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,", ",,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,", "81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305", "306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103", "92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,", ",226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,", ",,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308", "98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,", ",,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,", "81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305", "306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103", "92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,", ",226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,", ",,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308", "98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,", ",,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,", "81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305", "306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103", "92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,", ",226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,", ",,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308", "98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,", ",,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,", "81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305", "306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103", "92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,", ",226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,", ",,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93", "95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308", "98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,", ",,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,", "81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102", "101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,", ",,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66", "68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102", "101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,", ",,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94", "93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,", ",58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,", ",,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95", "280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59", ",,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28", "27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104", "105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278", ",276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,215,69", "70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308", "98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,401,,,,44", ",,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62", ",81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309", ",,,,,,,,,,,,,,,,,,,299,,,295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68", "305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101", "103,92,56,94,93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,299", ",,295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301", "302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96", "104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,", ",,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97", "99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91", ",42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,", "225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64", ",,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,", ",,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,", ",,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66", "68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102", "101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,", ",,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72", "73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56", "94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,", ",58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301", "302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96", "104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,", ",,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99", "100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42", "43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,", ",,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,", "67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,", ",45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,", ",,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,276,,44,,,281,,,,,,225,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305", "306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103", "92,56,94,93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,871,,,226", ",,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,", "69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27", "98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105", ",90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,", ",,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,", "81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19", ",,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,", ",,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66", "68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102", "101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,", ",,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94", "93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58", "59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,", "69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302", "308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104", "105,,90,91,,,,309,235,239,244,245,246,241,243,251,252,247,248,,228,229", ",,249,250,,299,,,226,,,58,59,,,60,,,232,,238,,234,233,,230,231,242,240", "236,,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,,499,,,62,,81,69", "70,71,,57,,,,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98", "97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,", "90,91,,,,309,,,,,,,,,,,,,,,,,,,,939,,,226,,,58,59,,,60,,,,,,,,,,,,,", ",,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64", ",,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92", "56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226", ",,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28", "27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104", "105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,", "44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57", "62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100", ",,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91", ",42,43,41,235,239,244,245,246,241,243,251,252,247,248,,228,229,,,249", "250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236", "20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,,,,385,62,,81,69,70", "71,,57,,,,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97", "99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90", "91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,276,,44,,", "281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62", ",81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42", "43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,654,,276,,44,,,281", ",,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81", "63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,", "227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67", ",65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,", ",,,,,,,,,220,,,226,,,58,59,,,60,,752,,,,44,,,,,,,,,225,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68", "305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101", "103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,", ",,220,,,226,,,58,59,,,60,,654,,276,,44,,,281,,,,,,225,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92", "56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,", ",226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94", "93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,", ",58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,", ",,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94", "93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,299,,,295,,,58,59", ",,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99", "100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91", ",42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,", "281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62", ",81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100", ",,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43", "41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,,,44,,,,,,,,,225", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,", ",67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45", ",,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,", ",,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,", "89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62,,81,63,64,,,,67", ",65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,7,10", "102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,", ",,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84", "86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306", "72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92", "56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226", ",,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301", "302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96", "104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,517,,58,59,,,60", ",,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99", "100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42", "43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,", ",,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,", "67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,", ",45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,", ",,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,281,,,,,,225,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65", "66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102", "101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,", ",,,,,,220,,,226,,,58,59,,,60,,654,,,,44,,,281,,,,,,225,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68", "30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92", "56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226", ",,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301", "302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96", "104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,", ",,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97", "99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91", ",42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,", "225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64", ",,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,", ",,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,", ",,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66", "68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102", "101,103,92,56,94,93,95,,96,104,105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,", "299,,,295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,", ",29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280", "96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60", ",278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302", "308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104", "105,,90,91,,,,309,,,,,,,,,,,,,,,,,,,,299,,,295,,,58,59,,,60,,,,,,,,", ",,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63", "64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227", ",,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,", ",,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65", "66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102", "101,103,92,56,94,93,95,280,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,", ",,,,,,220,,,226,,,58,59,,,60,,,,276,,44,,,281,,,,,,225,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68", "305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101", "103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220", ",,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,", ",,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,", "96,104,105,,90,91,,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60", ",,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71", ",57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99", "100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42", "43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,", ",,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,", "67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,", ",102,101,103,92,56,94,93,95,,96,104,105,,90,91,,42,43,41,235,239,244", "245,246,241,243,251,252,247,248,,228,229,,,249,250,,220,,,226,,,58,59", ",,60,,,232,,238,44,234,233,,230,231,242,240,236,225,237,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,253,-295,,,,62,,81,-295,-295,-295,,,-295", "-295,-295,,-295,,,,,,,,,,-295,-295,,,,,,,,,-295,-295,,-295,-295,-295", "-295,-295,,,,,,,,,,,,,,,,,,,,,,,,-295,-295,-295,-295,-295,-295,-295", "-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295,,,-295,,269,-295", ",,-295,-295,,-295,,-295,,-295,,-295,-295,,-295,-295,-295,-295,-295,", "-295,-246,-295,,,,,,-246,-246,-246,,,-246,-246,-246,-295,-246,,-295", "-295,,-295,,-295,,-246,-246,-246,,,,,,,,,-246,-246,,-246,-246,-246,-246", "-246,,,,,,,,,,,,,,,,,,,,,,,,-246,-246,-246,-246,-246,-246,-246,-246", "-246,-246,-246,-246,-246,-246,,,-246,-246,-246,,,-246,,260,-246,,,-246", "-246,,-246,,-246,,-246,,-246,-246,,-246,-246,-246,-246,-246,,-246,-246", "-246,,,,,,,,,,,,,,-246,,-246,-246,-246,,-246,,-246,-246,-246,-246,,", "-246,-246,-246,784,-246,542,541,540,785,543,,,,-246,-246,,,,,551,,,", ",-246,-246,,-246,-246,-246,-246,-246,,,,,,,,,,547,,,,,,,,,556,555,559", "558,,,,552,,,,,,,,,-246,,-407,,,,,-246,,-407,-407,-407,260,-246,-407", "-407,-407,215,-407,,,,,,,,,-407,-407,-407,,,,,,-246,-246,,-407,-407", ",-407,-407,-407,-407,-407,,,,,-246,,,-246,,,,,-246,,,,,,,,,,,-407,-407", "-407,-407,-407,-407,-407,-407,-407,-407,-407,-407,-407,-407,,,-407,-407", "-407,,,-407,,260,-407,,,-407,-407,,-407,,-407,,-407,,-407,-407,,-407", "-407,-407,-407,-407,,-407,-407,-407,,,,,,,,,,,,,,-407,,,-407,-407,,-407", ",-407,170,181,171,194,167,187,177,176,197,198,192,175,174,169,195,199", "200,179,168,182,186,188,180,173,,,,189,196,191,190,183,193,178,166,185", "184,,,,,,165,172,163,164,160,161,162,121,123,,,122,,,,,,,,,154,155,", "151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,,,,,,", ",,148,147,,132,153,150,149,158,145,146,140,138,130,152,131,,,159,89", ",,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197,198,192,175,174", "169,195,199,200,179,168,182,186,188,180,173,,,,189,196,191,190,183,193", "178,166,185,184,,,,,,165,172,163,164,160,161,162,121,123,,,122,,,,,", ",,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144", ",,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152,131", ",,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197,198,192", "175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196,191,190", "183,193,178,166,185,184,,,,,,165,172,163,164,160,161,162,121,123,120", ",122,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157", "143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130", "152,131,,,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197", "198,192,175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196", "191,190,183,193,178,166,185,184,,,,,,165,172,163,164,160,161,162,121", "123,,,122,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,", "156,157,143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140", "138,130,152,131,,,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177", "176,197,198,192,175,174,169,195,199,200,179,168,182,186,188,180,173", ",,,189,196,191,190,183,193,178,166,185,184,,,,,,165,172,163,164,160", "161,162,121,123,,,122,,,,,,,,,154,155,,151,133,134,135,142,139,141,", ",136,137,,,,156,157,143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158", "145,146,140,138,130,152,131,,,159,170,181,171,194,167,187,177,176,197", "198,192,175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196", "191,368,367,369,366,166,185,184,,,,,,165,172,163,164,363,364,365,361", "123,94,93,362,,96,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137", ",,,156,157,143,144,,,,,,373,,,,,,,,148,147,,132,153,150,149,158,145", "146,140,138,130,152,131,,,159,235,239,244,245,246,241,243,251,252,247", "248,,228,229,,,249,250,,545,,542,541,540,549,543,,,,,,,232,,238,551", "234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243,251,252", "247,248,547,228,229,,,249,250,,253,556,555,559,558,,,,552,,,,,232,,238", ",234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243,251,252", "247,248,,228,229,,,249,250,,253,,,702,,542,541,540,549,543,,,,232,,238", ",234,233,551,230,231,242,240,236,,237,235,239,244,245,246,241,243,251", "252,247,248,,228,229,547,,249,250,215,253,,,,,,559,558,,,,552,,232,", "238,,234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243,251", "252,247,248,,228,229,,,249,250,,253,,,702,,542,541,540,785,543,,,,232", ",238,,234,233,551,230,231,242,240,236,,237,235,239,244,245,246,241,243", "251,252,247,248,,228,229,547,,249,250,,253,,,,,,559,558,,,,552,,232", ",238,,234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243", "251,252,247,248,,228,229,,,249,250,,253,,,702,,542,541,540,785,543,", ",,232,,238,,234,233,551,230,231,242,240,236,,237,235,239,244,245,246", "241,243,251,252,247,248,,228,229,547,,249,250,,253,,,,,,559,558,,,,552", ",232,,238,,234,233,,230,231,242,240,236,,237,,,,,416,420,,,415,,,,,", ",,,154,155,253,151,133,134,135,142,139,141,,,136,137,,,,156,157,143", "144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130", "152,131,997,420,159,,998,,,,,,,,,154,155,,151,133,134,135,142,139,141", ",,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149", "158,145,146,140,138,130,152,131,471,413,159,,472,,,,,,,,,154,155,,151", "133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,,,,,,,,,148", "147,,132,153,150,149,158,145,146,140,138,130,152,131,633,413,159,,634", ",,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143", "144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130", "152,131,635,420,159,,636,,,,,,,,,154,155,,151,133,134,135,142,139,141", ",,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149", "158,145,146,140,138,130,152,131,471,413,159,,472,,,,,,,,,154,155,,151", "133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,", ",148,147,,132,153,150,149,158,145,146,140,138,130,152,131,724,420,159", ",725,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157", "143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138", "130,152,131,635,420,159,,636,,,,,,,,,154,155,,151,133,134,135,142,139", "141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150", "149,158,145,146,140,138,130,152,131,633,413,159,,634,,,,,,,,,154,155", ",151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,", ",,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152,131,721,420", "159,,722,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156", "157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140", "138,130,152,131,972,420,159,,971,,,,,,,,,154,155,,151,133,134,135,142", "139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153", "150,149,158,145,146,140,138,130,152,131,719,413,159,,720,,,,,,,,,154", "155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260", ",,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152,131,409", "413,159,,410,,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137", ",,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145", "146,140,138,130,152,131,995,413,159,,996,,,,,,,,,154,155,,151,133,134", "135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147", ",132,153,150,149,158,145,146,140,138,130,152,131,664,413,159,,665,,", ",,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143", "144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130", "152,131,667,420,159,,668,,,,,,,,,154,155,,151,133,134,135,142,139,141", ",,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149", "158,145,146,140,138,130,152,131,,702,159,542,541,540,785,543,,784,,542", "541,540,785,543,702,551,542,541,540,785,543,,784,551,542,541,540,785", "543,,551,,,,,,,547,551,,,,,,,547,,,559,558,,,547,552,556,555,559,558", ",,547,552,,559,558,,,,552,556,555,559,558,,,545,552,542,541,540,549", "543,,702,,542,541,540,549,543,,551,545,,542,541,540,549,543,551,784", ",542,541,540,785,543,,551,,,,,547,734,,551,,,,,547,556,555,559,558,", ",,552,547,531,559,558,,,,552,547,556,555,559,558,,,,552,556,555,559", "558,,,545,552,542,541,540,549,543,,545,,542,541,540,549,543,,551,,,", ",,,,551,545,,542,541,540,549,543,,,,,,,547,,,551,,,,,547,556,555,559", "558,,,,552,556,555,559,558,,,,552,547,734,545,,542,541,540,549,543,556", "555,559,558,,,,552,702,551,542,541,540,549,543,,702,,542,541,540,549", "543,702,551,542,541,540,549,543,,547,551,,,,,,,551,556,555,559,558,", ",547,552,,,,,,,547,,,559,558,,,547,552,,,559,558,,,,552,,559,558,,,702", "552,542,541,540,785,543,,,,,,,,,,551,,,,,,,,,,,,,,,,,,,,,,547,,,,,,", ",,,,559,558,,,,552"];

      racc_action_table = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(25112, nil);

      idx = 0;

      ($a = ($b = clist).$each, $a._p = (TMP_1 = function(str){var self = TMP_1._s || this, $a, $b, TMP_2;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_2 = function(i){var self = TMP_2._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_2._s = self, TMP_2), $a).call($b)}, TMP_1._s = self, TMP_1), $a).call($b);

      clist = ["415,26,902,719,61,346,530,415,415,415,589,589,645,415,415,380,415,19", "446,839,445,381,995,823,478,996,356,477,218,646,382,329,720,342,329", "573,415,415,717,415,415,415,415,415,997,335,1009,336,880,219,446,469", "445,597,446,446,445,445,19,478,433,433,477,343,646,700,26,415,415,415", "415,415,415,415,415,415,415,415,415,415,415,218,380,415,415,415,469", "415,381,26,605,415,61,284,415,382,382,382,284,415,645,415,219,415,415", "589,415,415,415,415,415,92,415,719,415,346,530,565,92,92,92,902,997", "92,92,92,902,92,415,839,840,415,415,356,415,92,415,92,92,92,415,995", "720,342,996,573,995,92,92,996,92,92,92,92,92,433,356,717,722,664,717", "356,717,997,335,1009,336,880,997,335,1009,336,880,343,665,703,585,585", "92,92,92,92,92,92,92,92,92,92,92,92,92,92,566,607,92,92,92,721,92,92", "675,675,92,616,633,92,92,710,92,365,92,439,92,304,92,92,365,92,92,92", "92,92,565,92,722,92,664,565,701,363,701,701,701,602,701,840,363,715", "634,92,840,665,92,92,92,92,95,92,223,92,616,92,772,95,95,95,616,633", "95,95,95,659,95,721,439,718,664,659,722,664,95,585,95,95,95,664,585", "926,304,350,926,665,95,95,665,95,95,95,95,95,665,634,352,217,308,675", "352,566,602,602,217,304,566,375,798,772,613,721,602,217,907,701,907", "95,95,95,95,95,95,95,95,95,95,95,95,95,95,322,322,95,95,95,350,95,95", "600,310,95,376,350,95,95,314,95,350,95,667,95,350,95,95,222,95,95,95", "95,95,798,95,898,95,898,898,898,798,898,377,350,375,375,375,378,38,798", "95,351,221,95,95,95,95,636,95,568,95,567,95,727,636,636,636,366,798", "636,636,636,315,636,366,667,600,600,220,376,376,376,667,636,636,636", "600,667,732,681,724,667,681,636,636,38,636,636,636,636,636,38,562,325", "351,221,325,377,377,377,667,351,378,378,378,379,351,3,898,560,351,409", "3,15,636,636,636,636,636,636,636,636,636,636,636,636,636,636,685,351", "636,636,636,724,636,636,367,464,636,313,724,636,636,367,636,724,636", "557,636,724,636,636,410,636,636,636,636,636,409,636,15,636,326,553,409", "326,15,39,724,464,379,379,379,464,464,636,464,464,636,636,636,636,635", "636,751,636,313,636,318,635,635,635,313,857,635,635,635,120,635,410", "41,41,120,120,857,410,362,635,635,635,635,593,593,362,39,593,593,593", "635,635,39,635,635,635,635,635,949,46,949,949,949,735,949,24,46,545", "735,857,857,364,24,361,857,46,334,334,364,538,361,635,635,635,635,635", "635,635,635,635,635,635,635,635,635,686,949,635,635,635,940,635,635", "316,756,635,686,940,635,635,316,635,537,635,536,635,940,635,635,316", "635,635,635,635,635,534,635,635,635,547,371,547,547,547,369,547,533", "371,303,686,686,369,635,451,686,635,635,635,635,416,635,323,635,201", "635,259,416,416,416,451,451,368,416,416,584,416,106,547,368,584,521", "504,465,520,416,451,547,451,504,451,451,774,451,451,77,416,416,504,416", "416,416,416,416,985,985,775,77,887,870,887,887,887,887,887,465,870,77", "777,465,465,339,465,465,887,870,339,416,416,416,416,416,416,416,416", "416,416,416,416,416,416,689,689,416,416,416,887,416,843,309,309,416", "778,843,416,887,887,887,887,416,779,416,887,416,416,781,416,416,416", "416,416,782,416,416,416,708,708,783,698,977,698,698,698,300,698,784", "977,519,416,788,300,416,416,518,416,977,416,17,17,300,416,648,648,648", "648,648,648,792,793,797,648,648,679,801,617,648,698,648,648,648,648", "648,648,648,804,698,805,810,811,648,648,648,648,648,648,648,812,813", "648,817,818,820,821,428,648,648,648,648,648,648,648,648,648,648,648", "648,227,648,648,648,825,648,648,327,648,648,648,428,428,428,428,428", "428,428,428,428,428,428,14,428,428,298,827,428,428,14,648,328,298,648", "830,45,648,648,14,833,648,298,648,428,676,428,648,428,428,40,428,428", "428,428,428,648,428,639,509,302,648,648,648,648,297,648,648,648,648", "505,842,297,296,648,648,674,428,421,428,296,297,648,37,648,421,421,421", "846,296,421,421,421,826,421,826,826,826,847,826,668,850,851,421,421", "421,421,668,330,500,673,498,668,495,421,421,668,421,421,421,421,421", "947,494,947,947,947,299,947,273,899,826,899,899,899,868,899,868,868", "868,826,868,867,670,22,421,421,421,421,421,421,421,421,421,421,421,421", "421,421,669,947,421,421,421,344,871,421,354,899,421,873,344,421,421", "354,421,340,421,341,421,344,421,421,354,421,421,421,421,421,622,421", "421,421,479,828,475,828,828,828,970,828,970,970,970,450,970,421,449", "930,421,421,421,421,448,421,930,421,564,564,564,564,564,564,447,930", "900,564,564,16,904,905,564,828,564,564,564,564,564,564,564,492,492,492", "492,492,564,564,564,564,564,564,564,627,983,564,983,983,983,911,983", "564,564,564,564,564,564,564,564,564,564,564,564,725,564,564,564,345", "564,564,725,564,564,564,458,725,998,916,938,725,919,920,983,998,921", "938,922,924,998,666,458,458,998,564,938,347,564,435,425,564,564,417", "293,564,292,564,458,939,458,564,458,458,408,458,458,942,943,458,564", "458,944,945,946,564,564,564,564,407,564,564,564,564,948,405,402,13,564", "564,958,958,958,958,958,958,564,12,564,958,958,663,399,397,958,661,958", "958,958,958,958,958,958,6,6,6,6,6,958,958,958,958,958,958,958,274,971", "958,287,287,287,287,287,958,958,958,958,958,958,958,958,958,958,958", "958,937,958,958,958,972,958,958,937,958,958,958,457,973,936,10,576,937", "391,658,277,936,653,576,651,984,637,986,457,457,936,958,576,987,958", "988,989,958,958,990,991,958,994,958,457,7,457,958,457,457,291,457,457", "289,644,457,958,457,999,1000,288,958,958,958,958,1,958,958,958,958,1011", ",,,958,958,956,956,956,956,956,956,958,,958,956,956,,,,956,,956,956", "956,956,956,956,956,,,,,,956,956,956,956,956,956,956,,,956,,,,,,956", "956,956,956,956,956,956,956,956,956,956,956,,956,956,956,,956,956,,956", "956,956,462,462,462,462,462,462,462,,,462,462,,,,,,462,462,,956,,,956", ",,956,956,,,956,,956,462,,462,956,462,462,,462,462,462,462,462,956,462", ",,,956,956,956,956,,956,956,956,956,,,,,956,956,950,950,950,950,950", "950,956,,956,950,950,,,,950,,950,950,950,950,950,950,950,,,,,,950,950", "950,950,950,950,950,,,950,,,,,,950,950,950,950,950,950,950,950,950,950", "950,950,,950,950,950,,950,950,,950,950,950,466,466,466,466,466,466,466", ",,466,466,,,,,,466,466,,950,,,950,,,950,950,,,950,,950,466,,466,950", "466,466,,466,466,466,466,466,950,466,,,,950,950,950,950,,950,950,950", "950,,,,,950,950,935,935,935,935,935,935,950,,950,935,935,,,,935,,935", "935,935,935,935,935,935,,,,,,935,935,935,935,935,935,935,,,935,,,,,", "935,935,935,935,935,935,935,935,935,935,935,935,,935,935,935,,935,935", ",935,935,935,454,454,454,454,454,454,454,,,454,454,,,,,,454,454,,935", ",,935,,,935,935,,,935,,935,454,,454,935,454,454,,454,454,454,454,454", "935,454,,,,935,935,935,935,,935,935,935,935,,,,,935,935,586,586,586", "586,586,586,935,,935,586,586,,,,586,,586,586,586,586,586,586,586,,,", ",,586,586,586,586,586,586,586,,,586,,,,,,586,586,586,586,586,586,586", "586,586,586,586,586,,586,586,586,,586,586,,586,586,586,455,,,,,,,,,", ",,,,,,455,455,,586,,,586,,,586,586,,,586,,586,455,,455,586,455,455,", "455,455,,,455,586,455,,,,586,586,586,586,,586,586,586,586,,,,,586,586", "295,295,295,295,295,295,586,,586,295,295,,,,295,,295,295,295,295,295", "295,295,,,,,,295,295,295,295,295,295,295,,,295,,,,,,295,295,295,295", "295,295,295,295,295,295,295,295,,295,295,295,,295,295,,295,295,295,443", "443,443,443,443,443,443,443,443,443,443,,443,443,,,443,443,,295,,,295", ",,295,295,,,295,,295,443,,443,295,443,443,,443,443,443,443,443,295,443", ",,,295,295,295,295,,295,295,295,295,,,,,295,295,0,0,0,0,0,0,295,,295", "0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0", "0,0,0,0,,0,0,0,,0,0,,0,0,0,444,444,444,444,444,444,444,444,444,444,444", ",444,444,,,444,444,,0,,,0,,,0,0,,,0,,0,444,,444,0,444,444,,444,444,444", "444,444,0,444,,,,0,0,0,0,,0,0,0,0,,,,,0,0,290,290,290,290,290,290,0", ",0,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290", "290,290,290,,,290,,,,,,290,290,290,290,290,290,290,290,290,290,290,290", ",290,290,290,,290,290,,290,290,290,460,460,460,460,460,460,460,,,460", "460,,,,,,460,460,,290,,,290,,,290,290,,,290,,290,460,,460,290,460,460", ",460,460,460,460,460,290,460,,,,290,290,290,290,,290,290,290,290,,,", ",290,290,877,877,877,877,877,877,290,,290,877,877,,,,877,,877,877,877", "877,877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,877,877", "877,877,877,877,877,877,877,877,877,877,,877,877,877,,877,877,,877,877", "877,461,461,461,461,461,461,461,,,461,461,,,,,,461,461,,877,,,877,,", "877,877,,,877,,877,461,,461,877,461,461,,461,461,461,461,461,877,461", ",,,877,877,877,877,,877,877,877,877,,,,,877,877,561,561,561,561,561", "561,877,,877,561,561,,,,561,,561,561,561,561,561,561,561,,,,,,561,561", "561,561,561,561,561,,,561,,,,,,561,561,561,561,561,561,561,561,561,561", "561,561,,561,561,561,,561,561,,561,561,561,467,467,467,467,467,467,467", "467,,467,467,,,,,,467,467,,561,,,561,,,561,561,,,561,,561,467,,467,561", "467,467,,467,467,467,467,467,561,467,,,,561,561,561,561,,561,561,561", "561,,,,,561,561,643,643,643,643,643,643,561,,561,643,643,,,,643,,643", "643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,638", "643,643,643,643,643,643,643,643,643,643,643,643,,643,643,643,,643,643", ",643,643,643,638,638,638,638,638,638,638,638,638,638,638,,638,638,,", "638,638,,643,,,643,,,643,643,,,643,,643,638,,638,643,638,638,,638,638", "638,638,638,643,638,,,,643,643,643,643,,643,643,643,643,,,,,643,643", ",638,420,,,,643,,643,420,420,420,,,420,420,420,456,420,,,,,,,,,420,420", "420,420,,,456,456,,,,420,420,,420,420,420,420,420,,,,456,,456,,456,456", ",456,456,,,456,,456,,,,,,,420,420,420,420,420,420,420,420,420,420,420", "420,420,420,,,420,420,420,,,420,,,420,,,420,420,,420,,420,,420,,420", "420,,420,420,420,420,420,,420,420,420,,,,,,,,,,,,,,420,,,420,420,420", "420,,420,,420,649,649,649,649,649,649,,,,649,649,,,,649,,649,649,649", "649,649,649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,649,649", "649,649,649,649,649,649,649,649,649,649,,649,649,649,,649,649,,649,649", "649,463,463,463,463,463,463,463,,,463,463,,,,,,463,463,,649,,,649,,", "649,649,,,649,,649,463,,463,649,463,463,,463,463,463,463,463,649,463", ",,,649,649,649,649,,649,649,649,649,,,,,649,649,683,683,683,683,683", "683,649,,649,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683", "683,683,683,683,683,,,683,,,,,,683,683,683,683,683,683,683,683,683,683", "683,683,,683,683,683,,683,683,,683,683,683,459,459,459,459,459,459,459", ",,459,459,,,,,,459,459,,683,,,683,,,683,683,,,683,,683,459,,459,683", "459,459,,459,459,459,459,459,683,459,,,,683,683,683,683,,683,683,683", "683,,,,,683,683,684,684,684,684,684,684,683,,683,684,684,,,,684,,684", "684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,", "684,684,684,684,684,684,684,684,684,684,684,684,,684,684,684,,684,684", ",684,684,684,453,,,,,,,,,,,,,,,,453,453,,684,,,684,,,684,684,,,684,", "684,453,,,684,453,453,,453,453,,,,684,,,,,684,684,684,684,,684,684,684", "684,,,,,684,684,226,226,226,226,226,226,684,,684,226,226,,,,226,,226", "226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,", "226,226,226,226,226,226,226,226,226,226,226,226,,226,226,226,,226,226", ",226,226,226,452,,,,,,,,,,,,,,,,452,452,,226,,,226,,,226,226,,,226,", "226,452,,452,226,452,452,,452,452,,,,226,,,,,226,226,226,226,,226,226", "226,226,,,,,226,226,728,728,728,728,728,728,226,,226,728,728,,,,728", ",728,728,728,728,728,728,728,,,,,,728,728,728,728,728,728,728,,,728", ",,,,,728,728,728,728,728,728,728,728,728,728,728,728,,728,728,728,,728", "728,,728,728,728,,,,,,,,,,,,,,,,,,,,728,,,728,,,728,728,,,728,,728,", ",,728,,,,,,,,,728,,,,,728,728,728,728,,728,728,728,728,,,,,728,728,33", "33,33,33,33,33,728,,728,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33", "33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33", "33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,,,33", ",,,,,,,,33,,,,,33,33,33,33,,33,33,33,33,,,,,33,33,733,733,733,733,733", "733,33,,33,733,733,,,,733,,733,733,733,733,733,733,733,,,,,,733,733", "733,733,733,733,733,,,733,,,,,,733,733,733,733,733,733,733,733,733,733", "733,733,,733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,", "733,,,733,733,,,733,,733,,,,733,,,,,,,,,733,,,,,733,733,733,733,,733", "733,733,733,,,,,733,733,743,743,743,743,743,743,733,,733,743,743,,,", "743,,743,743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743,,", "743,,,,,,743,743,743,743,743,743,743,743,743,743,743,743,,743,743,743", ",743,743,,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,", "743,,,,743,,,,,,,,,743,,,,,743,743,743,743,,743,743,743,743,,,,,743", "743,844,844,844,844,844,844,743,,743,844,844,,,,844,,844,844,844,844", "844,844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,,844,844,844", "844,844,844,844,844,844,844,844,844,,844,844,844,,844,844,,844,844,844", ",,,,,,,,,,,,,,,,,,,844,,,844,,,844,844,,,844,,844,,,,844,,,,,,,,,844", ",,,,844,844,844,844,,844,844,844,844,,,,,844,844,838,838,838,838,838", "838,844,,844,838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838", "838,838,838,838,838,,,838,,,,,,838,838,838,838,838,838,838,838,838,838", "838,838,,838,838,838,,838,838,,838,838,838,,,,,,,,,,,,,,,,,,,,838,,", "838,,,838,838,,,838,,838,,,,838,,,,,,,,,838,,,,,838,838,838,838,,838", "838,838,838,,,,,838,838,203,203,203,203,203,203,838,,838,203,203,,,", "203,,203,203,203,203,203,203,203,,,,,,203,203,203,203,203,203,203,,", "203,,,,,,203,203,203,203,203,203,203,203,203,203,203,203,,203,203,203", ",203,203,,203,203,203,,,,,,,,,,,,,,,,,,,,203,,,203,,,203,203,,,203,", "203,,,,203,,,,,,,,,203,,,,,203,203,203,203,,203,203,203,203,,,,,203", "203,835,835,835,835,835,835,203,,203,835,835,,,,835,,835,835,835,835", "835,835,835,,,,,,835,835,835,835,835,835,835,,,835,,,,,,835,835,835", "835,835,835,835,835,835,835,835,835,,835,835,835,,835,835,,835,835,835", ",,,,,,,,,,,,,,,,,,,835,,,835,,,835,835,,,835,,835,,,,835,,,,,,,,,835", ",,,,835,835,835,835,,835,835,835,835,,,,,835,835,834,834,834,834,834", "834,835,,835,834,834,,,,834,,834,834,834,834,834,834,834,,,,,,834,834", "834,834,834,834,834,,,834,,,,,,834,834,834,834,834,834,834,834,834,834", "834,834,,834,834,834,,834,834,,834,834,834,,,,,,,,,,,,,,,,,,,,834,,", "834,,,834,834,,,834,,834,,,,834,,,,,,,,,834,,,,,834,834,834,834,,834", "834,834,834,,,,,834,834,118,118,118,118,118,118,834,,834,118,118,,,", "118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,", "118,,,,,,118,118,118,118,118,118,118,118,118,118,118,118,,118,118,118", ",118,118,,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,", "118,,,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,,118", "118,321,321,321,321,321,321,118,,118,321,321,,,,321,,321,321,321,321", "321,321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,321,321,321", "321,321,321,321,321,321,321,321,321,,321,321,321,,321,321,,321,321,321", ",,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,321,,,,321,,,,,,,,,321", ",,,,321,321,321,321,,321,321,321,321,,,,,321,321,493,493,493,493,493", "493,321,,321,493,493,,,,493,,493,493,493,493,493,493,493,,,,,,493,493", "493,493,493,493,493,,,493,,,,,,493,493,493,493,493,493,493,493,493,493", "493,493,,493,493,493,,493,493,,493,493,493,,,,,,,,,,,,,,,,,,,,493,,", "493,,,493,493,,,493,,493,,,,493,,,,,,,,,493,,,,,493,493,493,493,,493", "493,493,493,,,,,493,493,791,791,791,791,791,791,493,,493,791,791,,,", "791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791,,", "791,,,,,,791,791,791,791,791,791,791,791,791,791,791,791,,791,791,791", ",791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,", "791,,,,791,,,,,,,,,791,,,,,791,791,791,791,,791,791,791,791,,,,,791", "791,803,803,803,803,803,803,791,,791,803,803,,,,803,,803,803,803,803", "803,803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,404,803,803,803", "803,803,803,803,803,803,803,803,803,,803,803,803,,803,803,,803,803,803", "404,404,404,404,404,404,404,404,404,404,404,,404,404,,,404,404,,803", ",,803,,,803,803,,,803,,803,404,,404,803,404,404,,404,404,404,404,404", "803,404,,,,803,803,803,803,,803,803,803,803,,,,,803,803,,404,56,,,,803", ",803,56,56,56,,,56,56,56,,56,,,,,,,,,,56,56,56,,,,,,,,56,56,,56,56,56", "56,56,,,,,,,,,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,56,56,56,56,56,56", "56,,,56,56,56,,,56,,,56,,,56,56,,56,,56,,56,,56,56,,56,56,56,56,56,", "56,,56,,,,,,,,,,,,,,56,,,56,56,56,56,,56,,56,286,286,286,286,286,,,", "286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286", "286,286,,,286,,,,,,286,286,,286,286,286,286,286,286,286,286,286,,286", "286,286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286", ",,286,,286,,,,286,,,,,,,,,286,,,,,286,286,286,286,,286,286,286,286,", ",,,286,286,,59,59,59,,59,286,,286,59,59,,,,59,,59,59,59,59,59,59,59", ",,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59", "59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59", ",,,59,,,59,,,,,,59,,,,,59,59,59,59,,59,59,59,59,,,,,59,59,,60,60,60", ",60,59,,59,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60", "60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60", "60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,,,,", "60,60,60,60,,60,60,60,60,,,,,60,60,,832,832,832,,832,60,,60,832,832", ",,,832,,832,832,832,832,832,832,832,,,,,,832,832,832,832,832,832,832", ",,832,,,,,,,832,,,832,832,832,832,832,832,832,832,,832,832,832,,832", "832,,832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,,,,,832", ",,,,,,,,832,,,,,832,832,832,832,,832,832,832,832,,,,,832,832,,63,63", "63,,63,832,,832,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63", "63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,63,63", "63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,,63,,,,,63", "63,63,63,,63,63,63,63,,,,,63,63,,64,64,64,,64,63,,63,64,64,,,,64,,64", "64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64", "64,64,64,64,64,,64,64,64,,64,64,,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64", ",,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64,64,,,,,64", "64,,67,67,67,,67,64,,64,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67", "67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67", "67,,67,67,67,672,672,672,672,672,672,672,672,672,672,672,,672,672,,", "672,672,,67,,,67,,,67,67,,,67,,,672,,672,67,672,672,,672,672,672,672", "672,67,672,,,,67,67,67,67,,67,67,67,67,,,,,67,67,67,672,,,,67,67,,67", "68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68", "68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,,,68", ",,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,,,,,,,,,,68,68,68", "68,,68,68,68,68,,,,,68,68,,69,69,69,,69,68,,68,69,69,,,,69,,69,69,69", "69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69", "69,69,69,,69,69,69,,69,69,,,,69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69", ",,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,70,70,70", ",70,69,,69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70", "70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,,,70,,", ",,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70", ",70,70,70,70,,,,,70,70,,785,785,785,,785,70,,70,785,785,,,,785,,785", "785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785,,,785,,,,,", ",785,,,785,785,785,785,785,785,785,785,,785,785,785,,785,785,,,,785", ",,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,,,,,,,,,,,,,,,,,,,785", "785,785,785,,785,785,785,785,,,,,785,785,,773,773,773,,773,785,,785", "773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773", "773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773,,773,773,773", ",773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773,,,773,", ",,,,773,,,,,,,,,773,,,,,773,773,773,773,,773,773,773,773,,,,,773,773", ",44,44,44,,44,773,,773,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44", "44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44", "44,,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,", ",44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,43,43,43,,43,44,,44,43,43", ",,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43", ",,43,43,43,43,43,43,43,43,,43,43,43,,43,43,,43,43,43,,,,,,,,,,,,,,,", ",,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43", "43,,,,,43,43,,771,771,771,,771,43,,43,771,771,,,,771,,771,771,771,771", "771,771,771,,,,,,771,771,771,771,771,771,771,,,771,,,,,,,771,,,771,771", "771,771,771,771,771,771,,771,771,771,,771,771,,771,771,771,,,,,,,,,", ",,,,,,,,,,771,,,771,,,771,771,,,771,,,,,,771,,,,,,,,,771,,,,,771,771", "771,771,,771,771,771,771,,,,,771,771,,108,108,108,108,108,771,,771,108", "108,,,,108,,108,108,108,108,108,108,108,,,,,,108,108,108,108,108,108", "108,,,108,,,,,,108,108,108,108,108,108,108,108,108,108,108,108,,108", "108,108,,108,108,,108,108,108,516,516,516,516,516,516,516,516,516,516", "516,,516,516,,,516,516,,108,,,108,,,108,108,,,108,,108,516,,516,108", "516,516,,516,516,516,516,516,108,516,,,,108,108,108,108,,108,108,108", "108,,,,,108,108,,516,,,,108,108,,108,113,113,113,,113,,,,113,113,,,", "113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113,113,,", "113,,,,,,,113,,,113,113,113,113,113,113,113,113,,113,113,113,,113,113", ",113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,,,,,113,", ",,,,,,,113,,,,,113,113,113,113,,113,113,113,113,,,,,113,113,,114,114", "114,,114,113,,113,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114", "114,114,114,114,114,114,,,114,,,,,,,114,,,114,114,114,114,114,114,114", "114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114", ",,114,114,,,114,,,,,,114,,,,,,,,,114,,,,,114,114,114,114,,114,114,114", "114,,,,,114,114,,115,115,115,,115,114,,114,115,115,,,,115,,115,115,115", "115,115,115,115,,,,,,115,115,115,115,115,115,115,,,115,,,,,,,115,,,115", "115,115,115,115,115,115,115,,115,115,115,,115,115,,115,115,115,,,,,", ",,,,,,,,,,,,,,115,,,115,,,115,115,,,115,,,,,,115,,,,,,,,,115,,,,,115", "115,115,115,,115,115,115,115,,,,,115,115,,116,116,116,,116,115,,115", "116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116", "116,116,,,116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116,116,116", ",116,116,,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,", ",,,,116,,,,,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,,116,116", ",117,117,117,117,117,116,,116,117,117,,,,117,,117,117,117,117,117,117", "117,,,,,,117,117,117,117,117,117,117,,,117,,,,,,117,117,,117,117,117", "117,117,117,117,117,117,,117,117,117,,117,117,,117,117,117,,,,,,,,,", ",,,,,,,,,,117,,,117,,,117,117,,,117,,117,,,,117,,,,,,,,,117,,,,,117", "117,117,117,,117,117,117,117,,,,,117,117,,42,42,42,,42,117,,117,42,42", ",,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42", ",,42,42,42,42,42,42,42,42,,42,42,42,,42,42,,42,42,42,,,,,,,,,,,,,,,", ",,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42", "42,,,,,42,42,,770,770,770,,770,42,,42,770,770,,,,770,,770,770,770,770", "770,770,770,,,,,,770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770", "770,770,770,770,770,770,,770,770,770,,770,770,,770,770,770,,,,,,,,,", ",,,,,,,,,,770,,,770,,,770,770,,,770,,,,,,770,,,,,,,,,770,,,,,770,770", "770,770,,770,770,770,770,,,,,770,770,,769,769,769,,769,770,,770,769", "769,,,,769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769", "769,,,769,,,,,,,769,,,769,769,769,769,769,769,769,769,,769,769,769,", "769,769,,769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,", ",,,769,,,,,,,,,769,,,,,769,769,769,769,,769,769,769,769,,,,,769,769", ",837,837,837,,837,769,,769,837,837,,,,837,,837,837,837,837,837,837,837", ",,,,,837,837,837,837,837,837,837,,,837,,,,,,,837,,,837,837,837,837,837", "837,837,837,,837,837,837,,837,837,,837,837,837,,,,,,,,,,,,,,,,,,,,837", ",,837,,,837,837,,,837,,837,,,,837,,,,,,,,,837,,,,,837,837,837,837,,837", "837,837,837,,,,,837,837,,204,204,204,,204,837,,837,204,204,,,,204,,204", "204,204,204,204,204,204,,,,,,204,204,204,204,204,204,204,,,204,,,,,", ",204,,,204,204,204,204,204,204,204,204,,204,204,204,,204,204,,204,204", "204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204,204,,,204,,204,,,,204,,,,,,,", ",204,,,,,204,204,204,204,,204,204,204,204,,,,,204,204,,205,205,205,", "205,204,,204,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205", "205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205", ",205,205,205,,205,205,,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205", "205,,,205,,,,,,205,,,,,,,,,205,,,,,205,205,205,205,,205,205,205,205", ",,,,205,205,,206,206,206,,206,205,,205,206,206,,,,206,,206,206,206,206", "206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206", "206,206,206,206,206,206,206,206,206,206,,206,206,,206,206,206,,,,,,", ",,,,,,,,,,,,,206,,,206,,,206,206,,,206,,206,,206,,206,,,206,,,,,,206", ",,,,206,206,206,206,,206,206,206,206,,,,,206,206,,768,768,768,,768,206", ",206,768,768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768", "768,768,768,,,768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768,768", "768,,768,768,,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768", ",,,,,768,,,,,,,,,768,,,,,768,768,768,768,,768,768,768,768,,,,,768,768", ",754,754,754,,754,768,,768,754,754,,,,754,,754,754,754,754,754,754,754", ",,,,,754,754,754,754,754,754,754,,,754,,,,,,,754,,,754,754,754,754,754", "754,754,754,,754,754,754,,754,754,,754,754,754,,,,,,,,,,,,,,,,,,,,754", ",,754,,,754,754,,,754,,,,,,754,,,,,,,,,754,,,,,754,754,754,754,,754", "754,754,754,,,,,754,754,,209,209,209,,209,754,,754,209,209,,,,209,,209", "209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,", ",209,,,209,209,209,209,209,209,209,209,,209,209,209,,209,209,,209,209", "209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,,209", ",,,,209,209,209,209,,209,209,209,209,,,,,209,209,,210,210,210,,210,209", ",209,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210", "210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210", "210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210", ",210,,,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210,210,210,,,,,210", "210,,211,211,211,,211,210,,210,211,211,,,,211,,211,211,211,211,211,211", "211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211", "211,211,211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,", ",,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,,211,,,,,211,211,211,211", ",211,211,211,211,,,,,211,211,,212,212,212,,212,211,,211,212,212,,,,212", ",212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212,212,,,212", ",,,,,,212,,,212,212,212,212,212,212,212,212,,212,212,212,,212,212,,212", "212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,,,,,212,,,,,,", ",,212,,,,,212,212,212,212,,212,212,212,212,,,,,212,212,,213,213,213", ",213,212,,212,213,213,,,,213,,213,213,213,213,213,213,213,,,,,,213,213", "213,213,213,213,213,,,213,,,,,,,213,,,213,213,213,213,213,213,213,213", ",213,213,213,,213,213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213", "213,,,213,,,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213", ",,,,213,213,,214,214,214,,214,213,,213,214,214,,,,214,,214,214,214,214", "214,214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214", "214,214,214,214,214,214,,214,214,214,,214,214,,214,214,214,,,,,,,,,", ",,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214", "214,214,,214,214,214,214,,,,,214,214,214,752,752,752,,752,214,,214,752", "752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752,752", "752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752,752,752,", "752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,,", ",,,752,,,,,,,,,752,,,,,752,752,752,752,,752,752,752,752,,,,,752,752", ",35,35,35,,35,752,,752,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35", "35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35", "35,,,,35,758,758,758,758,758,758,758,758,758,758,758,,758,758,,,758", "758,,35,,,35,,,35,35,,,35,,,758,,758,,758,758,,758,758,758,758,758,", "758,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,758,,35,,,35,,35,34,34,34", ",34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,", ",34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,,34,,,,,,", ",,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,", "34,34,34,34,,,,,34,34,,729,729,729,,729,34,,34,729,729,,,,729,,729,729", "729,729,729,729,729,,,,,,729,729,729,729,729,729,729,,,729,,,,,,,729", ",,729,729,729,729,729,729,729,729,,729,729,729,,729,729,,729,729,729", ",,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,,729,,,,,,729,,,,,,,,,729,,", ",,729,729,729,729,,729,729,729,729,,,,,729,729,,31,31,31,,31,729,,729", "31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,", ",,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31,,,,,,,", ",,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31", "31,31,,31,31,31,31,,,,,31,31,,723,723,723,,723,31,,31,723,723,,,,723", ",723,723,723,723,723,723,723,,,,,,723,723,723,723,723,723,723,,,723", ",,,,,,723,,,723,723,723,723,723,723,723,723,,723,723,723,,723,723,,723", "723,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723,723,,,723,,,,,,723,,,,,,", ",,723,,,,,723,723,723,723,,723,723,723,723,,,,,723,723,,442,442,442", ",442,723,,723,442,442,,,,442,,442,442,442,442,442,442,442,,,,,,442,442", "442,442,442,442,442,,,442,,,,,,,442,,,442,442,442,442,442,442,442,442", ",442,442,442,,442,442,,442,442,442,,,,,,,,,,,,,,,,,,,,442,,,442,,,442", "442,,,442,,,,,,442,,,,,,,,,442,,,,,442,442,442,442,,442,442,442,442", ",,,,442,442,,225,225,225,,225,442,,442,225,225,,,,225,,225,225,225,225", "225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225", "225,225,225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,", ",,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,,225,,,,,225,225", "225,225,,225,225,225,225,,,,,225,225,,30,30,30,,30,225,,225,30,30,,", ",30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,", "30,30,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,", ",,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30", "30,30,30,,,,,30,30,,696,696,696,,696,30,,30,696,696,,,,696,,696,696", "696,696,696,696,696,,,,,,696,696,696,696,696,696,696,,,696,,,,,,,696", ",,696,696,696,696,696,696,696,696,,696,696,696,,696,696,,696,696,696", ",,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,,,,,696,,,,,,,,,696,,", ",,696,696,696,696,,696,696,696,696,,,,,696,696,,228,228,228,,228,696", ",696,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228", "228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228,,228,228", "228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228", ",,,,,228,,,,,,,,,228,,,,,228,228,228,228,,228,228,228,228,,,,,228,228", ",229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229,229,229", ",,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229", "229,229,229,,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229", ",,229,,,229,229,,,229,,,,,,229,,,,,,,,,229,,,,,229,229,229,229,,229", "229,229,229,,,,,229,229,,230,230,230,,230,229,,229,230,230,,,,230,,230", "230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,", ",230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,,230,230", "230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,,230", ",,,,230,230,230,230,,230,230,230,230,,,,,230,230,,231,231,231,,231,230", ",230,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231", "231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231", "231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231", ",,,,,231,,,,,,,,,231,,,,,231,231,231,231,,231,231,231,231,,,,,231,231", ",232,232,232,,232,231,,231,232,232,,,,232,,232,232,232,232,232,232,232", ",,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232", "232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232", ",,232,,,232,232,,,232,,,,,,232,,,,,,,,,232,,,,,232,232,232,232,,232", "232,232,232,,,,,232,232,,233,233,233,,233,232,,232,233,233,,,,233,,233", "233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,", ",233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233", "233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,,233", ",,,,233,233,233,233,,233,233,233,233,,,,,233,233,,234,234,234,,234,233", ",233,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234", "234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234", "234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234", ",,,,,234,,,,,,,,,234,,,,,234,234,234,234,,234,234,234,234,,,,,234,234", ",235,235,235,,235,234,,234,235,235,,,,235,,235,235,235,235,235,235,235", ",,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235", "235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235", ",,235,,,235,235,,,235,,,,,,235,,,,,,,,,235,,,,,235,235,235,235,,235", "235,235,235,,,,,235,235,,236,236,236,,236,235,,235,236,236,,,,236,,236", "236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,", ",236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236", "236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236", ",,,,236,236,236,236,,236,236,236,236,,,,,236,236,,237,237,237,,237,236", ",236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237", "237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237", "237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237", ",,,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237", ",238,238,238,,238,237,,237,238,238,,,,238,,238,238,238,238,238,238,238", ",,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238", "238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238", ",,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238", "238,238,238,,,,,238,238,,239,239,239,,239,238,,238,239,239,,,,239,,239", "239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,", ",239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239", "239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,,239", ",,,,239,239,239,239,,239,239,239,239,,,,,239,239,,240,240,240,,240,239", ",239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240", "240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240", "240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240", ",,,,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240", ",241,241,241,,241,240,,240,241,241,,,,241,,241,241,241,241,241,241,241", ",,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241", "241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241", ",,241,,,241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241", "241,241,241,,,,,241,241,,242,242,242,,242,241,,241,242,242,,,,242,,242", "242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,", ",242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242", "242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242", ",,,,242,242,242,242,,242,242,242,242,,,,,242,242,,243,243,243,,243,242", ",242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243", "243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243", "243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243", ",,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243", ",244,244,244,,244,243,,243,244,244,,,,244,,244,244,244,244,244,244,244", ",,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244", "244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244", ",,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244", "244,244,244,,,,,244,244,,245,245,245,,245,244,,244,245,245,,,,245,,245", "245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,", ",245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245", "245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245", ",,,,245,245,245,245,,245,245,245,245,,,,,245,245,,246,246,246,,246,245", ",245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246", "246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246", "246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246", ",,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246", ",247,247,247,,247,246,,246,247,247,,,,247,,247,247,247,247,247,247,247", ",,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247", "247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247", ",,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247", "247,247,247,,,,,247,247,,248,248,248,,248,247,,247,248,248,,,,248,,248", "248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,", ",248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248", "248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248", ",,,,248,248,248,248,,248,248,248,248,,,,,248,248,,249,249,249,,249,248", ",248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249", "249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249", "249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249", ",,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249", ",250,250,250,,250,249,,249,250,250,,,,250,,250,250,250,250,250,250,250", ",,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250", "250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250", ",,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250", "250,250,250,,,,,250,250,,251,251,251,,251,250,,250,251,251,,,,251,,251", "251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,", ",251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251", "251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,,251", ",,,,251,251,251,251,,251,251,251,251,,,,,251,251,,252,252,252,,252,251", ",251,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252", "252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252", "252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252", ",,,,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252", ",253,253,253,,253,252,,252,253,253,,,,253,,253,253,253,253,253,253,253", ",,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253", "253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253", ",,253,,,253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253", "253,253,253,,,,,253,253,,29,29,29,,29,253,,253,29,29,,,,29,,29,29,29", "29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29", "29,29,29,29,29,29,29,,29,29,,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29", "29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29", "29,,441,441,441,,441,29,,29,441,441,,,,441,,441,441,441,441,441,441", "441,,,,,,441,441,441,441,441,441,441,,,441,,,,,,,441,,,441,441,441,441", "441,441,441,441,,441,441,441,,441,441,,441,441,441,,,,,,,,,,,,,,,,,", ",,441,,,441,,,441,441,,,441,,,,,,441,,,,,,,,,441,,,,,441,441,441,441", ",441,441,441,441,,,,,441,441,,260,260,260,,260,441,,441,260,260,,,,260", ",260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260", ",,,,,,260,,,260,260,260,260,260,260,260,260,260,260,260,260,,260,260", ",260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,260,,260", ",260,,,260,,,,,,260,,,,,260,260,260,260,,260,260,260,260,,,,,260,260", ",261,261,261,,261,260,,260,261,261,,,,261,,261,261,261,261,261,261,261", ",,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261", "261,261,261,261,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,", ",261,,,261,,,261,261,,,261,,261,,261,,261,,,261,,,,,,261,,,,,261,261", "261,261,,261,261,261,261,,,,,261,261,,269,269,269,,269,261,,261,269", "269,,,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269", "269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,269,269,269,269", ",269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,", "269,,269,,269,,,269,,,,,,269,,,,,269,269,269,269,,269,269,269,269,,", ",,269,269,269,677,677,677,,677,269,,269,677,677,,,,677,,677,677,677", "677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677", "677,677,677,677,677,677,677,,677,677,677,,677,677,,677,677,677,,,,,", ",,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,677,,,,677,,,,,,,,,677,,,,", "677,677,677,677,,677,677,677,677,,,,,677,677,,671,671,671,,671,677,", "677,671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671", "671,671,671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671", "671,,671,671,,,,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,,", ",,,,,,,,,,,,,,,,671,671,671,671,,671,671,671,671,,,,,671,671,,660,660", "660,,660,671,,671,660,660,,,,660,,660,660,660,660,660,660,660,,,,,,660", "660,660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660,660,660", "660,,660,660,660,,660,660,,,,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660", "660,,,660,,,,,,,,,,,,,,,,,,,,660,660,660,660,,660,660,660,660,,,,,660", "660,,276,276,276,,276,660,,660,276,276,,,,276,,276,276,276,276,276,276", "276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276,276,276,276", "276,276,276,276,,276,276,276,,276,276,,276,276,276,,,,,,,,,,,,,,,,,", ",,276,,,276,,,276,276,,,276,,,,,,276,,,,,,,,,276,,,,,276,276,276,276", ",276,276,276,276,,,,,276,276,,654,654,654,,654,276,,276,654,654,,,,654", ",654,654,654,654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654", ",,,,,,654,,,654,654,654,654,654,654,654,654,,654,654,654,,654,654,,654", "654,654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,,,,,654,,,,,,", ",,654,,,,,654,654,654,654,,654,654,654,654,,,,,654,654,,278,278,278", ",278,654,,654,278,278,,,,278,,278,278,278,278,278,278,278,,,,,,278,278", "278,278,278,278,278,,,278,,,,,,,278,,,278,278,278,278,278,278,278,278", ",278,278,278,,278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278", "278,,,278,,,,,,278,,,,,,,,,278,,,,,278,278,278,278,,278,278,278,278", ",,,,278,278,,280,280,280,,280,278,,278,280,280,,,,280,,280,280,280,280", "280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,,,280,,,280,280", "280,280,280,280,280,280,,280,280,280,,280,280,,280,280,280,,,,,,,,,", ",,,,,,,,,,280,,,280,,,280,280,,,280,,,,,,280,,,,,,,,,280,,,,,280,280", "280,280,,280,280,280,280,,,,,280,280,,281,281,281,,281,280,,280,281", "281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281,281", "281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281,281,", "281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,", ",,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281,,,,,281,281", ",440,440,440,,440,281,,281,440,440,,,,440,,440,440,440,440,440,440,440", ",,,,,440,440,440,440,440,440,440,,,440,,,,,,,440,,,440,440,440,440,440", "440,440,440,,440,440,440,,440,440,,440,440,440,,,,,,,,,,,,,,,,,,,,440", ",,440,,,440,440,,,440,,,,,,440,,,,,,,,,440,,,,,440,440,440,440,,440", "440,440,440,,,,,440,440,,58,58,58,,58,440,,440,58,58,,,,58,,58,58,58", "58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58,58,58", "58,58,58,,58,58,58,,58,58,,58,58,58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58", "58,,,58,,,,,,58,,,,,,,,,58,,,,,58,58,58,58,,58,58,58,58,,,,,58,58,,854", "854,854,,854,58,,58,854,854,,,,854,,854,854,854,854,854,854,854,,,,", ",854,854,854,854,854,854,854,,,854,,,,,,,854,,,854,854,854,854,854,854", "854,854,854,854,854,854,,854,854,,854,854,854,,,,,,,,,,,,,,,,,,,,854", ",,854,,,854,854,,,854,,,,854,,854,,,854,,,,,,854,,,,,854,854,854,854", ",854,854,854,854,,,,,854,854,,855,855,855,,855,854,,854,855,855,,,,855", ",855,855,855,855,855,855,855,,,,,,855,855,855,855,855,855,855,,,855", ",,,,,,855,,,855,855,855,855,855,855,855,855,,855,855,855,,855,855,,855", "855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855,855,,,855,,,,,,855,,,,,,", ",,855,,,,,855,855,855,855,,855,855,855,855,,,,,855,855,,869,869,869", ",869,855,,855,869,869,,,,869,,869,869,869,869,869,869,869,,,,,,869,869", "869,869,869,869,869,,,869,,,,,,,869,,,869,869,869,869,869,869,869,869", ",869,869,869,,869,869,,,,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869", ",,869,,,,,,,,,,,,,,,,,,,,869,869,869,869,,869,869,869,869,,,,,869,869", ",20,20,20,,20,869,,869,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20", "20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20", "20,,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,", ",20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,373,373,373,,373,20,,20", "373,373,,,,373,,373,373,373,373,373,373,373,,,,,,373,373,373,373,373", "373,373,,,373,,,,,,,373,,,373,373,373,373,373,373,373,373,,373,373,373", ",373,373,,373,373,373,,,,,,,,,,,,,,,,,,,,373,,,373,,,373,373,,,373,", ",,,,373,,,,,,,,,373,,,,,373,373,373,373,,373,373,373,373,,,,,373,373", ",630,630,630,,630,373,,373,630,630,,,,630,,630,630,630,630,630,630,630", ",,,,,630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630", "630,630,630,,630,630,630,,630,630,,630,630,630,,,,,,,,,,,,,,,,,,,,630", ",,630,,,630,630,,,630,,,,,,630,,,,,,,,,630,,,,,630,630,630,630,,630", "630,630,630,,,,,630,630,,629,629,629,,629,630,,630,629,629,,,,629,,629", "629,629,629,629,629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,", ",629,,,629,629,629,629,629,629,629,629,,629,629,629,,629,629,,629,629", "629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,,629", ",,,,629,629,629,629,,629,629,629,629,,,,,629,629,,294,294,294,,294,629", ",629,294,294,,,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294", "294,294,294,,,294,,,,,,,294,,,294,294,294,294,294,294,294,294,,294,294", "294,,294,294,,,,294,760,760,760,760,760,760,760,760,760,760,760,,760", "760,,,760,760,,294,,,294,,,294,294,,,294,,,760,,760,,760,760,,760,760", "760,760,760,,760,,,,294,294,294,294,,294,294,294,294,,,,,294,294,,760", ",294,,,294,,294,881,881,881,,881,,,,881,881,,,,881,,881,881,881,881", "881,881,881,,,,,,881,881,881,881,881,881,881,,,881,,,,,,,881,,,881,881", "881,881,881,881,881,881,,881,881,881,,881,881,,,,881,,,,,,,,,,,,,,,", ",,,,881,,,881,,,881,881,,,881,,,,,,,,,,,,,,,,,,,,881,881,881,881,,881", "881,881,881,,,,,881,881,,626,626,626,,626,881,,881,626,626,,,,626,,626", "626,626,626,626,626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,", ",626,,,626,626,626,626,626,626,626,626,,626,626,626,,626,626,,626,626", "626,,,,,,,,,,,,,,,,,,,,626,,,626,,,626,626,,,626,,,,,,626,,,,,,,,,626", ",,,,626,626,626,626,,626,626,626,626,,,,,626,626,,625,625,625,,625,626", ",626,625,625,,,,625,,625,625,625,625,625,625,625,,,,,,625,625,625,625", "625,625,625,,,625,,,,,,,625,,,625,625,625,625,625,625,625,625,,625,625", "625,,625,625,,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,625,,,625", ",,,,,625,,,,,,,,,625,,,,,625,625,625,625,,625,625,625,625,,,,,625,625", ",621,621,621,,621,625,,625,621,621,,,,621,,621,621,621,621,621,621,621", ",,,,,621,621,621,621,621,621,621,,,621,,,,,,,621,,,621,621,621,621,621", "621,621,621,,621,621,621,,621,621,,621,621,621,,,,,,,,,,,,,,,,,,,,621", ",,621,,,621,621,,,621,,,,,,621,,,,,,,,,621,,,,,621,621,621,621,,621", "621,621,621,,,,,621,621,,491,491,491,491,491,621,,621,491,491,,,,491", ",491,491,491,491,491,491,491,,,,,,491,491,491,491,491,491,491,,,491", ",,,,,491,491,491,491,491,491,491,491,491,491,491,491,,491,491,491,,491", "491,,491,491,491,763,763,763,763,763,763,763,763,763,763,763,,763,763", ",,763,763,,491,,,491,,,491,491,,,491,,491,763,,763,491,763,763,,763", "763,763,763,763,491,763,,,,491,491,491,491,,491,491,491,491,,,,,491", "491,,763,,,,491,491,,491,619,619,619,,619,,,,619,619,,,,619,,619,619", "619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,,,619", ",,619,619,619,619,619,619,619,619,619,619,619,619,,619,619,,619,619", "619,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619,,,,619,,619,,,619,", ",,,,619,,,,,619,619,619,619,,619,619,619,619,,,,,619,619,,618,618,618", ",618,619,,619,618,618,,,,618,,618,618,618,618,618,618,618,,,,,,618,618", "618,618,618,618,618,,,618,,,,,,,618,,,618,618,618,618,618,618,618,618", "618,618,618,618,,618,618,,618,618,618,,,,,,,,,,,,,,,,,,,,618,,,618,", ",618,618,,,618,,618,,618,,618,,,618,,,,,,618,,,,,618,618,618,618,,618", "618,618,618,,,,,618,618,,615,615,615,,615,618,,618,615,615,,,,615,,615", "615,615,615,615,615,615,,,,,,615,615,615,615,615,615,615,,,615,,,,,", ",615,,,615,615,615,615,615,615,615,615,,615,615,615,,615,615,,615,615", "615,,,,,,,,,,,,,,,,,,,,615,,,615,,,615,615,,,615,,,,,,615,,,,,,,,,615", ",,,,615,615,615,615,,615,615,615,615,,,,,615,615,,614,614,614,,614,615", ",615,614,614,,,,614,,614,614,614,614,614,614,614,,,,,,614,614,614,614", "614,614,614,,,614,,,,,,,614,,,614,614,614,614,614,614,614,614,,614,614", "614,,614,614,,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,,614", ",614,,,,614,,,,,,,,,614,,,,,614,614,614,614,,614,614,614,614,,,,,614", "614,,482,482,482,,482,614,,614,482,482,,,,482,,482,482,482,482,482,482", "482,,,,,,482,482,482,482,482,482,482,,,482,,,,,,,482,,,482,482,482,482", "482,482,482,482,482,482,482,482,,482,482,,482,482,482,,,,,,,,,,,,,,", ",,,,,482,,,482,,,482,482,,,482,,482,,482,,482,,,482,,,,,,482,,,,,482", "482,482,482,,482,482,482,482,,,,,482,482,,438,438,438,,438,482,,482", "438,438,,,,438,,438,438,438,438,438,438,438,,,,,,438,438,438,438,438", "438,438,,,438,,,,,,,438,,,438,438,438,438,438,438,438,438,438,438,438", "438,,438,438,,438,438,438,,,,,,,,,,,,,,,,,,,,438,,,438,,,438,438,,,438", ",438,,438,,438,,,438,,,,,,438,,,,,438,438,438,438,,438,438,438,438,", ",,,438,438,,580,580,580,,580,438,,438,580,580,,,,580,,580,580,580,580", "580,580,580,,,,,,580,580,580,580,580,580,580,,,580,,,,,,,580,,,580,580", "580,580,580,580,580,580,580,580,580,580,,580,580,,580,580,580,,,,,,", ",,,,,,,,,,,,,580,,,580,,,580,580,,,580,,580,,580,,580,,,580,,,,,,580", ",,,,580,580,580,580,,580,580,580,580,,,,,580,580,,311,311,311,,311,580", ",580,311,311,,,,311,,311,311,311,311,311,311,311,,,,,,311,311,311,311", "311,311,311,,,311,,,,,,,311,,,311,311,311,311,311,311,311,311,,311,311", "311,,311,311,,,,311,,,,,,,,,,,,,,,,,,,,311,,,311,,,311,311,,,311,,,", ",,,,,,,,,,,,,,,,311,311,311,311,,311,311,311,311,,,,,311,311,,570,570", "570,,570,311,,311,570,570,,,,570,,570,570,570,570,570,570,570,,,,,,570", "570,570,570,570,570,570,,,570,,,,,,,570,,,570,570,570,570,570,570,570", "570,570,570,570,570,,570,570,,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570", ",,570,570,,,570,,570,,570,,570,,,570,,,,,,570,,,,,570,570,570,570,,570", "570,570,570,,,,,570,570,,569,569,569,,569,570,,570,569,569,,,,569,,569", "569,569,569,569,569,569,,,,,,569,569,569,569,569,569,569,,,569,,,,,", ",569,,,569,569,569,569,569,569,569,569,,569,569,569,,569,569,,569,569", "569,,,,,,,,,,,,,,,,,,,,569,,,569,,,569,569,,,569,,569,,,,569,,,,,,,", ",569,,,,,569,569,569,569,,569,569,569,569,,,,,569,569,,974,974,974,", "974,569,,569,974,974,,,,974,,974,974,974,974,974,974,974,,,,,,974,974", "974,974,974,974,974,,,974,,,,,,,974,,,974,974,974,974,974,974,974,974", "974,974,974,974,,974,974,,974,974,974,,,,,,,,,,,,,,,,,,,,974,,,974,", ",974,974,,,974,,974,,974,,974,,,974,,,,,,974,,,,,974,974,974,974,,974", "974,974,974,,,,,974,974,,5,5,5,5,5,974,,974,5,5,,,,5,,5,5,5,5,5,5,5", ",,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,,5,5", "5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,", "5,5,5,5,,,,,5,5,,549,549,549,,549,5,,5,549,549,,,,549,,549,549,549,549", "549,549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549", "549,549,549,549,549,549,,549,549,549,,549,549,,549,549,549,,,,,,,,,", ",,,,,,,,,,549,,,549,,,549,549,,,549,,,,,,549,,,,,,,,,549,,,,,549,549", "549,549,,549,549,549,549,,,,,549,549,,320,320,320,,320,549,,549,320", "320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320,320,320,320", "320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320,,320,320,320,", "320,320,,320,320,320,,,,,,,,,,,,,,,,,,,,320,,,320,320,,320,320,,,320", ",,,,,320,,,,,,,,,320,,,,,320,320,320,320,,320,320,320,320,,,,,320,320", ",357,357,357,,357,320,,320,357,357,,,,357,,357,357,357,357,357,357,357", ",,,,,357,357,357,357,357,357,357,,,357,,,,,,,357,,,357,357,357,357,357", "357,357,357,,357,357,357,,357,357,,357,357,357,,,,,,,,,,,,,,,,,,,,357", ",,357,,,357,357,,,357,,,,,,357,,,,,,,,,357,,,,,357,357,357,357,,357", "357,357,357,,,,,357,357,,526,526,526,,526,357,,357,526,526,,,,526,,526", "526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,", ",526,,,526,526,526,526,526,526,526,526,526,526,526,526,,526,526,,526", "526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,526", ",,,,,526,,,,,526,526,526,526,,526,526,526,526,,,,,526,526,,523,523,523", ",523,526,,526,523,523,,,,523,,523,523,523,523,523,523,523,,,,,,523,523", "523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523", "523,523,523,523,,523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,", ",523,523,,,523,,523,,,,523,,,523,,,,,,523,,,,,523,523,523,523,,523,523", "523,523,,,,,523,523,,517,517,517,,517,523,,523,517,517,,,,517,,517,517", "517,517,517,517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517", ",,517,517,517,517,517,517,517,517,,517,517,517,,517,517,,517,517,517", ",,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517,,,,,,517,,,,,,,,,517,,", ",,517,517,517,517,,517,517,517,517,,,,,517,517,,513,513,513,,513,517", ",517,513,513,,,,513,,513,513,513,513,513,513,513,,,,,,513,513,513,513", "513,513,513,,,513,,,,,,,513,,,513,513,513,513,513,513,513,513,,513,513", "513,,513,513,,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513", ",,,,,513,,,,,,,,,513,,,,,513,513,513,513,,513,513,513,513,,,,,513,513", ",512,512,512,,512,513,,513,512,512,,,,512,,512,512,512,512,512,512,512", ",,,,,512,512,512,512,512,512,512,,,512,,,,,,,512,,,512,512,512,512,512", "512,512,512,,512,512,512,,512,512,,512,512,512,,,,,,,,,,,,,,,,,,,,512", ",,512,,,512,512,,,512,,,,,,512,,,,,,,,,512,,,,,512,512,512,512,,512", "512,512,512,,,,,512,512,,511,511,511,,511,512,,512,511,511,,,,511,,511", "511,511,511,511,511,511,,,,,,511,511,511,511,511,511,511,,,511,,,,,", ",511,,,511,511,511,511,511,511,511,511,,511,511,511,,511,511,,511,511", "511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,,511,,,,,,511,,,,,,,,,511", ",,,,511,511,511,511,,511,511,511,511,,,,,511,511,,508,508,508,,508,511", ",511,508,508,,,,508,,508,508,508,508,508,508,508,,,,,,508,508,508,508", "508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508,508,508,,508,508", "508,,508,508,,,,508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,,", ",,,,,,,,,,,,,,,,508,508,508,508,,508,508,508,508,,,,,508,508,,501,501", "501,,501,508,,508,501,501,,,,501,,501,501,501,501,501,501,501,,,,,,501", "501,501,501,501,501,501,,,501,,,,,,,501,,,501,501,501,501,501,501,501", "501,501,501,501,501,,501,501,,501,501,501,,,,,,,,,,,,,,,,,,,,501,,,501", ",,501,501,,,501,,501,,501,,501,,,501,,,,,,501,,,,,501,501,501,501,,501", "501,501,501,,,,,501,501,,499,499,499,,499,501,,501,499,499,,,,499,,499", "499,499,499,499,499,499,,,,,,499,499,499,499,499,499,499,,,499,,,,,", ",499,,,499,499,499,499,499,499,499,499,,499,499,499,,499,499,,,,499", ",,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,,,,,,,,,,,,,,,,,,,499", "499,499,499,,499,499,499,499,,,,,499,499,,401,401,401,,401,499,,499", "401,401,,,,401,,401,401,401,401,401,401,401,,,,,,401,401,401,401,401", "401,401,,,401,,,,,,,401,,,401,401,401,401,401,401,401,401,,401,401,401", ",401,401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,,401,", ",,,,401,,,,,,,,,401,,,,,401,401,401,401,,401,401,401,401,,,,,401,401", ",484,484,484,,484,401,,401,484,484,,,,484,,484,484,484,484,484,484,484", ",,,,,484,484,484,484,484,484,484,,,484,,,,,,,484,,,484,484,484,484,484", "484,484,484,484,484,484,484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,,", ",484,,,484,,,484,484,,,484,,,,484,,484,,,484,,,,,,484,,,,,484,484,484", "484,,484,484,484,484,,,,,484,484,,486,486,486,,486,484,,484,486,486", ",,,486,,486,486,486,486,486,486,486,,,,,,486,486,486,486,486,486,486", ",,486,,,,,,,486,,,486,486,486,486,486,486,486,486,,486,486,486,,486", "486,,486,486,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486,,,,,,486", ",,,,,,,,486,,,,,486,486,486,486,,486,486,486,486,,,,,486,486,,337,337", "337,,337,486,,486,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337", "337,337,337,337,337,337,,,337,,,,,,,337,,,337,337,337,337,337,337,337", "337,,337,337,337,,337,337,,337,337,337,,,,,,,,,,,,,,,,,,,,337,,,337", ",,337,337,,,337,,,,,,337,,,,,,,,,337,,,,,337,337,337,337,,337,337,337", "337,,,,,337,337,,338,338,338,,338,337,,337,338,338,,,,338,,338,338,338", "338,338,338,338,,,,,,338,338,338,338,338,338,338,,,338,,,,,,,338,,,338", "338,338,338,338,338,338,338,,338,338,338,,338,338,,338,338,338,,,,,", ",,,,,,,,,,,,,,338,,,338,,,338,338,,,338,,,,,,338,,,,,,,,,338,,,,,338", "338,338,338,,338,338,338,338,,,,,338,338,,620,620,620,,620,338,,338", "620,620,,,,620,,620,620,620,620,620,620,620,,,,,,620,620,620,620,620", "620,620,,,620,,,,,,,620,,,620,620,620,620,620,620,620,620,,620,620,620", ",620,620,,620,620,620,856,856,856,856,856,856,856,856,856,856,856,,856", "856,,,856,856,,620,,,620,,,620,620,,,620,,,856,,856,620,856,856,,856", "856,856,856,856,620,856,,,,620,620,620,620,,620,620,620,620,,,,,620", "620,,856,28,,,,620,,620,28,28,28,,,28,28,28,,28,,,,,,,,,,28,28,,,,,", ",,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28", "28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28", "28,,28,28,28,28,28,,28,411,28,,,,,,411,411,411,,,411,411,411,28,411", ",28,28,,28,,28,,411,411,411,,,,,,,,,411,411,,411,411,411,411,411,,,", ",,,,,,,,,,,,,,,,,,,,411,411,411,411,411,411,411,411,411,411,411,411", "411,411,,,411,411,411,,,411,,411,411,,,411,411,,411,,411,,411,,411,411", ",411,411,411,411,411,,411,411,411,,,,,,,,,,,,,,411,,470,411,411,,411", ",411,470,470,470,,,470,470,470,641,470,641,641,641,641,641,,,,470,470", ",,,,641,,,,,470,470,,470,470,470,470,470,,,,,,,,,,641,,,,,,,,,641,641", "641,641,,,,641,,,,,,,,,470,,27,,,,,470,,27,27,27,470,470,27,27,27,641", "27,,,,,,,,,27,27,27,,,,,,470,470,,27,27,,27,27,27,27,27,,,,,470,,,470", ",,,,470,,,,,,,,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27", "27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27", ",,,,,,,,,,,,,27,,,27,27,,27,,27,392,392,392,392,392,392,392,392,392", "392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,,,,392,392", "392,392,392,392,392,392,392,392,,,,,,392,392,392,392,392,392,392,392", "392,,,392,,,,,,,,,392,392,,392,392,392,392,392,392,392,,,392,392,,,", "392,392,392,392,,,,,,,,,,,,,,392,392,,392,392,392,392,392,392,392,392", "392,392,392,392,,,392,392,,,,,,,,,,,,,,392,611,611,611,611,611,611,611", "611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611", ",,,611,611,611,611,611,611,611,611,611,611,,,,,,611,611,611,611,611", "611,611,611,611,,,611,,,,,,,,,611,611,,611,611,611,611,611,611,611,", ",611,611,,,,611,611,611,611,,,,,,,,,,,,,,611,611,,611,611,611,611,611", "611,611,611,611,611,611,611,,,611,611,,,,,,,,,,,,,,611,8,8,8,8,8,8,8", "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8", "8,8,8,8,8,8,8,,8,,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,", ",,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,9,9,9,9,9,9", "9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9", "9,9,9,9,9,9,9,,,9,,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,", ",,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,736,736,736", "736,736,736,736,736,736,736,736,736,736,736,736,736,736,736,736,736", "736,736,736,736,,,,736,736,736,736,736,736,736,736,736,736,,,,,,736", "736,736,736,736,736,736,736,736,,,736,,,,,,,,,736,736,,736,736,736,736", "736,736,736,,,736,736,,,,736,736,736,736,,,,,,,,,,,,,,736,736,,736,736", "736,736,736,736,736,736,736,736,736,736,,,736,71,71,71,71,71,71,71,71", "71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71,71,71", "71,71,71,71,,,,,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,,,71,71", ",71,71,71,71,71,71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71", "71,71,71,71,71,71,71,71,71,71,71,,,71,753,753,753,753,753,753,753,753", "753,753,753,,753,753,,,753,753,,531,,531,531,531,531,531,,,,,,,753,", "753,531,753,753,,753,753,753,753,753,,753,765,765,765,765,765,765,765", "765,765,765,765,531,765,765,,,765,765,,753,531,531,531,531,,,,531,,", ",,765,,765,,765,765,,765,765,765,765,765,,765,468,468,468,468,468,468", "468,468,468,468,468,,468,468,,,468,468,,765,,,889,,889,889,889,889,889", ",,,468,,468,,468,468,889,468,468,468,468,468,,468,853,853,853,853,853", "853,853,853,853,853,853,,853,853,889,,853,853,468,468,,,,,,889,889,", ",,889,,853,,853,,853,853,,853,853,853,853,853,,853,21,21,21,21,21,21", "21,21,21,21,21,,21,21,,,21,21,,853,,,962,,962,962,962,962,962,,,,21", ",21,,21,21,962,21,21,21,21,21,,21,767,767,767,767,767,767,767,767,767", "767,767,,767,767,962,,767,767,,21,,,,,,962,962,,,,962,,767,,767,,767", "767,,767,767,767,767,767,,767,271,271,271,271,271,271,271,271,271,271", "271,,271,271,,,271,271,,767,,,966,,966,966,966,966,966,,,,271,,271,", "271,271,966,271,271,271,271,271,,271,423,423,423,423,423,423,423,423", "423,423,423,,423,423,966,,423,423,,271,,,,,,966,966,,,,966,,423,,423", ",423,423,,423,423,423,423,423,,423,,,,,208,208,,,208,,,,,,,,,208,208", "423,208,208,208,208,208,208,208,,,208,208,,,,208,208,208,208,,,,,,208", ",,,,,,,208,208,,208,208,208,208,208,208,208,208,208,208,208,208,976", "976,208,,976,,,,,,,,,976,976,,976,976,976,976,976,976,976,,,976,976", ",,,976,976,976,976,,,,,,976,,,,,,,,976,976,,976,976,976,976,976,976", "976,976,976,976,976,976,256,256,976,,256,,,,,,,,,256,256,,256,256,256", "256,256,256,256,,,256,256,,,,256,256,256,256,,,,,,,,,,,,,,256,256,,256", "256,256,256,256,256,256,256,256,256,256,256,514,514,256,,514,,,,,,,", ",514,514,,514,514,514,514,514,514,514,,,514,514,,,,514,514,514,514,", ",,,,514,,,,,,,,514,514,,514,514,514,514,514,514,514,514,514,514,514", "514,515,515,514,,515,,,,,,,,,515,515,,515,515,515,515,515,515,515,,", "515,515,,,,515,515,515,515,,,,,,515,,,,,,,,515,515,,515,515,515,515", "515,515,515,515,515,515,515,515,579,579,515,,579,,,,,,,,,579,579,,579", "579,579,579,579,579,579,,,579,579,,,,579,579,579,579,,,,,,579,,,,,,", ",579,579,,579,579,579,579,579,579,579,579,579,579,579,579,578,578,579", ",578,,,,,,,,,578,578,,578,578,578,578,578,578,578,,,578,578,,,,578,578", "578,578,,,,,,578,,,,,,,,578,578,,578,578,578,578,578,578,578,578,578", "578,578,578,437,437,578,,437,,,,,,,,,437,437,,437,437,437,437,437,437", "437,,,437,437,,,,437,437,437,437,,,,,,437,,,,,,,,437,437,,437,437,437", "437,437,437,437,437,437,437,437,437,436,436,437,,436,,,,,,,,,436,436", ",436,436,436,436,436,436,436,,,436,436,,,,436,436,436,436,,,,,,436,", ",,,,,,436,436,,436,436,436,436,436,436,436,436,436,436,436,436,572,572", "436,,572,,,,,,,,,572,572,,572,572,572,572,572,572,572,,,572,572,,,,572", "572,572,572,,,,,,572,,,,,,,,572,572,,572,572,572,572,572,572,572,572", "572,572,572,572,931,931,572,,931,,,,,,,,,931,931,,931,931,931,931,931", "931,931,,,931,931,,,,931,931,931,931,,,,,,931,,,,,,,,931,931,,931,931", "931,931,931,931,931,931,931,931,931,931,571,571,931,,571,,,,,,,,,571", "571,,571,571,571,571,571,571,571,,,571,571,,,,571,571,571,571,,,,,,571", ",,,,,,,571,571,,571,571,571,571,571,571,571,571,571,571,571,571,207", "207,571,,207,,,,,,,,,207,207,,207,207,207,207,207,207,207,,,207,207", ",,,207,207,207,207,,,,,,207,,,,,,,,207,207,,207,207,207,207,207,207", "207,207,207,207,207,207,975,975,207,,975,,,,,,,,,975,975,,975,975,975", "975,975,975,975,,,975,975,,,,975,975,975,975,,,,,,975,,,,,,,,975,975", ",975,975,975,975,975,975,975,975,975,975,975,975,502,502,975,,502,,", ",,,,,,502,502,,502,502,502,502,502,502,502,,,502,502,,,,502,502,502", "502,,,,,,502,,,,,,,,502,502,,502,502,502,502,502,502,502,502,502,502", "502,502,503,503,502,,503,,,,,,,,,503,503,,503,503,503,503,503,503,503", ",,503,503,,,,503,503,503,503,,,,,,503,,,,,,,,503,503,,503,503,503,503", "503,503,503,503,503,503,503,503,,864,503,864,864,864,864,864,,862,,862", "862,862,862,862,1004,864,1004,1004,1004,1004,1004,,860,862,860,860,860", "860,860,,1004,,,,,,,864,860,,,,,,,862,,,864,864,,,1004,864,862,862,862", "862,,,860,862,,1004,1004,,,,1004,860,860,860,860,,,587,860,587,587,587", "587,587,,694,,694,694,694,694,694,,587,333,,333,333,333,333,333,694", "960,,960,960,960,960,960,,333,,,,,587,587,,960,,,,,694,587,587,587,587", ",,,587,333,333,694,694,,,,694,960,333,333,333,333,,,,333,960,960,960", "960,,,692,960,692,692,692,692,692,,690,,690,690,690,690,690,,692,,,", ",,,,690,914,,914,914,914,914,914,,,,,,,692,,,914,,,,,690,692,692,692", "692,,,,692,690,690,690,690,,,,690,914,914,734,,734,734,734,734,734,914", "914,914,914,,,,914,891,734,891,891,891,891,891,,978,,978,978,978,978", "978,893,891,893,893,893,893,893,,734,978,,,,,,,893,734,734,734,734,", ",891,734,,,,,,,978,,,891,891,,,893,891,,,978,978,,,,978,,893,893,,,964", "893,964,964,964,964,964,,,,,,,,,,964,,,,,,,,,,,,,,,,,,,,,,964,,,,,,", ",,,,964,964,,,,964"];

      racc_action_check = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(25112, nil);

      idx = 0;

      ($a = ($c = clist).$each, $a._p = (TMP_3 = function(str){var self = TMP_3._s || this, $a, $b, TMP_4;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_4 = function(i){var self = TMP_4._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_4._s = self, TMP_4), $a).call($b)}, TMP_3._s = self, TMP_3), $a).call($c);

      racc_action_pointer = [1972, 1312, nil, 310, nil, 19713, 1177, 1179, 22902, 23031, 1149, nil, 1060, 1103, 791, 360, 934, 752, nil, -73, 16967, 23507, 963, nil, 489, nil, -24, 22509, 22186, 14627, 10987, 10467, nil, 3413, 10207, 10069, nil, 795, 285, 414, 841, 473, 7989, 6941, 6811, 751, 483, nil, nil, nil, nil, nil, nil, nil, nil, nil, 5106, nil, 16447, 5373, 5503, -21, nil, 5763, 5893, nil, nil, 6023, 6161, 6291, 6421, 23274, nil, nil, nil, nil, nil, 569, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 111, nil, nil, 246, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 668, nil, 7201, nil, nil, nil, nil, 7339, 7469, 7599, 7729, 7859, 4453, nil, 478, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 521, nil, 4063, 8509, 8639, 8769, 24455, 23711, 9159, 9289, 9419, 9549, 9679, 9809, nil, nil, 215, -59, -38, 347, 289, 211, 161, nil, 10857, 3153, 757, 11247, 11377, 11507, 11637, 11767, 11897, 12027, 12157, 12287, 12417, 12547, 12677, 12807, 12937, 13067, 13197, 13327, 13457, 13587, 13717, 13847, 13977, 14107, 14237, 14367, 14497, nil, nil, 23835, nil, nil, 560, 14887, 15017, nil, nil, nil, nil, nil, nil, nil, 15147, nil, 23599, nil, 841, 1094, nil, 15667, 1179, 15927, nil, 16057, 16187, nil, nil, -38, nil, 5243, 1192, 1194, 1160, 2102, 1166, 1068, 1023, 17487, 1842, 841, 833, 794, 918, 696, nil, 816, 509, 188, nil, nil, nil, 204, 679, 202, 19193, nil, 386, 275, 329, 527, nil, 455, nil, 19973, 4583, 291, 522, nil, 296, 365, 759, 764, -100, 866, nil, nil, 24797, 542, 33, 35, 21793, 21923, 581, 1006, 888, 9, 39, 932, 1067, -19, 1126, nil, nil, 254, 350, 241, nil, 935, nil, 25, 20103, nil, nil, nil, 497, 462, 151, 495, 131, 313, 392, 585, 558, nil, 554, nil, 17097, nil, 243, 278, 306, 311, 379, -45, -39, -30, nil, nil, nil, nil, nil, nil, nil, nil, 1151, 22644, nil, nil, nil, nil, 1092, nil, 1071, nil, 21403, 1055, nil, 4973, 1057, nil, 1048, 1033, 358, 399, 22299, nil, nil, nil, 0, 651, 1066, nil, nil, 2625, 924, nil, 23645, nil, 1013, nil, nil, 791, nil, nil, nil, nil, 24, nil, 1061, 24207, 24145, 18933, 124, 16317, 14757, 10727, 1842, 1972, -47, -49, 1002, 992, 986, 983, 578, 3153, 3023, 1582, 1712, 2573, 1192, 1062, 2893, 2102, 2232, 1322, 2763, 404, 607, 1452, 2362, 23415, -24, 22429, nil, nil, nil, nil, 910, nil, -48, -51, 908, nil, nil, 18803, nil, 21533, nil, 21663, nil, nil, nil, nil, 18145, 1047, 4713, 838, 825, nil, nil, 823, 21273, 824, 21143, 24579, 24641, 595, 826, nil, nil, 21013, 771, nil, 20883, 20753, 20623, 23897, 23959, 7201, 20493, 777, 769, 544, 581, nil, 20363, nil, nil, 20233, nil, nil, nil, -22, 23358, nil, 504, 493, nil, 482, 480, 447, nil, nil, nil, nil, nil, nil, 429, nil, 580, nil, 19843, nil, nil, nil, 446, nil, nil, nil, 430, nil, nil, 392, 2362, 414, nil, 1062, 91, 166, 369, 374, 19453, 19323, 24393, 24269, 11, nil, nil, 1185, nil, 24083, 24021, 19063, nil, nil, nil, 535, 140, 1712, 24780, nil, -26, nil, nil, nil, 492, nil, nil, nil, -67, nil, nil, 275, nil, 173, nil, nil, -45, nil, 58, nil, nil, nil, 22773, nil, 172, 18673, 18543, 116, 710, 18413, 18283, 22053, 18015, 938, nil, nil, 17885, 17755, 1001, nil, 17357, 17227, nil, nil, 117, 151, 516, 381, 1142, 2492, 771, nil, 22393, nil, 2492, 1274, -13, -46, nil, 791, 2763, nil, 1137, nil, 1181, 15797, nil, nil, nil, 1152, 127, 15537, 1074, nil, 1073, 135, 150, 1054, 321, 868, 915, 855, 15407, 6023, 889, 855, 164, 877, 15277, nil, 712, nil, 282, nil, 2893, 3023, 331, 541, nil, nil, 632, 24866, nil, 24858, nil, 24788, nil, 11117, nil, 718, nil, -69, 177, nil, 44, nil, nil, nil, nil, 753, nil, 193, nil, nil, nil, nil, 228, nil, 26, 134, -21, 8, 173, 134, 10597, 389, 1040, nil, 256, 3283, 10337, nil, nil, 403, 3543, 24923, 434, 23160, nil, nil, nil, nil, nil, nil, 3673, nil, nil, nil, nil, nil, nil, nil, 384, 9939, 23323, 9029, nil, 472, nil, 10069, nil, 17487, nil, nil, 18145, nil, 23369, nil, 23553, 8899, 8249, 8119, 7071, 165, 6681, 549, 563, nil, 575, 609, 617, nil, 646, 631, 632, 636, 6551, nil, nil, 771, nil, nil, 4843, 684, 790, nil, nil, nil, 666, 279, nil, nil, 796, nil, 4973, 681, 729, nil, nil, nil, nil, 704, 810, 736, 694, nil, nil, nil, 696, 697, nil, 698, 699, nil, -111, nil, 720, 888, 739, 989, nil, 872, nil, 5633, 877, 4323, 4193, nil, 8379, 3933, -5, 104, nil, 908, 608, 3803, nil, 925, 813, nil, nil, 819, 814, nil, 23461, 16577, 16707, 22053, 471, nil, nil, 24727, nil, 24712, nil, 24704, nil, nil, 878, 930, 16837, 622, 956, nil, 902, nil, nil, nil, 2232, nil, nil, 36, 17625, nil, nil, nil, nil, nil, 648, nil, 23453, nil, 24938, nil, 24953, nil, nil, nil, nil, 308, 925, 937, nil, -10, nil, 1066, 1067, nil, 296, nil, nil, nil, 1095, nil, nil, 24883, nil, 998, nil, nil, 1001, 1002, 1005, 1007, nil, 1008, nil, 146, nil, nil, nil, 976, 24331, nil, nil, nil, 1582, 1183, 1170, 1055, 1107, 524, nil, 1036, 1037, 1041, 1042, 1043, 917, 1053, 509, 1452, nil, nil, nil, nil, nil, 1322, nil, 1192, nil, 24805, nil, 23545, nil, 25006, nil, 23637, nil, nil, nil, 994, 1139, 1162, 1253, 19583, 24517, 23773, 692, 24946, nil, nil, nil, nil, 1048, 1138, 682, 1265, 1271, 1148, 1149, 1152, 1153, nil, nil, 1158, 10, 13, 32, 1053, 1171, 1172, nil, nil, nil, 24719, nil, nil, nil, nil, 34, nil, 1183, nil];

      racc_action_default = [-3, -585, -1, -571, -4, -585, -7, -585, -585, -585, -585, -29, -585, -585, -585, -279, -585, -41, -44, -573, -585, -49, -51, -52, -53, -57, -258, -258, -258, -292, -327, -328, -69, -11, -73, -81, -83, -585, -482, -483, -585, -585, -585, -585, -585, -573, -239, -270, -271, -272, -273, -274, -275, -276, -277, -278, -561, -281, -285, -584, -552, -300, -388, -585, -585, -305, -308, -571, -585, -585, -585, -585, -329, -330, -425, -426, -427, -428, -429, -450, -432, -433, -452, -454, -437, -442, -446, -448, -464, -452, -466, -467, -559, -471, -472, -560, -474, -475, -476, -477, -478, -479, -480, -481, -486, -487, -585, -2, -572, -580, -581, -582, -6, -585, -585, -585, -585, -585, -3, -17, -585, -112, -113, -114, -115, -116, -117, -118, -119, -120, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -22, -121, -11, -585, -585, -248, -585, -585, -585, -585, -585, -585, -585, -573, -574, -48, -585, -482, -483, -585, -279, -585, -585, -231, -585, -11, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -585, -394, -396, -585, -569, -570, -58, -248, -585, -299, -400, -409, -411, -64, -406, -65, -573, -66, -240, -253, -262, -262, -257, -585, -263, -585, -554, -585, -585, -67, -68, -571, -12, -585, -15, -585, -71, -11, -573, -585, -74, -77, -11, -89, -90, -585, -585, -97, -292, -295, -573, -585, -327, -328, -331, -407, -585, -79, -585, -85, -289, -468, -469, -585, -216, -217, -232, -585, -11, -283, -573, -241, -577, -577, -585, -585, -577, -585, -301, -302, -514, -50, -585, -585, -585, -585, -571, -585, -572, -482, -483, -585, -585, -279, -585, -341, -342, -107, -108, -585, -110, -585, -279, -585, -585, -482, -483, -320, -112, -113, -154, -155, -156, -172, -177, -184, -187, -322, -585, -550, -585, -430, -585, -585, -585, -585, -585, -585, -585, -585, 1013, -5, -583, -23, -24, -25, -26, -27, -585, -585, -19, -20, -21, -122, -585, -30, -39, -40, -585, -585, -31, -197, -573, -249, -262, -262, -562, -563, -258, -404, -564, -565, -563, -562, -258, -403, -405, -564, -565, -37, -205, -38, -585, -42, -43, -195, -263, -45, -46, -47, -573, -298, -585, -585, -585, -248, -289, -585, -585, -585, -206, -207, -208, -209, -210, -211, -212, -213, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -233, -234, -235, -236, -573, -377, -258, -562, -563, -55, -59, -573, -259, -377, -377, -573, -294, -254, -585, -255, -585, -260, -585, -264, -557, -558, -10, -572, -14, -3, -573, -70, -287, -86, -75, -585, -573, -248, -585, -585, -96, -585, -468, -469, -585, -82, -87, -585, -585, -585, -585, -585, -237, -585, -417, -585, -573, -585, -242, -579, -578, -244, -579, -290, -291, -553, -585, -514, -391, -549, -549, -497, -499, -499, -499, -513, -515, -516, -517, -518, -519, -520, -521, -585, -523, -585, -529, -531, -532, -534, -539, -541, -542, -544, -545, -546, -585, -11, -332, -333, -11, -585, -585, -585, -585, -585, -248, -585, -585, -289, -313, -107, -108, -109, -585, -585, -248, -316, -488, -489, -585, -585, -11, -514, -324, -573, -431, -451, -456, -585, -458, -434, -453, -585, -455, -436, -585, -439, -585, -441, -444, -585, -445, -585, -465, -8, -18, -585, -28, -269, -585, -585, -408, -585, -250, -252, -585, -585, -60, -247, -401, -585, -585, -62, -402, -585, -585, -297, -575, -562, -563, -562, -563, -573, -195, -585, -378, -573, -380, -11, -54, -397, -377, -245, -11, -11, -293, -262, -261, -265, -585, -555, -556, -13, -585, -72, -585, -78, -84, -573, -562, -563, -246, -93, -95, -585, -80, -585, -204, -214, -215, -573, -584, -584, -282, -585, -286, -577, -389, -11, -11, -573, -585, -495, -496, -585, -585, -506, -585, -509, -585, -511, -585, -343, -585, -345, -347, -354, -520, -573, -525, -533, -543, -547, -584, -334, -584, -306, -335, -336, -309, -585, -312, -585, -573, -562, -563, -566, -288, -585, -107, -108, -111, -573, -11, -585, -491, -318, -585, -11, -514, -585, -585, -551, -457, -460, -461, -462, -463, -11, -435, -438, -440, -443, -447, -449, -123, -267, -585, -198, -585, -576, -262, -33, -200, -34, -201, -61, -35, -203, -36, -202, -63, -196, -585, -585, -585, -585, -408, -585, -549, -549, -359, -361, -361, -361, -376, -585, -573, -382, -520, -585, -527, -537, -585, -399, -398, -11, -585, -585, -256, -266, -16, -76, -91, -88, -296, -584, -339, -11, -418, -584, -419, -420, -284, -243, -585, -585, -585, -549, -530, -548, -498, -499, -499, -524, -499, -499, -540, -499, -535, -573, -585, -352, -585, -522, -585, -337, -585, -585, -11, -11, -311, -585, -11, -408, -585, -408, -585, -585, -11, -321, -585, -573, -493, -325, -585, -268, -32, -199, -251, -585, -238, -585, -357, -358, -367, -369, -585, -372, -585, -374, -379, -585, -585, -585, -526, -585, -395, -585, -410, -412, -9, -11, -424, -340, -585, -585, -422, -392, -393, -390, -494, -585, -502, -585, -504, -585, -507, -585, -510, -512, -344, -346, -350, -585, -355, -303, -585, -304, -585, -585, -265, -584, -314, -317, -490, -585, -323, -492, -514, -459, -549, -528, -360, -361, -361, -361, -361, -538, -361, -381, -573, -384, -386, -387, -536, -585, -289, -56, -423, -11, -98, -99, -585, -585, -106, -421, -499, -499, -499, -499, -348, -585, -353, -585, -11, -307, -310, -413, -414, -415, -11, -319, -11, -356, -585, -364, -585, -366, -585, -370, -585, -373, -375, -383, -585, -288, -566, -417, -248, -585, -585, -105, -585, -500, -503, -505, -508, -585, -351, -584, -585, -585, -361, -361, -361, -361, -385, -416, -573, -562, -563, -566, -104, -499, -349, -338, -315, -326, -585, -362, -365, -368, -371, -408, -501, -361, -363];

      clist = ["213,324,331,26,370,255,676,322,26,111,411,417,334,334,405,427,334,293", "272,272,272,539,2,26,483,532,320,119,202,474,127,127,26,26,26,108,26", "129,129,568,655,733,307,307,124,124,335,336,522,525,339,400,529,256", "561,564,830,424,216,470,822,26,334,334,334,334,26,26,475,310,26,616", "107,111,509,16,307,307,307,801,16,6,655,900,687,688,6,289,577,434,519", "781,259,266,268,291,386,387,388,389,703,897,273,273,273,711,714,124", "16,819,378,26,778,833,844,112,26,26,26,26,26,26,643,652,927,652,274", "274,274,929,648,649,325,586,376,812,340,587,923,736,391,382,914,348", "480,356,360,270,282,283,600,602,779,581,948,347,326,329,483,956,430", "431,432,433,723,780,495,332,328,372,645,782,327,611,835,655,338,926", "591,834,598,601,601,16,337,530,682,333,646,6,392,469,16,16,477,272,478", "953,390,6,805,818,984,820,880,374,26,26,26,26,375,323,26,26,26,26,26", "26,384,539,377,728,520,685,897,349,992,379,380,26,381,929,867,738,743", "775,923,729,1000,411,417,201,398,403,421,657,637,422,426,272,272,825", "817,876,814,822,917,321,272,652,652,371,661,26,26,1,715,,,,,670,26,", ",539,,402,16,819,813,,,402,505,425,334,334,,26,111,,,26,510,,,,26,791", ",16,307,772,521,666,585,,631,663,954,,819,,726,,491,666,,307,565,566", "589,,26,858,859,,498,798,,919,,1001,273,,,,,,26,26,273,,289,111,,,,289", "647,,494,490,650,732,,500,274,,26,16,582,,886,16,274,492,958,659,16", "920,,921,666,662,26,,718,476,908,,666,,839,819,617,479,727,,,,761,841", ",,16,766,942,,588,794,,746,809,746,,,567,,655,610,,,127,,,,,,,129,539", "797,,,847,272,124,,,,,,427,,838,,,,,26,,,,,,,,639,,916,,,775,,775,,775", ",,993,,,737,,675,959,,,,988,,421,,,,622,,14,,,510,627,14,,,,,,272,510", ",15,26,652,26,842,15,217,,679,846,,26,,794,307,217,217,217,,14,298,298", "658,307,,,,26,,,,806,,15,300,300,,,,,,,,644,217,,421,,,217,217,263,267", "217,344,354,354,800,421,,,775,,775,,775,272,775,346,355,355,26,,16,26", "16,272,,712,712,26,6,,,,829,651,,,,26,,,790,14,,26,730,731,217,217,217", "217,14,14,775,935,,15,539,,,,955,,421,,15,15,,911,421,,,697,617,807", "681,950,783,26,26,,,789,26,26,750,,26,127,,,16,,,16,129,,717,510,617", ",26,124,,,,26,26,,799,,,,757,759,1009,16,,762,764,,783,426,307,849,", ",334,,,,,,334,307,,,14,217,217,217,26,26,217,217,217,217,217,217,,,15", ",,617,896,,,,425,14,840,,617,,,,843,,,756,,,16,15,,,913,16,16,412,26", "987,,,,26,26,,,,26,,,217,217,848,,878,,,26,882,217,,402,,,,,,,26,16", "16,691,693,695,783,,14,,,697,14,,827,124,298,14,,,,666,15,,334,994,15", ",,,300,15,,298,,852,307,26,,,13,,,14,,13,16,300,,26,,16,,,,,,15,902", "217,217,16,,,,263,292,,,267,,,,13,,,,,26,217,26,26,,,26,,,,,712,26,", "910,,,217,,,,,,,,861,863,865,,,,16,,,,,,,,,,,307,16,,26,,,,,,,,,307", ",,,,776,,697,,697,,,,,,,13,,969,,16,16,777,,16,13,13,,217,,16,,,,,,", ",,,623,,,,,,628,,,26,815,,,815,,,,,,,,,,16,26,412,,941,,,26,,26,821", "272,823,,,421,946,697,14,,14,,,617,,26,298,,217,,,,15,,15,298,623,,", ",300,397,,,217,,,,13,300,961,963,965,967,,968,,,16,,421,,,,292,697,", "697,412,,,13,,16,,,,,,16,412,16,,,,,,,14,888,890,14,892,894,,895,,217", ",,,697,15,,,15,,217,,,,,,14,,,,,,1005,1006,1007,1008,,,,,15,292,,,13", ",292,742,13,,412,,,13,,1012,,,412,,217,217,,,,217,217,,,217,,815,,,776", ",776,,776,13,,,39,14,,,,39,14,14,,,,922,,924,,15,,,298,,15,15,,,,,,", ",298,,,300,39,297,297,943,,944,330,945,14,14,300,,979,980,981,982,,", ",,,,15,15,,,,,,,623,,,628,,343,359,359,359,,,,,,,,,,217,,,,,14,217,", ",,14,776,,776,,776,,776,,15,14,1010,,,15,,,39,989,,990,217,991,,15,", "39,39,,,,,,,,,999,,,,,,,,,776,,,,,,,870,,,,,,14,,,,1011,,,,355,,,,14", ",15,,,,13,,13,,,,,,15,,,,,,,,399,,,,,,429,217,,14,14,,,14,,,,,,14,39", ",,15,15,,,15,,,,,,15,,,,,,,,,,39,930,,,708,38,,710,,14,38,13,,938,13", "355,,,,,,,,15,,,,940,,485,,487,,488,489,,13,,38,296,296,,,,,,,,,,,,", ",,,,,,,39,,,,39,,,14,297,39,,,,342,358,358,358,,,,,15,14,,,297,788,", "14,,14,792,793,13,,39,15,,13,13,,,15,,15,,217,,,,,,,38,,,,,,,,,38,38", ",,810,811,,,,,,13,13,,,,,,,,,,,,412,,,,,,,,613,,,,,,,,,,,,,,,,,,,,,", ",,13,,,,,13,,,850,,,,,,,13,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,38", ",,873,653,,330,,656,,13,,,,,879,,,,,,,13,,,,,,,,,,,,39,,39,,,,,,297", ",,653,904,905,330,,907,297,,13,13,,,13,,,38,,,13,38,,,,296,38,,704,", ",,,,,,,,,,,,296,,,,934,,429,,,,38,13,,,,,,,,39,,,39,,,,,,,,,,,,,,,,", ",,,,,39,,,,,,,751,,,,653,330,,,,,,973,,,,,,,13,,,,,,,,985,,,,,,986,13", ",,,,,13,795,13,,,,,,,,,39,,,,,39,39,,,,,,,804,,,,297,,,,,,,,,,,297,", ",,824,,,,,,,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,38,,,,39", ",296,851,,39,,,,,,296,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",359,,,,,,39,38,,,38,,,,,,,,39,,,,,,,,,,,,,906,38,,,,,,,,,,,,,,,,330", "39,39,,,39,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,359,,,,,38,,,39,,38,38,937", ",,,,,,,,,296,,,,,,,,,,,296,,,,,,,224,,,,,38,38,,,271,271,271,,,,,,,", ",,,317,318,319,,39,,,,,,,,,,,,,271,271,39,,,,,,39,,39,38,,,,,38,,,,", ",,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,358,,,,,,38,,,,,,,", ",,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,38,,,38,,,,,,38,,,,,,,,,,,,", ",,,,,271,404,271,,,423,428,358,,,,,,,,38,,,,936,,224,,,443,444,445,446", "447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463", "464,465,466,467,468,,,,,,,271,271,,,,,,,,271,,,,,,,271,38,271,,271,271", ",,,,,,,,,,38,,,,,,38,,38,,,,,,,,,,,,,,,,,,,,516,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,423,638,404,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,271,,271,,271,,,,,,,,,,,,,,,271,,,,,,,,,,672,673", "674,,,,,,,,,,271,,,271,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,", "271,271,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,753,,,271", "271,758,760,,,,763,765,,,638,767,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,", ",,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,271,,853,,,,,,,,,,,,,,758,760,765,763,,856", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,", ",,,,,,,,,,,,,,,271,853,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,271"];

      racc_goto_table = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(2985, nil);

      idx = 0;

      ($a = ($d = clist).$each, $a._p = (TMP_5 = function(str){var self = TMP_5._s || this, $a, $b, TMP_6;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_6 = function(i){var self = TMP_6._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_6._s = self, TMP_6), $a).call($b)}, TMP_5._s = self, TMP_5), $a).call($d);

      clist = ["31,65,84,41,56,134,10,29,41,93,37,37,29,29,23,18,29,49,33,33,33,157", "2,41,71,133,31,15,15,39,60,60,41,41,41,6,41,61,61,90,169,94,63,63,57", "57,17,17,67,67,17,27,67,36,87,87,88,27,20,37,165,41,29,29,29,29,41,41", "23,50,41,24,4,93,51,26,63,63,63,11,26,7,169,114,118,118,7,45,54,47,8", "126,38,38,38,46,17,17,17,17,113,111,66,66,66,89,89,57,26,161,148,41", "123,11,106,5,41,41,41,41,41,41,40,72,128,72,68,68,68,129,40,40,66,107", "146,126,4,108,166,109,2,146,110,26,47,55,55,44,44,44,149,149,124,92", "114,91,68,68,71,104,29,29,29,29,103,115,47,86,83,82,70,121,64,62,102", "169,101,127,150,100,150,150,150,26,99,130,131,132,42,7,30,135,26,26", "137,33,138,139,7,7,140,124,114,124,141,144,41,41,41,41,145,98,41,41", "41,41,41,41,5,157,147,105,97,133,111,19,128,151,152,41,153,129,126,154", "155,117,166,156,114,37,37,16,20,20,57,14,23,20,20,33,33,113,160,12,162", "165,163,96,33,72,72,95,51,41,41,1,90,,,,,51,41,,,157,,66,26,161,117", ",,66,31,26,29,29,,41,93,,,41,49,,,,41,40,,26,63,24,31,37,29,,47,23,11", ",161,,54,,6,37,,63,17,17,29,,41,118,118,,50,24,,123,,88,66,,,,,,41,41", "66,,45,93,,,,45,47,,46,4,47,8,,46,68,,41,26,93,,118,26,68,7,94,47,26", "124,,124,37,47,41,,23,44,89,,37,,24,161,31,44,23,,,,39,24,,,26,39,124", ",36,71,,150,67,150,,,4,,169,15,,,60,,,,,,,61,157,51,,,133,33,57,,,,", ",18,,87,,,,,41,,,,,,,,31,,117,,,117,,117,,117,,,10,,,47,,29,118,,,,124", ",57,,,,38,,22,,,49,38,22,,,,,,33,49,,25,41,72,41,8,25,22,,31,8,,41,", "71,63,22,22,22,,22,22,22,2,63,,,,41,,,,27,,25,25,25,,,,,,,,38,22,,57", ",,22,22,69,69,22,22,22,22,47,57,,,117,,117,,117,33,117,25,25,25,41,", "26,41,26,33,,93,93,41,7,,,,47,68,,,,41,,,84,22,,41,93,93,22,22,22,22", "22,22,117,87,,25,157,,,,90,,57,,25,25,,8,57,,,112,31,65,68,87,31,41", "41,,,134,41,41,15,,41,60,,,26,,,26,61,,66,49,31,,41,57,,,,41,41,,49", ",,,20,20,24,26,,20,20,,31,20,63,56,,,29,,,,,,29,63,,,22,22,22,22,41", "41,22,22,22,22,22,22,,,25,,,31,47,,,,26,22,17,,31,,,,17,,,68,,,26,25", ",,47,26,26,69,41,8,,,,41,41,,,,41,,,22,22,93,,65,,,41,65,22,,66,,,,", ",,41,26,26,159,159,159,31,,22,,,112,22,,112,57,22,22,,,,37,25,,29,23", "25,,,,25,25,,22,,20,63,41,,,21,,,22,,21,26,25,,41,,26,,,,,,25,17,22", "22,26,,,,69,9,,,69,,,,21,,,,,41,22,41,41,,,41,,,,,93,41,,93,,,22,,,", ",,,,120,120,120,,,,26,,,,,,,,,,,63,26,,41,,,,,,,,,63,,,,,119,,112,,112", ",,,,,,21,,31,,26,26,122,,26,21,21,,22,,26,,,,,,,,,,69,,,,,,69,,,41,119", ",,119,,,,,,,,,,26,41,69,,26,,,41,,41,122,33,122,,,57,112,112,22,,22", ",,31,,41,22,,22,,,,25,,25,22,69,,,,25,9,,,22,,,,21,25,120,120,120,120", ",120,,,26,,57,,,,9,112,,112,69,,,21,,26,,,,,,26,69,26,,,,,,,22,159,159", "22,159,159,,159,,22,,,,112,25,,,25,,22,,,,,,22,,,,,,120,120,120,120", ",,,,25,9,,,21,,9,25,21,,69,,,21,,120,,,69,,22,22,,,,22,22,,,22,,119", ",,119,,119,,119,21,,,53,22,,,,53,22,22,,,,122,,122,,25,,,22,,25,25,", ",,,,,,22,,,25,53,53,53,122,,122,28,122,22,22,25,,159,159,159,159,,,", ",,,25,25,,,,,,,69,,,69,,53,53,53,53,,,,,,,,,,22,,,,,22,22,,,,22,119", ",119,,119,,119,,25,22,159,,,25,,,53,122,,122,22,122,,25,,53,53,,,,,", ",,,122,,,,,,,,,119,,,,,,,22,,,,,,22,,,,122,,,,25,,,,22,,25,,,,21,,21", ",,,,,25,,,,,,,,28,,,,,,28,22,,22,22,,,22,,,,,,22,53,,,25,25,,,25,,,", ",,25,,,,,,,,,,53,22,,,9,52,,9,,22,52,21,,22,21,25,,,,,,,,25,,,,25,,28", ",28,,28,28,,21,,52,52,52,,,,,,,,,,,,,,,,,,,,53,,,,53,,,22,53,53,,,,52", "52,52,52,,,,,25,22,,,53,9,,22,,22,9,9,21,,53,25,,21,21,,,25,,25,,22", ",,,,,,52,,,,,,,,,52,52,,,9,9,,,,,,21,21,,,,,,,,,,,,69,,,,,,,,28,,,,", ",,,,,,,,,,,,,,,,,,,21,,,,,21,,,9,,,,,,,21,,,,,,,,,,,,,,,52,,,,,,,,,", ",,,,,,,,,,,,,52,,,9,28,,28,,28,,21,,,,,9,,,,,,,21,,,,,,,,,,,,53,,53", ",,,,,53,,,28,9,9,28,,9,53,,21,21,,,21,,,52,,,21,52,,,,52,52,,28,,,,", ",,,,,,,,,52,,,,9,,28,,,,52,21,,,,,,,,53,,,53,,,,,,,,,,,,,,,,,,,,,,53", ",,,,,,28,,,,28,28,,,,,,9,,,,,,,21,,,,,,,,9,,,,,,9,21,,,,,,21,28,21,", ",,,,,,,53,,,,,53,53,,,,,,,28,,,,53,,,,,,,,,,,53,,,,28,,,,,,,,53,53,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,52,,,,53,,52,28,,53,,,,,,52", ",,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,53,52,,,52,,", ",,,,,53,,,,,,,,,,,,,28,52,,,,,,,,,,,,,,,,28,53,53,,,53,,,,,,53,,,,,", ",,,,,,,,,,,,,,,,,,,53,,,,,52,,,53,,52,52,53,,,,,,,,,,52,,,,,,,,,,,52", ",,,,,,32,,,,,52,52,,,32,32,32,,,,,,,,,,,32,32,32,,53,,,,,,,,,,,,,32", "32,53,,,,,,53,,53,52,,,,,52,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,52,,,,,,52,,,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", "52,52,,,52,,,,,,52,,,,,,,,,,,,,,,,,,32,32,32,,,32,32,52,,,,,,,,52,,", ",52,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32", "32,32,32,32,32,32,,,,,,,32,32,,,,,,,,32,,,,,,,32,52,32,,32,32,,,,,,", ",,,,52,,,,,,52,,52,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,32,,32,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,32,,32,,32,,,,,,,,,,,,,,,32,,,,,,,,,,32,32,32,,,,,,,,,,32,,", "32,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,32,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,32,,,32,32,32,32,,,,32,32,,,32,32,", ",,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,", "32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,,", ",,,,,,,,,,32,32,32,32,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,32"];

      racc_goto_check = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(2985, nil);

      idx = 0;

      ($a = ($e = clist).$each, $a._p = (TMP_7 = function(str){var self = TMP_7._s || this, $a, $b, TMP_8;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_8 = function(i){var self = TMP_8._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_8._s = self, TMP_8), $a).call($b)}, TMP_7._s = self, TMP_7), $a).call($e);

      racc_goto_pointer = [nil, 265, 22, nil, 69, 110, 32, 81, -231, 790, -512, -597, -548, nil, -246, 19, 232, -17, -195, 157, 38, 797, 479, -192, -334, 493, 75, -153, 1100, -51, 71, -19, 2010, -11, nil, nil, 29, -197, 66, -230, -347, 3, -285, nil, 118, 54, 62, -125, nil, -17, 34, -237, 1352, 1121, -264, 76, -67, 36, nil, nil, 22, 29, -223, 8, 113, -58, 73, -277, 97, 518, -300, -250, -359, nil, nil, nil, nil, nil, nil, nil, nil, nil, 98, 108, -59, nil, 105, -281, -652, -460, -301, 87, -203, 6, -546, 190, 200, -100, 153, 119, -532, 110, -540, -410, -749, -360, -617, -227, -233, -449, -707, -725, 70, -447, -745, -476, nil, -406, -449, 253, 83, -470, 270, -529, -489, nil, -550, -691, -744, -739, -148, -344, 125, -308, -17, -63, nil, -70, -69, -710, -477, -601, nil, nil, 128, 131, 52, 137, 26, -228, -197, 142, 142, 143, -360, -360, -346, -312, nil, 224, -438, -581, -432, -601, nil, -632, -724, nil, nil, -444];

      racc_goto_default = [nil, nil, nil, 3, nil, 4, 341, 287, nil, 518, nil, 831, nil, 284, 285, nil, nil, nil, 11, 12, 18, 223, 316, nil, nil, 221, 222, nil, 277, 17, nil, 435, 21, 22, 23, 24, nil, 669, nil, nil, nil, 304, nil, 25, 406, 32, nil, nil, 34, 37, 36, nil, 218, 219, 353, nil, 126, 414, 125, 128, 75, 76, nil, 46, nil, 802, 407, nil, 408, 419, 624, 481, 275, 261, 47, 48, 49, 50, 51, 52, 53, 54, 55, nil, 262, 61, nil, nil, nil, nil, nil, nil, nil, 562, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 699, 546, nil, 700, 918, 774, 534, nil, 535, nil, nil, 536, nil, 538, 640, nil, nil, nil, 544, nil, nil, nil, 735, nil, nil, 418, nil, nil, nil, nil, nil, 74, 77, 78, nil, nil, nil, nil, nil, 596, nil, nil, nil, nil, nil, nil, 816, 533, nil, 537, 548, 550, 786, 553, 554, 787, 557, 560, 279];

      racc_reduce_table = [0, 0, "racc_error", 1, 143, "_reduce_none", 2, 144, "_reduce_2", 0, 145, "_reduce_3", 1, 145, "_reduce_4", 3, 145, "_reduce_5", 2, 145, "_reduce_6", 1, 147, "_reduce_none", 4, 147, "_reduce_8", 4, 150, "_reduce_9", 2, 151, "_reduce_10", 0, 155, "_reduce_11", 1, 155, "_reduce_12", 3, 155, "_reduce_13", 2, 155, "_reduce_14", 1, 156, "_reduce_none", 4, 156, "_reduce_16", 0, 172, "_reduce_17", 4, 149, "_reduce_18", 3, 149, "_reduce_19", 3, 149, "_reduce_20", 3, 149, "_reduce_21", 2, 149, "_reduce_22", 3, 149, "_reduce_23", 3, 149, "_reduce_24", 3, 149, "_reduce_25", 3, 149, "_reduce_26", 3, 149, "_reduce_27", 4, 149, "_reduce_28", 1, 149, "_reduce_none", 3, 149, "_reduce_30", 3, 149, "_reduce_31", 6, 149, "_reduce_32", 5, 149, "_reduce_33", 5, 149, "_reduce_34", 5, 149, "_reduce_35", 5, 149, "_reduce_36", 3, 149, "_reduce_37", 3, 149, "_reduce_38", 3, 149, "_reduce_39", 3, 149, "_reduce_40", 1, 149, "_reduce_none", 3, 160, "_reduce_42", 3, 160, "_reduce_43", 1, 171, "_reduce_none", 3, 171, "_reduce_45", 3, 171, "_reduce_46", 3, 171, "_reduce_47", 2, 171, "_reduce_48", 1, 171, "_reduce_none", 1, 159, "_reduce_none", 1, 162, "_reduce_none", 1, 162, "_reduce_none", 1, 176, "_reduce_none", 4, 176, "_reduce_54", 0, 184, "_reduce_55", 5, 181, "_reduce_56", 1, 183, "_reduce_none", 2, 175, "_reduce_58", 3, 175, "_reduce_59", 4, 175, "_reduce_60", 5, 175, "_reduce_61", 4, 175, "_reduce_62", 5, 175, "_reduce_63", 2, 175, "_reduce_64", 2, 175, "_reduce_65", 2, 175, "_reduce_66", 2, 175, "_reduce_67", 2, 175, "_reduce_68", 1, 161, "_reduce_69", 3, 161, "_reduce_70", 1, 188, "_reduce_71", 3, 188, "_reduce_72", 1, 187, "_reduce_none", 2, 187, "_reduce_74", 3, 187, "_reduce_75", 5, 187, "_reduce_76", 2, 187, "_reduce_77", 4, 187, "_reduce_78", 2, 187, "_reduce_79", 4, 187, "_reduce_80", 1, 187, "_reduce_81", 3, 187, "_reduce_82", 1, 191, "_reduce_none", 3, 191, "_reduce_84", 2, 190, "_reduce_85", 3, 190, "_reduce_86", 1, 193, "_reduce_87", 3, 193, "_reduce_88", 1, 192, "_reduce_89", 1, 192, "_reduce_90", 4, 192, "_reduce_91", 3, 192, "_reduce_92", 3, 192, "_reduce_93", 3, 192, "_reduce_94", 3, 192, "_reduce_95", 2, 192, "_reduce_96", 1, 192, "_reduce_97", 1, 168, "_reduce_98", 1, 168, "_reduce_99", 4, 168, "_reduce_100", 3, 168, "_reduce_101", 3, 168, "_reduce_102", 3, 168, "_reduce_103", 3, 168, "_reduce_104", 2, 168, "_reduce_105", 1, 168, "_reduce_106", 1, 196, "_reduce_107", 1, 196, "_reduce_none", 2, 197, "_reduce_109", 1, 197, "_reduce_110", 3, 197, "_reduce_111", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 201, "_reduce_117", 1, 201, "_reduce_none", 1, 157, "_reduce_none", 1, 157, "_reduce_none", 1, 158, "_reduce_121", 0, 204, "_reduce_122", 4, 158, "_reduce_123", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 199, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 3, 174, "_reduce_195", 5, 174, "_reduce_196", 3, 174, "_reduce_197", 5, 174, "_reduce_198", 6, 174, "_reduce_199", 5, 174, "_reduce_200", 5, 174, "_reduce_201", 5, 174, "_reduce_202", 5, 174, "_reduce_203", 4, 174, "_reduce_204", 3, 174, "_reduce_205", 3, 174, "_reduce_206", 3, 174, "_reduce_207", 3, 174, "_reduce_208", 3, 174, "_reduce_209", 3, 174, "_reduce_210", 3, 174, "_reduce_211", 3, 174, "_reduce_212", 3, 174, "_reduce_213", 4, 174, "_reduce_214", 4, 174, "_reduce_215", 2, 174, "_reduce_216", 2, 174, "_reduce_217", 3, 174, "_reduce_218", 3, 174, "_reduce_219", 3, 174, "_reduce_220", 3, 174, "_reduce_221", 3, 174, "_reduce_222", 3, 174, "_reduce_223", 3, 174, "_reduce_224", 3, 174, "_reduce_225", 3, 174, "_reduce_226", 3, 174, "_reduce_227", 3, 174, "_reduce_228", 3, 174, "_reduce_229", 3, 174, "_reduce_230", 2, 174, "_reduce_231", 2, 174, "_reduce_232", 3, 174, "_reduce_233", 3, 174, "_reduce_234", 3, 174, "_reduce_235", 3, 174, "_reduce_236", 3, 174, "_reduce_237", 6, 174, "_reduce_238", 1, 174, "_reduce_none", 1, 170, "_reduce_none", 1, 206, "_reduce_none", 2, 206, "_reduce_none", 4, 206, "_reduce_243", 2, 206, "_reduce_244", 3, 211, "_reduce_245", 0, 212, "_reduce_246", 1, 212, "_reduce_none", 0, 165, "_reduce_248", 1, 165, "_reduce_none", 2, 165, "_reduce_none", 4, 165, "_reduce_251", 2, 165, "_reduce_252", 1, 186, "_reduce_253", 2, 186, "_reduce_254", 2, 186, "_reduce_255", 4, 186, "_reduce_256", 1, 186, "_reduce_257", 0, 215, "_reduce_258", 2, 180, "_reduce_259", 2, 214, "_reduce_260", 2, 213, "_reduce_261", 0, 213, "_reduce_262", 1, 208, "_reduce_263", 2, 208, "_reduce_264", 3, 208, "_reduce_265", 4, 208, "_reduce_266", 3, 169, "_reduce_267", 4, 169, "_reduce_268", 2, 169, "_reduce_269", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_none", 1, 205, "_reduce_280", 0, 238, "_reduce_281", 4, 205, "_reduce_282", 0, 239, "_reduce_283", 5, 205, "_reduce_284", 0, 240, "_reduce_285", 4, 205, "_reduce_286", 3, 205, "_reduce_287", 3, 205, "_reduce_288", 2, 205, "_reduce_289", 3, 205, "_reduce_290", 3, 205, "_reduce_291", 1, 205, "_reduce_292", 4, 205, "_reduce_293", 3, 205, "_reduce_294", 1, 205, "_reduce_295", 5, 205, "_reduce_296", 4, 205, "_reduce_297", 3, 205, "_reduce_298", 2, 205, "_reduce_299", 1, 205, "_reduce_none", 2, 205, "_reduce_301", 2, 205, "_reduce_302", 6, 205, "_reduce_303", 6, 205, "_reduce_304", 0, 241, "_reduce_305", 0, 242, "_reduce_306", 7, 205, "_reduce_307", 0, 243, "_reduce_308", 0, 244, "_reduce_309", 7, 205, "_reduce_310", 5, 205, "_reduce_311", 4, 205, "_reduce_312", 0, 245, "_reduce_313", 0, 246, "_reduce_314", 9, 205, "_reduce_315", 0, 247, "_reduce_316", 6, 205, "_reduce_317", 0, 248, "_reduce_318", 7, 205, "_reduce_319", 0, 249, "_reduce_320", 5, 205, "_reduce_321", 0, 250, "_reduce_322", 6, 205, "_reduce_323", 0, 251, "_reduce_324", 0, 252, "_reduce_325", 9, 205, "_reduce_326", 1, 205, "_reduce_327", 1, 205, "_reduce_328", 1, 205, "_reduce_329", 1, 205, "_reduce_330", 1, 164, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 2, 229, "_reduce_334", 1, 231, "_reduce_none", 1, 231, "_reduce_none", 1, 230, "_reduce_none", 5, 230, "_reduce_338", 1, 153, "_reduce_none", 2, 153, "_reduce_340", 1, 233, "_reduce_none", 1, 233, "_reduce_none", 1, 253, "_reduce_343", 3, 253, "_reduce_344", 1, 256, "_reduce_345", 3, 256, "_reduce_346", 1, 255, "_reduce_none", 4, 255, "_reduce_348", 6, 255, "_reduce_349", 3, 255, "_reduce_350", 5, 255, "_reduce_351", 2, 255, "_reduce_352", 4, 255, "_reduce_353", 1, 255, "_reduce_354", 3, 255, "_reduce_355", 4, 257, "_reduce_356", 2, 257, "_reduce_357", 2, 257, "_reduce_358", 1, 257, "_reduce_359", 2, 262, "_reduce_360", 0, 262, "_reduce_361", 6, 263, "_reduce_362", 8, 263, "_reduce_363", 4, 263, "_reduce_364", 6, 263, "_reduce_365", 4, 263, "_reduce_366", 2, 263, "_reduce_none", 6, 263, "_reduce_368", 2, 263, "_reduce_369", 4, 263, "_reduce_370", 6, 263, "_reduce_371", 2, 263, "_reduce_372", 4, 263, "_reduce_373", 2, 263, "_reduce_374", 4, 263, "_reduce_375", 1, 263, "_reduce_none", 0, 182, "_reduce_377", 1, 182, "_reduce_378", 3, 267, "_reduce_379", 1, 267, "_reduce_380", 4, 267, "_reduce_381", 1, 268, "_reduce_382", 4, 268, "_reduce_383", 1, 269, "_reduce_384", 3, 269, "_reduce_385", 1, 270, "_reduce_386", 1, 270, "_reduce_none", 0, 274, "_reduce_388", 3, 228, "_reduce_389", 4, 272, "_reduce_390", 1, 272, "_reduce_391", 3, 273, "_reduce_392", 3, 273, "_reduce_393", 0, 277, "_reduce_394", 5, 276, "_reduce_395", 2, 177, "_reduce_396", 4, 177, "_reduce_397", 5, 177, "_reduce_398", 5, 177, "_reduce_399", 2, 227, "_reduce_400", 4, 227, "_reduce_401", 4, 227, "_reduce_402", 3, 227, "_reduce_403", 3, 227, "_reduce_404", 3, 227, "_reduce_405", 2, 227, "_reduce_406", 1, 227, "_reduce_407", 4, 227, "_reduce_408", 0, 279, "_reduce_409", 5, 226, "_reduce_410", 0, 280, "_reduce_411", 5, 226, "_reduce_412", 5, 232, "_reduce_413", 1, 281, "_reduce_414", 1, 281, "_reduce_none", 6, 152, "_reduce_416", 0, 152, "_reduce_417", 1, 282, "_reduce_418", 1, 282, "_reduce_none", 1, 282, "_reduce_none", 2, 283, "_reduce_421", 1, 283, "_reduce_none", 2, 154, "_reduce_423", 1, 154, "_reduce_none", 1, 216, "_reduce_none", 1, 216, "_reduce_none", 1, 216, "_reduce_none", 1, 217, "_reduce_428", 1, 285, "_reduce_429", 2, 285, "_reduce_430", 3, 286, "_reduce_431", 1, 286, "_reduce_432", 1, 286, "_reduce_433", 3, 218, "_reduce_434", 4, 219, "_reduce_435", 3, 220, "_reduce_436", 0, 290, "_reduce_437", 3, 290, "_reduce_438", 1, 291, "_reduce_439", 2, 291, "_reduce_440", 3, 222, "_reduce_441", 0, 293, "_reduce_442", 3, 293, "_reduce_443", 3, 221, "_reduce_444", 3, 223, "_reduce_445", 0, 294, "_reduce_446", 3, 294, "_reduce_447", 0, 295, "_reduce_448", 3, 295, "_reduce_449", 0, 287, "_reduce_450", 2, 287, "_reduce_451", 0, 288, "_reduce_452", 2, 288, "_reduce_453", 0, 289, "_reduce_454", 2, 289, "_reduce_455", 1, 292, "_reduce_456", 2, 292, "_reduce_457", 0, 297, "_reduce_458", 4, 292, "_reduce_459", 1, 296, "_reduce_460", 1, 296, "_reduce_461", 1, 296, "_reduce_462", 1, 296, "_reduce_none", 1, 202, "_reduce_464", 3, 203, "_reduce_465", 1, 284, "_reduce_466", 1, 284, "_reduce_467", 2, 284, "_reduce_468", 2, 284, "_reduce_469", 1, 194, "_reduce_470", 1, 194, "_reduce_471", 1, 194, "_reduce_472", 1, 194, "_reduce_473", 1, 194, "_reduce_474", 1, 195, "_reduce_475", 1, 195, "_reduce_476", 1, 195, "_reduce_477", 1, 195, "_reduce_478", 1, 195, "_reduce_479", 1, 195, "_reduce_480", 1, 195, "_reduce_481", 1, 224, "_reduce_482", 1, 224, "_reduce_483", 1, 163, "_reduce_484", 1, 163, "_reduce_485", 1, 167, "_reduce_486", 1, 167, "_reduce_487", 1, 234, "_reduce_488", 0, 298, "_reduce_489", 4, 234, "_reduce_490", 2, 234, "_reduce_491", 3, 236, "_reduce_492", 2, 236, "_reduce_493", 4, 299, "_reduce_494", 2, 299, "_reduce_495", 2, 299, "_reduce_496", 1, 299, "_reduce_497", 2, 301, "_reduce_498", 0, 301, "_reduce_499", 6, 275, "_reduce_500", 8, 275, "_reduce_501", 4, 275, "_reduce_502", 6, 275, "_reduce_503", 4, 275, "_reduce_504", 6, 275, "_reduce_505", 2, 275, "_reduce_506", 4, 275, "_reduce_507", 6, 275, "_reduce_508", 2, 275, "_reduce_509", 4, 275, "_reduce_510", 2, 275, "_reduce_511", 4, 275, "_reduce_512", 1, 275, "_reduce_513", 0, 275, "_reduce_514", 1, 271, "_reduce_515", 1, 271, "_reduce_516", 1, 271, "_reduce_517", 1, 271, "_reduce_518", 1, 254, "_reduce_none", 1, 254, "_reduce_none", 1, 303, "_reduce_521", 3, 303, "_reduce_522", 1, 264, "_reduce_523", 3, 264, "_reduce_524", 2, 304, "_reduce_525", 2, 305, "_reduce_526", 1, 258, "_reduce_527", 3, 258, "_reduce_528", 1, 300, "_reduce_529", 3, 300, "_reduce_530", 1, 306, "_reduce_none", 1, 306, "_reduce_none", 2, 259, "_reduce_533", 1, 259, "_reduce_534", 3, 307, "_reduce_535", 3, 308, "_reduce_536", 1, 265, "_reduce_537", 3, 265, "_reduce_538", 1, 302, "_reduce_539", 3, 302, "_reduce_540", 1, 309, "_reduce_none", 1, 309, "_reduce_none", 2, 266, "_reduce_543", 1, 266, "_reduce_544", 1, 310, "_reduce_none", 1, 310, "_reduce_none", 2, 261, "_reduce_547", 2, 260, "_reduce_548", 0, 260, "_reduce_549", 1, 237, "_reduce_none", 3, 237, "_reduce_551", 0, 225, "_reduce_552", 2, 225, "_reduce_none", 1, 210, "_reduce_554", 3, 210, "_reduce_555", 3, 311, "_reduce_556", 2, 311, "_reduce_557", 2, 311, "_reduce_558", 1, 185, "_reduce_none", 1, 185, "_reduce_none", 1, 185, "_reduce_none", 1, 179, "_reduce_none", 1, 179, "_reduce_none", 1, 179, "_reduce_none", 1, 179, "_reduce_none", 1, 278, "_reduce_none", 1, 278, "_reduce_none", 1, 278, "_reduce_none", 1, 178, "_reduce_none", 1, 178, "_reduce_none", 0, 146, "_reduce_none", 1, 146, "_reduce_none", 0, 173, "_reduce_none", 1, 173, "_reduce_none", 2, 189, "_reduce_575", 2, 166, "_reduce_576", 0, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 235, "_reduce_580", 1, 235, "_reduce_none", 1, 148, "_reduce_none", 2, 148, "_reduce_none", 0, 207, "_reduce_584"];

      racc_reduce_n = 585;

      racc_shift_n = 1013;

      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "k__ENCODING__", 50, "tIDENTIFIER", 51, "tFID", 52, "tGVAR", 53, "tIVAR", 54, "tCONSTANT", 55, "tLABEL", 56, "tCVAR", 57, "tNTH_REF", 58, "tBACK_REF", 59, "tSTRING_CONTENT", 60, "tINTEGER", 61, "tFLOAT", 62, "tREGEXP_END", 63, "tUPLUS", 64, "tUMINUS", 65, "tUMINUS_NUM", 66, "tPOW", 67, "tCMP", 68, "tEQ", 69, "tEQQ", 70, "tNEQ", 71, "tGEQ", 72, "tLEQ", 73, "tANDOP", 74, "tOROP", 75, "tMATCH", 76, "tNMATCH", 77, "tDOT", 78, "tDOT2", 79, "tDOT3", 80, "tAREF", 81, "tASET", 82, "tLSHFT", 83, "tRSHFT", 84, "tCOLON2", 85, "tCOLON3", 86, "tOP_ASGN", 87, "tASSOC", 88, "tLPAREN", 89, "tLPAREN2", 90, "tRPAREN", 91, "tLPAREN_ARG", 92, "tLBRACK", 93, "tLBRACK2", 94, "tRBRACK", 95, "tLBRACE", 96, "tLBRACE_ARG", 97, "tSTAR", 98, "tSTAR2", 99, "tAMPER", 100, "tAMPER2", 101, "tTILDE", 102, "tPERCENT", 103, "tDIVIDE", 104, "tDSTAR", 105, "tPLUS", 106, "tMINUS", 107, "tLT", 108, "tGT", 109, "tPIPE", 110, "tBANG", 111, "tCARET", 112, "tLCURLY", 113, "tRCURLY", 114, "tBACK_REF2", 115, "tSYMBEG", 116, "tSTRING_BEG", 117, "tXSTRING_BEG", 118, "tREGEXP_BEG", 119, "tREGEXP_OPT", 120, "tWORDS_BEG", 121, "tQWORDS_BEG", 122, "tSYMBOLS_BEG", 123, "tQSYMBOLS_BEG", 124, "tSTRING_DBEG", 125, "tSTRING_DVAR", 126, "tSTRING_END", 127, "tSTRING_DEND", 128, "tSTRING", 129, "tSYMBOL", 130, "tNL", 131, "tEH", 132, "tCOLON", 133, "tCOMMA", 134, "tSPACE", 135, "tSEMI", 136, "tLAMBDA", 137, "tLAMBEG", 138, "tCHARACTER", 139, "tEQL", 140, "tLOWEST", 141);

      racc_nt_base = 142;

      racc_use_result_var = true;

      $opal.cdecl($scope, 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);

      $opal.cdecl($scope, 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "k__ENCODING__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tREGEXP_END", "tUPLUS", "tUMINUS", "tUMINUS_NUM", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tLBRACK", "tLBRACK2", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tDSTAR", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tREGEXP_OPT", "tWORDS_BEG", "tQWORDS_BEG", "tSYMBOLS_BEG", "tQSYMBOLS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING_DEND", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tCHARACTER", "tEQL", "tLOWEST", "$start", "program", "top_compstmt", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "stmt_or_begin", "fitem", "undef_list", "expr_value", "command_asgn", "mlhs", "command_call", "var_lhs", "primary_value", "opt_call_args", "rbracket", "backref", "lhs", "mrhs", "arg_value", "expr", "@1", "opt_nl", "arg", "command", "block_command", "block_call", "dot_or_colon", "operation2", "command_args", "cmd_brace_block", "opt_block_param", "fcall", "@2", "operation", "call_args", "mlhs_basic", "mlhs_inner", "rparen", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "user_variable", "keyword_variable", "cname", "cpath", "fname", "op", "reswords", "fsym", "symbol", "dsym", "@3", "primary", "aref_args", "none", "args", "trailer", "assocs", "paren_args", "opt_paren_args", "opt_block_arg", "block_arg", "@4", "literal", "strings", "xstring", "regexp", "words", "qwords", "symbols", "qsymbols", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "do", "case_body", "for_var", "superclass", "term", "f_arglist", "singleton", "@5", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "@16", "@17", "@18", "@19", "f_marg", "f_norm_arg", "f_margs", "f_marg_list", "block_args_tail", "f_block_kwarg", "f_kwrest", "opt_f_block_arg", "f_block_arg", "opt_block_args_tail", "block_param", "f_arg", "f_block_optarg", "f_rest_arg", "block_param_def", "opt_bv_decl", "bv_decls", "bvar", "f_bad_arg", "f_larglist", "lambda_body", "@20", "f_args", "do_block", "@21", "operation3", "@22", "@23", "cases", "exc_list", "exc_var", "numeric", "string", "string1", "string_contents", "xstring_contents", "regexp_contents", "word_list", "word", "string_content", "symbol_list", "qword_list", "qsym_list", "string_dvar", "@24", "@25", "args_tail", "f_kwarg", "opt_args_tail", "f_optarg", "f_arg_item", "f_kw", "f_block_kw", "kwrest_mark", "f_opt", "f_block_opt", "restarg_mark", "blkarg_mark", "assoc"]);

      $opal.cdecl($scope, 'Racc_debug_parser', false);

      def.$_reduce_2 = function(val, _values, result) {
        var self = this;

        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      };

      def.$_reduce_3 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_4 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_5 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_6 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_8 = function(val, _values, result) {
        var self = this;

        result = self.builder.$preexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_9 = function(val, _values, result) {
        var $a, $b, self = this, rescue_bodies = nil, else_t = nil, else_ = nil, ensure_t = nil, ensure_ = nil;

        rescue_bodies = val['$[]'](1);
        $a = $opal.to_ary(val['$[]'](2)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        $a = $opal.to_ary(val['$[]'](3)), ensure_t = ($a[0] == null ? nil : $a[0]), ensure_ = ($a[1] == null ? nil : $a[1]);
        if ((($a = ($b = rescue_bodies['$empty?'](), $b !== false && $b !== nil ?else_['$nil?']()['$!']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("warning", "useless_else", nil, else_t)};
        result = self.builder.$begin_body(val['$[]'](0), rescue_bodies, else_t, else_, ensure_t, ensure_);
        return result;
      };

      def.$_reduce_10 = function(val, _values, result) {
        var self = this;

        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      };

      def.$_reduce_11 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_12 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_13 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_14 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_16 = function(val, _values, result) {
        var $a, self = this;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "begin_in_method", nil, val['$[]'](0))};
        result = self.builder.$preexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_17 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_18 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      };

      def.$_reduce_19 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$gvar(val['$[]'](2)));
        return result;
      };

      def.$_reduce_20 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$back_ref(val['$[]'](2)));
        return result;
      };

      def.$_reduce_21 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "nth_ref_alias", nil, val['$[]'](2));
        return result;
      };

      def.$_reduce_22 = function(val, _values, result) {
        var self = this;

        result = self.builder.$undef_method(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_23 = function(val, _values, result) {
        var self = this;

        result = self.builder.$condition_mod(val['$[]'](0), nil, val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_24 = function(val, _values, result) {
        var self = this;

        result = self.builder.$condition_mod(nil, val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_25 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop_mod("while", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_26 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop_mod("until", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_27 = function(val, _values, result) {
        var self = this, rescue_body = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      };

      def.$_reduce_28 = function(val, _values, result) {
        var self = this;

        result = self.builder.$postexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_30 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_31 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_32 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_33 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_34 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_35 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_36 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_37 = function(val, _values, result) {
        var self = this;

        self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_38 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_39 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_40 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_42 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_43 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_45 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_46 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_47 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](2), nil);
        return result;
      };

      def.$_reduce_48 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_54 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_55 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_56 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_58 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_59 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        $a = $opal.to_ary(val['$[]'](2)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_60 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_61 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_62 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_63 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_64 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("super", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_65 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_66 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("return", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_67 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("break", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_68 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("next", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_69 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_70 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_71 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_72 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_74 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(val['$[]'](1));
        return result;
      };

      def.$_reduce_75 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_76 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_77 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1)));
        return result;
      };

      def.$_reduce_78 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1))).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_79 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_80 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_81 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0))];
        return result;
      };

      def.$_reduce_82 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0))].concat(val['$[]'](2));
        return result;
      };

      def.$_reduce_84 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_85 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_86 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_87 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_88 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_89 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_90 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_91 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_92 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_93 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_94 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_95 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_96 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      };

      def.$_reduce_97 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_98 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_99 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_100 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_101 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_102 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_103 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_104 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_105 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      };

      def.$_reduce_106 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_107 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "module_name_const", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_109 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_110 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const(val['$[]'](0));
        return result;
      };

      def.$_reduce_111 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_117 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol(val['$[]'](0));
        return result;
      };

      def.$_reduce_121 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_122 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_123 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](3));
        return result;
      };

      def.$_reduce_195 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_196 = function(val, _values, result) {
        var self = this, rescue_body = nil, rescue_ = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        rescue_ = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), rescue_);
        return result;
      };

      def.$_reduce_197 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_198 = function(val, _values, result) {
        var self = this, rescue_body = nil, rescue_ = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        rescue_ = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), rescue_);
        return result;
      };

      def.$_reduce_199 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_200 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_201 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_202 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_203 = function(val, _values, result) {
        var self = this, const$ = nil;

        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_204 = function(val, _values, result) {
        var self = this, const$ = nil;

        const$ = self.builder.$const_op_assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        result = self.builder.$op_assign(const$, val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_205 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_206 = function(val, _values, result) {
        var self = this;

        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_207 = function(val, _values, result) {
        var self = this;

        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_208 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_209 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_210 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_211 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_212 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_213 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_214 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(self.builder.$integer(val['$[]'](1)), val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_215 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(self.builder.$float(val['$[]'](1)), val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_216 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_217 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_218 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_219 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_220 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_221 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_222 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_223 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_224 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_225 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_226 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_227 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_228 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_229 = function(val, _values, result) {
        var self = this;

        result = self.builder.$match_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_230 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_231 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_232 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_233 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_234 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_235 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_236 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_237 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), nil, [val['$[]'](2)], nil);
        return result;
      };

      def.$_reduce_238 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ternary(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_243 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_244 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      };

      def.$_reduce_245 = function(val, _values, result) {
        var self = this;

        result = val;
        return result;
      };

      def.$_reduce_246 = function(val, _values, result) {
        var self = this;

        result = [nil, [], nil];
        return result;
      };

      def.$_reduce_248 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_251 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_252 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      };

      def.$_reduce_253 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_254 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_255 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        result.$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_256 = function(val, _values, result) {
        var self = this, assocs = nil;

        assocs = self.builder.$associate(nil, val['$[]'](2), nil);
        result = val['$[]'](0)['$<<'](assocs);
        result.$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_257 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_258 = function(val, _values, result) {
        var self = this;

        result = self.lexer.$cmdarg().$dup();
        self.lexer.$cmdarg().$push(true);
        return result;
      };

      def.$_reduce_259 = function(val, _values, result) {
        var self = this;

        self.lexer['$cmdarg='](val['$[]'](0));
        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_260 = function(val, _values, result) {
        var self = this;

        result = self.builder.$block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_261 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_262 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_263 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_264 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_265 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_266 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_267 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_268 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_269 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_280 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(nil, nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_281 = function(val, _values, result) {
        var self = this;

        result = self.lexer.$cmdarg().$dup();
        self.lexer.$cmdarg().$clear();
        return result;
      };

      def.$_reduce_282 = function(val, _values, result) {
        var self = this;

        self.lexer['$cmdarg='](val['$[]'](1));
        result = self.builder.$begin_keyword(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_283 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_endarg");
        return result;
      };

      def.$_reduce_284 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](4));
        return result;
      };

      def.$_reduce_285 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_endarg");
        return result;
      };

      def.$_reduce_286 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), nil, val['$[]'](3));
        return result;
      };

      def.$_reduce_287 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_288 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_289 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_290 = function(val, _values, result) {
        var self = this;

        result = self.builder.$array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_291 = function(val, _values, result) {
        var self = this;

        result = self.builder.$associate(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_292 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("return", val['$[]'](0));
        return result;
      };

      def.$_reduce_293 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_294 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), [], val['$[]'](2));
        return result;
      };

      def.$_reduce_295 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0));
        return result;
      };

      def.$_reduce_296 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), val['$[]'](2), [val['$[]'](3)], val['$[]'](4));
        return result;
      };

      def.$_reduce_297 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_298 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), nil, val['$[]'](2));
        return result;
      };

      def.$_reduce_299 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(nil, nil, val['$[]'](0));
        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_301 = function(val, _values, result) {
        var $a, self = this, begin_t = nil, args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(val['$[]'](0), begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_302 = function(val, _values, result) {
        var self = this, lambda_call = nil;

        lambda_call = self.builder.$call_lambda(val['$[]'](0));
        result = self.builder.$block(lambda_call, self.$begin_t(), self.$args(), self.$body(), self.$end_t());
        return result;
      };

      def.$_reduce_303 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, val['$[]'](5));
        return result;
      };

      def.$_reduce_304 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), else_, else_t, val['$[]'](3), val['$[]'](5));
        return result;
      };

      def.$_reduce_305 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_306 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_307 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop("while", val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](5), val['$[]'](6));
        return result;
      };

      def.$_reduce_308 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_309 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_310 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop("until", val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](5), val['$[]'](6));
        return result;
      };

      def.$_reduce_311 = function(val, _values, result) {
        var self = this;

        result = self.builder.$case(val['$[]'](0), val['$[]'](1), self.$when_bodies(), self.$else_t(), self.$else_body(), val['$[]'](4));
        return result;
      };

      def.$_reduce_312 = function(val, _values, result) {
        var self = this;

        result = self.builder.$case(val['$[]'](0), nil, self.$when_bodies(), self.$else_t(), self.$else_body(), val['$[]'](3));
        return result;
      };

      def.$_reduce_313 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_314 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_315 = function(val, _values, result) {
        var self = this;

        result = self.builder.$for(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5), val['$[]'](7), val['$[]'](8));
        return result;
      };

      def.$_reduce_316 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_317 = function(val, _values, result) {
        var $a, self = this, lt_t = nil, superclass = nil;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "class_in_def", nil, val['$[]'](0))};
        $a = $opal.to_ary(val['$[]'](2)), lt_t = ($a[0] == null ? nil : $a[0]), superclass = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$def_class(val['$[]'](0), val['$[]'](1), lt_t, superclass, val['$[]'](4), val['$[]'](5));
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_318 = function(val, _values, result) {
        var self = this;

        result = self.def_level;
        self.def_level = 0;
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_319 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_sclass(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](5), val['$[]'](6));
        self.static_env.$unextend();
        self.def_level = val['$[]'](4);
        return result;
      };

      def.$_reduce_320 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_321 = function(val, _values, result) {
        var $a, self = this;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "module_in_def", nil, val['$[]'](0))};
        result = self.builder.$def_module(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_322 = function(val, _values, result) {
        var self = this;

        self.def_level = self.def_level['$+'](1);
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_323 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_method(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4), val['$[]'](5));
        self.static_env.$unextend();
        self.def_level = self.def_level['$-'](1);
        return result;
      };

      def.$_reduce_324 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_325 = function(val, _values, result) {
        var self = this;

        self.def_level = self.def_level['$+'](1);
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_326 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_singleton(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](6), val['$[]'](7), val['$[]'](8));
        self.static_env.$unextend();
        self.def_level = self.def_level['$-'](1);
        return result;
      };

      def.$_reduce_327 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("break", val['$[]'](0));
        return result;
      };

      def.$_reduce_328 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("next", val['$[]'](0));
        return result;
      };

      def.$_reduce_329 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("redo", val['$[]'](0));
        return result;
      };

      def.$_reduce_330 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("retry", val['$[]'](0));
        return result;
      };

      def.$_reduce_334 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_338 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = [val['$[]'](0), self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, nil)];
        return result;
      };

      def.$_reduce_340 = function(val, _values, result) {
        var self = this;

        result = val;
        return result;
      };

      def.$_reduce_343 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$arg(val['$[]'](0));
        return result;
      };

      def.$_reduce_344 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_345 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_346 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_348 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](3)['$[]'](0));
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_349 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](3)['$[]'](0));
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3))).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_350 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2)));
        return result;
      };

      def.$_reduce_351 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_352 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_353 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))].concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_354 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_355 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))].concat(val['$[]'](2));
        return result;
      };

      def.$_reduce_356 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_357 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_358 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_359 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_360 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_361 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_362 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_363 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      };

      def.$_reduce_364 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_365 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_366 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_368 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_369 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_370 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_371 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_372 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_373 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_374 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_375 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_377 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, [], nil);
        return result;
      };

      def.$_reduce_378 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_value");
        return result;
      };

      def.$_reduce_379 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_380 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), [], val['$[]'](0));
        return result;
      };

      def.$_reduce_381 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      };

      def.$_reduce_382 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_383 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](2);
        return result;
      };

      def.$_reduce_384 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_385 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_386 = function(val, _values, result) {
        var self = this;

        result = self.builder.$shadowarg(val['$[]'](0));
        return result;
      };

      def.$_reduce_388 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_389 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1), val['$[]'](2)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_390 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      };

      def.$_reduce_391 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_392 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1), val['$[]'](2)];
        return result;
      };

      def.$_reduce_393 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1), val['$[]'](2)];
        return result;
      };

      def.$_reduce_394 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_395 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_396 = function(val, _values, result) {
        var $a, self = this, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), block_args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(val['$[]'](0), begin_t, block_args, body, end_t);
        return result;
      };

      def.$_reduce_397 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_398 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_399 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_400 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_401 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_402 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_403 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_404 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](2)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_405 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](2)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_406 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_407 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("zsuper", val['$[]'](0));
        return result;
      };

      def.$_reduce_408 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_409 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_410 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_411 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_412 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_413 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$when(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3))].concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_414 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_416 = function(val, _values, result) {
        var $a, self = this, assoc_t = nil, exc_var = nil, exc_list = nil;

        $a = $opal.to_ary(val['$[]'](2)), assoc_t = ($a[0] == null ? nil : $a[0]), exc_var = ($a[1] == null ? nil : $a[1]);
        if ((($a = val['$[]'](1)) !== nil && (!$a._isBoolean || $a == true))) {
          exc_list = self.builder.$array(nil, val['$[]'](1), nil)};
        result = [self.builder.$rescue_body(val['$[]'](0), exc_list, assoc_t, exc_var, val['$[]'](3), val['$[]'](4))].concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_417 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_418 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_421 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_423 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_428 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_compose(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_429 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_430 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_431 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_432 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string(val['$[]'](0));
        return result;
      };

      def.$_reduce_433 = function(val, _values, result) {
        var self = this;

        result = self.builder.$character(val['$[]'](0));
        return result;
      };

      def.$_reduce_434 = function(val, _values, result) {
        var self = this;

        result = self.builder.$xstring_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_435 = function(val, _values, result) {
        var self = this, opts = nil;

        opts = self.builder.$regexp_options(val['$[]'](3));
        result = self.builder.$regexp_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2), opts);
        return result;
      };

      def.$_reduce_436 = function(val, _values, result) {
        var self = this;

        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_437 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_438 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      };

      def.$_reduce_439 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_440 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_441 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_442 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_443 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      };

      def.$_reduce_444 = function(val, _values, result) {
        var self = this;

        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_445 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_446 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_447 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$string_internal(val['$[]'](1)));
        return result;
      };

      def.$_reduce_448 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_449 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$symbol_internal(val['$[]'](1)));
        return result;
      };

      def.$_reduce_450 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_451 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_452 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_453 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_454 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_455 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_456 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_internal(val['$[]'](0));
        return result;
      };

      def.$_reduce_457 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_458 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(false);
        self.lexer.$cmdarg().$push(false);
        return result;
      };

      def.$_reduce_459 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$lexpop();
        self.lexer.$cmdarg().$lexpop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_460 = function(val, _values, result) {
        var self = this;

        result = self.builder.$gvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_461 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ivar(val['$[]'](0));
        return result;
      };

      def.$_reduce_462 = function(val, _values, result) {
        var self = this;

        result = self.builder.$cvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_464 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol(val['$[]'](0));
        return result;
      };

      def.$_reduce_465 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_466 = function(val, _values, result) {
        var self = this;

        result = self.builder.$integer(val['$[]'](0));
        return result;
      };

      def.$_reduce_467 = function(val, _values, result) {
        var self = this;

        result = self.builder.$float(val['$[]'](0));
        return result;
      };

      def.$_reduce_468 = function(val, _values, result) {
        var self = this;

        result = self.builder.$negate(val['$[]'](0), self.builder.$integer(val['$[]'](1)));
        return result;
      };

      def.$_reduce_469 = function(val, _values, result) {
        var self = this;

        result = self.builder.$negate(val['$[]'](0), self.builder.$float(val['$[]'](1)));
        return result;
      };

      def.$_reduce_470 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ident(val['$[]'](0));
        return result;
      };

      def.$_reduce_471 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ivar(val['$[]'](0));
        return result;
      };

      def.$_reduce_472 = function(val, _values, result) {
        var self = this;

        result = self.builder.$gvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_473 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const(val['$[]'](0));
        return result;
      };

      def.$_reduce_474 = function(val, _values, result) {
        var self = this;

        result = self.builder.$cvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_475 = function(val, _values, result) {
        var self = this;

        result = self.builder.$nil(val['$[]'](0));
        return result;
      };

      def.$_reduce_476 = function(val, _values, result) {
        var self = this;

        result = self.builder.$self(val['$[]'](0));
        return result;
      };

      def.$_reduce_477 = function(val, _values, result) {
        var self = this;

        result = self.builder.$true(val['$[]'](0));
        return result;
      };

      def.$_reduce_478 = function(val, _values, result) {
        var self = this;

        result = self.builder.$false(val['$[]'](0));
        return result;
      };

      def.$_reduce_479 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__FILE__(val['$[]'](0));
        return result;
      };

      def.$_reduce_480 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__LINE__(val['$[]'](0));
        return result;
      };

      def.$_reduce_481 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__ENCODING__(val['$[]'](0));
        return result;
      };

      def.$_reduce_482 = function(val, _values, result) {
        var self = this;

        result = self.builder.$accessible(val['$[]'](0));
        return result;
      };

      def.$_reduce_483 = function(val, _values, result) {
        var self = this;

        result = self.builder.$accessible(val['$[]'](0));
        return result;
      };

      def.$_reduce_484 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_485 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_486 = function(val, _values, result) {
        var self = this;

        result = self.builder.$nth_ref(val['$[]'](0));
        return result;
      };

      def.$_reduce_487 = function(val, _values, result) {
        var self = this;

        result = self.builder.$back_ref(val['$[]'](0));
        return result;
      };

      def.$_reduce_488 = function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      };

      def.$_reduce_489 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_value");
        return result;
      };

      def.$_reduce_490 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      };

      def.$_reduce_491 = function(val, _values, result) {
        var self = this;

        self.$yyerrok();
        result = nil;
        return result;
      };

      def.$_reduce_492 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        self.lexer['$state=']("expr_value");
        return result;
      };

      def.$_reduce_493 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_494 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_495 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_496 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_497 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_498 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_499 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_500 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_501 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      };

      def.$_reduce_502 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_503 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_504 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_505 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_506 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_507 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_508 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_509 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_510 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_511 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_512 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_513 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_514 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_515 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_const", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_516 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_ivar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_517 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_gvar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_518 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_cvar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_521 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$arg(val['$[]'](0));
        return result;
      };

      def.$_reduce_522 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_523 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_524 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_525 = function(val, _values, result) {
        var self = this;

        self.$check_kwarg_name(val['$[]'](0));
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_526 = function(val, _values, result) {
        var self = this;

        self.$check_kwarg_name(val['$[]'](0));
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_527 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_528 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_529 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_530 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_533 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$kwrestarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_534 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$kwrestarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_535 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_536 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_537 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_538 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_539 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_540 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_543 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_544 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_547 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = self.builder.$blockarg(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_548 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_549 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_551 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_552 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_554 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_555 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_556 = function(val, _values, result) {
        var self = this;

        result = self.builder.$pair(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_557 = function(val, _values, result) {
        var self = this;

        result = self.builder.$pair_keyword(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_558 = function(val, _values, result) {
        var self = this;

        result = self.builder.$kwsplat(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_575 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_576 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_580 = function(val, _values, result) {
        var self = this;

        self.$yyerrok();
        return result;
      };

      def.$_reduce_584 = function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      };

      return (def.$_reduce_none = function(val, _values, result) {
        var self = this;

        return val['$[]'](0);
      }, nil) && '_reduce_none';
    })(self, (($a = ((($b = $scope.Parser) == null ? $opal.cm('Parser') : $b))._scope).Base == null ? $a.cm('Base') : $a.Base))
    
  })(self);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash = $opal.hash;

  $opal.add_stubs(['$check_for_encoding_support', '$new', '$each', '$empty?', '$[]=', '$to_i', '$+', '$split', '$compstmt', '$[]', '$<<', '$preexe', '$!', '$nil?', '$diagnostic', '$begin_body', '$state=', '$alias', '$gvar', '$back_ref', '$undef_method', '$condition_mod', '$loop_mod', '$rescue_body', '$postexe', '$multi_assign', '$op_assign', '$index', '$call_method', '$assign', '$array', '$logical_op', '$not_op', '$extend_dynamic', '$unextend', '$block', '$keyword_cmd', '$multi_lhs', '$begin', '$push', '$splat', '$concat', '$assignable', '$index_asgn', '$attr_asgn', '$const_fetch', '$const_global', '$const', '$symbol', '$const_op_assignable', '$range_inclusive', '$range_exclusive', '$binary_op', '$unary_op', '$match_op', '$ternary', '$associate', '$dup', '$cmdarg', '$cmdarg=', '$block_pass', '$clear', '$begin_keyword', '$call_lambda', '$begin_t', '$args', '$body', '$end_t', '$condition', '$cond', '$pop', '$loop', '$case', '$when_bodies', '$else_t', '$else_body', '$for', '$extend_static', '$in_def?', '$def_class', '$def_sclass', '$def_module', '$def_method', '$-', '$def_singleton', '$arg', '$restarg', '$shadowarg', '$when', '$string_compose', '$string', '$character', '$xstring_compose', '$regexp_options', '$regexp_compose', '$words_compose', '$word', '$symbols_compose', '$string_internal', '$symbol_internal', '$lexpop', '$ivar', '$cvar', '$symbol_compose', '$negate', '$integer', '$float', '$rational', '$complex', '$ident', '$nil', '$self', '$true', '$false', '$__FILE__', '$__LINE__', '$__ENCODING__', '$accessible', '$nth_ref', '$yyerrok', '$declare', '$check_kwarg_name', '$kwoptarg', '$kwarg', '$kwrestarg', '$optarg', '$blockarg', '$pair', '$pair_keyword', '$kwsplat']);
  ;
  ;
  (($a = $scope.Parser) == null ? $opal.cm('Parser') : $a).$check_for_encoding_support();
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a, $b;

    (function($base, $super) {
      function $Ruby21(){};
      var self = $Ruby21 = $klass($base, $super, 'Ruby21', $Ruby21);

      var def = self._proto, $scope = self._scope, $a, $b, TMP_1, $c, TMP_3, $d, TMP_5, $e, TMP_7, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      def.builder = def.lexer = def.static_env = def.def_level = nil;
      def.$version = function() {
        var self = this;

        return 21;
      };

      def.$default_encoding = function() {
        var $a, $b, self = this;

        return (($a = ((($b = $scope.Encoding) == null ? $opal.cm('Encoding') : $b))._scope).UTF_8 == null ? $a.cm('UTF_8') : $a.UTF_8);
      };

      clist = ["-288,268,565,685,268,-105,-97,-288,-288,-288,586,768,217,-288,-288,803", "-288,571,-83,-104,-101,607,565,-98,644,546,-69,543,542,541,594,544,904", "-99,385,609,-288,-288,-100,-288,-288,-288,-288,-288,-99,565,565,-102", "565,218,713,218,546,218,543,542,541,525,544,643,527,214,215,699,-102", "-100,-100,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288", "-288,-288,214,215,-288,-288,-288,-567,627,606,267,699,-288,267,-103", "-288,596,595,214,215,-288,803,-288,608,-288,-288,745,-288,-288,-288", "-288,-288,-472,-288,684,-288,-96,-88,585,-472,-472,-472,113,-101,-472", "-472,-472,112,-472,-288,-95,-92,-288,-288,-89,-94,-472,-288,-472,-472", "-472,113,113,-103,-90,838,112,112,-472,-472,713,-472,-472,-472,-472", "-472,113,218,-100,769,-568,112,-91,-100,-99,113,113,-102,113,-99,112", "112,-102,112,713,-93,-91,218,837,-472,-472,-472,-472,-472,-472,-472", "-472,-472,-472,-472,-472,-472,-472,113,268,-472,-472,-472,112,-472,-472", "-567,443,-472,-94,398,-472,-472,-487,-472,-482,-472,594,-472,-102,-472", "-472,-482,-472,-472,-472,-472,-472,594,-472,-475,-472,91,92,-91,214", "215,-475,-475,-475,91,92,-475,-475,-475,-472,-475,-101,-472,-472,-472", "-472,-101,-472,-475,-472,-475,-475,-475,-472,113,218,-105,-564,263,112", "-475,-475,-98,-475,-475,-475,-475,-475,-91,113,525,-91,-93,527,112,268", "596,595,113,-91,513,267,525,112,-571,524,747,596,595,597,-408,-475,-475", "-475,-475,-475,-475,-475,-475,-475,-475,-475,-475,-475,-475,93,94,-475", "-475,-475,-472,-475,-475,93,94,-475,856,-472,-475,-475,-565,-475,-564", "-475,218,-475,-472,-475,-475,594,-475,-475,-475,-475,-475,-104,-475", "-571,-475,-93,263,644,113,-408,-571,-564,594,112,644,-567,-408,-486", "-475,-571,-571,-475,-475,-475,-475,-408,-475,-571,-475,267,644,808,-475", "803,-571,-571,-571,-99,-571,-475,-571,-571,643,-571,-408,-93,-475,260", "-93,643,238,-565,-571,113,261,-475,-93,594,112,79,596,595,599,-571,-571", "643,-571,-571,-571,-571,-571,80,-97,-571,-565,976,-289,596,595,605,-571", "81,977,-289,546,-567,543,542,541,-571,544,975,-289,673,-571,-571,-571", "-571,-571,-571,-571,-571,-571,-571,-571,-571,-571,-571,-571,263,-571", "-571,-571,546,628,543,542,541,-571,544,594,-571,596,595,610,594,-571", "113,-571,622,-571,-571,112,-571,-571,-571,-571,-571,-288,-571,-571,-571", "623,561,560,-288,-288,-288,513,550,-288,-288,-288,525,-288,-571,527", "113,-571,-571,553,-92,112,-571,-288,-288,-288,829,218,-101,263,971,212", "-487,-288,-288,-91,-288,-288,-288,-288,-288,218,-486,-100,596,595,601", "218,-93,596,595,592,561,560,-95,948,-102,554,113,833,803,754,-104,112", "-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288", "-96,-89,-288,-288,-288,238,771,-288,-105,-98,-288,-88,673,-288,-288", "796,-288,-481,-288,-97,-288,846,-288,-288,-481,-288,-288,-288,-288,-288", "-90,-288,-279,-288,214,215,260,235,-99,-279,489,237,236,261,233,234", "487,-288,-279,442,-288,-288,-288,-288,257,-288,-571,-288,69,70,71,-103", "57,-571,-571,-571,63,64,-571,-571,-571,67,-571,65,66,68,308,309,72,73", "773,-571,-571,-571,-571,304,305,311,101,100,102,103,-571,-571,230,-571", "-571,-571,-571,-571,-263,45,214,215,105,104,106,95,56,97,96,98,-478", "99,107,108,218,91,92,-478,42,43,41,-571,-571,-571,-571,-571,-571,-571", "-571,-571,-571,-571,-571,-571,-571,833,803,-571,-571,-571,223,770,-571", "229,218,-571,58,59,-571,-571,60,-571,-477,-571,444,-571,44,-571,-571", "-477,-571,-571,-571,-571,-571,228,-571,-571,-571,855,89,79,82,83,-475", "84,86,85,87,214,215,-475,-571,80,88,-571,-571,-571,-571,445,-571,62", "-571,81,93,94,-101,289,69,70,71,9,57,-483,577,-484,63,64,578,217,-483", "67,-484,65,66,68,30,31,72,73,476,-484,476,476,316,29,28,27,101,100,102", "103,395,485,19,487,315,397,396,632,8,45,291,10,105,104,106,95,56,97", "96,98,-479,99,107,108,489,91,92,-479,42,43,41,238,242,247,248,249,244", "246,254,255,250,251,-279,231,232,-289,755,252,253,-279,40,858,-289,33", "690,861,58,59,-279,863,60,-289,35,235,865,241,44,237,236,867,233,234", "245,243,239,20,240,218,869,870,89,79,82,83,573,84,86,85,87,496,-472", "574,-480,80,88,873,256,-472,-238,-480,572,62,-262,81,93,94,289,69,70", "71,9,57,875,876,-289,63,64,673,749,878,67,-289,65,66,68,30,31,72,73", "748,-289,-261,882,884,29,28,27,101,100,102,103,739,740,19,885,741,107", "108,617,8,45,291,10,105,104,106,95,56,97,96,98,886,99,107,108,690,91", "92,888,42,43,41,238,242,247,248,249,244,246,254,255,250,251,-288,231", "232,581,890,252,253,-288,40,892,580,33,-568,894,58,59,-288,894,60,582", "35,235,218,241,44,237,236,744,233,234,245,243,239,20,240,900,-68,902", "89,79,82,83,581,84,86,85,87,257,827,932,218,80,88,499,256,500,213,716", "582,62,571,81,93,94,289,69,70,71,9,57,910,709,515,63,64,707,913,218", "67,516,65,66,68,30,31,72,73,916,441,-264,706,705,29,28,27,101,100,102", "103,208,697,19,695,693,691,690,632,8,45,291,10,105,104,106,95,56,97", "96,98,926,99,107,108,687,91,92,207,42,43,41,238,242,247,248,249,244", "246,254,255,250,251,-288,231,232,-484,507,252,253,-288,40,933,-484,33", "-568,934,58,59,-288,206,60,-484,35,235,681,241,44,237,236,218,233,234", "245,243,239,20,240,679,678,272,89,79,82,83,439,84,86,85,87,218,673,440", "263,80,88,950,256,518,952,953,441,62,218,81,93,94,5,69,70,71,9,57,958", "510,-485,63,64,690,961,963,67,-485,65,66,68,30,31,72,73,965,-485,967", "967,662,29,28,27,101,100,102,103,-83,929,19,543,542,541,218,544,8,45", "7,10,105,104,106,95,56,97,96,98,514,99,107,108,238,91,92,218,42,43,41", "238,242,247,248,249,244,246,254,255,250,251,-485,231,232,210,218,252", "253,-485,40,978,211,33,238,979,58,59,-485,894,60,209,35,235,894,241", "44,237,236,894,233,234,245,243,239,20,240,984,238,950,89,79,82,83,-331", "84,86,85,87,238,121,-331,238,80,88,218,256,528,634,631,-331,62,263,81", "93,94,289,69,70,71,9,57,529,-568,505,63,64,-567,678,109,67,506,65,66", "68,30,31,72,73,621,504,620,218,616,29,28,27,101,100,102,103,489,929", "19,543,542,541,950,544,8,45,291,10,105,104,106,95,56,97,96,98,-261,99", "107,108,1003,91,92,1004,42,43,41,238,242,247,248,249,244,246,254,255", "250,251,-288,231,232,581,1005,252,253,-288,40,967,932,33,-568,967,58", "59,-288,967,60,582,35,235,218,241,44,237,236,614,233,234,245,243,239", "20,240,611,576,575,89,79,82,83,894,84,86,85,87,950,387,571,967,80,88", ",256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30", "31,72,73,116,117,118,119,120,29,28,27,101,100,102,103,,,19,116,117,118", "119,120,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42", "43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252,253", ",40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20", "240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289", "69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,116,117,118,119,120", "29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97", "96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255", "250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237", "236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249", "244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35", "235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,", "67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45", "291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,242", "247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40,,,293,,,58", "59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,218,256,,,,,62,,81,93,94,289,69,70,71,9", "57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103", ",,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92", ",42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252", "253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239", "20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289", "69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101", "100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107", "108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231", "232,,,252,253,,40,,,293,,,58,59,,,60,,35,235,,241,44,237,236,,233,234", "245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62", ",81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,", ",,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97", "96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255", "250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237", "236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249", "244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35", "235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,", "67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45", "291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,242", "247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58", "59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57", ",,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,", ",19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,", "42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252", "253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239", "20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289", "69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101", "100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107", "108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231", "232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234", "245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62", ",81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,", ",,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97", "96,98,,99,107,108,,91,92,,42,43,41,238,242,247,248,249,244,246,254,255", "250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237", "236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30", "31,72,73,,550,,,,29,28,27,101,100,102,103,553,546,19,543,542,541,,544", "8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41", "238,,561,560,,,238,554,699,546,,543,542,541,,544,,702,,40,,,33,,,58", "59,,238,60,,35,235,,,44,237,236,235,233,234,,237,236,20,,,699,,89,79", "82,83,,84,86,85,87,,,235,,80,88,237,236,,,,,62,,81,93,94,289,69,70,71", "9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102", "103,,546,19,543,542,541,,544,8,45,291,10,105,104,106,95,56,97,96,98", ",99,107,108,,91,92,,42,43,41,546,,543,542,541,,544,546,699,543,542,541", ",544,,,,899,,40,,,33,,,58,59,,,60,546,35,543,542,541,44,544,,699,,,", ",,20,699,,702,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,699,,62,,81,93", "94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28", "27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98", ",99,107,108,,91,92,,42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,,,58", "59,,,60,,35,235,,241,44,237,236,,233,234,,,239,20,240,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64", ",,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,", "8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41", "238,-590,-590,-590,-590,244,246,,,-590,-590,,,,,,252,253,,40,,,293,", ",58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57", ",,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,", ",19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,", "42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241", "44,237,236,,233,234,,,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,-590,-590,-590,-590", "244,246,,,-590,-590,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241", "44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66", "68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238,,,,,,,,,,,,", ",,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,,", "239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94", "289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27", "101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99", "107,108,,91,92,,42,43,41,238,-590,-590,-590,-590,244,246,,,-590,-590", ",,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234", "245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81", "93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28", "27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99", "107,108,,91,92,,42,43,41,238,-590,-590,-590,-590,244,246,,,-590,-590", ",,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234", "245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81", "93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29", "28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96", "98,,99,107,108,,91,92,,42,43,41,238,-590,-590,-590,-590,244,246,,,-590", "-590,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233", "234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62", ",81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,", "29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96", "98,,99,107,108,,91,92,,42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33", ",,58,59,,,60,,35,235,,241,44,237,236,,233,234,,,239,20,240,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,", ",63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19", ",,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,238,242,247,248,249,244,246,,,250,251,,,,,,252,253,,40,,,33,,,58", "59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,", ",63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19", ",,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,238,242,247,248,249,244,246,254,,250,251,,,,,,252,253,,40,,,33,,", "58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57", ",,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,", ",19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,", "42,43,41,238,242,247,248,249,244,246,254,255,250,251,,-590,-590,,,252", "253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239", "20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93", "94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102", "103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,", "42,43,41,238,-590,-590,-590,-590,244,246,,,-590,-590,,,,,,252,253,,223", ",,229,,,58,59,,,60,,,235,,241,44,237,236,,233,234,245,243,239,228,240", ",,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,", "230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,238,242,247,248,249,244,246,254,255,250,251,,-590,-590,,,252,253", ",223,,,229,,,58,59,,,60,,,235,,241,44,237,236,,233,234,245,243,239,228", "240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94", "63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19", ",,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,238", ",,,,,,,,,,,,,,,252,253,,223,,,229,,,58,59,,,60,,,235,,,44,237,236,,233", "234,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81", "93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102", "103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92", ",42,43,41,238,,,,,,,,,,,,,,,,252,253,,223,,,229,,,58,59,,,60,,281,235", ",241,44,237,236,284,233,234,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,", "80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73", ",,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56", "97,96,98,283,99,107,108,,91,92,,42,43,41,238,,,,,,,,,,,,,,,,252,253", ",223,,,229,,,58,59,,,60,,,235,,241,44,237,236,284,233,234,,,,228,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64", ",,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95", "56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229", ",,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,", ",29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98", ",99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,", "60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,113,,,", ",112,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,308,309,72,73", ",,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56", "97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,347,,,33,,,58", "59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69", "70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305", "311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,352,56,97,96,353,", "99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,359,,,354,,,229,,,58,59,,,60", ",,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62", "57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101", "100,102,103,,,230,,,,,,,306,,,105,104,106,352,56,97,96,353,,99,107,108", ",91,92,,,,312,,,,,,,,,,,,,,,,,,,,354,,,229,,,58,59,,,60,,,,,,,,,,,,", ",,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94", "63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103", ",,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64", ",,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308", "309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223", ",,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72", "73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95", "56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229", ",,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95", "56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33", ",,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,,,387,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,30,31", "72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56", "97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,", ",58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29", "28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99", "107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,", ",,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71", "62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100", "102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92", ",42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,", "20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94", "63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19", ",,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,", ",,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63", "64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,", ",,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41", ",,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,", "67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,", ",,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,", ",,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67", ",65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45", ",,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,", ",,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66", "68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,", "105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,", ",,,,302,,,229,,,58,59,,,60,,546,,543,542,541,550,544,,,,,,,,,,553,,89", "79,82,83,,84,86,85,87,,,,,80,88,,,,314,,548,62,,81,93,94,69,70,71,,57", "561,560,,63,64,554,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100", "102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91", "92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,403,,,,44,,", ",,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81", "93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103", ",,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64", ",,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,", ",,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41,,", ",,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,", "230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,403,,,,44,,,,,,,,,228", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,", "230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312", ",,,,,,,,,,,,,,,,,,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106", "95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,", ",229,,,58,59,,,60,,403,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97", "96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58", "59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,", ",69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28", "27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107", "108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,", "44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62", "57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100", "102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92", ",42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,", "20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94", "63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19", ",,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,", ",,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,218,,,69,70,71,62,57,81,93,94,63,64,,,", "67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,", ",,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,", ",,,,,,,,,,,,,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66", "68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308", "309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,302", ",,298,,,58,59,,,60,,297,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,", ",,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73", ",,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97", "96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,", ",58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56", "97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229", ",,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85", "87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31", "72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95", "56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,", ",229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308", "309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223", ",,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72", "73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95", "56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229", ",,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,", ",,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97", "96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,872,,,229,,,58,59", ",,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70", "71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311", "101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107", "108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,", "44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62", "57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101", "100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108", ",91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,", ",,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57", "81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100", "102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91", "92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,", ",,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93", "94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102", "103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,", "42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,", "230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64", ",,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230", ",,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,", ",,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,", "67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,", ",,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,", ",,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67", ",65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45", ",,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,", ",,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66", "68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308", "309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223", ",,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72", "73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95", "56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229", ",,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,", ",,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97", "96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58", "59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,", ",,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304", "305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98", ",99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,", "60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69", "70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305", "311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99", "107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,", ",,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71", "62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311", "101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107", "108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,", "44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62", "57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101", "100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108", ",91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,", ",,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57", "81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100", "102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91", "92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,", ",,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93", "94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102", "103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,", "42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,", "230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64", ",,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230", ",,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,", ",,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,", "67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,", ",,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,", ",,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67", ",65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45", ",,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,", ",,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66", "68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308", "309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223", ",,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72", "73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95", "56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229", ",,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,", ",29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98", ",99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,", "60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69", "70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27", "101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107", "108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,", "44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62", "57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100", "102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,", "91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279", ",44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71", "62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100", "102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,", "91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279", ",44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71", "62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100", "102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,", "91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279", ",44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,218,,,69,70", "71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101", "100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108", ",91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,", ",,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57", "81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102", "103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,", "42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,", ",,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,", ",,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67", ",65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45", ",,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,", ",,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,279,,44,,,284,,,,,,228,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,", "67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,", ",,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,", ",,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67", ",65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45", ",,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,", ",,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66", "68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105", "104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,", ",,,,,,223,,,229,,,58,59,,,60,,656,,279,,44,,,284,,,,,,228,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63", "64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,", ",,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41", ",,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89", "79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,", "67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,", ",,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,", ",,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67", ",65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,752,,,,44,,,,,,,,,228,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67", ",65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,", "105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,", ",,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84", "86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68", "30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106", "95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,", ",229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73", ",,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97", "96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,", ",58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72", "73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56", "97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229", ",,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85", "87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309", "72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106", "95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,", ",229,,,58,59,,,60,,281,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72", "73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95", "56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,302,,,229,", ",58,59,,,60,,546,,543,542,541,550,544,,,,,,,,,,553,,89,79,82,83,,84", "86,85,87,,,,,80,88,,,,502,,548,62,,81,93,94,69,70,71,,57,561,560,,63", "64,554,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103", ",,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,656,,,,44,,,,,,,,,228", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,", "230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42", "43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,279,,44,,,284,,,", ",,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93", "94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102", "103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,", "42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,", "230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64", ",,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230", ",,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41", ",,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,284,,,,,,228,,,", ",89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64", ",,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230", ",,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41", ",,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,656,,,,44,,,284,,,,,,228", ",,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63", "64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,", ",,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,", ",,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79", "82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67", ",65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45", ",,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,", ",,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83", ",84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66", "68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,", "105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,", ",,,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85", "87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31", "72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95", "56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,", ",229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308", "309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,302", ",,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,", ",,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97", "96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,58,59", ",,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70", "71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311", "101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99,107", "108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,,872,,,229,,,58,59,,,60,,546,,543", "542,541,550,544,,,,,,,,,,553,,89,79,82,83,,84,86,85,87,,,,,80,88,,,", ",,548,62,,81,93,94,69,70,71,9,57,561,560,,63,64,554,,,67,,65,66,68,30", "31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,40", ",,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,,,387,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68", "308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308", "309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104", "106,95,56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,", ",,223,,,229,,,58,59,,,60,,,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,", "84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66", "68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,518,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84", "86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68", "308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,,,312,,,,,,,,,,,,,,,,,,,", "940,,,229,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,", ",,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72", "73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95", "56,97,96,98,283,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,", ",229,,,58,59,,,60,,656,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308", "309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104", "106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223", ",,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87", ",,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72", "73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95", "56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229", ",,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80", "88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,", ",,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97", "96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58", "59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,", ",,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29", "28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283", "99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60", ",281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73", ",,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56", "97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58", "59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29", "28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283", "99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60", ",281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88", ",,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,", "304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96", "98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59", ",,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69", "70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27", "101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108", ",91,92,,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,", ",,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81", "93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103", ",,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43", "41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,", "89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64", ",,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,", ",45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,", ",,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82", "83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65", "66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105", "104,106,95,56,97,96,98,,99,107,108,,91,92,,42,43,41,,,,,,,,,,,,,,,,", ",,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86", "85,87,,,,,80,88,,,,,-573,,62,,81,93,94,-573,-573,-573,,,-573,-573,-573", ",-573,,,,,,,,,-573,-573,-573,-573,,,,,,,,-573,-573,,-573,-573,-573,-573", "-573,,,,,,,,,,,,,,,,,,,,,,,,-573,-573,-573,-573,-573,-573,-573,-573", "-573,-573,-573,-573,-573,-573,,,-573,-573,-573,,,-573,,,-573,,,-573", "-573,,-573,,-573,,-573,,-573,-573,,-573,-573,-573,-573,-573,,-573,-573", "-573,,,,,,,,,,,,,,-573,,,-573,-573,-573,-573,-280,-573,,-573,,,,-280", "-280,-280,,,-280,-280,-280,,-280,,,,,,,,,,-280,-280,-280,,,,,,,,-280", "-280,,-280,-280,-280,-280,-280,,,,,,,,,,,,,,,,,,,,,,,,-280,-280,-280", "-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,,,-280,-280,-280", ",,-280,,,-280,,,-280,-280,,-280,,-280,,-280,,-280,-280,,-280,-280,-280", "-280,-280,,-280,,-280,,,,,,,,,,,,,,-280,,,-280,-280,-280,-280,-572,-280", ",-280,,,,-572,-572,-572,,,-572,-572,-572,,-572,,,,,,,,,-572,-572,-572", "-572,,,,,,,,-572,-572,,-572,-572,-572,-572,-572,,,,,,,,,,,,,,,,,,,,", ",,,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572", "-572,,,-572,-572,-572,,,-572,,,-572,,,-572,-572,,-572,,-572,,-572,,-572", "-572,,-572,-572,-572,-572,-572,,-572,-572,-572,,,,,,,,,,,,,,-572,,,-572", "-572,-572,-572,-295,-572,,-572,,,,-295,-295,-295,,,-295,-295,-295,,-295", ",,,,,,,,,-295,-295,,,,,,,,,-295,-295,,-295,-295,-295,-295,-295,,,,,", ",,,,,,,,,,,,,,,,,,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295", "-295,-295,-295,-295,,,-295,-295,-295,,,-295,,272,-295,,,-295,-295,,-295", ",-295,,-295,,-295,-295,,-295,-295,-295,-295,-295,,-295,-244,-295,,,", ",,-244,-244,-244,,,-244,-244,-244,-295,-244,,-295,-295,,-295,,-295,", "-244,-244,,,,,,,,,,-244,-244,,-244,-244,-244,-244,-244,,,,,,,,,,,,,", ",,,,546,,543,542,541,550,544,,,,,,,,,,553,-244,,-244,,,,,-244,,-244", "-244,-244,263,-244,-244,-244,-244,,-244,,,548,,,,,,-244,-244,-244,558", "557,561,560,,-244,-244,554,-244,-244,,-244,-244,-244,-244,-244,,,,,-244", ",,-244,,,,,-244,,,,,218,,,,,,-244,-244,-244,-244,-244,-244,-244,-244", "-244,-244,-244,-244,-244,-244,,,-244,-244,-244,,,-244,,263,-244,,,-244", "-244,,-244,,-244,,-244,,-244,-244,,-244,-244,-244,-244,-244,,-244,-244", "-244,,,,,,,,,,,,,,-244,,-407,-244,-244,,-244,,-244,-407,-407,-407,,", "-407,-407,-407,,-407,,,,,,,,,-407,-407,-407,,,,,,,,,-407,-407,,-407", "-407,-407,-407,-407,,,,,,,,,,,,,,,,,,,,,,,,-407,-407,-407,-407,-407", "-407,-407,-407,-407,-407,-407,-407,-407,-407,,,-407,-407,-407,,,-407", ",263,-407,,,-407,-407,,-407,,-407,,-407,,-407,-407,,-407,-407,-407,-407", "-407,,-407,-407,-407,,,,,,,,,,,,,,-407,,,-407,-407,,-407,,-407,173,184", "174,197,170,190,180,179,200,201,195,178,177,172,198,202,203,182,171", "185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187,,,,,", "168,175,166,167,163,164,165,124,126,,,125,,,,,,,,,157,158,,154,136,137", "138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135", "156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,,,,,88", "173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202,203", "182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187", ",,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,,157,158,,154", "136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151", "150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,", ",,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198", "202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169", "188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,,157,158", ",154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,", ",,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89", ",,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177", "172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196", "181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,123,,125,,", ",,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146", "147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155", "134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201", "195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194", "370,369,371,368,169,188,187,,,,,,168,175,166,167,365,366,367,363,126", "97,96,364,,99,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,", ",,159,160,146,147,,,,,,375,,,,,,,,151,150,,135,156,153,152,161,148,149", "143,141,133,155,134,,,162,173,184,174,197,170,190,180,179,200,201,195", "178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193", "186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125", ",,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146", "147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155", "134,998,423,162,,999,,,,,,,,,157,158,,154,136,137,138,145,142,144,,", "139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152", "161,148,149,143,141,133,155,134,637,423,162,,638,,,,,,,,,157,158,,154", "136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,", ",151,150,,135,156,153,152,161,148,149,143,141,133,155,134,635,416,162", ",636,,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160", "146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141", "133,155,134,637,423,162,,638,,,,,,,,,157,158,,154,136,137,138,145,142", "144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153", "152,161,148,149,143,141,133,155,134,419,423,162,,418,,,,,,,,,157,158", ",154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,", ",,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,669,423", "162,,670,,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159", "160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143", "141,133,155,134,666,416,162,,667,,,,,,,,,157,158,,154,136,137,138,145", "142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156", "153,152,161,148,149,143,141,133,155,134,412,416,162,,413,,,,,,,,,157", "158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263", ",,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,635", "416,162,,636,,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140", ",,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148", "149,143,141,133,155,134,474,416,162,,475,,,,,,,,,157,158,,154,136,137", "138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150", ",135,156,153,152,161,148,149,143,141,133,155,134,724,423,162,,725,,", ",,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146", "147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133", "155,134,973,423,162,,972,,,,,,,,,157,158,,154,136,137,138,145,142,144", ",,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152", "161,148,149,143,141,133,155,134,474,416,162,,475,,,,,,,,,157,158,,154", "136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151", "150,,135,156,153,152,161,148,149,143,141,133,155,134,719,416,162,,720", ",,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146", "147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133", "155,134,721,423,162,,722,,,,,,,,,157,158,,154,136,137,138,145,142,144", ",,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152", "161,148,149,143,141,133,155,134,996,416,162,,997,,,,,,,,,157,158,,154", "136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,", ",151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,546,162,543", "542,541,550,544,,546,,543,542,541,550,544,546,553,543,542,541,550,544", ",546,553,543,542,541,550,544,,553,,,,,,,548,553,,,,,,,548,558,557,561", "560,,,548,554,558,557,561,560,,,548,554,,561,560,,,,554,,,561,560,,", "546,554,543,542,541,550,544,546,,543,542,541,550,544,,546,553,543,542", "541,550,544,,553,546,,543,542,541,550,544,553,,,,,,,548,734,553,,,,", "548,,558,557,561,560,,,548,554,,561,560,,,,554,548,,561,560,,,,554,", "558,557,561,560,,,546,554,543,542,541,550,544,,546,,543,542,541,550", "544,546,553,543,542,541,550,544,,,553,,,,,,,553,,,,,,,548,734,,,,,,", "548,558,557,561,560,,,548,554,558,557,561,560,,,,554,,561,560,,,546", "554,543,542,541,550,544,,546,,543,542,541,550,544,,553,546,,543,542", "541,550,544,553,546,,543,542,541,550,544,,553,,,,,548,,,553,,,,,548", "558,557,561,560,,,,554,548,532,561,560,,,,554,548,558,557,561,560,,", ",554,558,557,561,560,,,546,554,543,542,541,550,544,,546,,543,542,541", "550,544,,553,,,,,,,546,553,543,542,541,550,544,,,,,,,,,548,553,,,,,", ",548,,,561,560,,,,554,558,557,561,560,,,548,554,,,,,,,,558,557,561,560", ",,,554"];

      racc_action_table = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(25068, nil);

      idx = 0;

      ($a = ($b = clist).$each, $a._p = (TMP_1 = function(str){var self = TMP_1._s || this, $a, $b, TMP_2;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_2 = function(i){var self = TMP_2._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_2._s = self, TMP_2), $a).call($b)}, TMP_1._s = self, TMP_1), $a).call($b);

      clist = ["418,61,881,531,647,348,344,418,418,418,358,635,19,418,418,908,418,908", "661,575,721,382,717,345,648,829,661,829,829,829,602,829,834,840,109", "383,418,418,996,418,418,418,418,418,1010,903,337,997,338,703,841,686", "948,19,948,948,948,682,948,648,682,676,676,829,720,719,635,418,418,418", "418,418,418,418,418,418,418,418,418,418,418,436,436,418,418,418,721", "418,382,61,948,418,647,722,418,602,602,587,587,418,710,418,383,418,418", "602,418,418,418,418,418,95,418,531,418,348,344,358,95,95,95,881,998", "95,95,95,881,95,418,575,721,418,418,345,418,95,418,95,95,95,358,717", "418,840,717,358,717,95,95,567,95,95,95,95,95,841,676,996,636,722,841", "666,996,1010,903,337,997,338,1010,903,337,997,338,568,720,719,436,715", "95,95,95,95,95,95,95,95,95,95,95,95,95,95,587,26,95,95,95,587,95,95", "998,224,95,722,204,95,95,222,95,365,95,604,95,636,95,95,365,95,95,95", "95,95,378,95,98,95,41,41,666,591,591,98,98,98,312,312,98,98,98,95,98", "998,95,95,95,95,998,95,98,95,98,98,98,95,567,718,224,352,26,567,98,98", "222,98,98,98,98,98,666,735,328,666,667,328,735,307,604,604,568,666,442", "26,327,568,669,327,604,378,378,378,798,98,98,98,98,98,98,98,98,98,98", "98,98,98,98,41,41,98,98,98,352,98,98,312,312,98,772,352,98,98,353,98", "352,98,591,98,352,98,98,379,98,98,98,98,98,442,98,669,98,667,307,480", "3,798,669,352,381,3,472,669,798,221,98,669,724,98,98,98,98,798,98,419", "98,307,481,680,98,677,419,419,419,772,669,353,419,419,480,419,798,667", "353,24,667,472,675,353,419,341,24,353,667,384,341,77,379,379,379,419", "419,481,419,419,419,419,419,77,221,724,353,939,578,381,381,381,724,77", "939,578,702,724,702,702,702,724,702,939,578,672,419,419,419,419,419", "419,419,419,419,419,419,419,419,419,724,671,419,419,419,899,419,899", "899,899,419,899,380,419,384,384,384,377,419,586,419,412,419,419,586", "419,419,419,419,419,638,419,419,419,413,690,690,638,638,638,316,858", "638,638,638,331,638,419,331,287,419,419,858,419,287,419,638,638,638", "702,927,419,668,927,15,39,638,638,412,638,638,638,638,638,665,38,412", "380,380,380,727,413,377,377,377,858,858,316,899,413,858,844,708,708", "618,316,844,638,638,638,638,638,638,638,638,638,638,638,638,638,638", "15,39,638,638,638,467,638,638,15,39,638,38,663,638,638,660,638,366,638", "38,638,732,638,638,366,638,638,638,638,638,618,638,303,638,17,17,373", "467,618,303,655,467,467,373,467,467,653,638,303,223,638,638,638,638", "646,638,637,638,283,283,283,638,283,637,637,637,283,283,637,637,637", "283,637,283,283,283,283,283,283,283,641,637,637,637,637,283,283,283", "283,283,283,283,637,637,283,637,637,637,637,637,751,283,336,336,283", "283,283,283,283,283,283,283,370,283,283,283,45,283,283,370,283,283,283", "637,637,637,637,637,637,637,637,637,637,637,637,637,637,986,986,637", "637,637,283,637,637,283,639,637,283,283,637,637,283,637,369,637,225", "637,283,637,637,369,637,637,637,637,637,283,637,637,637,756,283,283", "283,283,364,283,283,283,283,324,324,364,637,283,283,637,637,637,637", "226,637,283,637,283,283,283,637,588,588,588,588,588,588,367,354,299", "588,588,354,230,367,588,299,588,588,588,588,588,588,588,629,299,262", "624,40,588,588,588,588,588,588,588,123,276,588,277,37,123,123,431,588", "588,588,588,588,588,588,588,588,588,588,588,371,588,588,588,280,588", "588,371,588,588,588,431,431,431,431,431,431,431,431,431,431,431,941", "431,431,978,619,431,431,941,588,774,978,588,775,777,588,588,941,778", "588,978,588,431,779,431,588,431,431,781,431,431,431,431,431,588,431", "782,783,784,588,588,588,588,346,588,588,588,588,291,363,346,368,588", "588,788,431,363,431,368,346,588,615,588,588,588,323,323,323,323,323", "323,792,793,507,323,323,797,609,801,323,507,323,323,323,323,323,323", "323,607,507,804,805,810,323,323,323,323,323,323,323,595,595,323,811", "595,595,595,407,323,323,323,323,323,323,323,323,323,323,323,323,812", "323,323,323,813,323,323,817,323,323,323,407,407,407,407,407,407,407", "407,407,407,407,999,407,407,356,818,407,407,999,323,820,356,323,999", "821,323,323,999,823,323,356,323,407,826,407,323,407,407,599,407,407", "407,407,407,323,407,828,292,831,323,323,323,323,931,323,323,323,323", "22,701,931,294,323,323,295,407,296,16,570,931,323,569,323,323,323,878", "878,878,878,878,878,843,564,318,878,878,562,847,848,878,318,878,878", "878,878,878,878,878,851,318,852,559,555,878,878,878,878,878,878,878", "13,547,878,539,538,537,535,640,878,878,878,878,878,878,878,878,878,878", "878,878,868,878,878,878,534,878,878,12,878,878,878,640,640,640,640,640", "640,640,640,640,640,640,670,640,640,937,302,640,640,670,878,872,937", "878,670,874,878,878,670,10,878,937,878,640,522,640,878,640,640,521,640", "640,640,640,640,878,640,520,519,305,878,878,878,878,220,878,878,878", "878,306,511,220,311,878,878,901,640,508,905,906,220,878,503,878,878", "878,496,496,496,496,496,496,912,313,938,496,496,917,920,921,496,938", "496,496,496,496,496,496,496,922,938,923,925,501,496,496,496,496,496", "496,496,498,971,496,971,971,971,497,971,496,496,496,496,496,496,496", "496,496,496,496,496,317,496,496,496,320,496,496,482,496,496,496,758", "758,758,758,758,758,758,758,758,758,758,300,758,758,14,478,758,758,300", "496,940,14,496,453,943,496,496,300,944,496,14,496,758,945,758,496,758", "758,946,758,758,758,758,758,496,758,947,452,949,496,496,496,496,46,496", "496,496,496,451,7,46,450,496,496,325,758,329,438,428,46,496,420,496", "496,496,563,563,563,563,563,563,330,972,301,563,563,973,974,1,563,301", "563,563,563,563,563,563,563,411,301,410,408,404,563,563,563,563,563", "563,563,332,869,563,869,869,869,985,869,563,563,563,563,563,563,563", "563,563,563,563,563,402,563,563,563,987,563,563,988,563,563,563,753", "753,753,753,753,753,753,753,753,753,753,725,753,753,871,989,753,753", "725,563,990,871,563,725,991,563,563,725,992,563,871,563,753,995,753", "563,753,753,399,753,753,753,753,753,563,753,393,349,347,563,563,563", "563,1000,563,563,563,563,1001,343,342,1012,563,563,,753,,,,,563,,563", "563,563,566,566,566,566,566,566,,,,566,566,,,,566,,566,566,566,566,566", "566,566,290,290,290,290,290,566,566,566,566,566,566,566,,,566,6,6,6", "6,6,566,566,566,566,566,566,566,566,566,566,566,566,,566,566,566,,566", "566,,566,566,566,763,763,763,763,763,763,763,763,763,763,763,,763,763", ",,763,763,,566,,,566,,,566,566,,,566,,566,763,,763,566,763,763,,763", "763,763,763,763,566,763,,,,566,566,566,566,,566,566,566,566,,,,,566", "566,,763,,,,,566,,566,566,566,845,845,845,845,845,845,,,,845,845,,,", "845,,845,845,845,845,845,845,845,495,495,495,495,495,845,845,845,845", "845,845,845,,,845,,,,,,845,845,845,845,845,845,845,845,845,845,845,845", ",845,845,845,,845,845,,845,845,845,765,765,765,765,765,765,765,765,765", "765,765,,765,765,,,765,765,,845,,,845,,,845,845,,,845,,845,765,,765", "845,765,765,,765,765,765,765,765,845,765,,,,845,845,845,845,,845,845", "845,845,,,,,845,845,,765,,,,,845,,845,845,845,839,839,839,839,839,839", ",,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,,839,839,839,839", "839,839,839,,,839,,,,,,839,839,839,839,839,839,839,839,839,839,839,839", ",839,839,839,,839,839,,839,839,839,426,426,426,426,426,426,426,426,426", "426,426,,426,426,,,426,426,,839,,,839,,,839,839,,,839,,839,426,,426", "839,426,426,,426,426,426,426,426,839,426,,,,839,839,839,839,,839,839", "839,839,,,,,839,839,,426,,,,,839,,839,839,839,298,298,298,298,298,298", ",,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298,298,298", "298,298,298,,,298,,,,,,298,298,298,298,298,298,298,298,298,298,298,298", ",298,298,298,,298,298,,298,298,298,471,471,471,471,471,471,471,471,471", "471,471,,471,471,,,471,471,,298,,,298,,,298,298,,,298,,298,471,,471", "298,471,471,,471,471,471,471,471,298,471,,,,298,298,298,298,,298,298", "298,298,,,,,298,298,471,471,,,,,298,,298,298,298,836,836,836,836,836", "836,,,,836,836,,,,836,,836,836,836,836,836,836,836,,,,,,836,836,836", "836,836,836,836,,,836,,,,,,836,836,836,836,836,836,836,836,836,836,836", "836,,836,836,836,,836,836,,836,836,836,274,274,274,274,274,274,274,274", "274,274,274,,274,274,,,274,274,,836,,,836,,,836,836,,,836,,836,274,", "274,836,274,274,,274,274,274,274,274,836,274,,,,836,836,836,836,,836", "836,836,836,,,,,836,836,,274,,,,,836,,836,836,836,293,293,293,293,293", "293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,,,293,293,293", "293,293,293,293,,,293,,,,,,293,293,293,293,293,293,293,293,293,293,293", "293,,293,293,293,,293,293,,293,293,293,674,674,674,674,674,674,674,674", "674,674,674,,674,674,,,674,674,,293,,,293,,,293,293,,,293,,293,674,", "674,293,674,674,,674,674,674,674,674,293,674,,,,293,293,293,293,,293", "293,293,293,,,,,293,293,,674,,,,,293,,293,293,293,835,835,835,835,835", "835,,,,835,835,,,,835,,835,835,835,835,835,835,835,,,,,,835,835,835", "835,835,835,835,,,835,,,,,,835,835,835,835,835,835,835,835,835,835,835", "835,,835,835,835,,835,835,,835,835,835,21,21,21,21,21,21,21,21,21,21", "21,,21,21,,,21,21,,835,,,835,,,835,835,,,835,,835,21,,21,835,21,21,", "21,21,21,21,21,835,21,,,,835,835,835,835,,835,835,835,835,,,,,835,835", ",21,,,,,835,,835,835,835,936,936,936,936,936,936,,,,936,936,,,,936,", "936,936,936,936,936,936,936,,,,,,936,936,936,936,936,936,936,,,936,", ",,,,936,936,936,936,936,936,936,936,936,936,936,936,,936,936,936,,936", "936,,936,936,936,854,854,854,854,854,854,854,854,854,854,854,,854,854", ",,854,854,,936,,,936,,,936,936,,,936,,936,854,,854,936,854,854,,854", "854,854,854,854,936,854,,,,936,936,936,936,,936,936,936,936,,,,,936", "936,,854,,,,,936,,936,936,936,803,803,803,803,803,803,,,,803,803,,,", "803,,803,803,803,803,803,803,803,,,,,,803,803,803,803,803,803,803,,", "803,,,,,,803,803,803,803,803,803,803,803,803,803,803,803,,803,803,803", ",803,803,,803,803,803,857,857,857,857,857,857,857,857,857,857,857,,857", "857,,,857,857,,803,,,803,,,803,803,,,803,,803,857,,857,803,857,857,", "857,857,857,857,857,803,857,,,,803,803,803,803,,803,803,803,803,,,,", "803,803,,857,,,,,803,,803,803,803,791,791,791,791,791,791,,,,791,791", ",,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791", ",,791,,,,,,791,791,791,791,791,791,791,791,791,791,791,791,,791,791", "791,,791,791,,791,791,791,760,760,760,760,760,760,760,760,760,760,760", ",760,760,,,760,760,,791,,,791,,,791,791,,,791,,791,760,,760,791,760", "760,,760,760,760,760,760,791,760,,,,791,791,791,791,,791,791,791,791", ",,,,791,791,,760,,,,,791,,791,791,791,229,229,229,229,229,229,,,,229", "229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229", "229,,,229,,,,,,229,229,229,229,229,229,229,229,229,229,229,229,,229", "229,229,,229,229,,229,229,229,767,767,767,767,767,767,767,767,767,767", "767,,767,767,,,767,767,,229,,,229,,,229,229,,,229,,229,767,,767,229", "767,767,,767,767,767,767,767,229,767,,,,229,229,229,229,,229,229,229", "229,,,,,229,229,,767,,,,,229,,229,229,229,951,951,951,951,951,951,,", ",951,951,,,,951,,951,951,951,951,951,951,951,,,,,,951,951,951,951,951", "951,951,,,951,,,,,,951,951,951,951,951,951,951,951,951,951,951,951,", "951,951,951,,951,951,,951,951,951,517,517,517,517,517,517,517,517,517", "517,517,,517,517,,,517,517,,951,,,951,,,951,951,,,951,,951,517,,517", "951,517,517,,517,517,517,517,517,951,517,,,,951,951,951,951,,951,951", "951,951,,,,,951,951,,517,,,,,951,,951,951,951,957,957,957,957,957,957", ",,,957,957,,,,957,,957,957,957,957,957,957,957,,687,,,,957,957,957,957", "957,957,957,687,548,957,548,548,548,,548,957,957,957,957,957,957,957", "957,957,957,957,957,,957,957,957,,957,957,,957,957,957,468,,687,687", ",,448,687,548,950,,950,950,950,,950,,548,,957,,,957,,,957,957,,449,957", ",957,468,,,957,468,468,448,468,468,,448,448,957,,,950,,957,957,957,957", ",957,957,957,957,,,449,,957,957,449,449,,,,,957,,957,957,957,645,645", "645,645,645,645,,,,645,645,,,,645,,645,645,645,645,645,645,645,,,,,", "645,645,645,645,645,645,645,,827,645,827,827,827,,827,645,645,645,645", "645,645,645,645,645,645,645,645,,645,645,645,,645,645,,645,645,645,699", ",699,699,699,,699,984,827,984,984,984,,984,,,,827,,645,,,645,,,645,645", ",,645,900,645,900,900,900,645,900,,699,,,,,,645,984,,699,,645,645,645", "645,,645,645,645,645,,,,,645,645,,,,,900,,645,,645,645,645,650,650,650", "650,650,650,,,,650,650,,,,650,,650,650,650,650,650,650,650,,,,,,650", "650,650,650,650,650,650,,,650,,,,,,650,650,650,650,650,650,650,650,650", "650,650,650,,650,650,650,,650,650,,650,650,650,458,,,,,,,,,,,,,,,,458", "458,,650,,,650,,,650,650,,,650,,650,458,,458,650,458,458,,458,458,,", "458,650,458,,,,650,650,650,650,,650,650,650,650,,,,,650,650,,,,,,,650", ",650,650,650,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33", ",,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33", "33,,33,33,33,,33,33,,33,33,33,462,462,462,462,462,462,462,,,462,462", ",,,,,462,462,,33,,,33,,,33,33,,,33,,33,462,,462,33,462,462,,462,462", "462,462,462,33,462,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,,,,,,33,,33", "33,33,651,651,651,651,651,651,,,,651,651,,,,651,,651,651,651,651,651", "651,651,,,,,,651,651,651,651,651,651,651,,,651,,,,,,651,651,651,651", "651,651,651,651,651,651,651,651,,651,651,651,,651,651,,651,651,651,461", ",,,,,,,,,,,,,,,461,461,,651,,,651,,,651,651,,,651,,651,461,,461,651", "461,461,,461,461,,,461,651,461,,,,651,651,651,651,,651,651,651,651,", ",,,651,651,,,,,,,651,,651,651,651,206,206,206,206,206,206,,,,206,206", ",,,206,,206,206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206", ",,206,,,,,,206,206,206,206,206,206,206,206,206,206,206,206,,206,206", "206,,206,206,,206,206,206,463,463,463,463,463,463,463,,,463,463,,,,", ",463,463,,206,,,206,,,206,206,,,206,,206,463,,463,206,463,463,,463,463", "463,463,463,206,463,,,,206,206,206,206,,206,206,206,206,,,,,206,206", ",,,,,,206,,206,206,206,684,684,684,684,684,684,,,,684,684,,,,684,,684", "684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,", "684,684,684,684,684,684,684,684,684,684,684,684,,684,684,684,,684,684", ",684,684,684,460,,,,,,,,,,,,,,,,460,460,,684,,,684,,,684,684,,,684,", "684,460,,460,684,460,460,,460,460,,,460,684,460,,,,684,684,684,684,", "684,684,684,684,,,,,684,684,,,,,,,684,,684,684,684,685,685,685,685,685", "685,,,,685,685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685", "685,685,685,685,,,685,,,,,,685,685,685,685,685,685,685,685,685,685,685", "685,,685,685,685,,685,685,,685,685,685,464,464,464,464,464,464,464,", ",464,464,,,,,,464,464,,685,,,685,,,685,685,,,685,,685,464,,464,685,464", "464,,464,464,464,464,464,685,464,,,,685,685,685,685,,685,685,685,685", ",,,,685,685,,,,,,,685,,685,685,685,121,121,121,121,121,121,,,,121,121", ",,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121", ",,121,,,,,,121,121,121,121,121,121,121,121,121,121,121,121,,121,121", "121,,121,121,,121,121,121,465,465,465,465,465,465,465,,,465,465,,,,", ",465,465,,121,,,121,,,121,121,,,121,,121,465,,465,121,465,465,,465,465", "465,465,465,121,465,,,,121,121,121,121,,121,121,121,121,,,,,121,121", ",,,,,,121,,121,121,121,959,959,959,959,959,959,,,,959,959,,,,959,,959", "959,959,959,959,959,959,,,,,,959,959,959,959,959,959,959,,,959,,,,,", "959,959,959,959,959,959,959,959,959,959,959,959,,959,959,959,,959,959", ",959,959,959,466,466,466,466,466,466,466,,,466,466,,,,,,466,466,,959", ",,959,,,959,959,,,959,,959,466,,466,959,466,466,,466,466,466,466,466", "959,466,,,,959,959,959,959,,959,959,959,959,,,,,959,959,,,,,,,959,,959", "959,959,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,", "0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,,0,0,0,459,,,,,,,,,,,,,,", ",459,459,,0,,,0,,,0,0,,,0,,0,459,,459,0,459,459,,459,459,,,459,0,459", ",,,0,0,0,0,,0,0,0,0,,,,,0,0,,,,,,,0,,0,0,0,728,728,728,728,728,728,", ",,728,728,,,,728,,728,728,728,728,728,728,728,,,,,,728,728,728,728,728", "728,728,,,728,,,,,,728,728,728,728,728,728,728,728,728,728,728,728,", "728,728,728,,728,728,,728,728,728,469,469,469,469,469,469,469,,,469", "469,,,,,,469,469,,728,,,728,,,728,728,,,728,,728,469,,469,728,469,469", ",469,469,469,469,469,728,469,,,,728,728,728,728,,728,728,728,728,,,", ",728,728,,,,,,,728,,728,728,728,733,733,733,733,733,733,,,,733,733,", ",,733,,733,733,733,733,733,733,733,,,,,,733,733,733,733,733,733,733", ",,733,,,,,,733,733,733,733,733,733,733,733,733,733,733,733,,733,733", "733,,733,733,,733,733,733,470,470,470,470,470,470,470,470,,470,470,", ",,,,470,470,,733,,,733,,,733,733,,,733,,733,470,,470,733,470,470,,470", "470,470,470,470,733,470,,,,733,733,733,733,,733,733,733,733,,,,,733", "733,,,,,,,733,,733,733,733,743,743,743,743,743,743,,,,743,743,,,,743", ",743,743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743,,,743", ",,,,,743,743,743,743,743,743,743,743,743,743,743,743,,743,743,743,,743", "743,,743,743,743,447,447,447,447,447,447,447,447,447,447,447,,447,447", ",,447,447,,743,,,743,,,743,743,,,743,,743,447,,447,743,447,447,,447", "447,447,447,447,743,447,,,,743,743,743,743,,743,743,743,743,,,,,743", "743,,,,44,44,44,743,44,743,743,743,44,44,,,,44,,44,44,44,44,44,44,44", ",,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44", "44,44,,44,44,,44,44,44,457,457,457,457,457,457,457,,,457,457,,,,,,457", "457,,44,,,44,,,44,44,,,44,,,457,,457,44,457,457,,457,457,457,457,457", "44,457,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,43,43,43,44,43,44,44", "44,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43", ",,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,,43,43,43,446,446", "446,446,446,446,446,446,446,446,446,,446,446,,,446,446,,43,,,43,,,43", "43,,,43,,,446,,446,43,446,446,,446,446,446,446,446,43,446,,,,43,43,43", "43,,43,43,43,43,,,,,43,43,,,,58,58,58,43,58,43,43,43,58,58,,,,58,,58", "58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58", "58,58,58,58,58,,58,58,58,,58,58,,58,58,58,456,,,,,,,,,,,,,,,,456,456", ",58,,,58,,,58,58,,,58,,,456,,,58,456,456,,456,456,,,,58,,,,,58,58,58", "58,,58,58,58,58,,,,,58,58,,,,59,59,59,58,59,58,58,58,59,59,,,,59,,59", "59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59", "59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,454,,,,,,,,,,,,,,,,454,454", ",59,,,59,,,59,59,,,59,,59,454,,454,59,454,454,59,454,454,,,,59,,,,,59", "59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,", "60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60", "60,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60,60,455,,,,,,,,,,,,,,", ",455,455,,60,,,60,,,60,60,,,60,,,455,,455,60,455,455,60,455,455,,,,60", ",,,,60,60,60,60,,60,60,60,60,,,,,60,60,,,,729,729,729,60,729,60,60,60", "729,729,,,,729,,729,729,729,729,729,729,729,,,,,,729,729,729,729,729", "729,729,,,729,,,,,,,729,,,729,729,729,729,729,729,729,729,,729,729,729", ",729,729,,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,,729,", ",,,,729,,,,,,,,,729,,,,,729,729,729,729,,729,729,729,729,,,,,729,729", ",,,63,63,63,729,63,729,729,729,63,63,,,,63,,63,63,63,63,63,63,63,,,", ",,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63", "63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63", ",,,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,64,64,64,63,64", "63,63,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64", ",,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,,64,64,64,", ",,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64", "64,64,,64,64,64,64,,,,,64,64,,,,67,67,67,64,67,64,64,64,67,67,,,,67", ",67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67", "67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,", ",67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,,67,67,67,67,,,", ",67,67,67,,,,,67,67,,67,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68", "68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68", "68,68,68,,68,68,68,,68,68,,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,", ",68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,69,69", "69,68,69,68,68,68,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69", "69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,", ",69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69", "69,69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,", "70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70", "70,70,70,70,70,70,70,,70,70,70,,70,70,,,,70,,,,,,,,,,,,,,,,,,,,70,,", "70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70", ",,,42,42,42,70,42,70,70,70,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42", "42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42", ",42,42,,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,", ",,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,723,723,723,42,723", "42,42,42,723,723,,,,723,,723,723,723,723,723,723,723,,,,,,723,723,723", "723,723,723,723,,,723,,,,,,,723,,,723,723,723,723,723,723,723,723,,723", "723,723,,723,723,,723,723,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723,723", ",,723,,,,,,723,,,,,,,,,723,,,,,723,723,723,723,,723,723,723,723,,,,", "723,723,,,,754,754,754,723,754,723,723,723,754,754,,,,754,,754,754,754", "754,754,754,754,,,,,,754,754,754,754,754,754,754,,,754,,,,,,,754,,,754", "754,754,754,754,754,754,754,,754,754,754,,754,754,,754,754,754,,,,,", ",,,,,,,,,,,,,,754,,,754,,,754,754,,,754,,,,,,754,,,,,,,,,754,,,,,754", "754,754,754,,754,754,754,754,,,,,754,754,,,,768,768,768,754,768,754", "754,754,768,768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768", "768,768,768,768,,,768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768", "768,768,,768,768,,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768", ",,768,,,,,,768,,,,,,,,,768,,,,,768,768,768,768,,768,768,768,768,,,,", "768,768,,,,697,697,697,768,697,768,768,768,697,697,,,,697,,697,697,697", "697,697,697,697,,,,,,697,697,697,697,697,697,697,,,697,,,,,,,697,,,697", "697,697,697,697,697,697,697,,697,697,697,,697,697,,697,697,697,,,,,", ",,,,,,,,,,,,,,697,,,697,,,697,697,,,697,,,,,,697,,,,,,,,,697,,,,,697", "697,697,697,,697,697,697,697,,,,,697,697,,,,,,,697,,697,697,697,111", "111,111,111,111,,,,111,111,,,,111,,111,111,111,111,111,111,111,,,,,", "111,111,111,111,111,111,111,,,111,,,,,,111,111,111,111,111,111,111,111", "111,111,111,111,,111,111,111,,111,111,,111,111,111,,,,,,,,,,,,,,,,,", ",,111,,,111,,,111,111,,,111,,111,,,,111,,,,,,,,,111,,,,,111,111,111", "111,,111,111,111,111,,,,,111,111,,,,,,111,111,,111,111,111,116,116,116", ",116,,,,116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116", "116,116,116,116,,,116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116", "116,116,,116,116,,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116", ",,116,,,,,,116,,,,,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,", "116,116,,,,117,117,117,116,117,116,116,116,117,117,,,,117,,117,117,117", "117,117,117,117,,,,,,117,117,117,117,117,117,117,,,117,,,,,,,117,,,117", "117,117,117,117,117,117,117,,117,117,117,,117,117,,117,117,117,,,,,", ",,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,,,,,117,,,,,,,,,117,,,,,117", "117,117,117,,117,117,117,117,,,,,117,117,,,,118,118,118,117,118,117", "117,117,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118", "118,118,118,118,,,118,,,,,,,118,,,118,118,118,118,118,118,118,118,,118", "118,118,,118,118,,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118", ",,118,,,,,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,", "118,118,,,,119,119,119,118,119,118,118,118,119,119,,,,119,,119,119,119", "119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119", "119,119,119,119,119,119,119,,119,119,119,,119,119,,119,119,119,,,,,", ",,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119", "119,119,119,,119,119,119,119,,,,,119,119,,,,,,,119,,119,119,119,120", "120,120,120,120,,,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,", "120,120,120,120,120,120,120,,,120,,,,,,120,120,,120,120,120,120,120", "120,120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,", ",,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,,,120,,,,,120,120,120", "120,,120,120,120,120,,,,,120,120,,,,769,769,769,120,769,120,120,120", "769,769,,,,769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769", "769,769,,,769,,,,,,,769,,,769,769,769,769,769,769,769,769,,769,769,769", ",769,769,,769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,", ",,,,769,,,,,,,,,769,,,,,769,769,769,769,,769,769,769,769,,,,,769,769", ",,,770,770,770,769,770,769,769,769,770,770,,,,770,,770,770,770,770,770", "770,770,,,,,,770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770", "770,770,770,770,770,,770,770,770,,770,770,,770,770,770,,,,,,,,,,,,,", ",,,,,,770,,,770,,,770,770,,,770,,,,,,770,,,,,,,,,770,,,,,770,770,770", "770,,770,770,770,770,,,,,770,770,,,,771,771,771,770,771,770,770,770", "771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771,771", "771,771,,,771,,,,,,,771,,,771,771,771,771,771,771,771,771,,771,771,771", ",771,771,,771,771,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,", ",,,,771,,,,,,,,,771,,,,,771,771,771,771,,771,771,771,771,,,,,771,771", ",,,35,35,35,771,35,771,771,771,35,35,,,,35,,35,35,35,35,35,35,35,,,", ",,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35", "35,,35,35,,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,965,,965,965", "965,965,965,,,,,,,,,,965,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,", "965,35,,35,35,35,207,207,207,,207,965,965,,207,207,965,,,207,,207,207", "207,207,207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207", ",,207,207,207,207,207,207,207,207,,207,207,207,,207,207,,207,207,207", ",,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,207,,,,207,,,,,,,,,207", ",,,,207,207,207,207,,207,207,207,207,,,,,207,207,,,,208,208,208,207", "208,207,207,207,208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208", "208,208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208", "208,,208,208,208,,208,208,,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208", ",,208,208,,,208,,,,,,208,,,,,,,,,208,,,,,208,208,208,208,,208,208,208", "208,,,,,208,208,,,,209,209,209,208,209,208,208,208,209,209,,,,209,,209", "209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,", ",209,,,209,209,209,209,209,209,209,209,209,209,209,209,,209,209,,209", "209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,209,,209,,209", ",,209,,,,,,209,,,,,209,209,209,209,,209,209,209,209,,,,,209,209,,,,678", "678,678,209,678,209,209,209,678,678,,,,678,,678,678,678,678,678,678", "678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678", "678,678,678,678,,678,678,678,,678,678,,678,678,678,,,,,,,,,,,,,,,,,", ",,678,,,678,,,678,678,,,678,,678,,,,678,,,,,,,,,678,,,,,678,678,678", "678,,678,678,678,678,,,,,678,678,,,,673,673,673,678,673,678,678,678", "673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673,673", "673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673,673,,673,673,673", ",673,673,,,,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,,", ",,,,,,,,,,,,673,673,673,673,,673,673,673,673,,,,,673,673,,,,212,212", "212,673,212,673,673,673,212,212,,,,212,,212,212,212,212,212,212,212", ",,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212", "212,212,212,,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212", ",,212,,,212,212,,,212,,,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212", "212,212,212,,,,,212,212,,,,213,213,213,212,213,212,212,212,213,213,", ",,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213,213,213,213", ",,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213,213,213,,213", "213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,213,", ",,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,,,,,213,213,", ",,214,214,214,213,214,213,213,213,214,214,,,,214,,214,214,214,214,214", "214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214", "214,214,214,214,214,,214,214,214,,214,214,,214,214,214,,,,,,,,,,,,,", ",,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214", "214,,214,214,214,214,,,,,214,214,,,,215,215,215,214,215,214,214,214", "215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215", "215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215", ",215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,", ",,,,215,,,,,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215,215", ",,,216,216,216,215,216,215,215,215,216,216,,,,216,,216,216,216,216,216", "216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216", "216,216,216,216,216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,", ",,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,,216,,,,,216,216,216", "216,,216,216,216,216,,,,,216,216,,,,217,217,217,216,217,216,216,216", "217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217", "217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217", ",217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,", ",,,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217,,,,,217,217", "217,,,662,662,662,217,662,217,217,217,662,662,,,,662,,662,662,662,662", "662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662", "662,662,662,662,662,662,,662,662,662,,662,662,,,,662,,,,,,,,,,,,,,,", ",,,,662,,,662,,,662,662,,,662,,,,,,,,,,,,,,,,,,,,662,662,662,662,,662", "662,662,662,,,,,662,662,,,,656,656,656,662,656,662,662,662,656,656,", ",,656,,656,656,656,656,656,656,656,,,,,,656,656,656,656,656,656,656", ",,656,,,,,,,656,,,656,656,656,656,656,656,656,656,,656,656,656,,656", "656,,656,656,656,,,,,,,,,,,,,,,,,,,,656,,,656,,,656,656,,,656,,,,,,656", ",,,,,,,,656,,,,,656,656,656,656,,656,656,656,656,,,,,656,656,,,,34,34", "34,656,34,656,656,656,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34", "34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34", ",,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34", "34,34,34,,34,34,34,34,,,,,34,34,,,,31,31,31,34,31,34,34,34,31,31,,,", "31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31", "31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31,,,,,,,,,,,,,,,,,,", ",31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31", "31,31,,,,,31,31,,,,30,30,30,31,30,31,31,31,30,30,,,,30,,30,30,30,30", "30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30", "30,30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30", ",,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30", ",,,29,29,29,30,29,30,30,30,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29", "29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29", ",29,29,,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29", ",,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,773,773,773,29", "773,29,29,29,773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773", "773,773,773,773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773", ",773,773,773,,773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773", "773,,,773,,,,,,773,,,,,,,,,773,,,,,773,773,773,773,,773,773,773,773", ",,,,773,773,,,,228,228,228,773,228,773,773,773,228,228,,,,228,,228,228", "228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228", ",,228,228,228,228,228,228,228,228,,228,228,228,,228,228,,228,228,228", ",,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,,228,,", ",,228,228,228,228,,228,228,228,228,,,,,228,228,,,,785,785,785,228,785", "228,228,228,785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785", "785,785,785,785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785", ",785,785,785,,785,785,,,,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785", ",,785,,,,,,,,,,,,,,,,,,,,785,785,785,785,,785,785,785,785,,,,,785,785", ",,,632,632,632,785,632,785,785,785,632,632,,,,632,,632,632,632,632,632", "632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632", "632,632,632,632,632,,632,632,632,,632,632,,632,632,632,,,,,,,,,,,,,", ",,,,,,632,,,632,,,632,632,,,632,,,,,,632,,,,,,,,,632,,,,,632,632,632", "632,,632,632,632,632,,,,,632,632,,,,231,231,231,632,231,632,632,632", "231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231", "231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231", ",231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,", ",,,,231,,,,,,,,,231,,,,,231,231,231,231,,231,231,231,231,,,,,231,231", ",,,232,232,232,231,232,231,231,231,232,232,,,,232,,232,232,232,232,232", "232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232", "232,232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,", ",,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,,232,,,,,232,232,232", "232,,232,232,232,232,,,,,232,232,,,,233,233,233,232,233,232,232,232", "233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233", "233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233", ",233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,", ",,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233,233,,,,,233,233", ",,,234,234,234,233,234,233,233,233,234,234,,,,234,,234,234,234,234,234", "234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234", "234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,", ",,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234", "234,,234,234,234,234,,,,,234,234,,,,235,235,235,234,235,234,234,234", "235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235", "235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235", ",235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,", ",,,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235", ",,,236,236,236,235,236,235,235,235,236,236,,,,236,,236,236,236,236,236", "236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236", "236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,", ",,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236", "236,,236,236,236,236,,,,,236,236,,,,237,237,237,236,237,236,236,236", "237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237", "237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237", ",237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,", ",,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237", ",,,238,238,238,237,238,237,237,237,238,238,,,,238,,238,238,238,238,238", "238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238", "238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,", ",,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238", "238,,238,238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238", "239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239", "239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239", ",239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,", ",,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239", ",,,240,240,240,239,240,239,239,239,240,240,,,,240,,240,240,240,240,240", "240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240", "240,240,240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,", ",,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240", "240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240", "241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241", "241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241", ",241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,", ",,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241", ",,,242,242,242,241,242,241,241,241,242,242,,,,242,,242,242,242,242,242", "242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242", "242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,", ",,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242", "242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242,242,242", "243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243", "243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243", ",243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,", ",,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243", ",,,244,244,244,243,244,243,243,243,244,244,,,,244,,244,244,244,244,244", "244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244", "244,244,244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,", ",,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244", "244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244,244,244", "245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245", "245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245", ",245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,", ",,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245", ",,,246,246,246,245,246,245,245,245,246,246,,,,246,,246,246,246,246,246", "246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246", "246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,", ",,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246", "246,,246,246,246,246,,,,,246,246,,,,247,247,247,246,247,246,246,246", "247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247", "247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247", ",247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,", ",,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247", ",,,248,248,248,247,248,247,247,247,248,248,,,,248,,248,248,248,248,248", "248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248", "248,248,248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,", ",,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248", "248,,248,248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248", "249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249", "249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249", ",249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,", ",,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249", ",,,250,250,250,249,250,249,249,249,250,250,,,,250,,250,250,250,250,250", "250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250", "250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,", ",,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250", "250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250", "251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251", "251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251", ",251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,", ",,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251", ",,,252,252,252,251,252,251,251,251,252,252,,,,252,,252,252,252,252,252", "252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252", "252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,", ",,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252", "252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252", "253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253", "253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253", ",253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,", ",,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253", ",,,254,254,254,253,254,253,253,253,254,254,,,,254,,254,254,254,254,254", "254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254", "254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,", ",,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254", "254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254", "255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255", "255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255", ",255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,", ",,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255", ",,,256,256,256,255,256,255,255,255,256,256,,,,256,,256,256,256,256,256", "256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256", "256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,", ",,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256", "256,,256,256,256,256,,,,,256,256,,,,631,631,631,256,631,256,256,256", "631,631,,,,631,,631,631,631,631,631,631,631,,,,,,631,631,631,631,631", "631,631,,,631,,,,,,,631,,,631,631,631,631,631,631,631,631,,631,631,631", ",631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,", ",,,,631,,,,,,,,,631,,,,,631,631,631,631,,631,631,631,631,,,,,631,631", ",,,628,628,628,631,628,631,631,631,628,628,,,,628,,628,628,628,628,628", "628,628,,,,,,628,628,628,628,628,628,628,,,628,,,,,,,628,,,628,628,628", "628,628,628,628,628,,628,628,628,,628,628,,628,628,628,,,,,,,,,,,,,", ",,,,,,628,,,628,,,628,628,,,628,,,,,,628,,,,,,,,,628,,,,,628,628,628", "628,,628,628,628,628,,,,,628,628,,,,263,263,263,628,263,628,628,628", "263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263", "263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,263,263,263", "263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263", ",263,,263,,263,,,263,,,,,,263,,,,,263,263,263,263,,263,263,263,263,", ",,,263,263,,,,264,264,264,263,264,263,263,263,264,264,,,,264,,264,264", "264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264", ",,264,264,264,264,264,264,264,264,264,264,264,264,,264,264,,264,264", "264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,264,,264,,264,,,264", ",,,,,264,,,,,264,264,264,264,,264,264,264,264,,,,,264,264,,,,272,272", "272,264,272,264,264,264,272,272,,,,272,,272,272,272,272,272,272,272", ",,,,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272", "272,272,272,272,272,272,272,,272,272,,272,272,272,,,,,,,,,,,,,,,,,,", ",272,,,272,,,272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272", "272,272,,272,272,272,272,,,,,272,272,272,,,627,627,627,272,627,272,272", "272,627,627,,,,627,,627,627,627,627,627,627,627,,,,,,627,627,627,627", "627,627,627,,,627,,,,,,,627,,,627,627,627,627,627,627,627,627,,627,627", "627,,627,627,,627,627,627,,,,,,,,,,,,,,,,,,,,627,,,627,,,627,627,,,627", ",,,,,627,,,,,,,,,627,,,,,627,627,627,627,,627,627,627,627,,,,,627,627", ",,,623,623,623,627,623,627,627,627,623,623,,,,623,,623,623,623,623,623", "623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623,,,623,623,623", "623,623,623,623,623,,623,623,623,,623,623,,623,623,623,,,,,,,,,,,,,", ",,,,,,623,,,623,,,623,623,,,623,,,,,,623,,,,,,,,,623,,,,,623,623,623", "623,,623,623,623,623,,,,,623,623,,,,622,622,622,623,622,623,623,623", "622,622,,,,622,,622,622,622,622,622,622,622,,,,,,622,622,622,622,622", "622,622,,,622,,,,,,,622,,,622,622,622,622,622,622,622,622,,622,622,622", ",622,622,,622,622,622,,,,,,,,,,,,,,,,,,,,622,,,622,,,622,622,,,622,", ",,,,622,,,,,,,,,622,,,,,622,622,622,622,,622,622,622,622,,,,,622,622", ",,,279,279,279,622,279,622,622,622,279,279,,,,279,,279,279,279,279,279", "279,279,,,,,,279,279,279,279,279,279,279,,,279,,,,,,,279,,,279,279,279", "279,279,279,279,279,,279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,", ",,,,,,279,,,279,,,279,279,,,279,,,,,,279,,,,,,,,,279,,,,,279,279,279", "279,,279,279,279,279,,,,,279,279,,,,621,621,621,279,621,279,279,279", "621,621,,,,621,,621,621,621,621,621,621,621,,,,,,621,621,621,621,621", "621,621,,,621,,,,,,,621,,,621,621,621,621,621,621,621,621,621,621,621", "621,,621,621,,621,621,621,,,,,,,,,,,,,,,,,,,,621,,,621,,,621,621,,,621", ",,,621,,621,,,621,,,,,,621,,,,,621,621,621,621,,621,621,621,621,,,,", "621,621,,,,281,281,281,621,281,621,621,621,281,281,,,,281,,281,281,281", "281,281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,,,281,,,281", "281,281,281,281,281,281,281,,281,281,281,,281,281,,281,281,281,,,,,", ",,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,,,,,281,,,,,,,,,281,,,,,281", "281,281,281,,281,281,281,281,,,,,281,281,,,,752,752,752,281,752,281", "281,281,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752", "752,752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752", "752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752", ",,752,,,,,,752,,,,,,,,,752,,,,,752,752,752,752,,752,752,752,752,,,,", "752,752,,,,284,284,284,752,284,752,752,752,284,284,,,,284,,284,284,284", "284,284,284,284,,,,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284", "284,284,284,284,284,284,284,,284,284,284,,284,284,,284,284,284,,,,,", ",,,,,,,,,,,,,,284,,,284,,,284,284,,,284,,,,,,284,,,,,,,,,284,,,,,284", "284,284,284,,284,284,284,284,,,,,284,284,,,,620,620,620,284,620,284", "284,284,620,620,,,,620,,620,620,620,620,620,620,620,,,,,,620,620,620", "620,620,620,620,,,620,,,,,,,620,,,620,620,620,620,620,620,620,620,620", "620,620,620,,620,620,,620,620,620,,,,,,,,,,,,,,,,,,,,620,,,620,,,620", "620,,,620,,620,,620,,620,,,620,,,,,,620,,,,,620,620,620,620,,620,620", "620,620,,,,,620,620,,,,,,,620,,620,620,620,289,289,289,289,289,,,,289", "289,,,,289,,289,289,289,289,289,289,289,,,,,,289,289,289,289,289,289", "289,,,289,,,,,,289,289,,289,289,289,289,289,289,289,289,289,,289,289", "289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289", ",289,,,,289,,,,,,,,,289,,,,,289,289,289,289,,289,289,289,289,,,,,289", "289,,,,617,617,617,289,617,289,289,289,617,617,,,,617,,617,617,617,617", "617,617,617,,,,,,617,617,617,617,617,617,617,,,617,,,,,,,617,,,617,617", "617,617,617,617,617,617,,617,617,617,,617,617,,617,617,617,,,,,,,,,", ",,,,,,,,,,617,,,617,,,617,617,,,617,,,,,,617,,,,,,,,,617,,,,,617,617", "617,617,,617,617,617,617,,,,,617,617,,,,616,616,616,617,616,617,617", "617,616,616,,,,616,,616,616,616,616,616,616,616,,,,,,616,616,616,616", "616,616,616,,,616,,,,,,,616,,,616,616,616,616,616,616,616,616,,616,616", "616,,616,616,,616,616,616,,,,,,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616", ",616,,,,616,,,,,,,,,616,,,,,616,616,616,616,,616,616,616,616,,,,,616", "616,,,,833,833,833,616,833,616,616,616,833,833,,,,833,,833,833,833,833", "833,833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,,,833,,,833,833", "833,833,833,833,833,833,,833,833,833,,833,833,,833,833,833,,,,,,,,,", ",,,,,,,,,,833,,,833,,,833,833,,,833,,,,,,833,,,,,,,,,833,,,,,833,833", "833,833,,833,833,833,833,,,,,833,833,,,,20,20,20,833,20,833,833,833", "20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,", ",,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,,20,20,20,,,,,,,,,", ",,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20", "20,20,20,,,,,20,20,,,,582,582,582,20,582,20,20,20,582,582,,,,582,,582", "582,582,582,582,582,582,,,,,,582,582,582,582,582,582,582,,,582,,,,,", ",582,,,582,582,582,582,582,582,582,582,582,582,582,582,,582,582,,582", "582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582,582,,,582,,582,,582,,582", ",,582,,,,,,582,,,,,582,582,582,582,,582,582,582,582,,,,,582,582,,,,572", "572,572,582,572,582,582,582,572,572,,,,572,,572,572,572,572,572,572", "572,,,,,,572,572,572,572,572,572,572,,,572,,,,,,,572,,,572,572,572,572", "572,572,572,572,572,572,572,572,,572,572,,572,572,572,,,,,,,,,,,,,,", ",,,,,572,,,572,,,572,572,,,572,,572,,572,,572,,,572,,,,,,572,,,,,572", "572,572,572,,572,572,572,572,,,,,572,572,,,,571,571,571,572,571,572", "572,572,571,571,,,,571,,571,571,571,571,571,571,571,,,,,,571,571,571", "571,571,571,571,,,571,,,,,,,571,,,571,571,571,571,571,571,571,571,,571", "571,571,,571,571,,571,571,571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571,571", ",,571,,571,,,,571,,,,,,,,,571,,,,,571,571,571,571,,571,571,571,571,", ",,,571,571,,,,297,297,297,571,297,571,571,571,297,297,,,,297,,297,297", "297,297,297,297,297,,,,,,297,297,297,297,297,297,297,,,297,,,,,,,297", ",,297,297,297,297,297,297,297,297,,297,297,297,,297,297,,,,297,,,,,", ",,,,,,,,,,,,,,297,,,297,,,297,297,,,297,,967,,967,967,967,967,967,,", ",,,,,,,967,,297,297,297,297,,297,297,297,297,,,,,297,297,,,,297,,967", "297,,297,297,297,838,838,838,,838,967,967,,838,838,967,,,838,,838,838", "838,838,838,838,838,,,,,,838,838,838,838,838,838,838,,,838,,,,,,,838", ",,838,838,838,838,838,838,838,838,,838,838,838,,838,838,,838,838,838", ",,,,,,,,,,,,,,,,,,,838,,,838,,,838,838,,,838,,838,,,,838,,,,,,,,,838", ",,,,838,838,838,838,,838,838,838,838,,,,,838,838,,,,855,855,855,838", "855,838,838,838,855,855,,,,855,,855,855,855,855,855,855,855,,,,,,855", "855,855,855,855,855,855,,,855,,,,,,,855,,,855,855,855,855,855,855,855", "855,855,855,855,855,,855,855,,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855", ",,855,855,,,855,,,,855,,855,,,855,,,,,,855,,,,,855,855,855,855,,855", "855,855,855,,,,,855,855,,,,856,856,856,855,856,855,855,855,856,856,", ",,856,,856,856,856,856,856,856,856,,,,,,856,856,856,856,856,856,856", ",,856,,,,,,,856,,,856,856,856,856,856,856,856,856,,856,856,856,,856", "856,,856,856,856,,,,,,,,,,,,,,,,,,,,856,,,856,,,856,856,,,856,,,,,,856", ",,,,,,,,856,,,,,856,856,856,856,,856,856,856,856,,,,,856,856,,,,551", "551,551,856,551,856,856,856,551,551,,,,551,,551,551,551,551,551,551", "551,,,,,,551,551,551,551,551,551,551,,,551,,,,,,,551,,,551,551,551,551", "551,551,551,551,,551,551,551,,551,551,,551,551,551,,,,,,,,,,,,,,,,,", ",,551,,,551,,,551,551,,,551,,,,,,551,,,,,,,,,551,,,,,551,551,551,551", ",551,551,551,551,,,,,551,551,,,,527,527,527,551,527,551,551,551,527", "527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527,527,527,527,527", "527,,,527,,,,,,,527,,,527,527,527,527,527,527,527,527,527,527,527,527", ",527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,,527,", ",,,,527,,,527,,,,,,527,,,,,527,527,527,527,,527,527,527,527,,,,,527", "527,,,,524,524,524,527,524,527,527,527,524,524,,,,524,,524,524,524,524", "524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524,524", "524,524,524,524,524,524,524,524,524,524,,524,524,,524,524,524,,,,,,", ",,,,,,,,,,,,,524,,,524,,,524,524,,,524,,524,,,,524,,,524,,,,,,524,,", ",,524,524,524,524,,524,524,524,524,,,,,524,524,,,,339,339,339,524,339", "524,524,524,339,339,,,,339,,339,339,339,339,339,339,339,,,,,,339,339", "339,339,339,339,339,,,339,,,,,,,339,,,339,339,339,339,339,339,339,339", ",339,339,339,,339,339,,339,339,339,,,,,,,,,,,,,,,,,,,,339,,,339,,,339", "339,,,339,,,,,,339,,,,,,,,,339,,,,,339,339,339,339,,339,339,339,339", ",,,,339,339,,,,514,514,514,339,514,339,339,339,514,514,,,,514,,514,514", "514,514,514,514,514,,,,,,514,514,514,514,514,514,514,,,514,,,,,,,514", ",,514,514,514,514,514,514,514,514,,514,514,514,,514,514,,514,514,514", ",,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,,,,,514,,,,,,,,,514,,", ",,514,514,514,514,,514,514,514,514,,,,,514,514,,,,513,513,513,514,513", "514,514,514,513,513,,,,513,,513,513,513,513,513,513,513,,,,,,513,513", "513,513,513,513,513,,,513,,,,,,,513,,,513,513,513,513,513,513,513,513", ",513,513,513,,513,513,,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513", "513,,,513,,,,,,513,,,,,,,,,513,,,,,513,513,513,513,,513,513,513,513", ",,,,513,513,,,,510,510,510,513,510,513,513,513,510,510,,,,510,,510,510", "510,510,510,510,510,,,,,,510,510,510,510,510,510,510,,,510,,,,,,,510", ",,510,510,510,510,510,510,510,510,,510,510,510,,510,510,,,,510,,,,,", ",,,,,,,,,,,,,,510,,,510,,,510,510,,,510,,,,,,,,,,,,,,,,,,,,510,510,510", "510,,510,510,510,510,,,,,510,510,,,,504,504,504,510,504,510,510,510", "504,504,,,,504,,504,504,504,504,504,504,504,,,,,,504,504,504,504,504", "504,504,,,504,,,,,,,504,,,504,504,504,504,504,504,504,504,504,504,504", "504,,504,504,,504,504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504", ",504,,504,,504,,,504,,,,,,504,,,,,504,504,504,504,,504,504,504,504,", ",,,504,504,,,,502,502,502,504,502,504,504,504,502,502,,,,502,,502,502", "502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,,,,502", ",,502,502,502,502,502,502,502,502,,502,502,502,,502,502,,,,502,,,,,", ",,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,,,,,,,,,,,,,,,,,,,502,502,502", "502,,502,502,502,502,,,,,502,502,,,,314,314,314,502,314,502,502,502", "314,314,,,,314,,314,314,314,314,314,314,314,,,,,,314,314,314,314,314", "314,314,,,314,,,,,,,314,,,314,314,314,314,314,314,314,314,,314,314,314", ",314,314,,,,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,,314,,,,,,,", ",,,,,,,,,,,,314,314,314,314,,314,314,314,314,,,,,314,314,,,,870,870", "870,314,870,314,314,314,870,870,,,,870,,870,870,870,870,870,870,870", ",,,,,870,870,870,870,870,870,870,,,870,,,,,,,870,,,870,870,870,870,870", "870,870,870,,870,870,870,,870,870,,,,870,,,,,,,,,,,,,,,,,,,,870,,,870", ",,870,870,,,870,,894,,894,894,894,894,894,,,,,,,,,,894,,870,870,870", "870,,870,870,870,870,,,,,870,870,,,,,,894,870,,870,870,870,494,494,494", "494,494,894,894,,494,494,894,,,494,,494,494,494,494,494,494,494,,,,", ",494,494,494,494,494,494,494,,,494,,,,,,494,494,494,494,494,494,494", "494,494,494,494,494,,494,494,494,,494,494,,494,494,494,,,,,,,,,,,,,", ",,,,,,494,,,494,,,494,494,,,494,,494,,,,494,,,,,,,,,494,,,,,494,494", "494,494,,494,494,494,494,,,,,494,494,,,,,,494,494,,494,494,494,489,489", "489,,489,,,,489,489,,,,489,,489,489,489,489,489,489,489,,,,,,489,489", "489,489,489,489,489,,,489,,,,,,,489,,,489,489,489,489,489,489,489,489", ",489,489,489,,489,489,,489,489,489,,,,,,,,,,,,,,,,,,,,489,,,489,,,489", "489,,,489,,,,,,489,,,,,,,,,489,,,,,489,489,489,489,,489,489,489,489", ",,,,489,489,,,,487,487,487,489,487,489,489,489,487,487,,,,487,,487,487", "487,487,487,487,487,,,,,,487,487,487,487,487,487,487,,,487,,,,,,,487", ",,487,487,487,487,487,487,487,487,487,487,487,487,,487,487,,487,487", "487,,,,,,,,,,,,,,,,,,,,487,,,487,,,487,487,,,487,,,,487,,487,,,487,", ",,,,487,,,,,487,487,487,487,,487,487,487,487,,,,,487,487,,,,322,322", "322,487,322,487,487,487,322,322,,,,322,,322,322,322,322,322,322,322", ",,,,,322,322,322,322,322,322,322,,,322,,,,,,,322,,,322,322,322,322,322", "322,322,322,,322,322,322,,322,322,,322,322,322,,,,,,,,,,,,,,,,,,,,322", ",,322,322,,322,322,,,322,,,,,,322,,,,,,,,,322,,,,,322,322,322,322,,322", "322,322,322,,,,,322,322,,,,882,882,882,322,882,322,322,322,882,882,", ",,882,,882,882,882,882,882,882,882,,,,,,882,882,882,882,882,882,882", ",,882,,,,,,,882,,,882,882,882,882,882,882,882,882,,882,882,882,,882", "882,,,,882,,,,,,,,,,,,,,,,,,,,882,,,882,,,882,882,,,882,,,,,,,,,,,,", ",,,,,,,882,882,882,882,,882,882,882,882,,,,,882,882,,,,485,485,485,882", "485,882,882,882,485,485,,,,485,,485,485,485,485,485,485,485,,,,,,485", "485,485,485,485,485,485,,,485,,,,,,,485,,,485,485,485,485,485,485,485", "485,485,485,485,485,,485,485,,485,485,485,,,,,,,,,,,,,,,,,,,,485,,,485", ",,485,485,,,485,,485,,485,,485,,,485,,,,,,485,,,,,485,485,485,485,,485", "485,485,485,,,,,485,485,,,,445,445,445,485,445,485,485,485,445,445,", ",,445,,445,445,445,445,445,445,445,,,,,,445,445,445,445,445,445,445", ",,445,,,,,,,445,,,445,445,445,445,445,445,445,445,,445,445,445,,445", "445,,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445,,,,,,445", ",,,,,,,,445,,,,,445,445,445,445,,445,445,445,445,,,,,445,445,,,,444", "444,444,445,444,445,445,445,444,444,,,,444,,444,444,444,444,444,444", "444,,,,,,444,444,444,444,444,444,444,,,444,,,,,,,444,,,444,444,444,444", "444,444,444,444,,444,444,444,,444,444,,444,444,444,,,,,,,,,,,,,,,,,", ",,444,,,444,,,444,444,,,444,,,,,,444,,,,,,,,,444,,,,,444,444,444,444", ",444,444,444,444,,,,,444,444,,,,443,443,443,444,443,444,444,444,443", "443,,,,443,,443,443,443,443,443,443,443,,,,,,443,443,443,443,443,443", "443,,,443,,,,,,,443,,,443,443,443,443,443,443,443,443,,443,443,443,", "443,443,,443,443,443,,,,,,,,,,,,,,,,,,,,443,,,443,,,443,443,,,443,,", ",,,443,,,,,,,,,443,,,,,443,443,443,443,,443,443,443,443,,,,,443,443", ",,,441,441,441,443,441,443,443,443,441,441,,,,441,,441,441,441,441,441", "441,441,,,,,,441,441,441,441,441,441,441,,,441,,,,,,,441,,,441,441,441", "441,441,441,441,441,441,441,441,441,,441,441,,441,441,441,,,,,,,,,,", ",,,,,,,,,441,,,441,,,441,441,,,441,,441,,441,,441,,,441,,,,,,441,,,", ",441,441,441,441,,441,441,441,441,,,,,441,441,,,,,,,441,,441,441,441", "5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5", "5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5", "5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,975,975,975", "5,975,5,5,5,975,975,,,,975,,975,975,975,975,975,975,975,,,,,,975,975", "975,975,975,975,975,,,975,,,,,,,975,,,975,975,975,975,975,975,975,975", "975,975,975,975,,975,975,,975,975,975,,,,,,,,,,,,,,,,,,,,975,,,975,", ",975,975,,,975,,975,,975,,975,,,975,,,,,,975,,,,,975,975,975,975,,975", "975,975,975,,,,,975,975,,,,403,403,403,975,403,975,975,975,403,403,", ",,403,,403,403,403,403,403,403,403,,,,,,403,403,403,403,403,403,403", ",,403,,,,,,,403,,,403,403,403,403,403,403,403,403,,403,403,403,,403", "403,,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403,403,,,403,,,,,,403", ",,,,,,,,403,,,,,403,403,403,403,,403,403,403,403,,,,,403,403,,,,375", "375,375,403,375,403,403,403,375,375,,,,375,,375,375,375,375,375,375", "375,,,,,,375,375,375,375,375,375,375,,,375,,,,,,,375,,,375,375,375,375", "375,375,375,375,,375,375,375,,375,375,,375,375,375,,,,,,,,,,,,,,,,,", ",,375,,,375,,,375,375,,,375,,,,,,375,,,,,,,,,375,,,,,375,375,375,375", ",375,375,375,375,,,,,375,375,,,,359,359,359,375,359,375,375,375,359", "359,,,,359,,359,359,359,359,359,359,359,,,,,,359,359,359,359,359,359", "359,,,359,,,,,,,359,,,359,359,359,359,359,359,359,359,,359,359,359,", "359,359,,359,359,359,,,,,,,,,,,,,,,,,,,,359,,,359,,,359,359,,,359,,", ",,,359,,,,,,,,,359,,,,,359,359,359,359,,359,359,359,359,,,,,359,359", ",,,340,340,340,359,340,359,359,359,340,340,,,,340,,340,340,340,340,340", "340,340,,,,,,340,340,340,340,340,340,340,,,340,,,,,,,340,,,340,340,340", "340,340,340,340,340,,340,340,340,,340,340,,340,340,340,,,,,,,,,,,,,", ",,,,,,340,,,340,,,340,340,,,340,,,,,,340,,,,,,,,,340,,,,,340,340,340", "340,,340,340,340,340,,,,,340,340,,,,518,518,518,340,518,340,340,340", "518,518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518", "518,518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518,,518,518,518", ",518,518,,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,", ",,,,518,,,,,,,,,518,,,,,518,518,518,518,,518,518,518,518,,,,,518,518", ",,,,424,,518,,518,518,518,424,424,424,,,424,424,424,,424,,,,,,,,,424", "424,424,424,,,,,,,,424,424,,424,424,424,424,424,,,,,,,,,,,,,,,,,,,,", ",,,424,424,424,424,424,424,424,424,424,424,424,424,424,424,,,424,424", "424,,,424,,,424,,,424,424,,424,,424,,424,,424,424,,424,424,424,424,424", ",424,424,424,,,,,,,,,,,,,,424,,,424,424,424,424,56,424,,424,,,,56,56", "56,,,56,56,56,,56,,,,,,,,,,56,56,56,,,,,,,,56,56,,56,56,56,56,56,,,", ",,,,,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,56,56,56,56,56,56,56,,,56,56", "56,,,56,,,56,,,56,56,,56,,56,,56,,56,56,,56,56,56,56,56,,56,,56,,,,", ",,,,,,,,,56,,,56,56,56,56,423,56,,56,,,,423,423,423,,,423,423,423,,423", ",,,,,,,,423,423,423,423,,,,,,,,423,423,,423,423,423,423,423,,,,,,,,", ",,,,,,,,,,,,,,,423,423,423,423,423,423,423,423,423,423,423,423,423,423", ",,423,423,423,,,423,,,423,,,423,423,,423,,423,,423,,423,423,,423,423", "423,423,423,,423,423,423,,,,,,,,,,,,,,423,,,423,423,423,423,28,423,", "423,,,,28,28,28,,,28,28,28,,28,,,,,,,,,,28,28,,,,,,,,,28,28,,28,28,28", "28,28,,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28", "28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28,,28,28,28,28,28", ",28,473,28,,,,,,473,473,473,,,473,473,473,28,473,,28,28,,28,,28,,473", "473,,,,,,,,,,473,473,,473,473,473,473,473,,,,,,,,,,,,,,,,,,643,,643", "643,643,643,643,,,,,,,,,,643,473,,414,,,,,473,,414,414,414,473,473,414", "414,414,,414,,,643,,,,,,414,414,414,643,643,643,643,,473,473,643,414", "414,,414,414,414,414,414,,,,,473,,,473,,,,,473,,,,,643,,,,,,414,414", "414,414,414,414,414,414,414,414,414,414,414,414,,,414,414,414,,,414", ",414,414,,,414,414,,414,,414,,414,,414,414,,414,414,414,414,414,,414", "414,414,,,,,,,,,,,,,,414,,27,414,414,,414,,414,27,27,27,,,27,27,27,", "27,,,,,,,,,27,27,27,,,,,,,,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,", ",,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27", ",,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27,,,,,,,,,,,,,,27", ",,27,27,,27,,27,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9", "9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,,9,9,,9,9,9,9,9", "9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9", ",,,,,,,,,,,,,9,394,394,394,394,394,394,394,394,394,394,394,394,394,394", "394,394,394,394,394,394,394,394,394,394,,,,394,394,394,394,394,394,394", "394,394,394,,,,,,394,394,394,394,394,394,394,394,394,,,394,,,,,,,,,394", "394,,394,394,394,394,394,394,394,,,394,394,,,,394,394,394,394,,,,,,", ",,,,,,,394,394,,394,394,394,394,394,394,394,394,394,394,394,394,,,394", "394,,,,,,,,,,,,,,394,613,613,613,613,613,613,613,613,613,613,613,613", "613,613,613,613,613,613,613,613,613,613,613,613,,,,613,613,613,613,613", "613,613,613,613,613,,,,,,613,613,613,613,613,613,613,613,613,,,613,", ",,,,,,,613,613,,613,613,613,613,613,613,613,,,613,613,,,,613,613,613", "613,,,,,,,,,,,,,,613,613,,613,613,613,613,613,613,613,613,613,613,613", "613,,,613,613,,,,,,,,,,,,,,613,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8", "8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,", ",8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8", "8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,71,71,71,71,71,71,71,71,71,71,71,71,71", "71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,", ",,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,,,71,71,,71,71,71,71", "71,71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71", "71,71,71,71,71,71,71,,,71,736,736,736,736,736,736,736,736,736,736,736", "736,736,736,736,736,736,736,736,736,736,736,736,736,,,,736,736,736,736", "736,736,736,736,736,736,,,,,,736,736,736,736,736,736,736,736,736,,,736", ",,,,,,,,736,736,,736,736,736,736,736,736,736,,,736,736,,,,736,736,736", "736,,,,,,,,,,,,,,736,736,,736,736,736,736,736,736,736,736,736,736,736", "736,977,977,736,,977,,,,,,,,,977,977,,977,977,977,977,977,977,977,,", "977,977,,,,977,977,977,977,,,,,,977,,,,,,,,977,977,,977,977,977,977", "977,977,977,977,977,977,977,977,516,516,977,,516,,,,,,,,,516,516,,516", "516,516,516,516,516,516,,,516,516,,,,516,516,516,516,,,,,,516,,,,,,", ",516,516,,516,516,516,516,516,516,516,516,516,516,516,516,515,515,516", ",515,,,,,,,,,515,515,,515,515,515,515,515,515,515,,,515,515,,,,515,515", "515,515,,,,,,515,,,,,,,,515,515,,515,515,515,515,515,515,515,515,515", "515,515,515,440,440,515,,440,,,,,,,,,440,440,,440,440,440,440,440,440", "440,,,440,440,,,,440,440,440,440,,,,,,440,,,,,,,,440,440,,440,440,440", "440,440,440,440,440,440,440,440,440,211,211,440,,211,,,,,,,,,211,211", ",211,211,211,211,211,211,211,,,211,211,,,,211,211,211,211,,,,,,211,", ",,,,,,211,211,,211,211,211,211,211,211,211,211,211,211,211,211,506,506", "211,,506,,,,,,,,,506,506,,506,506,506,506,506,506,506,,,506,506,,,,506", "506,506,506,,,,,,506,,,,,,,,506,506,,506,506,506,506,506,506,506,506", "506,506,506,506,505,505,506,,505,,,,,,,,,505,505,,505,505,505,505,505", "505,505,,,505,505,,,,505,505,505,505,,,,,,505,,,,,,,,505,505,,505,505", "505,505,505,505,505,505,505,505,505,505,210,210,505,,210,,,,,,,,,210", "210,,210,210,210,210,210,210,210,,,210,210,,,,210,210,210,210,,,,,,210", ",,,,,,,210,210,,210,210,210,210,210,210,210,210,210,210,210,210,439", "439,210,,439,,,,,,,,,439,439,,439,439,439,439,439,439,439,,,439,439", ",,,439,439,439,439,,,,,,439,,,,,,,,439,439,,439,439,439,439,439,439", "439,439,439,439,439,439,581,581,439,,581,,,,,,,,,581,581,,581,581,581", "581,581,581,581,,,581,581,,,,581,581,581,581,,,,,,581,,,,,,,,581,581", ",581,581,581,581,581,581,581,581,581,581,581,581,580,580,581,,580,,", ",,,,,,580,580,,580,580,580,580,580,580,580,,,580,580,,,,580,580,580", "580,,,,,,580,,,,,,,,580,580,,580,580,580,580,580,580,580,580,580,580", "580,580,932,932,580,,932,,,,,,,,,932,932,,932,932,932,932,932,932,932", ",,932,932,,,,932,932,932,932,,,,,,932,,,,,,,,932,932,,932,932,932,932", "932,932,932,932,932,932,932,932,259,259,932,,259,,,,,,,,,259,259,,259", "259,259,259,259,259,259,,,259,259,,,,259,259,259,259,,,,,,,,,,,,,,259", "259,,259,259,259,259,259,259,259,259,259,259,259,259,573,573,259,,573", ",,,,,,,,573,573,,573,573,573,573,573,573,573,,,573,573,,,,573,573,573", "573,,,,,,573,,,,,,,,573,573,,573,573,573,573,573,573,573,573,573,573", "573,573,574,574,573,,574,,,,,,,,,574,574,,574,574,574,574,574,574,574", ",,574,574,,,,574,574,574,574,,,,,,574,,,,,,,,574,574,,574,574,574,574", "574,574,574,574,574,574,574,574,976,976,574,,976,,,,,,,,,976,976,,976", "976,976,976,976,976,976,,,976,976,,,,976,976,976,976,,,,,,976,,,,,,", ",976,976,,976,976,976,976,976,976,976,976,976,976,976,976,,691,976,691", "691,691,691,691,,693,,693,693,693,693,693,963,691,963,963,963,963,963", ",1005,693,1005,1005,1005,1005,1005,,963,,,,,,,691,1005,,,,,,,693,691", "691,691,691,,,963,691,693,693,693,693,,,1005,693,,963,963,,,,963,,,1005", "1005,,,589,1005,589,589,589,589,589,892,,892,892,892,892,892,,890,589", "890,890,890,890,890,,892,888,,888,888,888,888,888,890,,,,,,,589,589", "888,,,,,892,,589,589,589,589,,,890,589,,892,892,,,,892,888,,890,890", ",,,890,,888,888,888,888,,,915,888,915,915,915,915,915,,861,,861,861", "861,861,861,979,915,979,979,979,979,979,,,861,,,,,,,979,,,,,,,915,915", ",,,,,,861,915,915,915,915,,,979,915,861,861,861,861,,,,861,,979,979", ",,734,979,734,734,734,734,734,,695,,695,695,695,695,695,,734,335,,335", "335,335,335,335,695,532,,532,532,532,532,532,,335,,,,,734,,,532,,,,", "695,734,734,734,734,,,,734,335,335,695,695,,,,695,532,335,335,335,335", ",,,335,532,532,532,532,,,865,532,865,865,865,865,865,,863,,863,863,863", "863,863,,865,,,,,,,961,863,961,961,961,961,961,,,,,,,,,865,961,,,,,", ",863,,,865,865,,,,865,863,863,863,863,,,961,863,,,,,,,,961,961,961,961", ",,,961"];

      racc_action_check = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(25068, nil);

      idx = 0;

      ($a = ($c = clist).$each, $a._p = (TMP_3 = function(str){var self = TMP_3._s || this, $a, $b, TMP_4;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_4 = function(i){var self = TMP_4._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_4._s = self, TMP_4), $a).call($b)}, TMP_3._s = self, TMP_3), $a).call($c);

      racc_action_pointer = [4558, 1329, nil, 211, nil, 21165, 1456, 1187, 23342, 22955, 1015, nil, 954, 982, 1177, 419, 884, 551, nil, -78, 17305, 2302, 990, nil, 303, nil, 168, 22820, 22497, 10829, 10697, 10565, nil, 3571, 10433, 8577, nil, 657, 430, 420, 724, 165, 6705, 5245, 5113, 538, 1216, nil, nil, nil, nil, nil, nil, nil, nil, nil, 22227, nil, 5377, 5509, 5641, -24, nil, 5905, 6037, nil, nil, 6169, 6309, 6441, 6573, 23471, nil, nil, nil, nil, nil, 276, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 111, nil, nil, 224, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 34, nil, 7373, nil, nil, nil, nil, 7513, 7645, 7777, 7909, 8049, 4276, nil, 734, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 70, nil, 3853, 8717, 8849, 8981, 24081, 23895, 9377, 9509, 9641, 9773, 9905, 10037, nil, nil, 1075, 264, 120, 547, 114, 567, 657, nil, 11093, 2866, 674, 11489, 11621, 11753, 11885, 12017, 12149, 12281, 12413, 12545, 12677, 12809, 12941, 13073, 13205, 13337, 13469, 13601, 13733, 13865, 13997, 14129, 14261, 14393, 14525, 14657, 14789, nil, nil, 24391, nil, nil, 680, 15185, 15317, nil, nil, nil, nil, nil, nil, nil, 15449, nil, 2020, nil, 654, 656, nil, 15977, 723, 16241, nil, 609, 16505, nil, nil, 360, nil, 16777, 1441, 763, 864, 2161, 889, 932, 891, 17833, 1879, 682, 1174, 1246, 1060, 507, nil, 1058, 1027, 250, nil, nil, nil, 1071, 173, 1048, 19557, nil, 395, 1163, 964, nil, 1167, nil, 20233, 892, 698, 1174, nil, 151, 139, 1212, 1208, 356, 1263, nil, nil, 24878, 619, 34, 36, 18765, 21825, 256, 1426, 1305, -18, -1, 793, 1375, -19, 1405, nil, nil, 232, 295, 708, nil, 895, nil, 9, 21693, nil, nil, nil, 799, 651, 131, 492, 680, 801, 629, 587, 729, nil, 511, nil, 21561, nil, 399, 162, 269, 394, 286, -39, -25, 331, nil, nil, nil, nil, nil, nil, nil, nil, 1314, 23084, nil, nil, nil, nil, 1306, nil, nil, 1237, 21429, 1209, nil, nil, 892, 1211, nil, 1207, 1205, 376, 389, 22690, nil, nil, nil, 0, 361, 1222, nil, nil, 22362, 22092, nil, 1738, nil, 1167, nil, nil, 751, nil, nil, nil, nil, 45, nil, 1217, 24143, 23833, 21025, 193, 20893, 20761, 20629, 5245, 4981, 3154, 3176, 1235, 1232, 1221, 1197, 5509, 5641, 5377, 5113, 3430, 4558, 3994, 3712, 3571, 3853, 4135, 4276, 4417, 491, 3148, 4699, 4840, 1879, 273, 22610, nil, nil, nil, nil, 1125, nil, 266, 289, 1106, nil, nil, 20497, nil, 20101, nil, 19969, nil, nil, nil, nil, 19829, 1582, 1174, 1085, 1076, nil, nil, 1068, 19425, 1040, 19293, 24019, 23957, 823, 1076, nil, 19161, 1025, nil, 19029, 18897, 23771, 23709, 3007, 21957, 1140, 1137, 1007, 1042, nil, 18633, nil, nil, 18501, nil, nil, nil, -25, 24886, nil, 959, 941, nil, 940, 939, 938, nil, nil, nil, nil, nil, nil, nil, 928, 3134, nil, nil, 18369, nil, nil, nil, 1010, nil, nil, nil, 1009, nil, nil, 994, 1315, 1029, nil, 1456, 123, 147, 1014, 1018, 17701, 17569, 24453, 24515, -5, nil, nil, 332, nil, 24267, 24205, 17437, nil, nil, nil, 330, 61, 751, 24716, nil, 193, nil, nil, nil, 875, nil, nil, nil, 877, nil, nil, -30, nil, 151, nil, nil, 781, nil, 770, nil, nil, nil, 23213, nil, 755, 17041, 16909, 449, 738, 16637, 16109, 15845, 15713, 681, nil, nil, 15581, 15053, 678, nil, 14921, 11357, nil, nil, -76, 71, 609, 472, 568, 1033, 500, nil, 22620, nil, 3289, 580, -21, -51, nil, 3430, 3712, nil, 465, nil, 505, 10301, nil, nil, nil, 454, -116, 10169, 431, nil, 385, 137, 248, 414, 259, 1033, 353, 293, 9245, 2161, 317, 25, 353, 9113, nil, 274, nil, -74, nil, 3994, 4135, -80, 3117, nil, nil, 377, 24640, nil, 24648, nil, 24869, nil, 7233, nil, 3305, nil, 884, 367, -82, nil, nil, nil, nil, 521, nil, 86, nil, nil, nil, nil, 168, nil, 10, 124, 41, 40, -4, 69, 6837, 329, 1315, nil, 391, 4699, 5773, nil, nil, 565, 4840, 24861, 138, 23585, nil, nil, nil, nil, nil, nil, 4981, nil, nil, nil, nil, nil, nil, nil, 519, 16373, 1315, 6969, nil, 590, nil, 1174, nil, 2725, nil, nil, 1456, nil, 1597, nil, 2866, 7101, 8181, 8313, 8445, 229, 10961, 704, 707, nil, 708, 712, 717, nil, 746, 733, 729, 724, 11225, nil, nil, 873, nil, nil, 2725, 785, 891, nil, nil, nil, 770, 265, nil, nil, 898, nil, 2584, 784, 831, nil, nil, nil, nil, 806, 922, 857, 818, nil, nil, nil, 821, 840, nil, 845, 849, nil, 853, nil, nil, 861, 3275, 871, -26, nil, 998, nil, 17173, 23, 2302, 2020, nil, 17973, 1738, 9, 24, nil, 1031, 402, 1597, nil, 1037, 916, nil, nil, 929, 925, nil, 2443, 18105, 18237, 2584, 427, nil, nil, 24801, nil, 24947, nil, 24939, nil, nil, 979, 1301, 19689, 1318, 1065, nil, 1010, nil, nil, nil, 1033, nil, nil, -10, 20365, nil, nil, nil, nil, nil, 24740, nil, 24731, nil, 24723, nil, 19736, nil, nil, nil, nil, 396, 3335, 1030, nil, 33, nil, 1158, 1159, nil, 1, nil, nil, nil, 1172, nil, nil, 24793, nil, 1052, nil, nil, 1053, 1054, 1064, 1066, nil, 1067, nil, 371, nil, nil, nil, 934, 24329, nil, nil, nil, 2443, 1036, 1105, 331, 1206, 751, nil, 1131, 1135, 1140, 1145, 1153, 1, 1155, 3173, 3007, nil, nil, nil, nil, nil, 3148, nil, 4417, nil, 24962, nil, 24655, nil, 8624, nil, 17880, nil, nil, nil, 1160, 1233, 1237, 1321, 21297, 24577, 23647, 754, 24808, nil, nil, nil, nil, 3312, 1223, 677, 1366, 1369, 1263, 1268, 1272, 1276, nil, nil, 1284, 26, 35, 110, 892, 1301, 1306, nil, nil, nil, 24663, nil, nil, nil, nil, 32, nil, 1309, nil];

      racc_action_default = [-3, -590, -1, -576, -4, -590, -7, -590, -590, -590, -590, -29, -590, -590, -590, -279, -590, -40, -43, -578, -590, -48, -50, -51, -52, -56, -256, -256, -256, -292, -327, -328, -68, -11, -72, -80, -82, -590, -484, -485, -590, -590, -590, -590, -590, -578, -237, -270, -271, -272, -273, -274, -275, -276, -277, -278, -566, -281, -285, -589, -557, -300, -388, -590, -590, -305, -308, -576, -590, -590, -590, -590, -329, -330, -425, -426, -427, -428, -429, -450, -432, -433, -452, -454, -437, -442, -446, -448, -464, -452, -466, -468, -469, -470, -471, -564, -473, -474, -565, -476, -477, -478, -479, -480, -481, -482, -483, -488, -489, -590, -2, -577, -585, -586, -587, -6, -590, -590, -590, -590, -590, -3, -17, -590, -111, -112, -113, -114, -115, -116, -117, -118, -119, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -22, -120, -11, -590, -590, -246, -590, -590, -590, -590, -590, -590, -590, -578, -579, -47, -590, -484, -485, -590, -279, -590, -590, -229, -590, -11, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -394, -396, -590, -574, -575, -57, -246, -590, -299, -400, -409, -411, -63, -406, -64, -578, -65, -238, -251, -260, -260, -255, -590, -261, -590, -559, -590, -590, -66, -67, -576, -12, -590, -15, -590, -70, -11, -578, -590, -73, -76, -11, -88, -89, -590, -590, -96, -292, -295, -578, -590, -327, -328, -331, -407, -590, -78, -590, -84, -289, -467, -590, -214, -215, -230, -590, -11, -283, -578, -239, -582, -582, -590, -590, -582, -590, -301, -302, -516, -49, -590, -590, -590, -590, -576, -590, -577, -484, -485, -590, -590, -279, -590, -341, -342, -106, -107, -590, -109, -590, -279, -590, -590, -484, -485, -320, -111, -112, -153, -154, -155, -171, -176, -183, -186, -322, -590, -555, -590, -430, -590, -590, -590, -590, -590, -590, -590, -590, 1014, -5, -588, -23, -24, -25, -26, -27, -590, -590, -19, -20, -21, -121, -590, -30, -39, -266, -590, -590, -265, -31, -196, -578, -247, -260, -260, -567, -568, -256, -404, -569, -570, -568, -567, -256, -403, -405, -569, -570, -37, -204, -38, -590, -41, -42, -194, -261, -44, -45, -46, -578, -298, -590, -590, -590, -246, -289, -590, -590, -590, -205, -206, -207, -208, -209, -210, -211, -212, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -231, -232, -233, -234, -578, -377, -256, -567, -568, -54, -58, -578, -257, -377, -377, -578, -294, -252, -590, -253, -590, -258, -590, -262, -562, -563, -10, -577, -14, -3, -578, -69, -287, -85, -74, -590, -578, -246, -590, -590, -95, -590, -467, -590, -81, -86, -590, -590, -590, -590, -235, -590, -417, -590, -578, -590, -240, -584, -583, -242, -584, -290, -291, -558, -590, -516, -391, -554, -554, -499, -501, -501, -501, -515, -517, -518, -519, -520, -521, -522, -523, -590, -525, -527, -529, -534, -536, -537, -539, -544, -546, -547, -549, -550, -551, -590, -11, -332, -333, -11, -590, -590, -590, -590, -590, -246, -590, -590, -289, -313, -106, -107, -108, -590, -590, -246, -316, -490, -491, -590, -590, -11, -516, -324, -578, -431, -451, -456, -590, -458, -434, -453, -590, -455, -436, -590, -439, -590, -441, -444, -590, -445, -590, -465, -8, -18, -590, -28, -269, -590, -590, -408, -590, -248, -250, -590, -590, -59, -245, -401, -590, -590, -61, -402, -590, -590, -297, -580, -567, -568, -567, -568, -578, -194, -590, -378, -578, -380, -11, -53, -397, -377, -243, -11, -11, -293, -260, -259, -263, -590, -560, -561, -13, -590, -71, -590, -77, -83, -578, -567, -568, -244, -92, -94, -590, -79, -590, -203, -213, -578, -589, -589, -282, -590, -286, -582, -389, -11, -11, -578, -590, -497, -498, -590, -590, -508, -590, -511, -590, -513, -590, -343, -590, -345, -347, -354, -578, -528, -538, -548, -552, -589, -334, -589, -306, -335, -336, -309, -590, -312, -590, -578, -567, -568, -571, -288, -590, -106, -107, -110, -578, -11, -590, -493, -318, -590, -11, -516, -590, -590, -556, -457, -460, -461, -462, -463, -11, -435, -438, -440, -443, -447, -449, -122, -267, -590, -197, -590, -581, -260, -33, -199, -34, -200, -60, -35, -202, -36, -201, -62, -195, -590, -590, -590, -590, -408, -590, -554, -554, -359, -361, -361, -361, -376, -590, -578, -382, -523, -531, -532, -542, -590, -399, -398, -11, -590, -590, -254, -264, -16, -75, -90, -87, -296, -589, -339, -11, -418, -589, -419, -420, -284, -241, -590, -590, -590, -554, -535, -553, -500, -501, -501, -526, -501, -501, -545, -501, -523, -540, -578, -590, -352, -590, -524, -590, -337, -590, -590, -11, -11, -311, -590, -11, -408, -590, -408, -590, -590, -11, -321, -590, -578, -495, -325, -590, -268, -32, -198, -249, -590, -236, -590, -357, -358, -367, -369, -590, -372, -590, -374, -379, -590, -590, -590, -530, -590, -395, -590, -410, -412, -9, -11, -424, -340, -590, -590, -422, -392, -393, -390, -496, -590, -504, -590, -506, -590, -509, -590, -512, -514, -344, -346, -350, -590, -355, -303, -590, -304, -590, -590, -263, -589, -314, -317, -492, -590, -323, -494, -516, -459, -554, -533, -360, -361, -361, -361, -361, -543, -361, -381, -578, -384, -386, -387, -541, -590, -289, -55, -423, -11, -97, -98, -590, -590, -105, -421, -501, -501, -501, -501, -348, -590, -353, -590, -11, -307, -310, -413, -414, -415, -11, -319, -11, -356, -590, -364, -590, -366, -590, -370, -590, -373, -375, -383, -590, -288, -571, -417, -246, -590, -590, -104, -590, -502, -505, -507, -510, -590, -351, -589, -590, -590, -361, -361, -361, -361, -385, -416, -578, -567, -568, -571, -103, -501, -349, -338, -315, -326, -590, -362, -365, -368, -371, -408, -503, -361, -363];

      clist = ["216,372,618,26,275,275,275,520,26,326,127,127,486,310,310,114,258,266", "270,414,420,333,677,26,132,132,322,122,205,570,408,2,26,26,26,324,26", "130,130,533,336,336,563,566,336,6,657,310,310,310,6,337,338,405,430", "341,111,540,477,427,259,26,778,262,269,271,26,26,473,654,26,654,831", "127,523,526,733,296,530,114,110,579,313,511,478,898,657,901,317,292", "219,819,703,336,336,336,336,115,277,277,277,711,714,378,388,389,390", "391,294,822,384,379,781,845,26,688,689,801,437,26,26,26,26,26,26,930", "928,295,328,331,588,276,276,276,273,285,286,924,602,604,358,362,589", "785,342,736,486,915,957,723,834,836,393,340,645,812,6,780,949,835,648", "327,650,651,339,392,6,325,782,394,521,401,593,483,600,603,603,323,927", "373,657,583,531,683,275,335,351,204,472,480,481,433,434,435,436,498", "954,805,881,376,377,415,349,386,654,654,985,728,898,26,26,26,26,424", "380,26,26,26,26,26,26,613,647,381,382,383,738,930,993,743,729,659,26", "772,877,924,686,817,275,275,779,334,1001,826,329,814,918,275,414,420", "330,868,374,1,540,,715,,,798,,819,639,,,,26,26,,,,663,732,,,26,310,400", "406,672,920,,425,429,,,,508,818,,820,,26,310,819,,26,,266,114,399,26", "270,,822,,522,726,,404,,540,840,13,668,404,336,336,13,,,842,,295,668", "665,26,567,568,,791,,,277,495,,587,633,,,494,277,26,26,501,,13,,955", "292,1002,,591,114,292,859,860,512,785,509,,785,26,785,493,785,276,819", "497,479,584,,,503,276,909,,482,26,649,,,668,652,,,,295,794,619,668,", "295,718,887,,127,746,661,746,,,959,727,664,625,,,,590,132,630,843,612", "657,,275,847,569,,761,,839,130,13,766,,,,809,415,797,,13,13,,,,848,654", ",,424,,26,,,,,,,624,641,,,,540,629,921,,922,785,,785,625,785,,785,,", ",,430,,,,,994,,275,,310,,,,943,,,,310,,794,737,,,676,415,26,960,26,", ",680,,,785,415,26,424,,646,,,,,,,,424,13,,26,,,806,,,660,,912,,,,,,", ",,,,,6,13,,,512,,275,,,,,,512,653,,,275,989,,,,,,415,,26,,,26,,,415", ",,26,424,800,,712,712,,424,,,26,936,,,1010,,26,,682,,956,,,730,731,", ",13,,830,,13,790,951,,,13,,,,127,,,,,619,,,,783,26,26,,807,132,26,26", "750,,26,,13,540,,,789,310,130,988,,,619,,26,,,14,310,26,26,,14,708,", "625,710,,630,,,,850,783,,332,,220,,717,,,,,,,220,220,220,,14,301,301", "26,26,756,,775,757,759,,,,762,764,619,336,429,,,,512,336,,619,220,,841", ",,220,220,799,844,220,346,356,356,692,694,696,,26,897,,,,26,26,,,813", "26,776,127,788,,,,,792,793,26,849,,914,,879,,,,883,,26,,,,,14,783,310", ",,220,220,220,220,14,14,777,,,,,810,811,404,815,,,815,668,,,,,,,,,26", ",995,,,,,,,,,,26,13,,13,336,,,,,,402,,,,,903,432,821,853,823,,,,,,,", ",,,26,851,26,26,,,26,,,,,,26,310,,,,712,,,911,14,220,220,220,310,,220", "220,220,220,220,220,,,,,,,,13,,,13,14,26,,,,874,,,488,,490,,491,492", ",,,880,,,,13,,,,,917,,970,775,,775,15,775,220,220,,15,,,,,,220,,,,,", "905,906,,,908,424,,,,,26,14,,,,14,15,303,303,301,14,275,,815,,26,776", ",776,13,776,26,,26,13,13,301,,415,,862,864,866,935,,14,,619,,26,424", "348,357,357,,,,,,,,220,220,,923,,925,,13,13,,,,889,891,,893,895,,896", "775,220,775,615,775,,775,,,944,,945,,946,15,,,220,,,,974,,15,15,,,,", ",,,13,,,,986,13,,,,,987,,775,,776,13,776,,776,,776,,,,,,,,,,,,,,16,", ",,,16,,,,,,,,,,,990,220,991,655,992,332,,658,776,,,,,13,,,,16,1000,", ",962,964,966,968,13,969,15,,,,,,,,,,980,981,982,983,,655,,1012,332,", ",,,15,,350,,14,,14,13,13,,,13,301,,220,,,13,,704,301,,,,,,,,220,,,,", ",,,,,,432,1006,1007,1008,1009,1011,16,,,,,13,,,,16,16,,,,,15,,,1013", "15,,,,303,15,,,,14,,,14,,,,,39,220,,751,303,39,,655,332,,,220,,15,,", ",14,,,,,,,,,,13,,,,,,39,300,300,,,,,,,13,795,,,,,13,,13,220,220,,,,220", "220,,16,220,,,,,804,428,,345,361,361,361,,,14,,,,,14,14,,16,,825,,,", ",,,301,,,,,,,,,,,301,,,,,,,,,39,,14,14,,,,,,39,39,,,,,,,,,,,,,,,,,,852", ",547,16,,,,16,,,,,16,220,,,,,14,220,,,,14,,,,,,,,,,14,,,,16,,,,,,,220", "15,,15,,,,,,303,,,,,,,,303,,,,,,39,,,,,,,,871,,,,,,14,,,,,907,,,,39", ",,14,,,,,,,,,,332,,,,,,,,,,,15,,,15,,,,,38,220,,14,14,38,,14,,,,,,14", ",,,15,,,,,,,742,,,,39,,,,39,38,299,299,300,39,931,,,,,,,,14,,,,939,", ",300,,,,,,,,,39,,,,,,344,360,360,360,,,15,,,547,,15,15,,,,,,16,,16,", ",303,,698,,,,,,,,,303,,14,,,,,,,38,,15,15,,,,,14,38,38,,,,14,,14,,,", ",,,547,,,,,,,,,220,,,,,,,,,,,,16,,15,16,,,,15,,,,,,,,,,15,,,,,,,,16", ",,,,,,,784,,,,,,,,,,,,,,,,,,38,,,,,,,,357,,,,,,15,,,428,,,,,,38,,,15", "39,,39,547,16,547,,,300,16,16,698,,,828,,300,,,,,,,,,,,,,,,15,15,,,15", ",,,,,15,,16,16,,547,,,,,,,,,,38,,,,38,,,,299,38,357,,,39,,,39,,15,,", ",941,,,299,,,,,,16,,,38,,16,,39,,,,,,,,16,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,15,,,,,,,698,,698,,,,,,15,,,16,39,,15,,15,39,39,,,,,16,,,,,,300,", ",,,784,,784,,,,300,,,,,,,,,,,39,39,,,16,16,,,16,,547,,,,16,,,,,,,947", "698,,,,,,,,,,,,,,,547,,,,,,,39,,,16,,39,,942,,,,,,,,39,,,,,,,,,,,698", "38,698,38,,,,,,299,,,,784,,,,299,,,,,,,,,,,,,,361,,,,16,698,39,,,,,", ",,,,,,39,16,,,,,,16,,16,,,,,,,,,,,,38,,,38,,,,,,,,39,39,,,39,,,,,,39", ",,,38,,,,,,,,,,,,,,,,,,,,,361,,,,,,,,39,,,,938,,,,,,,,,,,,,,,,,,,,,", ",,38,,,,,38,38,,,,,,,,,,,299,,,,,,,,,,,299,,39,,,,,,,,,38,38,,,,,39", ",,,,,39,227,39,,,,,,,,274,274,274,,,,,,,,,,,319,320,321,,,,,,,38,,,", ",38,,,274,274,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,360,", ",,,,38,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,38,,,38,,,,,", "38,,,,,,,,,,,,,,,,,,,,,,,,,360,,,,,,,,38,,,,937,,274,407,274,,,426,431", ",,,,,,,,,,,,,,227,,,446,447,448,449,450,451,452,453,454,455,456,457", "458,459,460,461,462,463,464,465,466,467,468,469,470,471,,,38,,,,274", "274,,,,,,,,274,,38,,,,,274,38,274,38,274,274,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,274,,426,640,407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,274", ",274,,,,,,,,,,,,,,,274,,,,,,,,,674,675,,,,,,,,,,274,,,274,,,,,,,,,,", ",,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,274,274,,,,,,,,,,274,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,274,753,,,274,274,758,760,,,,763,765,,,640,767", ",,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,", ",,274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,854", ",,,,,,,,,,,,,758,760,765,763,,857,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,274,854,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274"];

      racc_goto_table = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(3136, nil);

      idx = 0;

      ($a = ($d = clist).$each, $a._p = (TMP_5 = function(str){var self = TMP_5._s || this, $a, $b, TMP_6;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_6 = function(i){var self = TMP_6._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_6._s = self, TMP_6), $a).call($b)}, TMP_5._s = self, TMP_5), $a).call($d);

      clist = ["31,56,24,41,33,33,33,8,41,67,57,57,73,64,64,95,136,71,71,37,37,86,10", "41,61,61,31,15,15,92,23,2,41,41,41,29,41,60,60,135,29,29,89,89,29,7", "172,64,64,64,7,17,17,27,18,17,6,159,39,27,36,41,125,38,38,38,41,41,37", "74,41,74,90,57,69,69,96,49,69,95,4,54,50,51,23,113,172,116,63,45,20", "163,115,29,29,29,29,5,70,70,70,91,91,148,17,17,17,17,46,168,148,149", "128,108,41,120,120,11,47,41,41,41,41,41,41,131,130,9,70,70,109,68,68", "68,44,44,44,169,151,151,55,55,110,164,4,111,73,112,106,105,11,104,2", "103,40,128,7,117,116,102,42,68,40,40,101,7,7,100,123,30,99,28,152,47", "152,152,152,98,129,97,172,94,132,133,33,134,19,16,137,139,140,29,29", "29,29,47,141,142,143,146,147,71,93,5,74,74,116,107,113,41,41,41,41,57", "150,41,41,41,41,41,41,62,72,153,154,155,156,131,130,157,158,14,41,24", "12,169,135,162,33,33,126,88,116,115,66,165,166,33,37,37,85,128,84,1", "159,,92,,,24,,163,23,,,,41,41,,,,51,8,,,41,64,20,20,51,125,,20,20,,", ",31,126,,126,,41,64,163,,41,,71,95,9,41,71,,168,,31,54,,68,,159,24,21", "37,68,29,29,21,,,24,,9,37,23,41,17,17,,40,,,70,7,,29,47,,,6,70,41,41", "50,,21,,11,45,90,,29,95,45,120,120,49,164,63,,164,41,164,4,164,68,163", "46,44,95,,,46,68,91,,44,41,47,,,37,47,,,,9,73,31,37,,9,23,120,,57,152", "47,152,,,96,23,47,71,,,,36,61,71,8,15,172,,33,8,4,,39,,89,60,21,39,", ",,69,71,51,,21,21,,,,135,74,,,57,,41,,,,,,,38,31,,,,159,38,126,,126", "164,,164,71,164,,164,,,,,18,,,,,10,,33,,64,,,,126,,,,64,,73,47,,,29", "71,41,120,41,,,31,,,164,71,41,57,,38,,,,,,,,57,21,,41,,,27,,,2,,8,,", ",,,,,,,,,7,21,,,49,,33,,,,,,49,70,,,33,126,,,,,,71,,41,,,41,,,71,,,41", "57,47,,95,95,,57,,,41,89,,,24,,41,,70,,92,,,95,95,,,21,,47,,21,86,89", ",,21,,,,57,,,,,31,,,,31,41,41,,67,61,41,41,15,,41,,21,159,,,136,64,60", "8,,,31,,41,,,22,64,41,41,,22,9,,71,9,,71,,,,56,31,,65,,22,,68,,,,,,", "22,22,22,,22,22,22,41,41,70,,119,20,20,,,,20,20,31,29,20,,,,49,29,,31", "22,,17,,,22,22,49,17,22,22,22,22,161,161,161,,41,47,,,,41,41,,,119,41", "121,57,9,,,,,9,9,41,95,,47,,67,,,,67,,41,,,,,22,31,64,,,22,22,22,22", "22,22,124,,,,,9,9,68,121,,,121,37,,,,,,,,,41,,23,,,,,,,,,,41,21,,21", "29,,,,,,65,,,,,17,65,124,20,124,,,,,,,,,,,41,9,41,41,,,41,,,,,,41,64", ",,,95,,,95,22,22,22,22,64,,22,22,22,22,22,22,,,,,,,,21,,,21,22,41,,", ",9,,,65,,65,,65,65,,,,9,,,,21,,,,,119,,31,119,,119,25,119,22,22,,25", ",,,,,22,,,,,,9,9,,,9,57,,,,,41,22,,,,22,25,25,25,22,22,33,,121,,41,121", ",121,21,121,41,,41,21,21,22,,71,,122,122,122,9,,22,,31,,41,57,25,25", "25,,,,,,,,22,22,,124,,124,,21,21,,,,161,161,,161,161,,161,119,22,119", "65,119,,119,,,124,,124,,124,25,,,22,,,,9,,25,25,,,,,,,,21,,,,9,21,,", ",,9,,119,,121,21,121,,121,,121,,,,,,,,,,,,,,26,,,,,26,,,,,,,,,,,124", "22,124,65,124,65,,65,121,,,,,21,,,,26,124,,,122,122,122,122,21,122,25", ",,,,,,,,,161,161,161,161,,65,,124,65,,,,,25,,26,,22,,22,21,21,,,21,22", ",22,,,21,,65,22,,,,,,,,22,,,,,,,,,,,65,122,122,122,122,161,26,,,,,21", ",,,26,26,,,,,25,,,122,25,,,,25,25,,,,22,,,22,,,,,53,22,,65,25,53,,65", "65,,,22,,25,,,,22,,,,,,,,,,21,,,,,,53,53,53,,,,,,,21,65,,,,,21,,21,22", "22,,,,22,22,,26,22,,,,,65,26,,53,53,53,53,,,22,,,,,22,22,,26,,65,,,", ",,,22,,,,,,,,,,,22,,,,,,,,,53,,22,22,,,,,,53,53,,,,,,,,,,,,,,,,,,65", ",114,26,,,,26,,,,,26,22,,,,,22,22,,,,22,,,,,,,,,,22,,,,26,,,,,,,22,25", ",25,,,,,,25,,,,,,,,25,,,,,,53,,,,,,,,22,,,,,,22,,,,,65,,,,53,,,22,,", ",,,,,,,65,,,,,,,,,,,25,,,25,,,,,52,22,,22,22,52,,22,,,,,,22,,,,25,,", ",,,,25,,,,53,,,,53,52,52,52,53,53,22,,,,,,,,22,,,,22,,,53,,,,,,,,,53", ",,,,,52,52,52,52,,,25,,,114,,25,25,,,,,,26,,26,,,25,,114,,,,,,,,,25", ",22,,,,,,,52,,25,25,,,,,22,52,52,,,,22,,22,,,,,,,114,,,,,,,,,22,,,,", ",,,,,,,26,,25,26,,,,25,,,,,,,,,,25,,,,,,,,26,,,,,,,,114,,,,,,,,,,,,", ",,,,,52,,,,,,,,25,,,,,,25,,,26,,,,,,52,,,25,53,,53,114,26,114,,,53,26", "26,114,,,114,,53,,,,,,,,,,,,,,,25,25,,,25,,,,,,25,,26,26,,114,,,,,,", ",,,52,,,,52,,,,52,52,25,,,53,,,53,,25,,,,25,,,52,,,,,,26,,,52,,26,,53", ",,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,114,,114,,,,,,25,,,26", "53,,25,,25,53,53,,,,,26,,,,,,53,,,,,114,,114,,,,53,,,,,,,,,,,53,53,", ",26,26,,,26,,114,,,,26,,,,,,,114,114,,,,,,,,,,,,,,,114,,,,,,,53,,,26", ",53,,26,,,,,,,,53,,,,,,,,,,,114,52,114,52,,,,,,52,,,,114,,,,52,,,,,", ",,,,,,,,53,,,,26,114,53,,,,,,,,,,,,53,26,,,,,,26,,26,,,,,,,,,,,,52,", ",52,,,,,,,,53,53,,,53,,,,,,53,,,,52,,,,,,,,,,,,,,,,,,,,,53,,,,,,,,53", ",,,53,,,,,,,,,,,,,,,,,,,,,,,,52,,,,,52,52,,,,,,,,,,,52,,,,,,,,,,,52", ",53,,,,,,,,,52,52,,,,,53,,,,,,53,32,53,,,,,,,,32,32,32,,,,,,,,,,,32", "32,32,,,,,,,52,,,,,52,,,32,32,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,52,,,,,,52,,,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52", "52,,,52,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,,,,,52,,,,52,,32,32,32", ",,32,32,,,,,,,,,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,32,32", "32,32,32,32,32,32,32,32,32,32,32,32,,,52,,,,32,32,,,,,,,,32,,52,,,,", "32,52,32,52,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,32,32,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,32,,,,,,,,,,,,,,,32,,,,,,,,,32,32", ",,,,,,,,,32,,,32,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,32,32", ",,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,32,,,32,32,32,32,,,", "32,32,,,32,32,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,32,,,,", ",,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,32,,32,,,,,,,,,,,,,,32,32,32,32,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32,32,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32"];

      racc_goto_check = arr = (($a = $opal.Object._scope.Array) == null ? $opal.cm('Array') : $a).$new(3136, nil);

      idx = 0;

      ($a = ($e = clist).$each, $a._p = (TMP_7 = function(str){var self = TMP_7._s || this, $a, $b, TMP_8;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a._p = (TMP_8 = function(i){var self = TMP_8._s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = idx['$+'](1);}, TMP_8._s = self, TMP_8), $a).call($b)}, TMP_7._s = self, TMP_7), $a).call($e);

      racc_goto_pointer = [nil, 253, 31, nil, 77, 92, 53, 45, -316, 94, -497, -560, -567, nil, -263, 19, 178, -12, -159, 118, 70, 313, 651, -179, -406, 912, 1075, -154, -36, -23, 47, -19, 2160, -25, nil, nil, 36, -191, 37, -204, -318, 3, -316, nil, 105, 56, 75, -99, nil, 43, 47, -231, 1483, 1222, -273, 71, -70, 2, nil, nil, 29, 16, -177, 47, -21, 609, 185, -50, 102, -253, 69, -9, -251, -265, -416, nil, nil, nil, nil, nil, nil, nil, nil, nil, 181, 190, -40, nil, 179, -295, -636, -466, -313, 134, -177, 12, -513, 108, 120, -154, 109, 99, -552, 87, -563, -427, -761, -376, -618, -232, -230, -445, -703, -742, 1028, -456, -742, -486, nil, 48, -419, 94, 192, -475, 130, -581, -403, nil, -531, -691, -743, -744, -153, -348, 123, -296, -6, -69, nil, -78, -78, -712, -481, -607, nil, nil, 122, 121, 21, 28, 130, -242, -205, 138, 138, 138, -369, -367, -355, -278, nil, 185, -454, -600, -500, -442, -612, nil, -584, -726, nil, nil, -441];

      racc_goto_default = [nil, nil, nil, 3, nil, 4, 343, 290, nil, 519, nil, 832, nil, 287, 288, nil, nil, nil, 11, 12, 18, 226, 318, nil, nil, 224, 225, nil, nil, 17, nil, 438, 21, 22, 23, 24, nil, 671, nil, nil, nil, 307, nil, 25, 409, 32, nil, nil, 34, 37, 36, nil, 221, 222, 355, nil, 129, 417, 128, 131, 75, 76, nil, 90, 46, 280, nil, 802, 410, nil, 411, 422, 626, 484, 278, 264, 47, 48, 49, 50, 51, 52, 53, 54, 55, nil, 265, 61, nil, nil, nil, nil, nil, nil, nil, 564, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 700, 824, nil, 701, 919, 774, 535, nil, 536, nil, nil, 537, nil, 539, 642, nil, nil, nil, 545, nil, nil, nil, 735, nil, nil, 421, nil, nil, nil, nil, nil, 74, 77, 78, nil, nil, nil, nil, nil, 598, nil, nil, nil, nil, nil, nil, 816, 534, nil, 538, 549, 551, 552, 786, 555, 556, 787, 559, 562, 282];

      racc_reduce_table = [0, 0, "racc_error", 1, 145, "_reduce_none", 2, 146, "_reduce_2", 0, 147, "_reduce_3", 1, 147, "_reduce_4", 3, 147, "_reduce_5", 2, 147, "_reduce_6", 1, 149, "_reduce_none", 4, 149, "_reduce_8", 4, 152, "_reduce_9", 2, 153, "_reduce_10", 0, 157, "_reduce_11", 1, 157, "_reduce_12", 3, 157, "_reduce_13", 2, 157, "_reduce_14", 1, 158, "_reduce_none", 4, 158, "_reduce_16", 0, 174, "_reduce_17", 4, 151, "_reduce_18", 3, 151, "_reduce_19", 3, 151, "_reduce_20", 3, 151, "_reduce_21", 2, 151, "_reduce_22", 3, 151, "_reduce_23", 3, 151, "_reduce_24", 3, 151, "_reduce_25", 3, 151, "_reduce_26", 3, 151, "_reduce_27", 4, 151, "_reduce_28", 1, 151, "_reduce_none", 3, 151, "_reduce_30", 3, 151, "_reduce_31", 6, 151, "_reduce_32", 5, 151, "_reduce_33", 5, 151, "_reduce_34", 5, 151, "_reduce_35", 5, 151, "_reduce_36", 3, 151, "_reduce_37", 3, 151, "_reduce_38", 3, 151, "_reduce_39", 1, 151, "_reduce_none", 3, 162, "_reduce_41", 3, 162, "_reduce_42", 1, 173, "_reduce_none", 3, 173, "_reduce_44", 3, 173, "_reduce_45", 3, 173, "_reduce_46", 2, 173, "_reduce_47", 1, 173, "_reduce_none", 1, 161, "_reduce_none", 1, 164, "_reduce_none", 1, 164, "_reduce_none", 1, 178, "_reduce_none", 4, 178, "_reduce_53", 0, 186, "_reduce_54", 5, 183, "_reduce_55", 1, 185, "_reduce_none", 2, 177, "_reduce_57", 3, 177, "_reduce_58", 4, 177, "_reduce_59", 5, 177, "_reduce_60", 4, 177, "_reduce_61", 5, 177, "_reduce_62", 2, 177, "_reduce_63", 2, 177, "_reduce_64", 2, 177, "_reduce_65", 2, 177, "_reduce_66", 2, 177, "_reduce_67", 1, 163, "_reduce_68", 3, 163, "_reduce_69", 1, 190, "_reduce_70", 3, 190, "_reduce_71", 1, 189, "_reduce_none", 2, 189, "_reduce_73", 3, 189, "_reduce_74", 5, 189, "_reduce_75", 2, 189, "_reduce_76", 4, 189, "_reduce_77", 2, 189, "_reduce_78", 4, 189, "_reduce_79", 1, 189, "_reduce_80", 3, 189, "_reduce_81", 1, 193, "_reduce_none", 3, 193, "_reduce_83", 2, 192, "_reduce_84", 3, 192, "_reduce_85", 1, 195, "_reduce_86", 3, 195, "_reduce_87", 1, 194, "_reduce_88", 1, 194, "_reduce_89", 4, 194, "_reduce_90", 3, 194, "_reduce_91", 3, 194, "_reduce_92", 3, 194, "_reduce_93", 3, 194, "_reduce_94", 2, 194, "_reduce_95", 1, 194, "_reduce_96", 1, 170, "_reduce_97", 1, 170, "_reduce_98", 4, 170, "_reduce_99", 3, 170, "_reduce_100", 3, 170, "_reduce_101", 3, 170, "_reduce_102", 3, 170, "_reduce_103", 2, 170, "_reduce_104", 1, 170, "_reduce_105", 1, 198, "_reduce_106", 1, 198, "_reduce_none", 2, 199, "_reduce_108", 1, 199, "_reduce_109", 3, 199, "_reduce_110", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 200, "_reduce_none", 1, 203, "_reduce_116", 1, 203, "_reduce_none", 1, 159, "_reduce_none", 1, 159, "_reduce_none", 1, 160, "_reduce_120", 0, 206, "_reduce_121", 4, 160, "_reduce_122", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 1, 202, "_reduce_none", 3, 176, "_reduce_194", 5, 176, "_reduce_195", 3, 176, "_reduce_196", 5, 176, "_reduce_197", 6, 176, "_reduce_198", 5, 176, "_reduce_199", 5, 176, "_reduce_200", 5, 176, "_reduce_201", 5, 176, "_reduce_202", 4, 176, "_reduce_203", 3, 176, "_reduce_204", 3, 176, "_reduce_205", 3, 176, "_reduce_206", 3, 176, "_reduce_207", 3, 176, "_reduce_208", 3, 176, "_reduce_209", 3, 176, "_reduce_210", 3, 176, "_reduce_211", 3, 176, "_reduce_212", 4, 176, "_reduce_213", 2, 176, "_reduce_214", 2, 176, "_reduce_215", 3, 176, "_reduce_216", 3, 176, "_reduce_217", 3, 176, "_reduce_218", 3, 176, "_reduce_219", 3, 176, "_reduce_220", 3, 176, "_reduce_221", 3, 176, "_reduce_222", 3, 176, "_reduce_223", 3, 176, "_reduce_224", 3, 176, "_reduce_225", 3, 176, "_reduce_226", 3, 176, "_reduce_227", 3, 176, "_reduce_228", 2, 176, "_reduce_229", 2, 176, "_reduce_230", 3, 176, "_reduce_231", 3, 176, "_reduce_232", 3, 176, "_reduce_233", 3, 176, "_reduce_234", 3, 176, "_reduce_235", 6, 176, "_reduce_236", 1, 176, "_reduce_none", 1, 209, "_reduce_none", 1, 210, "_reduce_none", 2, 210, "_reduce_none", 4, 210, "_reduce_241", 2, 210, "_reduce_242", 3, 215, "_reduce_243", 0, 216, "_reduce_244", 1, 216, "_reduce_none", 0, 167, "_reduce_246", 1, 167, "_reduce_none", 2, 167, "_reduce_none", 4, 167, "_reduce_249", 2, 167, "_reduce_250", 1, 188, "_reduce_251", 2, 188, "_reduce_252", 2, 188, "_reduce_253", 4, 188, "_reduce_254", 1, 188, "_reduce_255", 0, 219, "_reduce_256", 2, 182, "_reduce_257", 2, 218, "_reduce_258", 2, 217, "_reduce_259", 0, 217, "_reduce_260", 1, 212, "_reduce_261", 2, 212, "_reduce_262", 3, 212, "_reduce_263", 4, 212, "_reduce_264", 1, 172, "_reduce_265", 1, 172, "_reduce_none", 3, 171, "_reduce_267", 4, 171, "_reduce_268", 2, 171, "_reduce_269", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_280", 0, 242, "_reduce_281", 4, 208, "_reduce_282", 0, 243, "_reduce_283", 5, 208, "_reduce_284", 0, 244, "_reduce_285", 4, 208, "_reduce_286", 3, 208, "_reduce_287", 3, 208, "_reduce_288", 2, 208, "_reduce_289", 3, 208, "_reduce_290", 3, 208, "_reduce_291", 1, 208, "_reduce_292", 4, 208, "_reduce_293", 3, 208, "_reduce_294", 1, 208, "_reduce_295", 5, 208, "_reduce_296", 4, 208, "_reduce_297", 3, 208, "_reduce_298", 2, 208, "_reduce_299", 1, 208, "_reduce_none", 2, 208, "_reduce_301", 2, 208, "_reduce_302", 6, 208, "_reduce_303", 6, 208, "_reduce_304", 0, 245, "_reduce_305", 0, 246, "_reduce_306", 7, 208, "_reduce_307", 0, 247, "_reduce_308", 0, 248, "_reduce_309", 7, 208, "_reduce_310", 5, 208, "_reduce_311", 4, 208, "_reduce_312", 0, 249, "_reduce_313", 0, 250, "_reduce_314", 9, 208, "_reduce_315", 0, 251, "_reduce_316", 6, 208, "_reduce_317", 0, 252, "_reduce_318", 7, 208, "_reduce_319", 0, 253, "_reduce_320", 5, 208, "_reduce_321", 0, 254, "_reduce_322", 6, 208, "_reduce_323", 0, 255, "_reduce_324", 0, 256, "_reduce_325", 9, 208, "_reduce_326", 1, 208, "_reduce_327", 1, 208, "_reduce_328", 1, 208, "_reduce_329", 1, 208, "_reduce_330", 1, 166, "_reduce_none", 1, 233, "_reduce_none", 1, 233, "_reduce_none", 2, 233, "_reduce_334", 1, 235, "_reduce_none", 1, 235, "_reduce_none", 1, 234, "_reduce_none", 5, 234, "_reduce_338", 1, 155, "_reduce_none", 2, 155, "_reduce_340", 1, 237, "_reduce_none", 1, 237, "_reduce_none", 1, 257, "_reduce_343", 3, 257, "_reduce_344", 1, 260, "_reduce_345", 3, 260, "_reduce_346", 1, 259, "_reduce_none", 4, 259, "_reduce_348", 6, 259, "_reduce_349", 3, 259, "_reduce_350", 5, 259, "_reduce_351", 2, 259, "_reduce_352", 4, 259, "_reduce_353", 1, 259, "_reduce_354", 3, 259, "_reduce_355", 4, 261, "_reduce_356", 2, 261, "_reduce_357", 2, 261, "_reduce_358", 1, 261, "_reduce_359", 2, 266, "_reduce_360", 0, 266, "_reduce_361", 6, 267, "_reduce_362", 8, 267, "_reduce_363", 4, 267, "_reduce_364", 6, 267, "_reduce_365", 4, 267, "_reduce_366", 2, 267, "_reduce_none", 6, 267, "_reduce_368", 2, 267, "_reduce_369", 4, 267, "_reduce_370", 6, 267, "_reduce_371", 2, 267, "_reduce_372", 4, 267, "_reduce_373", 2, 267, "_reduce_374", 4, 267, "_reduce_375", 1, 267, "_reduce_none", 0, 184, "_reduce_377", 1, 184, "_reduce_378", 3, 271, "_reduce_379", 1, 271, "_reduce_380", 4, 271, "_reduce_381", 1, 272, "_reduce_382", 4, 272, "_reduce_383", 1, 273, "_reduce_384", 3, 273, "_reduce_385", 1, 274, "_reduce_386", 1, 274, "_reduce_none", 0, 278, "_reduce_388", 3, 232, "_reduce_389", 4, 276, "_reduce_390", 1, 276, "_reduce_391", 3, 277, "_reduce_392", 3, 277, "_reduce_393", 0, 281, "_reduce_394", 5, 280, "_reduce_395", 2, 179, "_reduce_396", 4, 179, "_reduce_397", 5, 179, "_reduce_398", 5, 179, "_reduce_399", 2, 231, "_reduce_400", 4, 231, "_reduce_401", 4, 231, "_reduce_402", 3, 231, "_reduce_403", 3, 231, "_reduce_404", 3, 231, "_reduce_405", 2, 231, "_reduce_406", 1, 231, "_reduce_407", 4, 231, "_reduce_408", 0, 283, "_reduce_409", 5, 230, "_reduce_410", 0, 284, "_reduce_411", 5, 230, "_reduce_412", 5, 236, "_reduce_413", 1, 285, "_reduce_414", 1, 285, "_reduce_none", 6, 154, "_reduce_416", 0, 154, "_reduce_417", 1, 286, "_reduce_418", 1, 286, "_reduce_none", 1, 286, "_reduce_none", 2, 287, "_reduce_421", 1, 287, "_reduce_none", 2, 156, "_reduce_423", 1, 156, "_reduce_none", 1, 220, "_reduce_none", 1, 220, "_reduce_none", 1, 220, "_reduce_none", 1, 221, "_reduce_428", 1, 289, "_reduce_429", 2, 289, "_reduce_430", 3, 290, "_reduce_431", 1, 290, "_reduce_432", 1, 290, "_reduce_433", 3, 222, "_reduce_434", 4, 223, "_reduce_435", 3, 224, "_reduce_436", 0, 294, "_reduce_437", 3, 294, "_reduce_438", 1, 295, "_reduce_439", 2, 295, "_reduce_440", 3, 226, "_reduce_441", 0, 297, "_reduce_442", 3, 297, "_reduce_443", 3, 225, "_reduce_444", 3, 227, "_reduce_445", 0, 298, "_reduce_446", 3, 298, "_reduce_447", 0, 299, "_reduce_448", 3, 299, "_reduce_449", 0, 291, "_reduce_450", 2, 291, "_reduce_451", 0, 292, "_reduce_452", 2, 292, "_reduce_453", 0, 293, "_reduce_454", 2, 293, "_reduce_455", 1, 296, "_reduce_456", 2, 296, "_reduce_457", 0, 301, "_reduce_458", 4, 296, "_reduce_459", 1, 300, "_reduce_460", 1, 300, "_reduce_461", 1, 300, "_reduce_462", 1, 300, "_reduce_none", 1, 204, "_reduce_464", 3, 205, "_reduce_465", 1, 288, "_reduce_466", 2, 288, "_reduce_467", 1, 207, "_reduce_468", 1, 207, "_reduce_469", 1, 207, "_reduce_470", 1, 207, "_reduce_471", 1, 196, "_reduce_472", 1, 196, "_reduce_473", 1, 196, "_reduce_474", 1, 196, "_reduce_475", 1, 196, "_reduce_476", 1, 197, "_reduce_477", 1, 197, "_reduce_478", 1, 197, "_reduce_479", 1, 197, "_reduce_480", 1, 197, "_reduce_481", 1, 197, "_reduce_482", 1, 197, "_reduce_483", 1, 228, "_reduce_484", 1, 228, "_reduce_485", 1, 165, "_reduce_486", 1, 165, "_reduce_487", 1, 169, "_reduce_488", 1, 169, "_reduce_489", 1, 238, "_reduce_490", 0, 302, "_reduce_491", 4, 238, "_reduce_492", 2, 238, "_reduce_493", 3, 240, "_reduce_494", 2, 240, "_reduce_495", 4, 303, "_reduce_496", 2, 303, "_reduce_497", 2, 303, "_reduce_498", 1, 303, "_reduce_499", 2, 305, "_reduce_500", 0, 305, "_reduce_501", 6, 279, "_reduce_502", 8, 279, "_reduce_503", 4, 279, "_reduce_504", 6, 279, "_reduce_505", 4, 279, "_reduce_506", 6, 279, "_reduce_507", 2, 279, "_reduce_508", 4, 279, "_reduce_509", 6, 279, "_reduce_510", 2, 279, "_reduce_511", 4, 279, "_reduce_512", 2, 279, "_reduce_513", 4, 279, "_reduce_514", 1, 279, "_reduce_515", 0, 279, "_reduce_516", 1, 275, "_reduce_517", 1, 275, "_reduce_518", 1, 275, "_reduce_519", 1, 275, "_reduce_520", 1, 258, "_reduce_none", 1, 258, "_reduce_522", 1, 307, "_reduce_523", 3, 307, "_reduce_524", 1, 268, "_reduce_525", 3, 268, "_reduce_526", 1, 308, "_reduce_527", 2, 309, "_reduce_528", 1, 309, "_reduce_529", 2, 310, "_reduce_530", 1, 310, "_reduce_531", 1, 262, "_reduce_532", 3, 262, "_reduce_533", 1, 304, "_reduce_534", 3, 304, "_reduce_535", 1, 311, "_reduce_none", 1, 311, "_reduce_none", 2, 263, "_reduce_538", 1, 263, "_reduce_539", 3, 312, "_reduce_540", 3, 313, "_reduce_541", 1, 269, "_reduce_542", 3, 269, "_reduce_543", 1, 306, "_reduce_544", 3, 306, "_reduce_545", 1, 314, "_reduce_none", 1, 314, "_reduce_none", 2, 270, "_reduce_548", 1, 270, "_reduce_549", 1, 315, "_reduce_none", 1, 315, "_reduce_none", 2, 265, "_reduce_552", 2, 264, "_reduce_553", 0, 264, "_reduce_554", 1, 241, "_reduce_none", 3, 241, "_reduce_556", 0, 229, "_reduce_557", 2, 229, "_reduce_none", 1, 214, "_reduce_559", 3, 214, "_reduce_560", 3, 316, "_reduce_561", 2, 316, "_reduce_562", 2, 316, "_reduce_563", 1, 187, "_reduce_none", 1, 187, "_reduce_none", 1, 187, "_reduce_none", 1, 181, "_reduce_none", 1, 181, "_reduce_none", 1, 181, "_reduce_none", 1, 181, "_reduce_none", 1, 282, "_reduce_none", 1, 282, "_reduce_none", 1, 282, "_reduce_none", 1, 180, "_reduce_none", 1, 180, "_reduce_none", 0, 148, "_reduce_none", 1, 148, "_reduce_none", 0, 175, "_reduce_none", 1, 175, "_reduce_none", 2, 191, "_reduce_580", 2, 168, "_reduce_581", 0, 213, "_reduce_none", 1, 213, "_reduce_none", 1, 213, "_reduce_none", 1, 239, "_reduce_585", 1, 239, "_reduce_none", 1, 150, "_reduce_none", 2, 150, "_reduce_none", 0, 211, "_reduce_589"];

      racc_reduce_n = 590;

      racc_shift_n = 1014;

      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "k__ENCODING__", 50, "tIDENTIFIER", 51, "tFID", 52, "tGVAR", 53, "tIVAR", 54, "tCONSTANT", 55, "tLABEL", 56, "tCVAR", 57, "tNTH_REF", 58, "tBACK_REF", 59, "tSTRING_CONTENT", 60, "tINTEGER", 61, "tFLOAT", 62, "tREGEXP_END", 63, "tUPLUS", 64, "tUMINUS", 65, "tUMINUS_NUM", 66, "tPOW", 67, "tCMP", 68, "tEQ", 69, "tEQQ", 70, "tNEQ", 71, "tGEQ", 72, "tLEQ", 73, "tANDOP", 74, "tOROP", 75, "tMATCH", 76, "tNMATCH", 77, "tDOT", 78, "tDOT2", 79, "tDOT3", 80, "tAREF", 81, "tASET", 82, "tLSHFT", 83, "tRSHFT", 84, "tCOLON2", 85, "tCOLON3", 86, "tOP_ASGN", 87, "tASSOC", 88, "tLPAREN", 89, "tLPAREN2", 90, "tRPAREN", 91, "tLPAREN_ARG", 92, "tLBRACK", 93, "tLBRACK2", 94, "tRBRACK", 95, "tLBRACE", 96, "tLBRACE_ARG", 97, "tSTAR", 98, "tSTAR2", 99, "tAMPER", 100, "tAMPER2", 101, "tTILDE", 102, "tPERCENT", 103, "tDIVIDE", 104, "tDSTAR", 105, "tPLUS", 106, "tMINUS", 107, "tLT", 108, "tGT", 109, "tPIPE", 110, "tBANG", 111, "tCARET", 112, "tLCURLY", 113, "tRCURLY", 114, "tBACK_REF2", 115, "tSYMBEG", 116, "tSTRING_BEG", 117, "tXSTRING_BEG", 118, "tREGEXP_BEG", 119, "tREGEXP_OPT", 120, "tWORDS_BEG", 121, "tQWORDS_BEG", 122, "tSYMBOLS_BEG", 123, "tQSYMBOLS_BEG", 124, "tSTRING_DBEG", 125, "tSTRING_DVAR", 126, "tSTRING_END", 127, "tSTRING_DEND", 128, "tSTRING", 129, "tSYMBOL", 130, "tNL", 131, "tEH", 132, "tCOLON", 133, "tCOMMA", 134, "tSPACE", 135, "tSEMI", 136, "tLAMBDA", 137, "tLAMBEG", 138, "tCHARACTER", 139, "tRATIONAL", 140, "tIMAGINARY", 141, "tEQL", 142, "tLOWEST", 143);

      racc_nt_base = 144;

      racc_use_result_var = true;

      $opal.cdecl($scope, 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);

      $opal.cdecl($scope, 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "k__ENCODING__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tREGEXP_END", "tUPLUS", "tUMINUS", "tUMINUS_NUM", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tLBRACK", "tLBRACK2", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tDSTAR", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tREGEXP_OPT", "tWORDS_BEG", "tQWORDS_BEG", "tSYMBOLS_BEG", "tQSYMBOLS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING_DEND", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tCHARACTER", "tRATIONAL", "tIMAGINARY", "tEQL", "tLOWEST", "$start", "program", "top_compstmt", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "stmt_or_begin", "fitem", "undef_list", "expr_value", "command_asgn", "mlhs", "command_call", "var_lhs", "primary_value", "opt_call_args", "rbracket", "backref", "lhs", "mrhs", "mrhs_arg", "expr", "@1", "opt_nl", "arg", "command", "block_command", "block_call", "dot_or_colon", "operation2", "command_args", "cmd_brace_block", "opt_block_param", "fcall", "@2", "operation", "call_args", "mlhs_basic", "mlhs_inner", "rparen", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "user_variable", "keyword_variable", "cname", "cpath", "fname", "op", "reswords", "fsym", "symbol", "dsym", "@3", "simple_numeric", "primary", "arg_value", "aref_args", "none", "args", "trailer", "assocs", "paren_args", "opt_paren_args", "opt_block_arg", "block_arg", "@4", "literal", "strings", "xstring", "regexp", "words", "qwords", "symbols", "qsymbols", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "do", "case_body", "for_var", "superclass", "term", "f_arglist", "singleton", "@5", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "@16", "@17", "@18", "@19", "f_marg", "f_norm_arg", "f_margs", "f_marg_list", "block_args_tail", "f_block_kwarg", "f_kwrest", "opt_f_block_arg", "f_block_arg", "opt_block_args_tail", "block_param", "f_arg", "f_block_optarg", "f_rest_arg", "block_param_def", "opt_bv_decl", "bv_decls", "bvar", "f_bad_arg", "f_larglist", "lambda_body", "@20", "f_args", "do_block", "@21", "operation3", "@22", "@23", "cases", "exc_list", "exc_var", "numeric", "string", "string1", "string_contents", "xstring_contents", "regexp_contents", "word_list", "word", "string_content", "symbol_list", "qword_list", "qsym_list", "string_dvar", "@24", "@25", "args_tail", "f_kwarg", "opt_args_tail", "f_optarg", "f_arg_item", "f_label", "f_kw", "f_block_kw", "kwrest_mark", "f_opt", "f_block_opt", "restarg_mark", "blkarg_mark", "assoc"]);

      $opal.cdecl($scope, 'Racc_debug_parser', false);

      def.$_reduce_2 = function(val, _values, result) {
        var self = this;

        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      };

      def.$_reduce_3 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_4 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_5 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_6 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_8 = function(val, _values, result) {
        var self = this;

        result = self.builder.$preexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_9 = function(val, _values, result) {
        var $a, $b, self = this, rescue_bodies = nil, else_t = nil, else_ = nil, ensure_t = nil, ensure_ = nil;

        rescue_bodies = val['$[]'](1);
        $a = $opal.to_ary(val['$[]'](2)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        $a = $opal.to_ary(val['$[]'](3)), ensure_t = ($a[0] == null ? nil : $a[0]), ensure_ = ($a[1] == null ? nil : $a[1]);
        if ((($a = ($b = rescue_bodies['$empty?'](), $b !== false && $b !== nil ?else_['$nil?']()['$!']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("warning", "useless_else", nil, else_t)};
        result = self.builder.$begin_body(val['$[]'](0), rescue_bodies, else_t, else_, ensure_t, ensure_);
        return result;
      };

      def.$_reduce_10 = function(val, _values, result) {
        var self = this;

        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      };

      def.$_reduce_11 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_12 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_13 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_14 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_16 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "begin_in_method", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_17 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_18 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      };

      def.$_reduce_19 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$gvar(val['$[]'](2)));
        return result;
      };

      def.$_reduce_20 = function(val, _values, result) {
        var self = this;

        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$back_ref(val['$[]'](2)));
        return result;
      };

      def.$_reduce_21 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "nth_ref_alias", nil, val['$[]'](2));
        return result;
      };

      def.$_reduce_22 = function(val, _values, result) {
        var self = this;

        result = self.builder.$undef_method(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_23 = function(val, _values, result) {
        var self = this;

        result = self.builder.$condition_mod(val['$[]'](0), nil, val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_24 = function(val, _values, result) {
        var self = this;

        result = self.builder.$condition_mod(nil, val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_25 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop_mod("while", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_26 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop_mod("until", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_27 = function(val, _values, result) {
        var self = this, rescue_body = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      };

      def.$_reduce_28 = function(val, _values, result) {
        var self = this;

        result = self.builder.$postexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_30 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_31 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_32 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_33 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_34 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_35 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_36 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_37 = function(val, _values, result) {
        var self = this;

        self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_38 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_39 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_41 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_42 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_44 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_45 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_46 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](2), nil);
        return result;
      };

      def.$_reduce_47 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_53 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_54 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_55 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_57 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_58 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        $a = $opal.to_ary(val['$[]'](2)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_59 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_60 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_61 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      };

      def.$_reduce_62 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_63 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("super", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_64 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_65 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("return", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_66 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("break", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_67 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("next", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_68 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_69 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_70 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_71 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_73 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(val['$[]'](1));
        return result;
      };

      def.$_reduce_74 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_75 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_76 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1)));
        return result;
      };

      def.$_reduce_77 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1))).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_78 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_79 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_80 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0))];
        return result;
      };

      def.$_reduce_81 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0))].concat(val['$[]'](2));
        return result;
      };

      def.$_reduce_83 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_84 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_85 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_86 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_87 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_88 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_89 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_90 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_91 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_92 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_93 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_94 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_95 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      };

      def.$_reduce_96 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_97 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_98 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_99 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_100 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_101 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_102 = function(val, _values, result) {
        var self = this;

        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_103 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      };

      def.$_reduce_104 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      };

      def.$_reduce_105 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_106 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "module_name_const", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_108 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_109 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const(val['$[]'](0));
        return result;
      };

      def.$_reduce_110 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_116 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol(val['$[]'](0));
        return result;
      };

      def.$_reduce_120 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_121 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_122 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](3));
        return result;
      };

      def.$_reduce_194 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_195 = function(val, _values, result) {
        var self = this, rescue_body = nil, rescue_ = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        rescue_ = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), rescue_);
        return result;
      };

      def.$_reduce_196 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_197 = function(val, _values, result) {
        var self = this, rescue_body = nil, rescue_ = nil;

        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        rescue_ = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), rescue_);
        return result;
      };

      def.$_reduce_198 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_199 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_200 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_201 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_202 = function(val, _values, result) {
        var self = this, const$ = nil;

        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      };

      def.$_reduce_203 = function(val, _values, result) {
        var self = this, const$ = nil;

        const$ = self.builder.$const_op_assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        result = self.builder.$op_assign(const$, val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_204 = function(val, _values, result) {
        var self = this;

        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_205 = function(val, _values, result) {
        var self = this;

        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_206 = function(val, _values, result) {
        var self = this;

        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_207 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_208 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_209 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_210 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_211 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_212 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_213 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(val['$[]'](1), val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_214 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_215 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_216 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_217 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_218 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_219 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_220 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_221 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_222 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_223 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_224 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_225 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_226 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_227 = function(val, _values, result) {
        var self = this;

        result = self.builder.$match_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_228 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_229 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      };

      def.$_reduce_230 = function(val, _values, result) {
        var self = this;

        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_231 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_232 = function(val, _values, result) {
        var self = this;

        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_233 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_234 = function(val, _values, result) {
        var self = this;

        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_235 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), nil, [val['$[]'](2)], nil);
        return result;
      };

      def.$_reduce_236 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ternary(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      };

      def.$_reduce_241 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_242 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      };

      def.$_reduce_243 = function(val, _values, result) {
        var self = this;

        result = val;
        return result;
      };

      def.$_reduce_244 = function(val, _values, result) {
        var self = this;

        result = [nil, [], nil];
        return result;
      };

      def.$_reduce_246 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_249 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      };

      def.$_reduce_250 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      };

      def.$_reduce_251 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_252 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_253 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        result.$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_254 = function(val, _values, result) {
        var self = this, assocs = nil;

        assocs = self.builder.$associate(nil, val['$[]'](2), nil);
        result = val['$[]'](0)['$<<'](assocs);
        result.$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_255 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_256 = function(val, _values, result) {
        var self = this;

        result = self.lexer.$cmdarg().$dup();
        self.lexer.$cmdarg().$push(true);
        return result;
      };

      def.$_reduce_257 = function(val, _values, result) {
        var self = this;

        self.lexer['$cmdarg='](val['$[]'](0));
        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_258 = function(val, _values, result) {
        var self = this;

        result = self.builder.$block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_259 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_260 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_261 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_262 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_263 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_264 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_265 = function(val, _values, result) {
        var self = this;

        result = self.builder.$array(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_267 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_268 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_269 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_280 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(nil, nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_281 = function(val, _values, result) {
        var self = this;

        result = self.lexer.$cmdarg().$dup();
        self.lexer.$cmdarg().$clear();
        return result;
      };

      def.$_reduce_282 = function(val, _values, result) {
        var self = this;

        self.lexer['$cmdarg='](val['$[]'](1));
        result = self.builder.$begin_keyword(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_283 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_endarg");
        return result;
      };

      def.$_reduce_284 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](4));
        return result;
      };

      def.$_reduce_285 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_endarg");
        return result;
      };

      def.$_reduce_286 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), nil, val['$[]'](3));
        return result;
      };

      def.$_reduce_287 = function(val, _values, result) {
        var self = this;

        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_288 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_289 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_290 = function(val, _values, result) {
        var self = this;

        result = self.builder.$array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_291 = function(val, _values, result) {
        var self = this;

        result = self.builder.$associate(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_292 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("return", val['$[]'](0));
        return result;
      };

      def.$_reduce_293 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_294 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), [], val['$[]'](2));
        return result;
      };

      def.$_reduce_295 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("yield", val['$[]'](0));
        return result;
      };

      def.$_reduce_296 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), val['$[]'](2), [val['$[]'](3)], val['$[]'](4));
        return result;
      };

      def.$_reduce_297 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_298 = function(val, _values, result) {
        var self = this;

        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), nil, val['$[]'](2));
        return result;
      };

      def.$_reduce_299 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(nil, nil, val['$[]'](0));
        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_301 = function(val, _values, result) {
        var $a, self = this, begin_t = nil, args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(val['$[]'](0), begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_302 = function(val, _values, result) {
        var self = this, lambda_call = nil;

        lambda_call = self.builder.$call_lambda(val['$[]'](0));
        result = self.builder.$block(lambda_call, self.$begin_t(), self.$args(), self.$body(), self.$end_t());
        return result;
      };

      def.$_reduce_303 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, val['$[]'](5));
        return result;
      };

      def.$_reduce_304 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), else_, else_t, val['$[]'](3), val['$[]'](5));
        return result;
      };

      def.$_reduce_305 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_306 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_307 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop("while", val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](5), val['$[]'](6));
        return result;
      };

      def.$_reduce_308 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_309 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_310 = function(val, _values, result) {
        var self = this;

        result = self.builder.$loop("until", val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](5), val['$[]'](6));
        return result;
      };

      def.$_reduce_311 = function(val, _values, result) {
        var self = this;

        result = self.builder.$case(val['$[]'](0), val['$[]'](1), self.$when_bodies(), self.$else_t(), self.$else_body(), val['$[]'](4));
        return result;
      };

      def.$_reduce_312 = function(val, _values, result) {
        var self = this;

        result = self.builder.$case(val['$[]'](0), nil, self.$when_bodies(), self.$else_t(), self.$else_body(), val['$[]'](3));
        return result;
      };

      def.$_reduce_313 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(true);
        return result;
      };

      def.$_reduce_314 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$pop();
        return result;
      };

      def.$_reduce_315 = function(val, _values, result) {
        var self = this;

        result = self.builder.$for(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5), val['$[]'](7), val['$[]'](8));
        return result;
      };

      def.$_reduce_316 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_317 = function(val, _values, result) {
        var $a, self = this, lt_t = nil, superclass = nil;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "class_in_def", nil, val['$[]'](0))};
        $a = $opal.to_ary(val['$[]'](2)), lt_t = ($a[0] == null ? nil : $a[0]), superclass = ($a[1] == null ? nil : $a[1]);
        result = self.builder.$def_class(val['$[]'](0), val['$[]'](1), lt_t, superclass, val['$[]'](4), val['$[]'](5));
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_318 = function(val, _values, result) {
        var self = this;

        result = self.def_level;
        self.def_level = 0;
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_319 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_sclass(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](5), val['$[]'](6));
        self.static_env.$unextend();
        self.def_level = val['$[]'](4);
        return result;
      };

      def.$_reduce_320 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_321 = function(val, _values, result) {
        var $a, self = this;

        if ((($a = self['$in_def?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$diagnostic("error", "module_in_def", nil, val['$[]'](0))};
        result = self.builder.$def_module(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_322 = function(val, _values, result) {
        var self = this;

        self.def_level = self.def_level['$+'](1);
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_323 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_method(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4), val['$[]'](5));
        self.static_env.$unextend();
        self.def_level = self.def_level['$-'](1);
        return result;
      };

      def.$_reduce_324 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_fname");
        return result;
      };

      def.$_reduce_325 = function(val, _values, result) {
        var self = this;

        self.def_level = self.def_level['$+'](1);
        self.static_env.$extend_static();
        return result;
      };

      def.$_reduce_326 = function(val, _values, result) {
        var self = this;

        result = self.builder.$def_singleton(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](6), val['$[]'](7), val['$[]'](8));
        self.static_env.$unextend();
        self.def_level = self.def_level['$-'](1);
        return result;
      };

      def.$_reduce_327 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("break", val['$[]'](0));
        return result;
      };

      def.$_reduce_328 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("next", val['$[]'](0));
        return result;
      };

      def.$_reduce_329 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("redo", val['$[]'](0));
        return result;
      };

      def.$_reduce_330 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("retry", val['$[]'](0));
        return result;
      };

      def.$_reduce_334 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_338 = function(val, _values, result) {
        var $a, self = this, else_t = nil, else_ = nil;

        $a = $opal.to_ary(val['$[]'](4)), else_t = ($a[0] == null ? nil : $a[0]), else_ = ($a[1] == null ? nil : $a[1]);
        result = [val['$[]'](0), self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, nil)];
        return result;
      };

      def.$_reduce_340 = function(val, _values, result) {
        var self = this;

        result = val;
        return result;
      };

      def.$_reduce_343 = function(val, _values, result) {
        var self = this;

        result = self.builder.$arg(val['$[]'](0));
        return result;
      };

      def.$_reduce_344 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_345 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_346 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_348 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3)));
        return result;
      };

      def.$_reduce_349 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3))).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_350 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2)));
        return result;
      };

      def.$_reduce_351 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_352 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_353 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))].concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_354 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_355 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))].concat(val['$[]'](2));
        return result;
      };

      def.$_reduce_356 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_357 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_358 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_359 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_360 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_361 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_362 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_363 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      };

      def.$_reduce_364 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_365 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_366 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_368 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_369 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_370 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_371 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_372 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_373 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_374 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_375 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_377 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, [], nil);
        return result;
      };

      def.$_reduce_378 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_value");
        return result;
      };

      def.$_reduce_379 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_380 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), [], val['$[]'](0));
        return result;
      };

      def.$_reduce_381 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      };

      def.$_reduce_382 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_383 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](2);
        return result;
      };

      def.$_reduce_384 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_385 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_386 = function(val, _values, result) {
        var self = this;

        result = self.builder.$shadowarg(val['$[]'](0));
        return result;
      };

      def.$_reduce_388 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_389 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1), val['$[]'](2)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_390 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      };

      def.$_reduce_391 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_392 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1), val['$[]'](2)];
        return result;
      };

      def.$_reduce_393 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1), val['$[]'](2)];
        return result;
      };

      def.$_reduce_394 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_395 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_396 = function(val, _values, result) {
        var $a, self = this, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), begin_t = ($a[0] == null ? nil : $a[0]), block_args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(val['$[]'](0), begin_t, block_args, body, end_t);
        return result;
      };

      def.$_reduce_397 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_398 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, body = nil, end_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_399 = function(val, _values, result) {
        var $a, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $a = $opal.to_ary(val['$[]'](4)), begin_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), body = ($a[2] == null ? nil : $a[2]), end_t = ($a[3] == null ? nil : $a[3]);
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      };

      def.$_reduce_400 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_401 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_402 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](3)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_403 = function(val, _values, result) {
        var self = this;

        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_404 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](2)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_405 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](2)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_406 = function(val, _values, result) {
        var $a, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        $a = $opal.to_ary(val['$[]'](1)), lparen_t = ($a[0] == null ? nil : $a[0]), args = ($a[1] == null ? nil : $a[1]), rparen_t = ($a[2] == null ? nil : $a[2]);
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      };

      def.$_reduce_407 = function(val, _values, result) {
        var self = this;

        result = self.builder.$keyword_cmd("zsuper", val['$[]'](0));
        return result;
      };

      def.$_reduce_408 = function(val, _values, result) {
        var self = this;

        result = self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_409 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_410 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_411 = function(val, _values, result) {
        var self = this;

        self.static_env.$extend_dynamic();
        return result;
      };

      def.$_reduce_412 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3), val['$[]'](4)];
        self.static_env.$unextend();
        return result;
      };

      def.$_reduce_413 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$when(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3))].concat(val['$[]'](4));
        return result;
      };

      def.$_reduce_414 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_416 = function(val, _values, result) {
        var $a, self = this, assoc_t = nil, exc_var = nil, exc_list = nil;

        $a = $opal.to_ary(val['$[]'](2)), assoc_t = ($a[0] == null ? nil : $a[0]), exc_var = ($a[1] == null ? nil : $a[1]);
        if ((($a = val['$[]'](1)) !== nil && (!$a._isBoolean || $a == true))) {
          exc_list = self.builder.$array(nil, val['$[]'](1), nil)};
        result = [self.builder.$rescue_body(val['$[]'](0), exc_list, assoc_t, exc_var, val['$[]'](3), val['$[]'](4))].concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_417 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_418 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_421 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_423 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      };

      def.$_reduce_428 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_compose(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_429 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_430 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_431 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_432 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string(val['$[]'](0));
        return result;
      };

      def.$_reduce_433 = function(val, _values, result) {
        var self = this;

        result = self.builder.$character(val['$[]'](0));
        return result;
      };

      def.$_reduce_434 = function(val, _values, result) {
        var self = this;

        result = self.builder.$xstring_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_435 = function(val, _values, result) {
        var self = this, opts = nil;

        opts = self.builder.$regexp_options(val['$[]'](3));
        result = self.builder.$regexp_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2), opts);
        return result;
      };

      def.$_reduce_436 = function(val, _values, result) {
        var self = this;

        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_437 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_438 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      };

      def.$_reduce_439 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_440 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_441 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_442 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_443 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      };

      def.$_reduce_444 = function(val, _values, result) {
        var self = this;

        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_445 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_446 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_447 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$string_internal(val['$[]'](1)));
        return result;
      };

      def.$_reduce_448 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_449 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.builder.$symbol_internal(val['$[]'](1)));
        return result;
      };

      def.$_reduce_450 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_451 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_452 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_453 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_454 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_455 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      };

      def.$_reduce_456 = function(val, _values, result) {
        var self = this;

        result = self.builder.$string_internal(val['$[]'](0));
        return result;
      };

      def.$_reduce_457 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_458 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$push(false);
        self.lexer.$cmdarg().$push(false);
        return result;
      };

      def.$_reduce_459 = function(val, _values, result) {
        var self = this;

        self.lexer.$cond().$lexpop();
        self.lexer.$cmdarg().$lexpop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      };

      def.$_reduce_460 = function(val, _values, result) {
        var self = this;

        result = self.builder.$gvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_461 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ivar(val['$[]'](0));
        return result;
      };

      def.$_reduce_462 = function(val, _values, result) {
        var self = this;

        result = self.builder.$cvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_464 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol(val['$[]'](0));
        return result;
      };

      def.$_reduce_465 = function(val, _values, result) {
        var self = this;

        result = self.builder.$symbol_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_466 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_467 = function(val, _values, result) {
        var self = this;

        result = self.builder.$negate(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_468 = function(val, _values, result) {
        var self = this;

        result = self.builder.$integer(val['$[]'](0));
        return result;
      };

      def.$_reduce_469 = function(val, _values, result) {
        var self = this;

        result = self.builder.$float(val['$[]'](0));
        return result;
      };

      def.$_reduce_470 = function(val, _values, result) {
        var self = this;

        result = self.builder.$rational(val['$[]'](0));
        return result;
      };

      def.$_reduce_471 = function(val, _values, result) {
        var self = this;

        result = self.builder.$complex(val['$[]'](0));
        return result;
      };

      def.$_reduce_472 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ident(val['$[]'](0));
        return result;
      };

      def.$_reduce_473 = function(val, _values, result) {
        var self = this;

        result = self.builder.$ivar(val['$[]'](0));
        return result;
      };

      def.$_reduce_474 = function(val, _values, result) {
        var self = this;

        result = self.builder.$gvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_475 = function(val, _values, result) {
        var self = this;

        result = self.builder.$const(val['$[]'](0));
        return result;
      };

      def.$_reduce_476 = function(val, _values, result) {
        var self = this;

        result = self.builder.$cvar(val['$[]'](0));
        return result;
      };

      def.$_reduce_477 = function(val, _values, result) {
        var self = this;

        result = self.builder.$nil(val['$[]'](0));
        return result;
      };

      def.$_reduce_478 = function(val, _values, result) {
        var self = this;

        result = self.builder.$self(val['$[]'](0));
        return result;
      };

      def.$_reduce_479 = function(val, _values, result) {
        var self = this;

        result = self.builder.$true(val['$[]'](0));
        return result;
      };

      def.$_reduce_480 = function(val, _values, result) {
        var self = this;

        result = self.builder.$false(val['$[]'](0));
        return result;
      };

      def.$_reduce_481 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__FILE__(val['$[]'](0));
        return result;
      };

      def.$_reduce_482 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__LINE__(val['$[]'](0));
        return result;
      };

      def.$_reduce_483 = function(val, _values, result) {
        var self = this;

        result = self.builder.$__ENCODING__(val['$[]'](0));
        return result;
      };

      def.$_reduce_484 = function(val, _values, result) {
        var self = this;

        result = self.builder.$accessible(val['$[]'](0));
        return result;
      };

      def.$_reduce_485 = function(val, _values, result) {
        var self = this;

        result = self.builder.$accessible(val['$[]'](0));
        return result;
      };

      def.$_reduce_486 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_487 = function(val, _values, result) {
        var self = this;

        result = self.builder.$assignable(val['$[]'](0));
        return result;
      };

      def.$_reduce_488 = function(val, _values, result) {
        var self = this;

        result = self.builder.$nth_ref(val['$[]'](0));
        return result;
      };

      def.$_reduce_489 = function(val, _values, result) {
        var self = this;

        result = self.builder.$back_ref(val['$[]'](0));
        return result;
      };

      def.$_reduce_490 = function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      };

      def.$_reduce_491 = function(val, _values, result) {
        var self = this;

        self.lexer['$state=']("expr_value");
        return result;
      };

      def.$_reduce_492 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      };

      def.$_reduce_493 = function(val, _values, result) {
        var self = this;

        self.$yyerrok();
        result = nil;
        return result;
      };

      def.$_reduce_494 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        self.lexer['$state=']("expr_value");
        return result;
      };

      def.$_reduce_495 = function(val, _values, result) {
        var self = this;

        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      };

      def.$_reduce_496 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_497 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_498 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_499 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_500 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_501 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_502 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_503 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      };

      def.$_reduce_504 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_505 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_506 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_507 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_508 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_509 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_510 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      };

      def.$_reduce_511 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_512 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_513 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      };

      def.$_reduce_514 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      };

      def.$_reduce_515 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_516 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_517 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_const", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_518 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_ivar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_519 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_gvar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_520 = function(val, _values, result) {
        var self = this;

        self.$diagnostic("error", "argument_cvar", nil, val['$[]'](0));
        return result;
      };

      def.$_reduce_522 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_523 = function(val, _values, result) {
        var self = this;

        result = self.builder.$arg(val['$[]'](0));
        return result;
      };

      def.$_reduce_524 = function(val, _values, result) {
        var self = this;

        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_525 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_526 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_527 = function(val, _values, result) {
        var self = this;

        self.$check_kwarg_name(val['$[]'](0));
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      };

      def.$_reduce_528 = function(val, _values, result) {
        var self = this;

        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_529 = function(val, _values, result) {
        var self = this;

        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      };

      def.$_reduce_530 = function(val, _values, result) {
        var self = this;

        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_531 = function(val, _values, result) {
        var self = this;

        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      };

      def.$_reduce_532 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_533 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_534 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_535 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_538 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$kwrestarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_539 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$kwrestarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_540 = function(val, _values, result) {
        var self = this;

        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_541 = function(val, _values, result) {
        var self = this;

        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_542 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_543 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_544 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_545 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_548 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      };

      def.$_reduce_549 = function(val, _values, result) {
        var self = this;

        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      };

      def.$_reduce_552 = function(val, _values, result) {
        var self = this;

        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = self.builder.$blockarg(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_553 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](1)];
        return result;
      };

      def.$_reduce_554 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_556 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_557 = function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      };

      def.$_reduce_559 = function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      };

      def.$_reduce_560 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      };

      def.$_reduce_561 = function(val, _values, result) {
        var self = this;

        result = self.builder.$pair(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      };

      def.$_reduce_562 = function(val, _values, result) {
        var self = this;

        result = self.builder.$pair_keyword(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_563 = function(val, _values, result) {
        var self = this;

        result = self.builder.$kwsplat(val['$[]'](0), val['$[]'](1));
        return result;
      };

      def.$_reduce_580 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_581 = function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      };

      def.$_reduce_585 = function(val, _values, result) {
        var self = this;

        self.$yyerrok();
        return result;
      };

      def.$_reduce_589 = function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      };

      return (def.$_reduce_none = function(val, _values, result) {
        var self = this;

        return val['$[]'](0);
      }, nil) && '_reduce_none';
    })(self, (($a = ((($b = $scope.Parser) == null ? $opal.cm('Parser') : $b))._scope).Base == null ? $a.cm('Base') : $a.Base))
    
  })(self);
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$warn', '$private', '$===', '$!', '$==', '$warn_syntax_deviation']);
  return (function($base) {
    var self = $module($base, 'Parser');

    var def = self._proto, $scope = self._scope, $a, $b, $case = nil;

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self._proto.$warn_syntax_deviation = function(feature, version) {
        var $a, self = this;

        self.$warn("warning: parser/current is loading " + (feature) + ", which recognizes");
        return self.$warn("warning: " + (version) + "-compliant syntax, but you are running " + ((($a = $scope.RUBY_VERSION) == null ? $opal.cm('RUBY_VERSION') : $a)) + ".");
      };
      return self.$private("warn_syntax_deviation");
    })(self.$singleton_class());

    $case = (($a = $scope.RUBY_VERSION) == null ? $opal.cm('RUBY_VERSION') : $a);if (/^1\.8\./['$===']($case)) {if ((($a = (($b = $scope.RUBY_VERSION) == null ? $opal.cm('RUBY_VERSION') : $b)['$==']("1.8.7")['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
      self.$warn_syntax_deviation("parser/ruby18", "1.8.7")};

    ;

    $opal.cdecl($scope, 'CurrentRuby', (($a = $scope.Ruby18) == null ? $opal.cm('Ruby18') : $a));}else if (/^1\.9\./['$===']($case)) {if ((($a = (($b = $scope.RUBY_VERSION) == null ? $opal.cm('RUBY_VERSION') : $b)['$==']("1.9.3")['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
      self.$warn_syntax_deviation("parser/ruby19", "1.9.3")};

    ;

    $opal.cdecl($scope, 'CurrentRuby', (($a = $scope.Ruby19) == null ? $opal.cm('Ruby19') : $a));}else if (/^2\.0\./['$===']($case)) {;

    $opal.cdecl($scope, 'CurrentRuby', (($a = $scope.Ruby20) == null ? $opal.cm('Ruby20') : $a));}else if (/^2\.1\./['$===']($case)) {;

    $opal.cdecl($scope, 'CurrentRuby', (($a = $scope.Ruby21) == null ? $opal.cm('Ruby21') : $a));}else {self.$warn_syntax_deviation("parser/ruby21", "2.1");

    $opal.cdecl($scope, 'CurrentRuby', (($a = $scope.Ruby21) == null ? $opal.cm('Ruby21') : $a));};
    
  })(self)
})(Opal);
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, codigo = nil;

  $opal.add_stubs(['$parse', '$split', '$eql?', '$length', '$getFunctionAux', '$each', '$nil?', '$to_s', '$type', '$source', '$name', '$loc', '$[]', '$children', '$expression', '$private', '$new', '$p', '$getFunction']);
  ;
  ;
  ;
  (function($base, $super) {
    function $CodeParser(){};
    var self = $CodeParser = $klass($base, $super, 'CodeParser', $CodeParser);

    var def = self._proto, $scope = self._scope;

    def.ast = nil;
    def.$initialize = function(code) {
      var $a, $b, self = this;

      return self.ast = (($a = ((($b = $scope.Parser) == null ? $opal.cm('Parser') : $b))._scope).CurrentRuby == null ? $a.cm('CurrentRuby') : $a.CurrentRuby).$parse(code);
    };

    def.$getFunction = function(name) {try {

      var $a, $b, TMP_1, self = this, names = nil;

      names = name.$split(".");
      if ((($a = (names.$length()['$eql?'](1))) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$getFunctionAux(self.ast, name)
        } else {
        ($a = ($b = self.ast.$children()).$each, $a._p = (TMP_1 = function(child){var self = TMP_1._s || this, $a, $b;
if (child == null) child = nil;
        if ((($a = child['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
            return nil
          } else if ((($a = (($b = child.$type().$to_s()['$eql?']("class"), $b !== false && $b !== nil ?child.$children()['$[]'](0).$loc().$name().$source()['$eql?'](names['$[]'](0)) : $b))) !== nil && (!$a._isBoolean || $a == true))) {
            $opal.$return(self.$getFunctionAux(child, names['$[]'](1)))
            } else {
            return nil
          }}, TMP_1._s = self, TMP_1), $a).call($b)
      };
      return nil;
      } catch ($returner) { if ($returner === $opal.returner) { return $returner.$v } throw $returner; }
    };

    def.$getFunctionAux = function(tree, name) {try {

      var $a, $b, TMP_2, self = this;

      ($a = ($b = tree.$children()).$each, $a._p = (TMP_2 = function(child){var self = TMP_2._s || this, $a, $b;
if (child == null) child = nil;
      if ((($a = child['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
          return nil
        } else if ((($a = (($b = child.$type().$to_s()['$eql?']("def"), $b !== false && $b !== nil ?child.$children()['$[]'](0).$to_s()['$eql?'](name) : $b))) !== nil && (!$a._isBoolean || $a == true))) {
          $opal.$return(child.$loc().$expression().$source())
          } else {
          return nil
        }}, TMP_2._s = self, TMP_2), $a).call($b);
      return nil;
      } catch ($returner) { if ($returner === $opal.returner) { return $returner.$v } throw $returner; }
    };

    def.$getAST = function() {
      var self = this;

      return self.ast;
    };

    return self.$private("getFunctionAux");
  })(self, null);
  codigo = (($a = $scope.CodeParser) == null ? $opal.cm('CodeParser') : $a).$new("\ndef ole1\n  puts 'ole1'\nend\ndef ole2 (a)\n  puts 'ole2'\nend\n");
  return self.$p(codigo.$getFunction("ole1"));
})(Opal);
